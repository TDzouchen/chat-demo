{"version":3,"file":"reporter-vendor-legacy-D6bDuF2G.js","sources":["node_modules/@opentelemetry/api/build/esm/platform/browser/globalThis.js","node_modules/@opentelemetry/api/build/esm/version.js","node_modules/@opentelemetry/api/build/esm/internal/semver.js","node_modules/@opentelemetry/api/build/esm/internal/global-utils.js","node_modules/@opentelemetry/api/build/esm/diag/ComponentLogger.js","node_modules/@opentelemetry/api/build/esm/diag/types.js","node_modules/@opentelemetry/api/build/esm/diag/internal/logLevelLogger.js","node_modules/@opentelemetry/api/build/esm/api/diag.js","node_modules/@opentelemetry/api/build/esm/baggage/internal/baggage-impl.js","node_modules/@opentelemetry/api/build/esm/baggage/internal/symbol.js","node_modules/@opentelemetry/api/build/esm/baggage/utils.js","node_modules/@opentelemetry/api/build/esm/context/context.js","node_modules/@opentelemetry/api/build/esm/metrics/NoopMeter.js","node_modules/@opentelemetry/api/build/esm/propagation/TextMapPropagator.js","node_modules/@opentelemetry/api/build/esm/context/NoopContextManager.js","node_modules/@opentelemetry/api/build/esm/api/context.js","node_modules/@opentelemetry/api/build/esm/trace/trace_flags.js","node_modules/@opentelemetry/api/build/esm/trace/invalid-span-constants.js","node_modules/@opentelemetry/api/build/esm/trace/NonRecordingSpan.js","node_modules/@opentelemetry/api/build/esm/trace/context-utils.js","node_modules/@opentelemetry/api/build/esm/trace/spancontext-utils.js","node_modules/@opentelemetry/api/build/esm/trace/NoopTracer.js","node_modules/@opentelemetry/api/build/esm/trace/ProxyTracer.js","node_modules/@opentelemetry/api/build/esm/trace/NoopTracerProvider.js","node_modules/@opentelemetry/api/build/esm/trace/ProxyTracerProvider.js","node_modules/@opentelemetry/api/build/esm/trace/SamplingResult.js","node_modules/@opentelemetry/api/build/esm/trace/span_kind.js","node_modules/@opentelemetry/api/build/esm/trace/status.js","node_modules/@opentelemetry/api/build/esm/context-api.js","node_modules/@opentelemetry/api/build/esm/diag-api.js","node_modules/@opentelemetry/api/build/esm/metrics/NoopMeterProvider.js","node_modules/@opentelemetry/api/build/esm/api/metrics.js","node_modules/@opentelemetry/api/build/esm/metrics-api.js","node_modules/@opentelemetry/api/build/esm/propagation/NoopTextMapPropagator.js","node_modules/@opentelemetry/api/build/esm/baggage/context-helpers.js","node_modules/@opentelemetry/api/build/esm/api/propagation.js","node_modules/@opentelemetry/api/build/esm/propagation-api.js","node_modules/@opentelemetry/api/build/esm/api/trace.js","node_modules/@opentelemetry/api/build/esm/trace-api.js","node_modules/@opentelemetry/api-logs/build/esm/types/LogRecord.js","node_modules/@opentelemetry/api-logs/build/esm/NoopLogger.js","node_modules/@opentelemetry/api-logs/build/esm/NoopLoggerProvider.js","node_modules/@opentelemetry/api-logs/build/esm/platform/browser/globalThis.js","node_modules/@opentelemetry/api-logs/build/esm/internal/global-utils.js","node_modules/@opentelemetry/api-logs/build/esm/api/logs.js","node_modules/@opentelemetry/api-logs/build/esm/index.js","node_modules/@opentelemetry/context-zone-peer-dep/build/esm/util.js","node_modules/@opentelemetry/context-zone-peer-dep/build/esm/ZoneContextManager.js","node_modules/zone.js/fesm2015/zone.js","node_modules/@opentelemetry/core/build/esm/trace/suppress-tracing.js","node_modules/@opentelemetry/core/build/esm/baggage/constants.js","node_modules/@opentelemetry/core/build/esm/baggage/utils.js","node_modules/@opentelemetry/core/build/esm/common/attributes.js","node_modules/@opentelemetry/core/build/esm/common/logging-error-handler.js","node_modules/@opentelemetry/core/build/esm/common/global-error-handler.js","node_modules/@opentelemetry/core/build/esm/utils/sampling.js","node_modules/@opentelemetry/core/build/esm/platform/browser/globalThis.js","node_modules/@opentelemetry/core/build/esm/utils/environment.js","node_modules/@opentelemetry/core/build/esm/platform/browser/environment.js","node_modules/@opentelemetry/core/build/esm/common/hex-to-binary.js","node_modules/@opentelemetry/core/build/esm/platform/browser/performance.js","node_modules/@opentelemetry/core/build/esm/version.js","node_modules/@opentelemetry/core/node_modules/@opentelemetry/semantic-conventions/build/esm/resource/SemanticResourceAttributes.js","node_modules/@opentelemetry/core/build/esm/platform/browser/sdk-info.js","node_modules/@opentelemetry/core/build/esm/common/time.js","node_modules/@opentelemetry/core/build/esm/ExportResult.js","node_modules/@opentelemetry/core/build/esm/utils/lodash.merge.js","node_modules/@opentelemetry/core/build/esm/utils/merge.js","node_modules/@opentelemetry/core/build/esm/utils/timeout.js","node_modules/@opentelemetry/core/build/esm/utils/promise.js","node_modules/@opentelemetry/core/build/esm/utils/callback.js","node_modules/@opentelemetry/core/build/esm/internal/exporter.js","node_modules/@opentelemetry/core/build/esm/index.js","node_modules/@opentelemetry/otlp-exporter-base/build/esm/util.js","node_modules/@opentelemetry/otlp-exporter-base/build/esm/OTLPExporterBase.js","node_modules/@opentelemetry/otlp-exporter-base/build/esm/types.js","node_modules/@opentelemetry/otlp-exporter-base/build/esm/platform/browser/util.js","node_modules/@opentelemetry/otlp-exporter-base/build/esm/platform/browser/OTLPExporterBrowserBase.js","node_modules/@protobufjs/aspromise/index.js","node_modules/@protobufjs/base64/index.js","node_modules/@protobufjs/eventemitter/index.js","node_modules/@protobufjs/float/index.js","node_modules/@protobufjs/inquire/index.js","node_modules/@protobufjs/utf8/index.js","node_modules/@protobufjs/pool/index.js","node_modules/protobufjs/src/util/longbits.js","node_modules/protobufjs/src/util/minimal.js","node_modules/protobufjs/src/writer.js","node_modules/protobufjs/src/writer_buffer.js","node_modules/protobufjs/src/reader.js","node_modules/protobufjs/src/reader_buffer.js","node_modules/protobufjs/src/rpc/service.js","node_modules/protobufjs/src/rpc.js","node_modules/protobufjs/src/roots.js","node_modules/protobufjs/src/index-minimal.js","node_modules/protobufjs/minimal.js","node_modules/@opentelemetry/otlp-proto-exporter-base/build/esm/generated/root.js","node_modules/@opentelemetry/otlp-proto-exporter-base/build/esm/platform/types.js","node_modules/@opentelemetry/otlp-proto-exporter-base/build/esm/platform/util.js","node_modules/@opentelemetry/otlp-proto-exporter-base/build/esm/platform/browser/OTLPProtoExporterBrowserBase.js","node_modules/@opentelemetry/otlp-transformer/build/esm/common/index.js","node_modules/@opentelemetry/otlp-transformer/build/esm/common/internal.js","node_modules/@opentelemetry/otlp-transformer/build/esm/trace/internal.js","node_modules/@opentelemetry/otlp-transformer/build/esm/trace/index.js","node_modules/@opentelemetry/resources/node_modules/@opentelemetry/semantic-conventions/build/esm/resource/SemanticResourceAttributes.js","node_modules/@opentelemetry/resources/build/esm/platform/browser/default-service-name.js","node_modules/@opentelemetry/resources/build/esm/Resource.js","node_modules/@opentelemetry/otlp-transformer/build/esm/logs/index.js","node_modules/@opentelemetry/exporter-logs-otlp-proto/build/esm/platform/browser/OTLPLogExporter.js","node_modules/@opentelemetry/exporter-trace-otlp-proto/build/esm/platform/browser/OTLPTraceExporter.js","node_modules/@opentelemetry/semantic-conventions/build/esm/trace/SemanticAttributes.js","node_modules/@opentelemetry/semantic-conventions/build/esm/resource/SemanticResourceAttributes.js","packages/chat-widget-window/node_modules/@opentelemetry/core/build/esm/version.js","packages/chat-widget-window/node_modules/@opentelemetry/core/build/esm/platform/browser/sdk-info.js","packages/chat-widget-window/node_modules/@opentelemetry/resources/build/esm/platform/browser/default-service-name.js","packages/chat-widget-window/node_modules/@opentelemetry/resources/build/esm/Resource.js","node_modules/@opentelemetry/sdk-logs/build/esm/LogRecord.js","node_modules/@opentelemetry/sdk-logs/build/esm/Logger.js","node_modules/@opentelemetry/sdk-logs/build/esm/config.js","node_modules/@opentelemetry/sdk-logs/build/esm/MultiLogRecordProcessor.js","node_modules/@opentelemetry/sdk-logs/build/esm/export/NoopLogRecordProcessor.js","node_modules/@opentelemetry/sdk-logs/build/esm/internal/LoggerProviderSharedState.js","node_modules/@opentelemetry/sdk-logs/build/esm/LoggerProvider.js","node_modules/@opentelemetry/sdk-logs/build/esm/export/SimpleLogRecordProcessor.js","node_modules/@opentelemetry/sdk-trace-web/node_modules/@opentelemetry/core/build/esm/trace/suppress-tracing.js","node_modules/@opentelemetry/sdk-trace-web/node_modules/@opentelemetry/core/build/esm/baggage/constants.js","node_modules/@opentelemetry/sdk-trace-web/node_modules/@opentelemetry/core/build/esm/baggage/utils.js","node_modules/@opentelemetry/sdk-trace-web/node_modules/@opentelemetry/core/build/esm/baggage/propagation/W3CBaggagePropagator.js","node_modules/@opentelemetry/sdk-trace-web/node_modules/@opentelemetry/core/build/esm/common/attributes.js","node_modules/@opentelemetry/sdk-trace-web/node_modules/@opentelemetry/core/build/esm/common/logging-error-handler.js","node_modules/@opentelemetry/sdk-trace-web/node_modules/@opentelemetry/core/build/esm/common/global-error-handler.js","node_modules/@opentelemetry/sdk-trace-web/node_modules/@opentelemetry/core/build/esm/utils/sampling.js","node_modules/@opentelemetry/sdk-trace-web/node_modules/@opentelemetry/core/build/esm/utils/environment.js","node_modules/@opentelemetry/sdk-trace-web/node_modules/@opentelemetry/core/build/esm/platform/browser/globalThis.js","node_modules/@opentelemetry/sdk-trace-web/node_modules/@opentelemetry/core/build/esm/platform/browser/environment.js","node_modules/@opentelemetry/sdk-trace-web/node_modules/@opentelemetry/core/build/esm/platform/browser/performance.js","node_modules/@opentelemetry/sdk-trace-web/node_modules/@opentelemetry/core/build/esm/version.js","node_modules/@opentelemetry/sdk-trace-web/node_modules/@opentelemetry/core/build/esm/platform/browser/sdk-info.js","node_modules/@opentelemetry/sdk-trace-web/node_modules/@opentelemetry/core/build/esm/platform/browser/timer-util.js","node_modules/@opentelemetry/sdk-trace-web/node_modules/@opentelemetry/core/build/esm/common/time.js","node_modules/@opentelemetry/sdk-trace-web/node_modules/@opentelemetry/core/build/esm/ExportResult.js","node_modules/@opentelemetry/sdk-trace-web/node_modules/@opentelemetry/core/build/esm/propagation/composite.js","node_modules/@opentelemetry/sdk-trace-web/node_modules/@opentelemetry/core/build/esm/internal/validators.js","node_modules/@opentelemetry/sdk-trace-web/node_modules/@opentelemetry/core/build/esm/trace/TraceState.js","node_modules/@opentelemetry/sdk-trace-web/node_modules/@opentelemetry/core/build/esm/trace/W3CTraceContextPropagator.js","node_modules/@opentelemetry/sdk-trace-web/node_modules/@opentelemetry/core/build/esm/utils/lodash.merge.js","node_modules/@opentelemetry/sdk-trace-web/node_modules/@opentelemetry/core/build/esm/utils/merge.js","node_modules/@opentelemetry/sdk-trace-web/node_modules/@opentelemetry/core/build/esm/utils/promise.js","node_modules/@opentelemetry/sdk-trace-web/node_modules/@opentelemetry/core/build/esm/utils/callback.js","node_modules/@opentelemetry/sdk-trace-web/node_modules/@opentelemetry/core/build/esm/internal/exporter.js","node_modules/@opentelemetry/sdk-trace-web/node_modules/@opentelemetry/core/build/esm/index.js","node_modules/@opentelemetry/sdk-trace-web/node_modules/@opentelemetry/sdk-trace-base/build/esm/enums.js","node_modules/@opentelemetry/sdk-trace-web/node_modules/@opentelemetry/sdk-trace-base/build/esm/Span.js","node_modules/@opentelemetry/sdk-trace-web/node_modules/@opentelemetry/sdk-trace-base/build/esm/Sampler.js","node_modules/@opentelemetry/sdk-trace-web/node_modules/@opentelemetry/sdk-trace-base/build/esm/sampler/AlwaysOffSampler.js","node_modules/@opentelemetry/sdk-trace-web/node_modules/@opentelemetry/sdk-trace-base/build/esm/sampler/AlwaysOnSampler.js","node_modules/@opentelemetry/sdk-trace-web/node_modules/@opentelemetry/sdk-trace-base/build/esm/sampler/ParentBasedSampler.js","node_modules/@opentelemetry/sdk-trace-web/node_modules/@opentelemetry/sdk-trace-base/build/esm/sampler/TraceIdRatioBasedSampler.js","node_modules/@opentelemetry/sdk-trace-web/node_modules/@opentelemetry/sdk-trace-base/build/esm/config.js","node_modules/@opentelemetry/sdk-trace-web/node_modules/@opentelemetry/sdk-trace-base/build/esm/utility.js","node_modules/@opentelemetry/sdk-trace-web/node_modules/@opentelemetry/sdk-trace-base/build/esm/export/BatchSpanProcessorBase.js","node_modules/@opentelemetry/sdk-trace-web/node_modules/@opentelemetry/sdk-trace-base/build/esm/platform/browser/export/BatchSpanProcessor.js","node_modules/@opentelemetry/sdk-trace-web/node_modules/@opentelemetry/sdk-trace-base/build/esm/platform/browser/RandomIdGenerator.js","node_modules/@opentelemetry/sdk-trace-web/node_modules/@opentelemetry/sdk-trace-base/build/esm/Tracer.js","node_modules/@opentelemetry/sdk-trace-web/node_modules/@opentelemetry/resources/build/esm/platform/browser/default-service-name.js","node_modules/@opentelemetry/sdk-trace-web/node_modules/@opentelemetry/resources/build/esm/Resource.js","node_modules/@opentelemetry/sdk-trace-web/node_modules/@opentelemetry/sdk-trace-base/build/esm/MultiSpanProcessor.js","node_modules/@opentelemetry/sdk-trace-web/node_modules/@opentelemetry/sdk-trace-base/build/esm/export/NoopSpanProcessor.js","node_modules/@opentelemetry/sdk-trace-web/node_modules/@opentelemetry/sdk-trace-base/build/esm/BasicTracerProvider.js","node_modules/@opentelemetry/sdk-trace-web/node_modules/@opentelemetry/sdk-trace-base/build/esm/export/SimpleSpanProcessor.js","node_modules/@opentelemetry/sdk-trace-web/build/esm/StackContextManager.js","node_modules/@opentelemetry/sdk-trace-web/build/esm/WebTracerProvider.js"],"sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// Updates to this file should also be replicated to @opentelemetry/core too.\n/**\n * - globalThis (New standard)\n * - self (Will return the current window instance for supported browsers)\n * - window (fallback for older browser implementations)\n * - global (NodeJS implementation)\n * - <object> (When all else fails)\n */\n/** only globals that common to node and browsers are allowed */\n// eslint-disable-next-line node/no-unsupported-features/es-builtins, no-undef\nexport var _globalThis = typeof globalThis === 'object'\n    ? globalThis\n    : typeof self === 'object'\n        ? self\n        : typeof window === 'object'\n            ? window\n            : typeof global === 'object'\n                ? global\n                : {};\n//# sourceMappingURL=globalThis.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// this is autogenerated file, see scripts/version-update.js\nexport var VERSION = '1.9.0';\n//# sourceMappingURL=version.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { VERSION } from '../version';\nvar re = /^(\\d+)\\.(\\d+)\\.(\\d+)(-(.+))?$/;\n/**\n * Create a function to test an API version to see if it is compatible with the provided ownVersion.\n *\n * The returned function has the following semantics:\n * - Exact match is always compatible\n * - Major versions must match exactly\n *    - 1.x package cannot use global 2.x package\n *    - 2.x package cannot use global 1.x package\n * - The minor version of the API module requesting access to the global API must be less than or equal to the minor version of this API\n *    - 1.3 package may use 1.4 global because the later global contains all functions 1.3 expects\n *    - 1.4 package may NOT use 1.3 global because it may try to call functions which don't exist on 1.3\n * - If the major version is 0, the minor version is treated as the major and the patch is treated as the minor\n * - Patch and build tag differences are not considered at this time\n *\n * @param ownVersion version which should be checked against\n */\nexport function _makeCompatibilityCheck(ownVersion) {\n    var acceptedVersions = new Set([ownVersion]);\n    var rejectedVersions = new Set();\n    var myVersionMatch = ownVersion.match(re);\n    if (!myVersionMatch) {\n        // we cannot guarantee compatibility so we always return noop\n        return function () { return false; };\n    }\n    var ownVersionParsed = {\n        major: +myVersionMatch[1],\n        minor: +myVersionMatch[2],\n        patch: +myVersionMatch[3],\n        prerelease: myVersionMatch[4],\n    };\n    // if ownVersion has a prerelease tag, versions must match exactly\n    if (ownVersionParsed.prerelease != null) {\n        return function isExactmatch(globalVersion) {\n            return globalVersion === ownVersion;\n        };\n    }\n    function _reject(v) {\n        rejectedVersions.add(v);\n        return false;\n    }\n    function _accept(v) {\n        acceptedVersions.add(v);\n        return true;\n    }\n    return function isCompatible(globalVersion) {\n        if (acceptedVersions.has(globalVersion)) {\n            return true;\n        }\n        if (rejectedVersions.has(globalVersion)) {\n            return false;\n        }\n        var globalVersionMatch = globalVersion.match(re);\n        if (!globalVersionMatch) {\n            // cannot parse other version\n            // we cannot guarantee compatibility so we always noop\n            return _reject(globalVersion);\n        }\n        var globalVersionParsed = {\n            major: +globalVersionMatch[1],\n            minor: +globalVersionMatch[2],\n            patch: +globalVersionMatch[3],\n            prerelease: globalVersionMatch[4],\n        };\n        // if globalVersion has a prerelease tag, versions must match exactly\n        if (globalVersionParsed.prerelease != null) {\n            return _reject(globalVersion);\n        }\n        // major versions must match\n        if (ownVersionParsed.major !== globalVersionParsed.major) {\n            return _reject(globalVersion);\n        }\n        if (ownVersionParsed.major === 0) {\n            if (ownVersionParsed.minor === globalVersionParsed.minor &&\n                ownVersionParsed.patch <= globalVersionParsed.patch) {\n                return _accept(globalVersion);\n            }\n            return _reject(globalVersion);\n        }\n        if (ownVersionParsed.minor <= globalVersionParsed.minor) {\n            return _accept(globalVersion);\n        }\n        return _reject(globalVersion);\n    };\n}\n/**\n * Test an API version to see if it is compatible with this API.\n *\n * - Exact match is always compatible\n * - Major versions must match exactly\n *    - 1.x package cannot use global 2.x package\n *    - 2.x package cannot use global 1.x package\n * - The minor version of the API module requesting access to the global API must be less than or equal to the minor version of this API\n *    - 1.3 package may use 1.4 global because the later global contains all functions 1.3 expects\n *    - 1.4 package may NOT use 1.3 global because it may try to call functions which don't exist on 1.3\n * - If the major version is 0, the minor version is treated as the major and the patch is treated as the minor\n * - Patch and build tag differences are not considered at this time\n *\n * @param version version of the API requesting an instance of the global API\n */\nexport var isCompatible = _makeCompatibilityCheck(VERSION);\n//# sourceMappingURL=semver.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { _globalThis } from '../platform';\nimport { VERSION } from '../version';\nimport { isCompatible } from './semver';\nvar major = VERSION.split('.')[0];\nvar GLOBAL_OPENTELEMETRY_API_KEY = Symbol.for(\"opentelemetry.js.api.\" + major);\nvar _global = _globalThis;\nexport function registerGlobal(type, instance, diag, allowOverride) {\n    var _a;\n    if (allowOverride === void 0) { allowOverride = false; }\n    var api = (_global[GLOBAL_OPENTELEMETRY_API_KEY] = (_a = _global[GLOBAL_OPENTELEMETRY_API_KEY]) !== null && _a !== void 0 ? _a : {\n        version: VERSION,\n    });\n    if (!allowOverride && api[type]) {\n        // already registered an API of this type\n        var err = new Error(\"@opentelemetry/api: Attempted duplicate registration of API: \" + type);\n        diag.error(err.stack || err.message);\n        return false;\n    }\n    if (api.version !== VERSION) {\n        // All registered APIs must be of the same version exactly\n        var err = new Error(\"@opentelemetry/api: Registration of version v\" + api.version + \" for \" + type + \" does not match previously registered API v\" + VERSION);\n        diag.error(err.stack || err.message);\n        return false;\n    }\n    api[type] = instance;\n    diag.debug(\"@opentelemetry/api: Registered a global for \" + type + \" v\" + VERSION + \".\");\n    return true;\n}\nexport function getGlobal(type) {\n    var _a, _b;\n    var globalVersion = (_a = _global[GLOBAL_OPENTELEMETRY_API_KEY]) === null || _a === void 0 ? void 0 : _a.version;\n    if (!globalVersion || !isCompatible(globalVersion)) {\n        return;\n    }\n    return (_b = _global[GLOBAL_OPENTELEMETRY_API_KEY]) === null || _b === void 0 ? void 0 : _b[type];\n}\nexport function unregisterGlobal(type, diag) {\n    diag.debug(\"@opentelemetry/api: Unregistering a global for \" + type + \" v\" + VERSION + \".\");\n    var api = _global[GLOBAL_OPENTELEMETRY_API_KEY];\n    if (api) {\n        delete api[type];\n    }\n}\n//# sourceMappingURL=global-utils.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nvar __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n        if (ar || !(i in from)) {\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n            ar[i] = from[i];\n        }\n    }\n    return to.concat(ar || Array.prototype.slice.call(from));\n};\nimport { getGlobal } from '../internal/global-utils';\n/**\n * Component Logger which is meant to be used as part of any component which\n * will add automatically additional namespace in front of the log message.\n * It will then forward all message to global diag logger\n * @example\n * const cLogger = diag.createComponentLogger({ namespace: '@opentelemetry/instrumentation-http' });\n * cLogger.debug('test');\n * // @opentelemetry/instrumentation-http test\n */\nvar DiagComponentLogger = /** @class */ (function () {\n    function DiagComponentLogger(props) {\n        this._namespace = props.namespace || 'DiagComponentLogger';\n    }\n    DiagComponentLogger.prototype.debug = function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        return logProxy('debug', this._namespace, args);\n    };\n    DiagComponentLogger.prototype.error = function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        return logProxy('error', this._namespace, args);\n    };\n    DiagComponentLogger.prototype.info = function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        return logProxy('info', this._namespace, args);\n    };\n    DiagComponentLogger.prototype.warn = function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        return logProxy('warn', this._namespace, args);\n    };\n    DiagComponentLogger.prototype.verbose = function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        return logProxy('verbose', this._namespace, args);\n    };\n    return DiagComponentLogger;\n}());\nexport { DiagComponentLogger };\nfunction logProxy(funcName, namespace, args) {\n    var logger = getGlobal('diag');\n    // shortcut if logger not set\n    if (!logger) {\n        return;\n    }\n    args.unshift(namespace);\n    return logger[funcName].apply(logger, __spreadArray([], __read(args), false));\n}\n//# sourceMappingURL=ComponentLogger.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Defines the available internal logging levels for the diagnostic logger, the numeric values\n * of the levels are defined to match the original values from the initial LogLevel to avoid\n * compatibility/migration issues for any implementation that assume the numeric ordering.\n */\nexport var DiagLogLevel;\n(function (DiagLogLevel) {\n    /** Diagnostic Logging level setting to disable all logging (except and forced logs) */\n    DiagLogLevel[DiagLogLevel[\"NONE\"] = 0] = \"NONE\";\n    /** Identifies an error scenario */\n    DiagLogLevel[DiagLogLevel[\"ERROR\"] = 30] = \"ERROR\";\n    /** Identifies a warning scenario */\n    DiagLogLevel[DiagLogLevel[\"WARN\"] = 50] = \"WARN\";\n    /** General informational log message */\n    DiagLogLevel[DiagLogLevel[\"INFO\"] = 60] = \"INFO\";\n    /** General debug log message */\n    DiagLogLevel[DiagLogLevel[\"DEBUG\"] = 70] = \"DEBUG\";\n    /**\n     * Detailed trace level logging should only be used for development, should only be set\n     * in a development environment.\n     */\n    DiagLogLevel[DiagLogLevel[\"VERBOSE\"] = 80] = \"VERBOSE\";\n    /** Used to set the logging level to include all logging */\n    DiagLogLevel[DiagLogLevel[\"ALL\"] = 9999] = \"ALL\";\n})(DiagLogLevel || (DiagLogLevel = {}));\n//# sourceMappingURL=types.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { DiagLogLevel } from '../types';\nexport function createLogLevelDiagLogger(maxLevel, logger) {\n    if (maxLevel < DiagLogLevel.NONE) {\n        maxLevel = DiagLogLevel.NONE;\n    }\n    else if (maxLevel > DiagLogLevel.ALL) {\n        maxLevel = DiagLogLevel.ALL;\n    }\n    // In case the logger is null or undefined\n    logger = logger || {};\n    function _filterFunc(funcName, theLevel) {\n        var theFunc = logger[funcName];\n        if (typeof theFunc === 'function' && maxLevel >= theLevel) {\n            return theFunc.bind(logger);\n        }\n        return function () { };\n    }\n    return {\n        error: _filterFunc('error', DiagLogLevel.ERROR),\n        warn: _filterFunc('warn', DiagLogLevel.WARN),\n        info: _filterFunc('info', DiagLogLevel.INFO),\n        debug: _filterFunc('debug', DiagLogLevel.DEBUG),\n        verbose: _filterFunc('verbose', DiagLogLevel.VERBOSE),\n    };\n}\n//# sourceMappingURL=logLevelLogger.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nvar __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n        if (ar || !(i in from)) {\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n            ar[i] = from[i];\n        }\n    }\n    return to.concat(ar || Array.prototype.slice.call(from));\n};\nimport { DiagComponentLogger } from '../diag/ComponentLogger';\nimport { createLogLevelDiagLogger } from '../diag/internal/logLevelLogger';\nimport { DiagLogLevel, } from '../diag/types';\nimport { getGlobal, registerGlobal, unregisterGlobal, } from '../internal/global-utils';\nvar API_NAME = 'diag';\n/**\n * Singleton object which represents the entry point to the OpenTelemetry internal\n * diagnostic API\n */\nvar DiagAPI = /** @class */ (function () {\n    /**\n     * Private internal constructor\n     * @private\n     */\n    function DiagAPI() {\n        function _logProxy(funcName) {\n            return function () {\n                var args = [];\n                for (var _i = 0; _i < arguments.length; _i++) {\n                    args[_i] = arguments[_i];\n                }\n                var logger = getGlobal('diag');\n                // shortcut if logger not set\n                if (!logger)\n                    return;\n                return logger[funcName].apply(logger, __spreadArray([], __read(args), false));\n            };\n        }\n        // Using self local variable for minification purposes as 'this' cannot be minified\n        var self = this;\n        // DiagAPI specific functions\n        var setLogger = function (logger, optionsOrLogLevel) {\n            var _a, _b, _c;\n            if (optionsOrLogLevel === void 0) { optionsOrLogLevel = { logLevel: DiagLogLevel.INFO }; }\n            if (logger === self) {\n                // There isn't much we can do here.\n                // Logging to the console might break the user application.\n                // Try to log to self. If a logger was previously registered it will receive the log.\n                var err = new Error('Cannot use diag as the logger for itself. Please use a DiagLogger implementation like ConsoleDiagLogger or a custom implementation');\n                self.error((_a = err.stack) !== null && _a !== void 0 ? _a : err.message);\n                return false;\n            }\n            if (typeof optionsOrLogLevel === 'number') {\n                optionsOrLogLevel = {\n                    logLevel: optionsOrLogLevel,\n                };\n            }\n            var oldLogger = getGlobal('diag');\n            var newLogger = createLogLevelDiagLogger((_b = optionsOrLogLevel.logLevel) !== null && _b !== void 0 ? _b : DiagLogLevel.INFO, logger);\n            // There already is an logger registered. We'll let it know before overwriting it.\n            if (oldLogger && !optionsOrLogLevel.suppressOverrideMessage) {\n                var stack = (_c = new Error().stack) !== null && _c !== void 0 ? _c : '<failed to generate stacktrace>';\n                oldLogger.warn(\"Current logger will be overwritten from \" + stack);\n                newLogger.warn(\"Current logger will overwrite one already registered from \" + stack);\n            }\n            return registerGlobal('diag', newLogger, self, true);\n        };\n        self.setLogger = setLogger;\n        self.disable = function () {\n            unregisterGlobal(API_NAME, self);\n        };\n        self.createComponentLogger = function (options) {\n            return new DiagComponentLogger(options);\n        };\n        self.verbose = _logProxy('verbose');\n        self.debug = _logProxy('debug');\n        self.info = _logProxy('info');\n        self.warn = _logProxy('warn');\n        self.error = _logProxy('error');\n    }\n    /** Get the singleton instance of the DiagAPI API */\n    DiagAPI.instance = function () {\n        if (!this._instance) {\n            this._instance = new DiagAPI();\n        }\n        return this._instance;\n    };\n    return DiagAPI;\n}());\nexport { DiagAPI };\n//# sourceMappingURL=diag.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nvar __values = (this && this.__values) || function(o) {\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\n    if (m) return m.call(o);\n    if (o && typeof o.length === \"number\") return {\n        next: function () {\n            if (o && i >= o.length) o = void 0;\n            return { value: o && o[i++], done: !o };\n        }\n    };\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\nvar BaggageImpl = /** @class */ (function () {\n    function BaggageImpl(entries) {\n        this._entries = entries ? new Map(entries) : new Map();\n    }\n    BaggageImpl.prototype.getEntry = function (key) {\n        var entry = this._entries.get(key);\n        if (!entry) {\n            return undefined;\n        }\n        return Object.assign({}, entry);\n    };\n    BaggageImpl.prototype.getAllEntries = function () {\n        return Array.from(this._entries.entries()).map(function (_a) {\n            var _b = __read(_a, 2), k = _b[0], v = _b[1];\n            return [k, v];\n        });\n    };\n    BaggageImpl.prototype.setEntry = function (key, entry) {\n        var newBaggage = new BaggageImpl(this._entries);\n        newBaggage._entries.set(key, entry);\n        return newBaggage;\n    };\n    BaggageImpl.prototype.removeEntry = function (key) {\n        var newBaggage = new BaggageImpl(this._entries);\n        newBaggage._entries.delete(key);\n        return newBaggage;\n    };\n    BaggageImpl.prototype.removeEntries = function () {\n        var e_1, _a;\n        var keys = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            keys[_i] = arguments[_i];\n        }\n        var newBaggage = new BaggageImpl(this._entries);\n        try {\n            for (var keys_1 = __values(keys), keys_1_1 = keys_1.next(); !keys_1_1.done; keys_1_1 = keys_1.next()) {\n                var key = keys_1_1.value;\n                newBaggage._entries.delete(key);\n            }\n        }\n        catch (e_1_1) { e_1 = { error: e_1_1 }; }\n        finally {\n            try {\n                if (keys_1_1 && !keys_1_1.done && (_a = keys_1.return)) _a.call(keys_1);\n            }\n            finally { if (e_1) throw e_1.error; }\n        }\n        return newBaggage;\n    };\n    BaggageImpl.prototype.clear = function () {\n        return new BaggageImpl();\n    };\n    return BaggageImpl;\n}());\nexport { BaggageImpl };\n//# sourceMappingURL=baggage-impl.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Symbol used to make BaggageEntryMetadata an opaque type\n */\nexport var baggageEntryMetadataSymbol = Symbol('BaggageEntryMetadata');\n//# sourceMappingURL=symbol.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { DiagAPI } from '../api/diag';\nimport { BaggageImpl } from './internal/baggage-impl';\nimport { baggageEntryMetadataSymbol } from './internal/symbol';\nvar diag = DiagAPI.instance();\n/**\n * Create a new Baggage with optional entries\n *\n * @param entries An array of baggage entries the new baggage should contain\n */\nexport function createBaggage(entries) {\n    if (entries === void 0) { entries = {}; }\n    return new BaggageImpl(new Map(Object.entries(entries)));\n}\n/**\n * Create a serializable BaggageEntryMetadata object from a string.\n *\n * @param str string metadata. Format is currently not defined by the spec and has no special meaning.\n *\n */\nexport function baggageEntryMetadataFromString(str) {\n    if (typeof str !== 'string') {\n        diag.error(\"Cannot create baggage metadata from unknown type: \" + typeof str);\n        str = '';\n    }\n    return {\n        __TYPE__: baggageEntryMetadataSymbol,\n        toString: function () {\n            return str;\n        },\n    };\n}\n//# sourceMappingURL=utils.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/** Get a key to uniquely identify a context value */\nexport function createContextKey(description) {\n    // The specification states that for the same input, multiple calls should\n    // return different keys. Due to the nature of the JS dependency management\n    // system, this creates problems where multiple versions of some package\n    // could hold different keys for the same property.\n    //\n    // Therefore, we use Symbol.for which returns the same key for the same input.\n    return Symbol.for(description);\n}\nvar BaseContext = /** @class */ (function () {\n    /**\n     * Construct a new context which inherits values from an optional parent context.\n     *\n     * @param parentContext a context from which to inherit values\n     */\n    function BaseContext(parentContext) {\n        // for minification\n        var self = this;\n        self._currentContext = parentContext ? new Map(parentContext) : new Map();\n        self.getValue = function (key) { return self._currentContext.get(key); };\n        self.setValue = function (key, value) {\n            var context = new BaseContext(self._currentContext);\n            context._currentContext.set(key, value);\n            return context;\n        };\n        self.deleteValue = function (key) {\n            var context = new BaseContext(self._currentContext);\n            context._currentContext.delete(key);\n            return context;\n        };\n    }\n    return BaseContext;\n}());\n/** The root context is used as the default parent context when there is no active context */\nexport var ROOT_CONTEXT = new BaseContext();\n//# sourceMappingURL=context.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n/**\n * NoopMeter is a noop implementation of the {@link Meter} interface. It reuses\n * constant NoopMetrics for all of its methods.\n */\nvar NoopMeter = /** @class */ (function () {\n    function NoopMeter() {\n    }\n    /**\n     * @see {@link Meter.createGauge}\n     */\n    NoopMeter.prototype.createGauge = function (_name, _options) {\n        return NOOP_GAUGE_METRIC;\n    };\n    /**\n     * @see {@link Meter.createHistogram}\n     */\n    NoopMeter.prototype.createHistogram = function (_name, _options) {\n        return NOOP_HISTOGRAM_METRIC;\n    };\n    /**\n     * @see {@link Meter.createCounter}\n     */\n    NoopMeter.prototype.createCounter = function (_name, _options) {\n        return NOOP_COUNTER_METRIC;\n    };\n    /**\n     * @see {@link Meter.createUpDownCounter}\n     */\n    NoopMeter.prototype.createUpDownCounter = function (_name, _options) {\n        return NOOP_UP_DOWN_COUNTER_METRIC;\n    };\n    /**\n     * @see {@link Meter.createObservableGauge}\n     */\n    NoopMeter.prototype.createObservableGauge = function (_name, _options) {\n        return NOOP_OBSERVABLE_GAUGE_METRIC;\n    };\n    /**\n     * @see {@link Meter.createObservableCounter}\n     */\n    NoopMeter.prototype.createObservableCounter = function (_name, _options) {\n        return NOOP_OBSERVABLE_COUNTER_METRIC;\n    };\n    /**\n     * @see {@link Meter.createObservableUpDownCounter}\n     */\n    NoopMeter.prototype.createObservableUpDownCounter = function (_name, _options) {\n        return NOOP_OBSERVABLE_UP_DOWN_COUNTER_METRIC;\n    };\n    /**\n     * @see {@link Meter.addBatchObservableCallback}\n     */\n    NoopMeter.prototype.addBatchObservableCallback = function (_callback, _observables) { };\n    /**\n     * @see {@link Meter.removeBatchObservableCallback}\n     */\n    NoopMeter.prototype.removeBatchObservableCallback = function (_callback) { };\n    return NoopMeter;\n}());\nexport { NoopMeter };\nvar NoopMetric = /** @class */ (function () {\n    function NoopMetric() {\n    }\n    return NoopMetric;\n}());\nexport { NoopMetric };\nvar NoopCounterMetric = /** @class */ (function (_super) {\n    __extends(NoopCounterMetric, _super);\n    function NoopCounterMetric() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    NoopCounterMetric.prototype.add = function (_value, _attributes) { };\n    return NoopCounterMetric;\n}(NoopMetric));\nexport { NoopCounterMetric };\nvar NoopUpDownCounterMetric = /** @class */ (function (_super) {\n    __extends(NoopUpDownCounterMetric, _super);\n    function NoopUpDownCounterMetric() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    NoopUpDownCounterMetric.prototype.add = function (_value, _attributes) { };\n    return NoopUpDownCounterMetric;\n}(NoopMetric));\nexport { NoopUpDownCounterMetric };\nvar NoopGaugeMetric = /** @class */ (function (_super) {\n    __extends(NoopGaugeMetric, _super);\n    function NoopGaugeMetric() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    NoopGaugeMetric.prototype.record = function (_value, _attributes) { };\n    return NoopGaugeMetric;\n}(NoopMetric));\nexport { NoopGaugeMetric };\nvar NoopHistogramMetric = /** @class */ (function (_super) {\n    __extends(NoopHistogramMetric, _super);\n    function NoopHistogramMetric() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    NoopHistogramMetric.prototype.record = function (_value, _attributes) { };\n    return NoopHistogramMetric;\n}(NoopMetric));\nexport { NoopHistogramMetric };\nvar NoopObservableMetric = /** @class */ (function () {\n    function NoopObservableMetric() {\n    }\n    NoopObservableMetric.prototype.addCallback = function (_callback) { };\n    NoopObservableMetric.prototype.removeCallback = function (_callback) { };\n    return NoopObservableMetric;\n}());\nexport { NoopObservableMetric };\nvar NoopObservableCounterMetric = /** @class */ (function (_super) {\n    __extends(NoopObservableCounterMetric, _super);\n    function NoopObservableCounterMetric() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    return NoopObservableCounterMetric;\n}(NoopObservableMetric));\nexport { NoopObservableCounterMetric };\nvar NoopObservableGaugeMetric = /** @class */ (function (_super) {\n    __extends(NoopObservableGaugeMetric, _super);\n    function NoopObservableGaugeMetric() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    return NoopObservableGaugeMetric;\n}(NoopObservableMetric));\nexport { NoopObservableGaugeMetric };\nvar NoopObservableUpDownCounterMetric = /** @class */ (function (_super) {\n    __extends(NoopObservableUpDownCounterMetric, _super);\n    function NoopObservableUpDownCounterMetric() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    return NoopObservableUpDownCounterMetric;\n}(NoopObservableMetric));\nexport { NoopObservableUpDownCounterMetric };\nexport var NOOP_METER = new NoopMeter();\n// Synchronous instruments\nexport var NOOP_COUNTER_METRIC = new NoopCounterMetric();\nexport var NOOP_GAUGE_METRIC = new NoopGaugeMetric();\nexport var NOOP_HISTOGRAM_METRIC = new NoopHistogramMetric();\nexport var NOOP_UP_DOWN_COUNTER_METRIC = new NoopUpDownCounterMetric();\n// Asynchronous instruments\nexport var NOOP_OBSERVABLE_COUNTER_METRIC = new NoopObservableCounterMetric();\nexport var NOOP_OBSERVABLE_GAUGE_METRIC = new NoopObservableGaugeMetric();\nexport var NOOP_OBSERVABLE_UP_DOWN_COUNTER_METRIC = new NoopObservableUpDownCounterMetric();\n/**\n * Create a no-op Meter\n */\nexport function createNoopMeter() {\n    return NOOP_METER;\n}\n//# sourceMappingURL=NoopMeter.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport var defaultTextMapGetter = {\n    get: function (carrier, key) {\n        if (carrier == null) {\n            return undefined;\n        }\n        return carrier[key];\n    },\n    keys: function (carrier) {\n        if (carrier == null) {\n            return [];\n        }\n        return Object.keys(carrier);\n    },\n};\nexport var defaultTextMapSetter = {\n    set: function (carrier, key, value) {\n        if (carrier == null) {\n            return;\n        }\n        carrier[key] = value;\n    },\n};\n//# sourceMappingURL=TextMapPropagator.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nvar __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n        if (ar || !(i in from)) {\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n            ar[i] = from[i];\n        }\n    }\n    return to.concat(ar || Array.prototype.slice.call(from));\n};\nimport { ROOT_CONTEXT } from './context';\nvar NoopContextManager = /** @class */ (function () {\n    function NoopContextManager() {\n    }\n    NoopContextManager.prototype.active = function () {\n        return ROOT_CONTEXT;\n    };\n    NoopContextManager.prototype.with = function (_context, fn, thisArg) {\n        var args = [];\n        for (var _i = 3; _i < arguments.length; _i++) {\n            args[_i - 3] = arguments[_i];\n        }\n        return fn.call.apply(fn, __spreadArray([thisArg], __read(args), false));\n    };\n    NoopContextManager.prototype.bind = function (_context, target) {\n        return target;\n    };\n    NoopContextManager.prototype.enable = function () {\n        return this;\n    };\n    NoopContextManager.prototype.disable = function () {\n        return this;\n    };\n    return NoopContextManager;\n}());\nexport { NoopContextManager };\n//# sourceMappingURL=NoopContextManager.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nvar __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n        if (ar || !(i in from)) {\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n            ar[i] = from[i];\n        }\n    }\n    return to.concat(ar || Array.prototype.slice.call(from));\n};\nimport { NoopContextManager } from '../context/NoopContextManager';\nimport { getGlobal, registerGlobal, unregisterGlobal, } from '../internal/global-utils';\nimport { DiagAPI } from './diag';\nvar API_NAME = 'context';\nvar NOOP_CONTEXT_MANAGER = new NoopContextManager();\n/**\n * Singleton object which represents the entry point to the OpenTelemetry Context API\n */\nvar ContextAPI = /** @class */ (function () {\n    /** Empty private constructor prevents end users from constructing a new instance of the API */\n    function ContextAPI() {\n    }\n    /** Get the singleton instance of the Context API */\n    ContextAPI.getInstance = function () {\n        if (!this._instance) {\n            this._instance = new ContextAPI();\n        }\n        return this._instance;\n    };\n    /**\n     * Set the current context manager.\n     *\n     * @returns true if the context manager was successfully registered, else false\n     */\n    ContextAPI.prototype.setGlobalContextManager = function (contextManager) {\n        return registerGlobal(API_NAME, contextManager, DiagAPI.instance());\n    };\n    /**\n     * Get the currently active context\n     */\n    ContextAPI.prototype.active = function () {\n        return this._getContextManager().active();\n    };\n    /**\n     * Execute a function with an active context\n     *\n     * @param context context to be active during function execution\n     * @param fn function to execute in a context\n     * @param thisArg optional receiver to be used for calling fn\n     * @param args optional arguments forwarded to fn\n     */\n    ContextAPI.prototype.with = function (context, fn, thisArg) {\n        var _a;\n        var args = [];\n        for (var _i = 3; _i < arguments.length; _i++) {\n            args[_i - 3] = arguments[_i];\n        }\n        return (_a = this._getContextManager()).with.apply(_a, __spreadArray([context, fn, thisArg], __read(args), false));\n    };\n    /**\n     * Bind a context to a target function or event emitter\n     *\n     * @param context context to bind to the event emitter or function. Defaults to the currently active context\n     * @param target function or event emitter to bind\n     */\n    ContextAPI.prototype.bind = function (context, target) {\n        return this._getContextManager().bind(context, target);\n    };\n    ContextAPI.prototype._getContextManager = function () {\n        return getGlobal(API_NAME) || NOOP_CONTEXT_MANAGER;\n    };\n    /** Disable and remove the global context manager */\n    ContextAPI.prototype.disable = function () {\n        this._getContextManager().disable();\n        unregisterGlobal(API_NAME, DiagAPI.instance());\n    };\n    return ContextAPI;\n}());\nexport { ContextAPI };\n//# sourceMappingURL=context.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport var TraceFlags;\n(function (TraceFlags) {\n    /** Represents no flag set. */\n    TraceFlags[TraceFlags[\"NONE\"] = 0] = \"NONE\";\n    /** Bit to represent whether trace is sampled in trace flags. */\n    TraceFlags[TraceFlags[\"SAMPLED\"] = 1] = \"SAMPLED\";\n})(TraceFlags || (TraceFlags = {}));\n//# sourceMappingURL=trace_flags.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { TraceFlags } from './trace_flags';\nexport var INVALID_SPANID = '0000000000000000';\nexport var INVALID_TRACEID = '00000000000000000000000000000000';\nexport var INVALID_SPAN_CONTEXT = {\n    traceId: INVALID_TRACEID,\n    spanId: INVALID_SPANID,\n    traceFlags: TraceFlags.NONE,\n};\n//# sourceMappingURL=invalid-span-constants.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { INVALID_SPAN_CONTEXT } from './invalid-span-constants';\n/**\n * The NonRecordingSpan is the default {@link Span} that is used when no Span\n * implementation is available. All operations are no-op including context\n * propagation.\n */\nvar NonRecordingSpan = /** @class */ (function () {\n    function NonRecordingSpan(_spanContext) {\n        if (_spanContext === void 0) { _spanContext = INVALID_SPAN_CONTEXT; }\n        this._spanContext = _spanContext;\n    }\n    // Returns a SpanContext.\n    NonRecordingSpan.prototype.spanContext = function () {\n        return this._spanContext;\n    };\n    // By default does nothing\n    NonRecordingSpan.prototype.setAttribute = function (_key, _value) {\n        return this;\n    };\n    // By default does nothing\n    NonRecordingSpan.prototype.setAttributes = function (_attributes) {\n        return this;\n    };\n    // By default does nothing\n    NonRecordingSpan.prototype.addEvent = function (_name, _attributes) {\n        return this;\n    };\n    NonRecordingSpan.prototype.addLink = function (_link) {\n        return this;\n    };\n    NonRecordingSpan.prototype.addLinks = function (_links) {\n        return this;\n    };\n    // By default does nothing\n    NonRecordingSpan.prototype.setStatus = function (_status) {\n        return this;\n    };\n    // By default does nothing\n    NonRecordingSpan.prototype.updateName = function (_name) {\n        return this;\n    };\n    // By default does nothing\n    NonRecordingSpan.prototype.end = function (_endTime) { };\n    // isRecording always returns false for NonRecordingSpan.\n    NonRecordingSpan.prototype.isRecording = function () {\n        return false;\n    };\n    // By default does nothing\n    NonRecordingSpan.prototype.recordException = function (_exception, _time) { };\n    return NonRecordingSpan;\n}());\nexport { NonRecordingSpan };\n//# sourceMappingURL=NonRecordingSpan.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { createContextKey } from '../context/context';\nimport { NonRecordingSpan } from './NonRecordingSpan';\nimport { ContextAPI } from '../api/context';\n/**\n * span key\n */\nvar SPAN_KEY = createContextKey('OpenTelemetry Context Key SPAN');\n/**\n * Return the span if one exists\n *\n * @param context context to get span from\n */\nexport function getSpan(context) {\n    return context.getValue(SPAN_KEY) || undefined;\n}\n/**\n * Gets the span from the current context, if one exists.\n */\nexport function getActiveSpan() {\n    return getSpan(ContextAPI.getInstance().active());\n}\n/**\n * Set the span on a context\n *\n * @param context context to use as parent\n * @param span span to set active\n */\nexport function setSpan(context, span) {\n    return context.setValue(SPAN_KEY, span);\n}\n/**\n * Remove current span stored in the context\n *\n * @param context context to delete span from\n */\nexport function deleteSpan(context) {\n    return context.deleteValue(SPAN_KEY);\n}\n/**\n * Wrap span context in a NoopSpan and set as span in a new\n * context\n *\n * @param context context to set active span on\n * @param spanContext span context to be wrapped\n */\nexport function setSpanContext(context, spanContext) {\n    return setSpan(context, new NonRecordingSpan(spanContext));\n}\n/**\n * Get the span context of the span if it exists.\n *\n * @param context context to get values from\n */\nexport function getSpanContext(context) {\n    var _a;\n    return (_a = getSpan(context)) === null || _a === void 0 ? void 0 : _a.spanContext();\n}\n//# sourceMappingURL=context-utils.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { INVALID_SPANID, INVALID_TRACEID } from './invalid-span-constants';\nimport { NonRecordingSpan } from './NonRecordingSpan';\nvar VALID_TRACEID_REGEX = /^([0-9a-f]{32})$/i;\nvar VALID_SPANID_REGEX = /^[0-9a-f]{16}$/i;\nexport function isValidTraceId(traceId) {\n    return VALID_TRACEID_REGEX.test(traceId) && traceId !== INVALID_TRACEID;\n}\nexport function isValidSpanId(spanId) {\n    return VALID_SPANID_REGEX.test(spanId) && spanId !== INVALID_SPANID;\n}\n/**\n * Returns true if this {@link SpanContext} is valid.\n * @return true if this {@link SpanContext} is valid.\n */\nexport function isSpanContextValid(spanContext) {\n    return (isValidTraceId(spanContext.traceId) && isValidSpanId(spanContext.spanId));\n}\n/**\n * Wrap the given {@link SpanContext} in a new non-recording {@link Span}\n *\n * @param spanContext span context to be wrapped\n * @returns a new non-recording {@link Span} with the provided context\n */\nexport function wrapSpanContext(spanContext) {\n    return new NonRecordingSpan(spanContext);\n}\n//# sourceMappingURL=spancontext-utils.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { ContextAPI } from '../api/context';\nimport { getSpanContext, setSpan } from '../trace/context-utils';\nimport { NonRecordingSpan } from './NonRecordingSpan';\nimport { isSpanContextValid } from './spancontext-utils';\nvar contextApi = ContextAPI.getInstance();\n/**\n * No-op implementations of {@link Tracer}.\n */\nvar NoopTracer = /** @class */ (function () {\n    function NoopTracer() {\n    }\n    // startSpan starts a noop span.\n    NoopTracer.prototype.startSpan = function (name, options, context) {\n        if (context === void 0) { context = contextApi.active(); }\n        var root = Boolean(options === null || options === void 0 ? void 0 : options.root);\n        if (root) {\n            return new NonRecordingSpan();\n        }\n        var parentFromContext = context && getSpanContext(context);\n        if (isSpanContext(parentFromContext) &&\n            isSpanContextValid(parentFromContext)) {\n            return new NonRecordingSpan(parentFromContext);\n        }\n        else {\n            return new NonRecordingSpan();\n        }\n    };\n    NoopTracer.prototype.startActiveSpan = function (name, arg2, arg3, arg4) {\n        var opts;\n        var ctx;\n        var fn;\n        if (arguments.length < 2) {\n            return;\n        }\n        else if (arguments.length === 2) {\n            fn = arg2;\n        }\n        else if (arguments.length === 3) {\n            opts = arg2;\n            fn = arg3;\n        }\n        else {\n            opts = arg2;\n            ctx = arg3;\n            fn = arg4;\n        }\n        var parentContext = ctx !== null && ctx !== void 0 ? ctx : contextApi.active();\n        var span = this.startSpan(name, opts, parentContext);\n        var contextWithSpanSet = setSpan(parentContext, span);\n        return contextApi.with(contextWithSpanSet, fn, undefined, span);\n    };\n    return NoopTracer;\n}());\nexport { NoopTracer };\nfunction isSpanContext(spanContext) {\n    return (typeof spanContext === 'object' &&\n        typeof spanContext['spanId'] === 'string' &&\n        typeof spanContext['traceId'] === 'string' &&\n        typeof spanContext['traceFlags'] === 'number');\n}\n//# sourceMappingURL=NoopTracer.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { NoopTracer } from './NoopTracer';\nvar NOOP_TRACER = new NoopTracer();\n/**\n * Proxy tracer provided by the proxy tracer provider\n */\nvar ProxyTracer = /** @class */ (function () {\n    function ProxyTracer(_provider, name, version, options) {\n        this._provider = _provider;\n        this.name = name;\n        this.version = version;\n        this.options = options;\n    }\n    ProxyTracer.prototype.startSpan = function (name, options, context) {\n        return this._getTracer().startSpan(name, options, context);\n    };\n    ProxyTracer.prototype.startActiveSpan = function (_name, _options, _context, _fn) {\n        var tracer = this._getTracer();\n        return Reflect.apply(tracer.startActiveSpan, tracer, arguments);\n    };\n    /**\n     * Try to get a tracer from the proxy tracer provider.\n     * If the proxy tracer provider has no delegate, return a noop tracer.\n     */\n    ProxyTracer.prototype._getTracer = function () {\n        if (this._delegate) {\n            return this._delegate;\n        }\n        var tracer = this._provider.getDelegateTracer(this.name, this.version, this.options);\n        if (!tracer) {\n            return NOOP_TRACER;\n        }\n        this._delegate = tracer;\n        return this._delegate;\n    };\n    return ProxyTracer;\n}());\nexport { ProxyTracer };\n//# sourceMappingURL=ProxyTracer.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { NoopTracer } from './NoopTracer';\n/**\n * An implementation of the {@link TracerProvider} which returns an impotent\n * Tracer for all calls to `getTracer`.\n *\n * All operations are no-op.\n */\nvar NoopTracerProvider = /** @class */ (function () {\n    function NoopTracerProvider() {\n    }\n    NoopTracerProvider.prototype.getTracer = function (_name, _version, _options) {\n        return new NoopTracer();\n    };\n    return NoopTracerProvider;\n}());\nexport { NoopTracerProvider };\n//# sourceMappingURL=NoopTracerProvider.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { ProxyTracer } from './ProxyTracer';\nimport { NoopTracerProvider } from './NoopTracerProvider';\nvar NOOP_TRACER_PROVIDER = new NoopTracerProvider();\n/**\n * Tracer provider which provides {@link ProxyTracer}s.\n *\n * Before a delegate is set, tracers provided are NoOp.\n *   When a delegate is set, traces are provided from the delegate.\n *   When a delegate is set after tracers have already been provided,\n *   all tracers already provided will use the provided delegate implementation.\n */\nvar ProxyTracerProvider = /** @class */ (function () {\n    function ProxyTracerProvider() {\n    }\n    /**\n     * Get a {@link ProxyTracer}\n     */\n    ProxyTracerProvider.prototype.getTracer = function (name, version, options) {\n        var _a;\n        return ((_a = this.getDelegateTracer(name, version, options)) !== null && _a !== void 0 ? _a : new ProxyTracer(this, name, version, options));\n    };\n    ProxyTracerProvider.prototype.getDelegate = function () {\n        var _a;\n        return (_a = this._delegate) !== null && _a !== void 0 ? _a : NOOP_TRACER_PROVIDER;\n    };\n    /**\n     * Set the delegate tracer provider\n     */\n    ProxyTracerProvider.prototype.setDelegate = function (delegate) {\n        this._delegate = delegate;\n    };\n    ProxyTracerProvider.prototype.getDelegateTracer = function (name, version, options) {\n        var _a;\n        return (_a = this._delegate) === null || _a === void 0 ? void 0 : _a.getTracer(name, version, options);\n    };\n    return ProxyTracerProvider;\n}());\nexport { ProxyTracerProvider };\n//# sourceMappingURL=ProxyTracerProvider.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * @deprecated use the one declared in @opentelemetry/sdk-trace-base instead.\n * A sampling decision that determines how a {@link Span} will be recorded\n * and collected.\n */\nexport var SamplingDecision;\n(function (SamplingDecision) {\n    /**\n     * `Span.isRecording() === false`, span will not be recorded and all events\n     * and attributes will be dropped.\n     */\n    SamplingDecision[SamplingDecision[\"NOT_RECORD\"] = 0] = \"NOT_RECORD\";\n    /**\n     * `Span.isRecording() === true`, but `Sampled` flag in {@link TraceFlags}\n     * MUST NOT be set.\n     */\n    SamplingDecision[SamplingDecision[\"RECORD\"] = 1] = \"RECORD\";\n    /**\n     * `Span.isRecording() === true` AND `Sampled` flag in {@link TraceFlags}\n     * MUST be set.\n     */\n    SamplingDecision[SamplingDecision[\"RECORD_AND_SAMPLED\"] = 2] = \"RECORD_AND_SAMPLED\";\n})(SamplingDecision || (SamplingDecision = {}));\n//# sourceMappingURL=SamplingResult.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport var SpanKind;\n(function (SpanKind) {\n    /** Default value. Indicates that the span is used internally. */\n    SpanKind[SpanKind[\"INTERNAL\"] = 0] = \"INTERNAL\";\n    /**\n     * Indicates that the span covers server-side handling of an RPC or other\n     * remote request.\n     */\n    SpanKind[SpanKind[\"SERVER\"] = 1] = \"SERVER\";\n    /**\n     * Indicates that the span covers the client-side wrapper around an RPC or\n     * other remote request.\n     */\n    SpanKind[SpanKind[\"CLIENT\"] = 2] = \"CLIENT\";\n    /**\n     * Indicates that the span describes producer sending a message to a\n     * broker. Unlike client and server, there is no direct critical path latency\n     * relationship between producer and consumer spans.\n     */\n    SpanKind[SpanKind[\"PRODUCER\"] = 3] = \"PRODUCER\";\n    /**\n     * Indicates that the span describes consumer receiving a message from a\n     * broker. Unlike client and server, there is no direct critical path latency\n     * relationship between producer and consumer spans.\n     */\n    SpanKind[SpanKind[\"CONSUMER\"] = 4] = \"CONSUMER\";\n})(SpanKind || (SpanKind = {}));\n//# sourceMappingURL=span_kind.js.map","/**\n * An enumeration of status codes.\n */\nexport var SpanStatusCode;\n(function (SpanStatusCode) {\n    /**\n     * The default status.\n     */\n    SpanStatusCode[SpanStatusCode[\"UNSET\"] = 0] = \"UNSET\";\n    /**\n     * The operation has been validated by an Application developer or\n     * Operator to have completed successfully.\n     */\n    SpanStatusCode[SpanStatusCode[\"OK\"] = 1] = \"OK\";\n    /**\n     * The operation contains an error.\n     */\n    SpanStatusCode[SpanStatusCode[\"ERROR\"] = 2] = \"ERROR\";\n})(SpanStatusCode || (SpanStatusCode = {}));\n//# sourceMappingURL=status.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// Split module-level variable definition into separate files to allow\n// tree-shaking on each api instance.\nimport { ContextAPI } from './api/context';\n/** Entrypoint for context API */\nexport var context = ContextAPI.getInstance();\n//# sourceMappingURL=context-api.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// Split module-level variable definition into separate files to allow\n// tree-shaking on each api instance.\nimport { DiagAPI } from './api/diag';\n/**\n * Entrypoint for Diag API.\n * Defines Diagnostic handler used for internal diagnostic logging operations.\n * The default provides a Noop DiagLogger implementation which may be changed via the\n * diag.setLogger(logger: DiagLogger) function.\n */\nexport var diag = DiagAPI.instance();\n//# sourceMappingURL=diag-api.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { NOOP_METER } from './NoopMeter';\n/**\n * An implementation of the {@link MeterProvider} which returns an impotent Meter\n * for all calls to `getMeter`\n */\nvar NoopMeterProvider = /** @class */ (function () {\n    function NoopMeterProvider() {\n    }\n    NoopMeterProvider.prototype.getMeter = function (_name, _version, _options) {\n        return NOOP_METER;\n    };\n    return NoopMeterProvider;\n}());\nexport { NoopMeterProvider };\nexport var NOOP_METER_PROVIDER = new NoopMeterProvider();\n//# sourceMappingURL=NoopMeterProvider.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { NOOP_METER_PROVIDER } from '../metrics/NoopMeterProvider';\nimport { getGlobal, registerGlobal, unregisterGlobal, } from '../internal/global-utils';\nimport { DiagAPI } from './diag';\nvar API_NAME = 'metrics';\n/**\n * Singleton object which represents the entry point to the OpenTelemetry Metrics API\n */\nvar MetricsAPI = /** @class */ (function () {\n    /** Empty private constructor prevents end users from constructing a new instance of the API */\n    function MetricsAPI() {\n    }\n    /** Get the singleton instance of the Metrics API */\n    MetricsAPI.getInstance = function () {\n        if (!this._instance) {\n            this._instance = new MetricsAPI();\n        }\n        return this._instance;\n    };\n    /**\n     * Set the current global meter provider.\n     * Returns true if the meter provider was successfully registered, else false.\n     */\n    MetricsAPI.prototype.setGlobalMeterProvider = function (provider) {\n        return registerGlobal(API_NAME, provider, DiagAPI.instance());\n    };\n    /**\n     * Returns the global meter provider.\n     */\n    MetricsAPI.prototype.getMeterProvider = function () {\n        return getGlobal(API_NAME) || NOOP_METER_PROVIDER;\n    };\n    /**\n     * Returns a meter from the global meter provider.\n     */\n    MetricsAPI.prototype.getMeter = function (name, version, options) {\n        return this.getMeterProvider().getMeter(name, version, options);\n    };\n    /** Remove the global meter provider */\n    MetricsAPI.prototype.disable = function () {\n        unregisterGlobal(API_NAME, DiagAPI.instance());\n    };\n    return MetricsAPI;\n}());\nexport { MetricsAPI };\n//# sourceMappingURL=metrics.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// Split module-level variable definition into separate files to allow\n// tree-shaking on each api instance.\nimport { MetricsAPI } from './api/metrics';\n/** Entrypoint for metrics API */\nexport var metrics = MetricsAPI.getInstance();\n//# sourceMappingURL=metrics-api.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * No-op implementations of {@link TextMapPropagator}.\n */\nvar NoopTextMapPropagator = /** @class */ (function () {\n    function NoopTextMapPropagator() {\n    }\n    /** Noop inject function does nothing */\n    NoopTextMapPropagator.prototype.inject = function (_context, _carrier) { };\n    /** Noop extract function does nothing and returns the input context */\n    NoopTextMapPropagator.prototype.extract = function (context, _carrier) {\n        return context;\n    };\n    NoopTextMapPropagator.prototype.fields = function () {\n        return [];\n    };\n    return NoopTextMapPropagator;\n}());\nexport { NoopTextMapPropagator };\n//# sourceMappingURL=NoopTextMapPropagator.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { ContextAPI } from '../api/context';\nimport { createContextKey } from '../context/context';\n/**\n * Baggage key\n */\nvar BAGGAGE_KEY = createContextKey('OpenTelemetry Baggage Key');\n/**\n * Retrieve the current baggage from the given context\n *\n * @param {Context} Context that manage all context values\n * @returns {Baggage} Extracted baggage from the context\n */\nexport function getBaggage(context) {\n    return context.getValue(BAGGAGE_KEY) || undefined;\n}\n/**\n * Retrieve the current baggage from the active/current context\n *\n * @returns {Baggage} Extracted baggage from the context\n */\nexport function getActiveBaggage() {\n    return getBaggage(ContextAPI.getInstance().active());\n}\n/**\n * Store a baggage in the given context\n *\n * @param {Context} Context that manage all context values\n * @param {Baggage} baggage that will be set in the actual context\n */\nexport function setBaggage(context, baggage) {\n    return context.setValue(BAGGAGE_KEY, baggage);\n}\n/**\n * Delete the baggage stored in the given context\n *\n * @param {Context} Context that manage all context values\n */\nexport function deleteBaggage(context) {\n    return context.deleteValue(BAGGAGE_KEY);\n}\n//# sourceMappingURL=context-helpers.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { getGlobal, registerGlobal, unregisterGlobal, } from '../internal/global-utils';\nimport { NoopTextMapPropagator } from '../propagation/NoopTextMapPropagator';\nimport { defaultTextMapGetter, defaultTextMapSetter, } from '../propagation/TextMapPropagator';\nimport { getBaggage, getActiveBaggage, setBaggage, deleteBaggage, } from '../baggage/context-helpers';\nimport { createBaggage } from '../baggage/utils';\nimport { DiagAPI } from './diag';\nvar API_NAME = 'propagation';\nvar NOOP_TEXT_MAP_PROPAGATOR = new NoopTextMapPropagator();\n/**\n * Singleton object which represents the entry point to the OpenTelemetry Propagation API\n */\nvar PropagationAPI = /** @class */ (function () {\n    /** Empty private constructor prevents end users from constructing a new instance of the API */\n    function PropagationAPI() {\n        this.createBaggage = createBaggage;\n        this.getBaggage = getBaggage;\n        this.getActiveBaggage = getActiveBaggage;\n        this.setBaggage = setBaggage;\n        this.deleteBaggage = deleteBaggage;\n    }\n    /** Get the singleton instance of the Propagator API */\n    PropagationAPI.getInstance = function () {\n        if (!this._instance) {\n            this._instance = new PropagationAPI();\n        }\n        return this._instance;\n    };\n    /**\n     * Set the current propagator.\n     *\n     * @returns true if the propagator was successfully registered, else false\n     */\n    PropagationAPI.prototype.setGlobalPropagator = function (propagator) {\n        return registerGlobal(API_NAME, propagator, DiagAPI.instance());\n    };\n    /**\n     * Inject context into a carrier to be propagated inter-process\n     *\n     * @param context Context carrying tracing data to inject\n     * @param carrier carrier to inject context into\n     * @param setter Function used to set values on the carrier\n     */\n    PropagationAPI.prototype.inject = function (context, carrier, setter) {\n        if (setter === void 0) { setter = defaultTextMapSetter; }\n        return this._getGlobalPropagator().inject(context, carrier, setter);\n    };\n    /**\n     * Extract context from a carrier\n     *\n     * @param context Context which the newly created context will inherit from\n     * @param carrier Carrier to extract context from\n     * @param getter Function used to extract keys from a carrier\n     */\n    PropagationAPI.prototype.extract = function (context, carrier, getter) {\n        if (getter === void 0) { getter = defaultTextMapGetter; }\n        return this._getGlobalPropagator().extract(context, carrier, getter);\n    };\n    /**\n     * Return a list of all fields which may be used by the propagator.\n     */\n    PropagationAPI.prototype.fields = function () {\n        return this._getGlobalPropagator().fields();\n    };\n    /** Remove the global propagator */\n    PropagationAPI.prototype.disable = function () {\n        unregisterGlobal(API_NAME, DiagAPI.instance());\n    };\n    PropagationAPI.prototype._getGlobalPropagator = function () {\n        return getGlobal(API_NAME) || NOOP_TEXT_MAP_PROPAGATOR;\n    };\n    return PropagationAPI;\n}());\nexport { PropagationAPI };\n//# sourceMappingURL=propagation.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// Split module-level variable definition into separate files to allow\n// tree-shaking on each api instance.\nimport { PropagationAPI } from './api/propagation';\n/** Entrypoint for propagation API */\nexport var propagation = PropagationAPI.getInstance();\n//# sourceMappingURL=propagation-api.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { getGlobal, registerGlobal, unregisterGlobal, } from '../internal/global-utils';\nimport { ProxyTracerProvider } from '../trace/ProxyTracerProvider';\nimport { isSpanContextValid, wrapSpanContext, } from '../trace/spancontext-utils';\nimport { deleteSpan, getActiveSpan, getSpan, getSpanContext, setSpan, setSpanContext, } from '../trace/context-utils';\nimport { DiagAPI } from './diag';\nvar API_NAME = 'trace';\n/**\n * Singleton object which represents the entry point to the OpenTelemetry Tracing API\n */\nvar TraceAPI = /** @class */ (function () {\n    /** Empty private constructor prevents end users from constructing a new instance of the API */\n    function TraceAPI() {\n        this._proxyTracerProvider = new ProxyTracerProvider();\n        this.wrapSpanContext = wrapSpanContext;\n        this.isSpanContextValid = isSpanContextValid;\n        this.deleteSpan = deleteSpan;\n        this.getSpan = getSpan;\n        this.getActiveSpan = getActiveSpan;\n        this.getSpanContext = getSpanContext;\n        this.setSpan = setSpan;\n        this.setSpanContext = setSpanContext;\n    }\n    /** Get the singleton instance of the Trace API */\n    TraceAPI.getInstance = function () {\n        if (!this._instance) {\n            this._instance = new TraceAPI();\n        }\n        return this._instance;\n    };\n    /**\n     * Set the current global tracer.\n     *\n     * @returns true if the tracer provider was successfully registered, else false\n     */\n    TraceAPI.prototype.setGlobalTracerProvider = function (provider) {\n        var success = registerGlobal(API_NAME, this._proxyTracerProvider, DiagAPI.instance());\n        if (success) {\n            this._proxyTracerProvider.setDelegate(provider);\n        }\n        return success;\n    };\n    /**\n     * Returns the global tracer provider.\n     */\n    TraceAPI.prototype.getTracerProvider = function () {\n        return getGlobal(API_NAME) || this._proxyTracerProvider;\n    };\n    /**\n     * Returns a tracer from the global tracer provider.\n     */\n    TraceAPI.prototype.getTracer = function (name, version) {\n        return this.getTracerProvider().getTracer(name, version);\n    };\n    /** Remove the global tracer provider */\n    TraceAPI.prototype.disable = function () {\n        unregisterGlobal(API_NAME, DiagAPI.instance());\n        this._proxyTracerProvider = new ProxyTracerProvider();\n    };\n    return TraceAPI;\n}());\nexport { TraceAPI };\n//# sourceMappingURL=trace.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// Split module-level variable definition into separate files to allow\n// tree-shaking on each api instance.\nimport { TraceAPI } from './api/trace';\n/** Entrypoint for trace API */\nexport var trace = TraceAPI.getInstance();\n//# sourceMappingURL=trace-api.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport var SeverityNumber;\n(function (SeverityNumber) {\n    SeverityNumber[SeverityNumber[\"UNSPECIFIED\"] = 0] = \"UNSPECIFIED\";\n    SeverityNumber[SeverityNumber[\"TRACE\"] = 1] = \"TRACE\";\n    SeverityNumber[SeverityNumber[\"TRACE2\"] = 2] = \"TRACE2\";\n    SeverityNumber[SeverityNumber[\"TRACE3\"] = 3] = \"TRACE3\";\n    SeverityNumber[SeverityNumber[\"TRACE4\"] = 4] = \"TRACE4\";\n    SeverityNumber[SeverityNumber[\"DEBUG\"] = 5] = \"DEBUG\";\n    SeverityNumber[SeverityNumber[\"DEBUG2\"] = 6] = \"DEBUG2\";\n    SeverityNumber[SeverityNumber[\"DEBUG3\"] = 7] = \"DEBUG3\";\n    SeverityNumber[SeverityNumber[\"DEBUG4\"] = 8] = \"DEBUG4\";\n    SeverityNumber[SeverityNumber[\"INFO\"] = 9] = \"INFO\";\n    SeverityNumber[SeverityNumber[\"INFO2\"] = 10] = \"INFO2\";\n    SeverityNumber[SeverityNumber[\"INFO3\"] = 11] = \"INFO3\";\n    SeverityNumber[SeverityNumber[\"INFO4\"] = 12] = \"INFO4\";\n    SeverityNumber[SeverityNumber[\"WARN\"] = 13] = \"WARN\";\n    SeverityNumber[SeverityNumber[\"WARN2\"] = 14] = \"WARN2\";\n    SeverityNumber[SeverityNumber[\"WARN3\"] = 15] = \"WARN3\";\n    SeverityNumber[SeverityNumber[\"WARN4\"] = 16] = \"WARN4\";\n    SeverityNumber[SeverityNumber[\"ERROR\"] = 17] = \"ERROR\";\n    SeverityNumber[SeverityNumber[\"ERROR2\"] = 18] = \"ERROR2\";\n    SeverityNumber[SeverityNumber[\"ERROR3\"] = 19] = \"ERROR3\";\n    SeverityNumber[SeverityNumber[\"ERROR4\"] = 20] = \"ERROR4\";\n    SeverityNumber[SeverityNumber[\"FATAL\"] = 21] = \"FATAL\";\n    SeverityNumber[SeverityNumber[\"FATAL2\"] = 22] = \"FATAL2\";\n    SeverityNumber[SeverityNumber[\"FATAL3\"] = 23] = \"FATAL3\";\n    SeverityNumber[SeverityNumber[\"FATAL4\"] = 24] = \"FATAL4\";\n})(SeverityNumber || (SeverityNumber = {}));\n//# sourceMappingURL=LogRecord.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar NoopLogger = /** @class */ (function () {\n    function NoopLogger() {\n    }\n    NoopLogger.prototype.emit = function (_logRecord) { };\n    return NoopLogger;\n}());\nexport { NoopLogger };\nexport var NOOP_LOGGER = new NoopLogger();\n//# sourceMappingURL=NoopLogger.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { NoopLogger } from './NoopLogger';\nvar NoopLoggerProvider = /** @class */ (function () {\n    function NoopLoggerProvider() {\n    }\n    NoopLoggerProvider.prototype.getLogger = function (_name, _version, _options) {\n        return new NoopLogger();\n    };\n    return NoopLoggerProvider;\n}());\nexport { NoopLoggerProvider };\nexport var NOOP_LOGGER_PROVIDER = new NoopLoggerProvider();\n//# sourceMappingURL=NoopLoggerProvider.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// Updates to this file should also be replicated to @opentelemetry/api and\n// @opentelemetry/core too.\n/**\n * - globalThis (New standard)\n * - self (Will return the current window instance for supported browsers)\n * - window (fallback for older browser implementations)\n * - global (NodeJS implementation)\n * - <object> (When all else fails)\n */\n/** only globals that common to node and browsers are allowed */\n// eslint-disable-next-line node/no-unsupported-features/es-builtins, no-undef\nexport var _globalThis = typeof globalThis === 'object'\n    ? globalThis\n    : typeof self === 'object'\n        ? self\n        : typeof window === 'object'\n            ? window\n            : typeof global === 'object'\n                ? global\n                : {};\n//# sourceMappingURL=globalThis.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { _globalThis } from '../platform';\nexport var GLOBAL_LOGS_API_KEY = Symbol.for('io.opentelemetry.js.api.logs');\nexport var _global = _globalThis;\n/**\n * Make a function which accepts a version integer and returns the instance of an API if the version\n * is compatible, or a fallback version (usually NOOP) if it is not.\n *\n * @param requiredVersion Backwards compatibility version which is required to return the instance\n * @param instance Instance which should be returned if the required version is compatible\n * @param fallback Fallback instance, usually NOOP, which will be returned if the required version is not compatible\n */\nexport function makeGetter(requiredVersion, instance, fallback) {\n    return function (version) {\n        return version === requiredVersion ? instance : fallback;\n    };\n}\n/**\n * A number which should be incremented each time a backwards incompatible\n * change is made to the API. This number is used when an API package\n * attempts to access the global API to ensure it is getting a compatible\n * version. If the global API is not compatible with the API package\n * attempting to get it, a NOOP API implementation will be returned.\n */\nexport var API_BACKWARDS_COMPATIBILITY_VERSION = 1;\n//# sourceMappingURL=global-utils.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { API_BACKWARDS_COMPATIBILITY_VERSION, GLOBAL_LOGS_API_KEY, _global, makeGetter, } from '../internal/global-utils';\nimport { NOOP_LOGGER_PROVIDER } from '../NoopLoggerProvider';\nvar LogsAPI = /** @class */ (function () {\n    function LogsAPI() {\n    }\n    LogsAPI.getInstance = function () {\n        if (!this._instance) {\n            this._instance = new LogsAPI();\n        }\n        return this._instance;\n    };\n    LogsAPI.prototype.setGlobalLoggerProvider = function (provider) {\n        if (_global[GLOBAL_LOGS_API_KEY]) {\n            return this.getLoggerProvider();\n        }\n        _global[GLOBAL_LOGS_API_KEY] = makeGetter(API_BACKWARDS_COMPATIBILITY_VERSION, provider, NOOP_LOGGER_PROVIDER);\n        return provider;\n    };\n    /**\n     * Returns the global logger provider.\n     *\n     * @returns LoggerProvider\n     */\n    LogsAPI.prototype.getLoggerProvider = function () {\n        var _a, _b;\n        return ((_b = (_a = _global[GLOBAL_LOGS_API_KEY]) === null || _a === void 0 ? void 0 : _a.call(_global, API_BACKWARDS_COMPATIBILITY_VERSION)) !== null && _b !== void 0 ? _b : NOOP_LOGGER_PROVIDER);\n    };\n    /**\n     * Returns a logger from the global logger provider.\n     *\n     * @returns Logger\n     */\n    LogsAPI.prototype.getLogger = function (name, version, options) {\n        return this.getLoggerProvider().getLogger(name, version, options);\n    };\n    /** Remove the global logger provider */\n    LogsAPI.prototype.disable = function () {\n        delete _global[GLOBAL_LOGS_API_KEY];\n    };\n    return LogsAPI;\n}());\nexport { LogsAPI };\n//# sourceMappingURL=logs.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport * from './types/Logger';\nexport * from './types/LoggerProvider';\nexport * from './types/LogRecord';\nexport * from './types/LoggerOptions';\nexport * from './NoopLogger';\nexport * from './NoopLoggerProvider';\nimport { LogsAPI } from './api/logs';\nexport var logs = LogsAPI.getInstance();\n//# sourceMappingURL=index.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * check if an object has addEventListener and removeEventListener functions then it will return true.\n * Generally only called with a `TargetWithEvents` but may be called with an unknown / any.\n * @param obj - The object to check.\n */\nexport function isListenerObject(obj) {\n    if (obj === void 0) { obj = {}; }\n    return (typeof obj.addEventListener === 'function' &&\n        typeof obj.removeEventListener === 'function');\n}\n//# sourceMappingURL=util.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/// <reference types=\"zone.js\" />\nimport { ROOT_CONTEXT } from '@opentelemetry/api';\nimport { isListenerObject } from './util';\n/* Key name to be used to save a context reference in Zone */\nvar ZONE_CONTEXT_KEY = 'OT_ZONE_CONTEXT';\n/**\n * ZoneContextManager\n * This module provides an easy functionality for tracing action between asynchronous operations in web.\n * It was not possible with standard [StackContextManager]{@link https://github.com/open-telemetry/opentelemetry-js/blob/main/packages/opentelemetry-sdk-trace-web/src/StackContextManager.ts}.\n * It heavily depends on [zone.js]{@link https://www.npmjs.com/package/zone.js}.\n * It stores the information about context in zone. Each Context will have always new Zone;\n * It also supports binding a certain Span to a target that has \"addEventListener\" and \"removeEventListener\".\n * When this happens a new zone is being created and the provided Span is being assigned to this zone.\n */\nvar ZoneContextManager = /** @class */ (function () {\n    function ZoneContextManager() {\n        /**\n         * whether the context manager is enabled or not\n         */\n        this._enabled = false;\n        /**\n         * Helps to create a unique name for the zones - part of zone name\n         */\n        this._zoneCounter = 0;\n    }\n    /**\n     * Returns the active context from certain zone name\n     * @param activeZone\n     */\n    ZoneContextManager.prototype._activeContextFromZone = function (activeZone) {\n        return (activeZone && activeZone.get(ZONE_CONTEXT_KEY)) || ROOT_CONTEXT;\n    };\n    /**\n     * @param context A context (span) to be executed within target function\n     * @param target Function to be executed within the context\n     */\n    // eslint-disable-next-line @typescript-eslint/ban-types\n    ZoneContextManager.prototype._bindFunction = function (context, target) {\n        var manager = this;\n        var contextWrapper = function () {\n            var _this = this;\n            var args = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                args[_i] = arguments[_i];\n            }\n            return manager.with(context, function () { return target.apply(_this, args); });\n        };\n        Object.defineProperty(contextWrapper, 'length', {\n            enumerable: false,\n            configurable: true,\n            writable: false,\n            value: target.length,\n        });\n        return contextWrapper;\n    };\n    /**\n     * @param context A context (span) to be bind to target\n     * @param obj target object on which the listeners will be patched\n     */\n    ZoneContextManager.prototype._bindListener = function (context, obj) {\n        var target = obj;\n        if (target.__ot_listeners !== undefined) {\n            return obj;\n        }\n        target.__ot_listeners = {};\n        if (typeof target.addEventListener === 'function') {\n            target.addEventListener = this._patchAddEventListener(target, target.addEventListener, context);\n        }\n        if (typeof target.removeEventListener === 'function') {\n            target.removeEventListener = this._patchRemoveEventListener(target, target.removeEventListener);\n        }\n        return obj;\n    };\n    /**\n     * Creates a new unique zone name\n     */\n    ZoneContextManager.prototype._createZoneName = function () {\n        this._zoneCounter++;\n        var random = Math.random();\n        return this._zoneCounter + \"-\" + random;\n    };\n    /**\n     * Creates a new zone\n     * @param zoneName zone name\n     * @param context A context (span) to be bind with Zone\n     */\n    ZoneContextManager.prototype._createZone = function (zoneName, context) {\n        var _a;\n        return Zone.current.fork({\n            name: zoneName,\n            properties: (_a = {},\n                _a[ZONE_CONTEXT_KEY] = context,\n                _a),\n        });\n    };\n    /**\n     * Returns the active zone\n     */\n    ZoneContextManager.prototype._getActiveZone = function () {\n        return Zone.current;\n    };\n    /**\n     * Patches addEventListener method\n     * @param target any target that has \"addEventListener\" method\n     * @param original reference to the patched method\n     * @param [context] context to be bind to the listener\n     */\n    ZoneContextManager.prototype._patchAddEventListener = function (target, original, context) {\n        var contextManager = this;\n        return function (event, listener, opts) {\n            if (target.__ot_listeners === undefined) {\n                target.__ot_listeners = {};\n            }\n            var listeners = target.__ot_listeners[event];\n            if (listeners === undefined) {\n                listeners = new WeakMap();\n                target.__ot_listeners[event] = listeners;\n            }\n            var patchedListener = contextManager.bind(context, listener);\n            // store a weak reference of the user listener to ours\n            listeners.set(listener, patchedListener);\n            return original.call(this, event, patchedListener, opts);\n        };\n    };\n    /**\n     * Patches removeEventListener method\n     * @param target any target that has \"removeEventListener\" method\n     * @param original reference to the patched method\n     */\n    ZoneContextManager.prototype._patchRemoveEventListener = function (target, original) {\n        return function (event, listener) {\n            if (target.__ot_listeners === undefined ||\n                target.__ot_listeners[event] === undefined) {\n                return original.call(this, event, listener);\n            }\n            var events = target.__ot_listeners[event];\n            var patchedListener = events.get(listener);\n            events.delete(listener);\n            return original.call(this, event, patchedListener || listener);\n        };\n    };\n    /**\n     * Returns the active context\n     */\n    ZoneContextManager.prototype.active = function () {\n        if (!this._enabled) {\n            return ROOT_CONTEXT;\n        }\n        var activeZone = this._getActiveZone();\n        var active = this._activeContextFromZone(activeZone);\n        if (active) {\n            return active;\n        }\n        return ROOT_CONTEXT;\n    };\n    /**\n     * Binds a the certain context or the active one to the target function and then returns the target\n     * @param context A context (span) to be bind to target\n     * @param target a function or event emitter. When target or one of its callbacks is called,\n     *  the provided context will be used as the active context for the duration of the call.\n     */\n    ZoneContextManager.prototype.bind = function (context, target) {\n        // if no specific context to propagate is given, we use the current one\n        if (context === undefined) {\n            context = this.active();\n        }\n        if (typeof target === 'function') {\n            return this._bindFunction(context, target);\n        }\n        else if (isListenerObject(target)) {\n            this._bindListener(context, target);\n        }\n        return target;\n    };\n    /**\n     * Disable the context manager (clears all the contexts)\n     */\n    ZoneContextManager.prototype.disable = function () {\n        this._enabled = false;\n        return this;\n    };\n    /**\n     * Enables the context manager and creates a default(root) context\n     */\n    ZoneContextManager.prototype.enable = function () {\n        this._enabled = true;\n        return this;\n    };\n    /**\n     * Calls the callback function [fn] with the provided [context].\n     *     If [context] is undefined then it will use the active context.\n     *     The context will be set as active\n     * @param context A context (span) to be called with provided callback\n     * @param fn Callback function\n     * @param thisArg optional receiver to be used for calling fn\n     * @param args optional arguments forwarded to fn\n     */\n    ZoneContextManager.prototype.with = function (context, fn, thisArg) {\n        var args = [];\n        for (var _i = 3; _i < arguments.length; _i++) {\n            args[_i - 3] = arguments[_i];\n        }\n        var zoneName = this._createZoneName();\n        var newZone = this._createZone(zoneName, context);\n        return newZone.run(fn, thisArg, args);\n    };\n    return ZoneContextManager;\n}());\nexport { ZoneContextManager };\n//# sourceMappingURL=ZoneContextManager.js.map","'use strict';\n/**\n * @license Angular v<unknown>\n * (c) 2010-2024 Google LLC. https://angular.io/\n * License: MIT\n */\nconst global = globalThis;\n// __Zone_symbol_prefix global can be used to override the default zone\n// symbol prefix with a custom one if needed.\nfunction __symbol__(name) {\n    const symbolPrefix = global['__Zone_symbol_prefix'] || '__zone_symbol__';\n    return symbolPrefix + name;\n}\nfunction initZone() {\n    const performance = global['performance'];\n    function mark(name) {\n        performance && performance['mark'] && performance['mark'](name);\n    }\n    function performanceMeasure(name, label) {\n        performance && performance['measure'] && performance['measure'](name, label);\n    }\n    mark('Zone');\n    class ZoneImpl {\n        // tslint:disable-next-line:require-internal-with-underscore\n        static { this.__symbol__ = __symbol__; }\n        static assertZonePatched() {\n            if (global['Promise'] !== patches['ZoneAwarePromise']) {\n                throw new Error('Zone.js has detected that ZoneAwarePromise `(window|global).Promise` ' +\n                    'has been overwritten.\\n' +\n                    'Most likely cause is that a Promise polyfill has been loaded ' +\n                    'after Zone.js (Polyfilling Promise api is not necessary when zone.js is loaded. ' +\n                    'If you must load one, do so before loading zone.js.)');\n            }\n        }\n        static get root() {\n            let zone = ZoneImpl.current;\n            while (zone.parent) {\n                zone = zone.parent;\n            }\n            return zone;\n        }\n        static get current() {\n            return _currentZoneFrame.zone;\n        }\n        static get currentTask() {\n            return _currentTask;\n        }\n        // tslint:disable-next-line:require-internal-with-underscore\n        static __load_patch(name, fn, ignoreDuplicate = false) {\n            if (patches.hasOwnProperty(name)) {\n                // `checkDuplicate` option is defined from global variable\n                // so it works for all modules.\n                // `ignoreDuplicate` can work for the specified module\n                const checkDuplicate = global[__symbol__('forceDuplicateZoneCheck')] === true;\n                if (!ignoreDuplicate && checkDuplicate) {\n                    throw Error('Already loaded patch: ' + name);\n                }\n            }\n            else if (!global['__Zone_disable_' + name]) {\n                const perfName = 'Zone:' + name;\n                mark(perfName);\n                patches[name] = fn(global, ZoneImpl, _api);\n                performanceMeasure(perfName, perfName);\n            }\n        }\n        get parent() {\n            return this._parent;\n        }\n        get name() {\n            return this._name;\n        }\n        constructor(parent, zoneSpec) {\n            this._parent = parent;\n            this._name = zoneSpec ? zoneSpec.name || 'unnamed' : '<root>';\n            this._properties = (zoneSpec && zoneSpec.properties) || {};\n            this._zoneDelegate = new _ZoneDelegate(this, this._parent && this._parent._zoneDelegate, zoneSpec);\n        }\n        get(key) {\n            const zone = this.getZoneWith(key);\n            if (zone)\n                return zone._properties[key];\n        }\n        getZoneWith(key) {\n            let current = this;\n            while (current) {\n                if (current._properties.hasOwnProperty(key)) {\n                    return current;\n                }\n                current = current._parent;\n            }\n            return null;\n        }\n        fork(zoneSpec) {\n            if (!zoneSpec)\n                throw new Error('ZoneSpec required!');\n            return this._zoneDelegate.fork(this, zoneSpec);\n        }\n        wrap(callback, source) {\n            if (typeof callback !== 'function') {\n                throw new Error('Expecting function got: ' + callback);\n            }\n            const _callback = this._zoneDelegate.intercept(this, callback, source);\n            const zone = this;\n            return function () {\n                return zone.runGuarded(_callback, this, arguments, source);\n            };\n        }\n        run(callback, applyThis, applyArgs, source) {\n            _currentZoneFrame = { parent: _currentZoneFrame, zone: this };\n            try {\n                return this._zoneDelegate.invoke(this, callback, applyThis, applyArgs, source);\n            }\n            finally {\n                _currentZoneFrame = _currentZoneFrame.parent;\n            }\n        }\n        runGuarded(callback, applyThis = null, applyArgs, source) {\n            _currentZoneFrame = { parent: _currentZoneFrame, zone: this };\n            try {\n                try {\n                    return this._zoneDelegate.invoke(this, callback, applyThis, applyArgs, source);\n                }\n                catch (error) {\n                    if (this._zoneDelegate.handleError(this, error)) {\n                        throw error;\n                    }\n                }\n            }\n            finally {\n                _currentZoneFrame = _currentZoneFrame.parent;\n            }\n        }\n        runTask(task, applyThis, applyArgs) {\n            if (task.zone != this) {\n                throw new Error('A task can only be run in the zone of creation! (Creation: ' +\n                    (task.zone || NO_ZONE).name +\n                    '; Execution: ' +\n                    this.name +\n                    ')');\n            }\n            const zoneTask = task;\n            // https://github.com/angular/zone.js/issues/778, sometimes eventTask\n            // will run in notScheduled(canceled) state, we should not try to\n            // run such kind of task but just return\n            const { type, data: { isPeriodic = false, isRefreshable = false } = {} } = task;\n            if (task.state === notScheduled && (type === eventTask || type === macroTask)) {\n                return;\n            }\n            const reEntryGuard = task.state != running;\n            reEntryGuard && zoneTask._transitionTo(running, scheduled);\n            const previousTask = _currentTask;\n            _currentTask = zoneTask;\n            _currentZoneFrame = { parent: _currentZoneFrame, zone: this };\n            try {\n                if (type == macroTask && task.data && !isPeriodic && !isRefreshable) {\n                    task.cancelFn = undefined;\n                }\n                try {\n                    return this._zoneDelegate.invokeTask(this, zoneTask, applyThis, applyArgs);\n                }\n                catch (error) {\n                    if (this._zoneDelegate.handleError(this, error)) {\n                        throw error;\n                    }\n                }\n            }\n            finally {\n                // if the task's state is notScheduled or unknown, then it has already been cancelled\n                // we should not reset the state to scheduled\n                const state = task.state;\n                if (state !== notScheduled && state !== unknown) {\n                    if (type == eventTask || isPeriodic || (isRefreshable && state === scheduling)) {\n                        reEntryGuard && zoneTask._transitionTo(scheduled, running, scheduling);\n                    }\n                    else {\n                        const zoneDelegates = zoneTask._zoneDelegates;\n                        this._updateTaskCount(zoneTask, -1);\n                        reEntryGuard && zoneTask._transitionTo(notScheduled, running, notScheduled);\n                        if (isRefreshable) {\n                            zoneTask._zoneDelegates = zoneDelegates;\n                        }\n                    }\n                }\n                _currentZoneFrame = _currentZoneFrame.parent;\n                _currentTask = previousTask;\n            }\n        }\n        scheduleTask(task) {\n            if (task.zone && task.zone !== this) {\n                // check if the task was rescheduled, the newZone\n                // should not be the children of the original zone\n                let newZone = this;\n                while (newZone) {\n                    if (newZone === task.zone) {\n                        throw Error(`can not reschedule task to ${this.name} which is descendants of the original zone ${task.zone.name}`);\n                    }\n                    newZone = newZone.parent;\n                }\n            }\n            task._transitionTo(scheduling, notScheduled);\n            const zoneDelegates = [];\n            task._zoneDelegates = zoneDelegates;\n            task._zone = this;\n            try {\n                task = this._zoneDelegate.scheduleTask(this, task);\n            }\n            catch (err) {\n                // should set task's state to unknown when scheduleTask throw error\n                // because the err may from reschedule, so the fromState maybe notScheduled\n                task._transitionTo(unknown, scheduling, notScheduled);\n                // TODO: @JiaLiPassion, should we check the result from handleError?\n                this._zoneDelegate.handleError(this, err);\n                throw err;\n            }\n            if (task._zoneDelegates === zoneDelegates) {\n                // we have to check because internally the delegate can reschedule the task.\n                this._updateTaskCount(task, 1);\n            }\n            if (task.state == scheduling) {\n                task._transitionTo(scheduled, scheduling);\n            }\n            return task;\n        }\n        scheduleMicroTask(source, callback, data, customSchedule) {\n            return this.scheduleTask(new ZoneTask(microTask, source, callback, data, customSchedule, undefined));\n        }\n        scheduleMacroTask(source, callback, data, customSchedule, customCancel) {\n            return this.scheduleTask(new ZoneTask(macroTask, source, callback, data, customSchedule, customCancel));\n        }\n        scheduleEventTask(source, callback, data, customSchedule, customCancel) {\n            return this.scheduleTask(new ZoneTask(eventTask, source, callback, data, customSchedule, customCancel));\n        }\n        cancelTask(task) {\n            if (task.zone != this)\n                throw new Error('A task can only be cancelled in the zone of creation! (Creation: ' +\n                    (task.zone || NO_ZONE).name +\n                    '; Execution: ' +\n                    this.name +\n                    ')');\n            if (task.state !== scheduled && task.state !== running) {\n                return;\n            }\n            task._transitionTo(canceling, scheduled, running);\n            try {\n                this._zoneDelegate.cancelTask(this, task);\n            }\n            catch (err) {\n                // if error occurs when cancelTask, transit the state to unknown\n                task._transitionTo(unknown, canceling);\n                this._zoneDelegate.handleError(this, err);\n                throw err;\n            }\n            this._updateTaskCount(task, -1);\n            task._transitionTo(notScheduled, canceling);\n            task.runCount = -1;\n            return task;\n        }\n        _updateTaskCount(task, count) {\n            const zoneDelegates = task._zoneDelegates;\n            if (count == -1) {\n                task._zoneDelegates = null;\n            }\n            for (let i = 0; i < zoneDelegates.length; i++) {\n                zoneDelegates[i]._updateTaskCount(task.type, count);\n            }\n        }\n    }\n    const DELEGATE_ZS = {\n        name: '',\n        onHasTask: (delegate, _, target, hasTaskState) => delegate.hasTask(target, hasTaskState),\n        onScheduleTask: (delegate, _, target, task) => delegate.scheduleTask(target, task),\n        onInvokeTask: (delegate, _, target, task, applyThis, applyArgs) => delegate.invokeTask(target, task, applyThis, applyArgs),\n        onCancelTask: (delegate, _, target, task) => delegate.cancelTask(target, task),\n    };\n    class _ZoneDelegate {\n        get zone() {\n            return this._zone;\n        }\n        constructor(zone, parentDelegate, zoneSpec) {\n            this._taskCounts = {\n                'microTask': 0,\n                'macroTask': 0,\n                'eventTask': 0,\n            };\n            this._zone = zone;\n            this._parentDelegate = parentDelegate;\n            this._forkZS = zoneSpec && (zoneSpec && zoneSpec.onFork ? zoneSpec : parentDelegate._forkZS);\n            this._forkDlgt = zoneSpec && (zoneSpec.onFork ? parentDelegate : parentDelegate._forkDlgt);\n            this._forkCurrZone =\n                zoneSpec && (zoneSpec.onFork ? this._zone : parentDelegate._forkCurrZone);\n            this._interceptZS =\n                zoneSpec && (zoneSpec.onIntercept ? zoneSpec : parentDelegate._interceptZS);\n            this._interceptDlgt =\n                zoneSpec && (zoneSpec.onIntercept ? parentDelegate : parentDelegate._interceptDlgt);\n            this._interceptCurrZone =\n                zoneSpec && (zoneSpec.onIntercept ? this._zone : parentDelegate._interceptCurrZone);\n            this._invokeZS = zoneSpec && (zoneSpec.onInvoke ? zoneSpec : parentDelegate._invokeZS);\n            this._invokeDlgt =\n                zoneSpec && (zoneSpec.onInvoke ? parentDelegate : parentDelegate._invokeDlgt);\n            this._invokeCurrZone =\n                zoneSpec && (zoneSpec.onInvoke ? this._zone : parentDelegate._invokeCurrZone);\n            this._handleErrorZS =\n                zoneSpec && (zoneSpec.onHandleError ? zoneSpec : parentDelegate._handleErrorZS);\n            this._handleErrorDlgt =\n                zoneSpec && (zoneSpec.onHandleError ? parentDelegate : parentDelegate._handleErrorDlgt);\n            this._handleErrorCurrZone =\n                zoneSpec && (zoneSpec.onHandleError ? this._zone : parentDelegate._handleErrorCurrZone);\n            this._scheduleTaskZS =\n                zoneSpec && (zoneSpec.onScheduleTask ? zoneSpec : parentDelegate._scheduleTaskZS);\n            this._scheduleTaskDlgt =\n                zoneSpec && (zoneSpec.onScheduleTask ? parentDelegate : parentDelegate._scheduleTaskDlgt);\n            this._scheduleTaskCurrZone =\n                zoneSpec && (zoneSpec.onScheduleTask ? this._zone : parentDelegate._scheduleTaskCurrZone);\n            this._invokeTaskZS =\n                zoneSpec && (zoneSpec.onInvokeTask ? zoneSpec : parentDelegate._invokeTaskZS);\n            this._invokeTaskDlgt =\n                zoneSpec && (zoneSpec.onInvokeTask ? parentDelegate : parentDelegate._invokeTaskDlgt);\n            this._invokeTaskCurrZone =\n                zoneSpec && (zoneSpec.onInvokeTask ? this._zone : parentDelegate._invokeTaskCurrZone);\n            this._cancelTaskZS =\n                zoneSpec && (zoneSpec.onCancelTask ? zoneSpec : parentDelegate._cancelTaskZS);\n            this._cancelTaskDlgt =\n                zoneSpec && (zoneSpec.onCancelTask ? parentDelegate : parentDelegate._cancelTaskDlgt);\n            this._cancelTaskCurrZone =\n                zoneSpec && (zoneSpec.onCancelTask ? this._zone : parentDelegate._cancelTaskCurrZone);\n            this._hasTaskZS = null;\n            this._hasTaskDlgt = null;\n            this._hasTaskDlgtOwner = null;\n            this._hasTaskCurrZone = null;\n            const zoneSpecHasTask = zoneSpec && zoneSpec.onHasTask;\n            const parentHasTask = parentDelegate && parentDelegate._hasTaskZS;\n            if (zoneSpecHasTask || parentHasTask) {\n                // If we need to report hasTask, than this ZS needs to do ref counting on tasks. In such\n                // a case all task related interceptors must go through this ZD. We can't short circuit it.\n                this._hasTaskZS = zoneSpecHasTask ? zoneSpec : DELEGATE_ZS;\n                this._hasTaskDlgt = parentDelegate;\n                this._hasTaskDlgtOwner = this;\n                this._hasTaskCurrZone = this._zone;\n                if (!zoneSpec.onScheduleTask) {\n                    this._scheduleTaskZS = DELEGATE_ZS;\n                    this._scheduleTaskDlgt = parentDelegate;\n                    this._scheduleTaskCurrZone = this._zone;\n                }\n                if (!zoneSpec.onInvokeTask) {\n                    this._invokeTaskZS = DELEGATE_ZS;\n                    this._invokeTaskDlgt = parentDelegate;\n                    this._invokeTaskCurrZone = this._zone;\n                }\n                if (!zoneSpec.onCancelTask) {\n                    this._cancelTaskZS = DELEGATE_ZS;\n                    this._cancelTaskDlgt = parentDelegate;\n                    this._cancelTaskCurrZone = this._zone;\n                }\n            }\n        }\n        fork(targetZone, zoneSpec) {\n            return this._forkZS\n                ? this._forkZS.onFork(this._forkDlgt, this.zone, targetZone, zoneSpec)\n                : new ZoneImpl(targetZone, zoneSpec);\n        }\n        intercept(targetZone, callback, source) {\n            return this._interceptZS\n                ? this._interceptZS.onIntercept(this._interceptDlgt, this._interceptCurrZone, targetZone, callback, source)\n                : callback;\n        }\n        invoke(targetZone, callback, applyThis, applyArgs, source) {\n            return this._invokeZS\n                ? this._invokeZS.onInvoke(this._invokeDlgt, this._invokeCurrZone, targetZone, callback, applyThis, applyArgs, source)\n                : callback.apply(applyThis, applyArgs);\n        }\n        handleError(targetZone, error) {\n            return this._handleErrorZS\n                ? this._handleErrorZS.onHandleError(this._handleErrorDlgt, this._handleErrorCurrZone, targetZone, error)\n                : true;\n        }\n        scheduleTask(targetZone, task) {\n            let returnTask = task;\n            if (this._scheduleTaskZS) {\n                if (this._hasTaskZS) {\n                    returnTask._zoneDelegates.push(this._hasTaskDlgtOwner);\n                }\n                returnTask = this._scheduleTaskZS.onScheduleTask(this._scheduleTaskDlgt, this._scheduleTaskCurrZone, targetZone, task);\n                if (!returnTask)\n                    returnTask = task;\n            }\n            else {\n                if (task.scheduleFn) {\n                    task.scheduleFn(task);\n                }\n                else if (task.type == microTask) {\n                    scheduleMicroTask(task);\n                }\n                else {\n                    throw new Error('Task is missing scheduleFn.');\n                }\n            }\n            return returnTask;\n        }\n        invokeTask(targetZone, task, applyThis, applyArgs) {\n            return this._invokeTaskZS\n                ? this._invokeTaskZS.onInvokeTask(this._invokeTaskDlgt, this._invokeTaskCurrZone, targetZone, task, applyThis, applyArgs)\n                : task.callback.apply(applyThis, applyArgs);\n        }\n        cancelTask(targetZone, task) {\n            let value;\n            if (this._cancelTaskZS) {\n                value = this._cancelTaskZS.onCancelTask(this._cancelTaskDlgt, this._cancelTaskCurrZone, targetZone, task);\n            }\n            else {\n                if (!task.cancelFn) {\n                    throw Error('Task is not cancelable');\n                }\n                value = task.cancelFn(task);\n            }\n            return value;\n        }\n        hasTask(targetZone, isEmpty) {\n            // hasTask should not throw error so other ZoneDelegate\n            // can still trigger hasTask callback\n            try {\n                this._hasTaskZS &&\n                    this._hasTaskZS.onHasTask(this._hasTaskDlgt, this._hasTaskCurrZone, targetZone, isEmpty);\n            }\n            catch (err) {\n                this.handleError(targetZone, err);\n            }\n        }\n        // tslint:disable-next-line:require-internal-with-underscore\n        _updateTaskCount(type, count) {\n            const counts = this._taskCounts;\n            const prev = counts[type];\n            const next = (counts[type] = prev + count);\n            if (next < 0) {\n                throw new Error('More tasks executed then were scheduled.');\n            }\n            if (prev == 0 || next == 0) {\n                const isEmpty = {\n                    microTask: counts['microTask'] > 0,\n                    macroTask: counts['macroTask'] > 0,\n                    eventTask: counts['eventTask'] > 0,\n                    change: type,\n                };\n                this.hasTask(this._zone, isEmpty);\n            }\n        }\n    }\n    class ZoneTask {\n        constructor(type, source, callback, options, scheduleFn, cancelFn) {\n            // tslint:disable-next-line:require-internal-with-underscore\n            this._zone = null;\n            this.runCount = 0;\n            // tslint:disable-next-line:require-internal-with-underscore\n            this._zoneDelegates = null;\n            // tslint:disable-next-line:require-internal-with-underscore\n            this._state = 'notScheduled';\n            this.type = type;\n            this.source = source;\n            this.data = options;\n            this.scheduleFn = scheduleFn;\n            this.cancelFn = cancelFn;\n            if (!callback) {\n                throw new Error('callback is not defined');\n            }\n            this.callback = callback;\n            const self = this;\n            // TODO: @JiaLiPassion options should have interface\n            if (type === eventTask && options && options.useG) {\n                this.invoke = ZoneTask.invokeTask;\n            }\n            else {\n                this.invoke = function () {\n                    return ZoneTask.invokeTask.call(global, self, this, arguments);\n                };\n            }\n        }\n        static invokeTask(task, target, args) {\n            if (!task) {\n                task = this;\n            }\n            _numberOfNestedTaskFrames++;\n            try {\n                task.runCount++;\n                return task.zone.runTask(task, target, args);\n            }\n            finally {\n                if (_numberOfNestedTaskFrames == 1) {\n                    drainMicroTaskQueue();\n                }\n                _numberOfNestedTaskFrames--;\n            }\n        }\n        get zone() {\n            return this._zone;\n        }\n        get state() {\n            return this._state;\n        }\n        cancelScheduleRequest() {\n            this._transitionTo(notScheduled, scheduling);\n        }\n        // tslint:disable-next-line:require-internal-with-underscore\n        _transitionTo(toState, fromState1, fromState2) {\n            if (this._state === fromState1 || this._state === fromState2) {\n                this._state = toState;\n                if (toState == notScheduled) {\n                    this._zoneDelegates = null;\n                }\n            }\n            else {\n                throw new Error(`${this.type} '${this.source}': can not transition to '${toState}', expecting state '${fromState1}'${fromState2 ? \" or '\" + fromState2 + \"'\" : ''}, was '${this._state}'.`);\n            }\n        }\n        toString() {\n            if (this.data && typeof this.data.handleId !== 'undefined') {\n                return this.data.handleId.toString();\n            }\n            else {\n                return Object.prototype.toString.call(this);\n            }\n        }\n        // add toJSON method to prevent cyclic error when\n        // call JSON.stringify(zoneTask)\n        toJSON() {\n            return {\n                type: this.type,\n                state: this.state,\n                source: this.source,\n                zone: this.zone.name,\n                runCount: this.runCount,\n            };\n        }\n    }\n    //////////////////////////////////////////////////////\n    //////////////////////////////////////////////////////\n    ///  MICROTASK QUEUE\n    //////////////////////////////////////////////////////\n    //////////////////////////////////////////////////////\n    const symbolSetTimeout = __symbol__('setTimeout');\n    const symbolPromise = __symbol__('Promise');\n    const symbolThen = __symbol__('then');\n    let _microTaskQueue = [];\n    let _isDrainingMicrotaskQueue = false;\n    let nativeMicroTaskQueuePromise;\n    function nativeScheduleMicroTask(func) {\n        if (!nativeMicroTaskQueuePromise) {\n            if (global[symbolPromise]) {\n                nativeMicroTaskQueuePromise = global[symbolPromise].resolve(0);\n            }\n        }\n        if (nativeMicroTaskQueuePromise) {\n            let nativeThen = nativeMicroTaskQueuePromise[symbolThen];\n            if (!nativeThen) {\n                // native Promise is not patchable, we need to use `then` directly\n                // issue 1078\n                nativeThen = nativeMicroTaskQueuePromise['then'];\n            }\n            nativeThen.call(nativeMicroTaskQueuePromise, func);\n        }\n        else {\n            global[symbolSetTimeout](func, 0);\n        }\n    }\n    function scheduleMicroTask(task) {\n        // if we are not running in any task, and there has not been anything scheduled\n        // we must bootstrap the initial task creation by manually scheduling the drain\n        if (_numberOfNestedTaskFrames === 0 && _microTaskQueue.length === 0) {\n            // We are not running in Task, so we need to kickstart the microtask queue.\n            nativeScheduleMicroTask(drainMicroTaskQueue);\n        }\n        task && _microTaskQueue.push(task);\n    }\n    function drainMicroTaskQueue() {\n        if (!_isDrainingMicrotaskQueue) {\n            _isDrainingMicrotaskQueue = true;\n            while (_microTaskQueue.length) {\n                const queue = _microTaskQueue;\n                _microTaskQueue = [];\n                for (let i = 0; i < queue.length; i++) {\n                    const task = queue[i];\n                    try {\n                        task.zone.runTask(task, null, null);\n                    }\n                    catch (error) {\n                        _api.onUnhandledError(error);\n                    }\n                }\n            }\n            _api.microtaskDrainDone();\n            _isDrainingMicrotaskQueue = false;\n        }\n    }\n    //////////////////////////////////////////////////////\n    //////////////////////////////////////////////////////\n    ///  BOOTSTRAP\n    //////////////////////////////////////////////////////\n    //////////////////////////////////////////////////////\n    const NO_ZONE = { name: 'NO ZONE' };\n    const notScheduled = 'notScheduled', scheduling = 'scheduling', scheduled = 'scheduled', running = 'running', canceling = 'canceling', unknown = 'unknown';\n    const microTask = 'microTask', macroTask = 'macroTask', eventTask = 'eventTask';\n    const patches = {};\n    const _api = {\n        symbol: __symbol__,\n        currentZoneFrame: () => _currentZoneFrame,\n        onUnhandledError: noop,\n        microtaskDrainDone: noop,\n        scheduleMicroTask: scheduleMicroTask,\n        showUncaughtError: () => !ZoneImpl[__symbol__('ignoreConsoleErrorUncaughtError')],\n        patchEventTarget: () => [],\n        patchOnProperties: noop,\n        patchMethod: () => noop,\n        bindArguments: () => [],\n        patchThen: () => noop,\n        patchMacroTask: () => noop,\n        patchEventPrototype: () => noop,\n        isIEOrEdge: () => false,\n        getGlobalObjects: () => undefined,\n        ObjectDefineProperty: () => noop,\n        ObjectGetOwnPropertyDescriptor: () => undefined,\n        ObjectCreate: () => undefined,\n        ArraySlice: () => [],\n        patchClass: () => noop,\n        wrapWithCurrentZone: () => noop,\n        filterProperties: () => [],\n        attachOriginToPatched: () => noop,\n        _redefineProperty: () => noop,\n        patchCallbacks: () => noop,\n        nativeScheduleMicroTask: nativeScheduleMicroTask,\n    };\n    let _currentZoneFrame = { parent: null, zone: new ZoneImpl(null, null) };\n    let _currentTask = null;\n    let _numberOfNestedTaskFrames = 0;\n    function noop() { }\n    performanceMeasure('Zone', 'Zone');\n    return ZoneImpl;\n}\n\nfunction loadZone() {\n    // if global['Zone'] already exists (maybe zone.js was already loaded or\n    // some other lib also registered a global object named Zone), we may need\n    // to throw an error, but sometimes user may not want this error.\n    // For example,\n    // we have two web pages, page1 includes zone.js, page2 doesn't.\n    // and the 1st time user load page1 and page2, everything work fine,\n    // but when user load page2 again, error occurs because global['Zone'] already exists.\n    // so we add a flag to let user choose whether to throw this error or not.\n    // By default, if existing Zone is from zone.js, we will not throw the error.\n    const global = globalThis;\n    const checkDuplicate = global[__symbol__('forceDuplicateZoneCheck')] === true;\n    if (global['Zone'] && (checkDuplicate || typeof global['Zone'].__symbol__ !== 'function')) {\n        throw new Error('Zone already loaded.');\n    }\n    // Initialize global `Zone` constant.\n    global['Zone'] ??= initZone();\n    return global['Zone'];\n}\n\n/**\n * Suppress closure compiler errors about unknown 'Zone' variable\n * @fileoverview\n * @suppress {undefinedVars,globalThis,missingRequire}\n */\n// issue #989, to reduce bundle size, use short name\n/** Object.getOwnPropertyDescriptor */\nconst ObjectGetOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;\n/** Object.defineProperty */\nconst ObjectDefineProperty = Object.defineProperty;\n/** Object.getPrototypeOf */\nconst ObjectGetPrototypeOf = Object.getPrototypeOf;\n/** Object.create */\nconst ObjectCreate = Object.create;\n/** Array.prototype.slice */\nconst ArraySlice = Array.prototype.slice;\n/** addEventListener string const */\nconst ADD_EVENT_LISTENER_STR = 'addEventListener';\n/** removeEventListener string const */\nconst REMOVE_EVENT_LISTENER_STR = 'removeEventListener';\n/** zoneSymbol addEventListener */\nconst ZONE_SYMBOL_ADD_EVENT_LISTENER = __symbol__(ADD_EVENT_LISTENER_STR);\n/** zoneSymbol removeEventListener */\nconst ZONE_SYMBOL_REMOVE_EVENT_LISTENER = __symbol__(REMOVE_EVENT_LISTENER_STR);\n/** true string const */\nconst TRUE_STR = 'true';\n/** false string const */\nconst FALSE_STR = 'false';\n/** Zone symbol prefix string const. */\nconst ZONE_SYMBOL_PREFIX = __symbol__('');\nfunction wrapWithCurrentZone(callback, source) {\n    return Zone.current.wrap(callback, source);\n}\nfunction scheduleMacroTaskWithCurrentZone(source, callback, data, customSchedule, customCancel) {\n    return Zone.current.scheduleMacroTask(source, callback, data, customSchedule, customCancel);\n}\nconst zoneSymbol = __symbol__;\nconst isWindowExists = typeof window !== 'undefined';\nconst internalWindow = isWindowExists ? window : undefined;\nconst _global = (isWindowExists && internalWindow) || globalThis;\nconst REMOVE_ATTRIBUTE = 'removeAttribute';\nfunction bindArguments(args, source) {\n    for (let i = args.length - 1; i >= 0; i--) {\n        if (typeof args[i] === 'function') {\n            args[i] = wrapWithCurrentZone(args[i], source + '_' + i);\n        }\n    }\n    return args;\n}\nfunction patchPrototype(prototype, fnNames) {\n    const source = prototype.constructor['name'];\n    for (let i = 0; i < fnNames.length; i++) {\n        const name = fnNames[i];\n        const delegate = prototype[name];\n        if (delegate) {\n            const prototypeDesc = ObjectGetOwnPropertyDescriptor(prototype, name);\n            if (!isPropertyWritable(prototypeDesc)) {\n                continue;\n            }\n            prototype[name] = ((delegate) => {\n                const patched = function () {\n                    return delegate.apply(this, bindArguments(arguments, source + '.' + name));\n                };\n                attachOriginToPatched(patched, delegate);\n                return patched;\n            })(delegate);\n        }\n    }\n}\nfunction isPropertyWritable(propertyDesc) {\n    if (!propertyDesc) {\n        return true;\n    }\n    if (propertyDesc.writable === false) {\n        return false;\n    }\n    return !(typeof propertyDesc.get === 'function' && typeof propertyDesc.set === 'undefined');\n}\nconst isWebWorker = typeof WorkerGlobalScope !== 'undefined' && self instanceof WorkerGlobalScope;\n// Make sure to access `process` through `_global` so that WebPack does not accidentally browserify\n// this code.\nconst isNode = !('nw' in _global) &&\n    typeof _global.process !== 'undefined' &&\n    _global.process.toString() === '[object process]';\nconst isBrowser = !isNode && !isWebWorker && !!(isWindowExists && internalWindow['HTMLElement']);\n// we are in electron of nw, so we are both browser and nodejs\n// Make sure to access `process` through `_global` so that WebPack does not accidentally browserify\n// this code.\nconst isMix = typeof _global.process !== 'undefined' &&\n    _global.process.toString() === '[object process]' &&\n    !isWebWorker &&\n    !!(isWindowExists && internalWindow['HTMLElement']);\nconst zoneSymbolEventNames$1 = {};\nconst enableBeforeunloadSymbol = zoneSymbol('enable_beforeunload');\nconst wrapFn = function (event) {\n    // https://github.com/angular/zone.js/issues/911, in IE, sometimes\n    // event will be undefined, so we need to use window.event\n    event = event || _global.event;\n    if (!event) {\n        return;\n    }\n    let eventNameSymbol = zoneSymbolEventNames$1[event.type];\n    if (!eventNameSymbol) {\n        eventNameSymbol = zoneSymbolEventNames$1[event.type] = zoneSymbol('ON_PROPERTY' + event.type);\n    }\n    const target = this || event.target || _global;\n    const listener = target[eventNameSymbol];\n    let result;\n    if (isBrowser && target === internalWindow && event.type === 'error') {\n        // window.onerror have different signature\n        // https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onerror#window.onerror\n        // and onerror callback will prevent default when callback return true\n        const errorEvent = event;\n        result =\n            listener &&\n                listener.call(this, errorEvent.message, errorEvent.filename, errorEvent.lineno, errorEvent.colno, errorEvent.error);\n        if (result === true) {\n            event.preventDefault();\n        }\n    }\n    else {\n        result = listener && listener.apply(this, arguments);\n        if (\n        // https://github.com/angular/angular/issues/47579\n        // https://www.w3.org/TR/2011/WD-html5-20110525/history.html#beforeunloadevent\n        // This is the only specific case we should check for. The spec defines that the\n        // `returnValue` attribute represents the message to show the user. When the event\n        // is created, this attribute must be set to the empty string.\n        event.type === 'beforeunload' &&\n            // To prevent any breaking changes resulting from this change, given that\n            // it was already causing a significant number of failures in G3, we have hidden\n            // that behavior behind a global configuration flag. Consumers can enable this\n            // flag explicitly if they want the `beforeunload` event to be handled as defined\n            // in the specification.\n            _global[enableBeforeunloadSymbol] &&\n            // The IDL event definition is `attribute DOMString returnValue`, so we check whether\n            // `typeof result` is a string.\n            typeof result === 'string') {\n            event.returnValue = result;\n        }\n        else if (result != undefined && !result) {\n            event.preventDefault();\n        }\n    }\n    return result;\n};\nfunction patchProperty(obj, prop, prototype) {\n    let desc = ObjectGetOwnPropertyDescriptor(obj, prop);\n    if (!desc && prototype) {\n        // when patch window object, use prototype to check prop exist or not\n        const prototypeDesc = ObjectGetOwnPropertyDescriptor(prototype, prop);\n        if (prototypeDesc) {\n            desc = { enumerable: true, configurable: true };\n        }\n    }\n    // if the descriptor not exists or is not configurable\n    // just return\n    if (!desc || !desc.configurable) {\n        return;\n    }\n    const onPropPatchedSymbol = zoneSymbol('on' + prop + 'patched');\n    if (obj.hasOwnProperty(onPropPatchedSymbol) && obj[onPropPatchedSymbol]) {\n        return;\n    }\n    // A property descriptor cannot have getter/setter and be writable\n    // deleting the writable and value properties avoids this error:\n    //\n    // TypeError: property descriptors must not specify a value or be writable when a\n    // getter or setter has been specified\n    delete desc.writable;\n    delete desc.value;\n    const originalDescGet = desc.get;\n    const originalDescSet = desc.set;\n    // slice(2) cuz 'onclick' -> 'click', etc\n    const eventName = prop.slice(2);\n    let eventNameSymbol = zoneSymbolEventNames$1[eventName];\n    if (!eventNameSymbol) {\n        eventNameSymbol = zoneSymbolEventNames$1[eventName] = zoneSymbol('ON_PROPERTY' + eventName);\n    }\n    desc.set = function (newValue) {\n        // in some of windows's onproperty callback, this is undefined\n        // so we need to check it\n        let target = this;\n        if (!target && obj === _global) {\n            target = _global;\n        }\n        if (!target) {\n            return;\n        }\n        const previousValue = target[eventNameSymbol];\n        if (typeof previousValue === 'function') {\n            target.removeEventListener(eventName, wrapFn);\n        }\n        // issue #978, when onload handler was added before loading zone.js\n        // we should remove it with originalDescSet\n        originalDescSet && originalDescSet.call(target, null);\n        target[eventNameSymbol] = newValue;\n        if (typeof newValue === 'function') {\n            target.addEventListener(eventName, wrapFn, false);\n        }\n    };\n    // The getter would return undefined for unassigned properties but the default value of an\n    // unassigned property is null\n    desc.get = function () {\n        // in some of windows's onproperty callback, this is undefined\n        // so we need to check it\n        let target = this;\n        if (!target && obj === _global) {\n            target = _global;\n        }\n        if (!target) {\n            return null;\n        }\n        const listener = target[eventNameSymbol];\n        if (listener) {\n            return listener;\n        }\n        else if (originalDescGet) {\n            // result will be null when use inline event attribute,\n            // such as <button onclick=\"func();\">OK</button>\n            // because the onclick function is internal raw uncompiled handler\n            // the onclick will be evaluated when first time event was triggered or\n            // the property is accessed, https://github.com/angular/zone.js/issues/525\n            // so we should use original native get to retrieve the handler\n            let value = originalDescGet.call(this);\n            if (value) {\n                desc.set.call(this, value);\n                if (typeof target[REMOVE_ATTRIBUTE] === 'function') {\n                    target.removeAttribute(prop);\n                }\n                return value;\n            }\n        }\n        return null;\n    };\n    ObjectDefineProperty(obj, prop, desc);\n    obj[onPropPatchedSymbol] = true;\n}\nfunction patchOnProperties(obj, properties, prototype) {\n    if (properties) {\n        for (let i = 0; i < properties.length; i++) {\n            patchProperty(obj, 'on' + properties[i], prototype);\n        }\n    }\n    else {\n        const onProperties = [];\n        for (const prop in obj) {\n            if (prop.slice(0, 2) == 'on') {\n                onProperties.push(prop);\n            }\n        }\n        for (let j = 0; j < onProperties.length; j++) {\n            patchProperty(obj, onProperties[j], prototype);\n        }\n    }\n}\nconst originalInstanceKey = zoneSymbol('originalInstance');\n// wrap some native API on `window`\nfunction patchClass(className) {\n    const OriginalClass = _global[className];\n    if (!OriginalClass)\n        return;\n    // keep original class in global\n    _global[zoneSymbol(className)] = OriginalClass;\n    _global[className] = function () {\n        const a = bindArguments(arguments, className);\n        switch (a.length) {\n            case 0:\n                this[originalInstanceKey] = new OriginalClass();\n                break;\n            case 1:\n                this[originalInstanceKey] = new OriginalClass(a[0]);\n                break;\n            case 2:\n                this[originalInstanceKey] = new OriginalClass(a[0], a[1]);\n                break;\n            case 3:\n                this[originalInstanceKey] = new OriginalClass(a[0], a[1], a[2]);\n                break;\n            case 4:\n                this[originalInstanceKey] = new OriginalClass(a[0], a[1], a[2], a[3]);\n                break;\n            default:\n                throw new Error('Arg list too long.');\n        }\n    };\n    // attach original delegate to patched function\n    attachOriginToPatched(_global[className], OriginalClass);\n    const instance = new OriginalClass(function () { });\n    let prop;\n    for (prop in instance) {\n        // https://bugs.webkit.org/show_bug.cgi?id=44721\n        if (className === 'XMLHttpRequest' && prop === 'responseBlob')\n            continue;\n        (function (prop) {\n            if (typeof instance[prop] === 'function') {\n                _global[className].prototype[prop] = function () {\n                    return this[originalInstanceKey][prop].apply(this[originalInstanceKey], arguments);\n                };\n            }\n            else {\n                ObjectDefineProperty(_global[className].prototype, prop, {\n                    set: function (fn) {\n                        if (typeof fn === 'function') {\n                            this[originalInstanceKey][prop] = wrapWithCurrentZone(fn, className + '.' + prop);\n                            // keep callback in wrapped function so we can\n                            // use it in Function.prototype.toString to return\n                            // the native one.\n                            attachOriginToPatched(this[originalInstanceKey][prop], fn);\n                        }\n                        else {\n                            this[originalInstanceKey][prop] = fn;\n                        }\n                    },\n                    get: function () {\n                        return this[originalInstanceKey][prop];\n                    },\n                });\n            }\n        })(prop);\n    }\n    for (prop in OriginalClass) {\n        if (prop !== 'prototype' && OriginalClass.hasOwnProperty(prop)) {\n            _global[className][prop] = OriginalClass[prop];\n        }\n    }\n}\nfunction patchMethod(target, name, patchFn) {\n    let proto = target;\n    while (proto && !proto.hasOwnProperty(name)) {\n        proto = ObjectGetPrototypeOf(proto);\n    }\n    if (!proto && target[name]) {\n        // somehow we did not find it, but we can see it. This happens on IE for Window properties.\n        proto = target;\n    }\n    const delegateName = zoneSymbol(name);\n    let delegate = null;\n    if (proto && (!(delegate = proto[delegateName]) || !proto.hasOwnProperty(delegateName))) {\n        delegate = proto[delegateName] = proto[name];\n        // check whether proto[name] is writable\n        // some property is readonly in safari, such as HtmlCanvasElement.prototype.toBlob\n        const desc = proto && ObjectGetOwnPropertyDescriptor(proto, name);\n        if (isPropertyWritable(desc)) {\n            const patchDelegate = patchFn(delegate, delegateName, name);\n            proto[name] = function () {\n                return patchDelegate(this, arguments);\n            };\n            attachOriginToPatched(proto[name], delegate);\n        }\n    }\n    return delegate;\n}\n// TODO: @JiaLiPassion, support cancel task later if necessary\nfunction patchMacroTask(obj, funcName, metaCreator) {\n    let setNative = null;\n    function scheduleTask(task) {\n        const data = task.data;\n        data.args[data.cbIdx] = function () {\n            task.invoke.apply(this, arguments);\n        };\n        setNative.apply(data.target, data.args);\n        return task;\n    }\n    setNative = patchMethod(obj, funcName, (delegate) => function (self, args) {\n        const meta = metaCreator(self, args);\n        if (meta.cbIdx >= 0 && typeof args[meta.cbIdx] === 'function') {\n            return scheduleMacroTaskWithCurrentZone(meta.name, args[meta.cbIdx], meta, scheduleTask);\n        }\n        else {\n            // cause an error by calling it directly.\n            return delegate.apply(self, args);\n        }\n    });\n}\nfunction attachOriginToPatched(patched, original) {\n    patched[zoneSymbol('OriginalDelegate')] = original;\n}\nlet isDetectedIEOrEdge = false;\nlet ieOrEdge = false;\nfunction isIE() {\n    try {\n        const ua = internalWindow.navigator.userAgent;\n        if (ua.indexOf('MSIE ') !== -1 || ua.indexOf('Trident/') !== -1) {\n            return true;\n        }\n    }\n    catch (error) { }\n    return false;\n}\nfunction isIEOrEdge() {\n    if (isDetectedIEOrEdge) {\n        return ieOrEdge;\n    }\n    isDetectedIEOrEdge = true;\n    try {\n        const ua = internalWindow.navigator.userAgent;\n        if (ua.indexOf('MSIE ') !== -1 || ua.indexOf('Trident/') !== -1 || ua.indexOf('Edge/') !== -1) {\n            ieOrEdge = true;\n        }\n    }\n    catch (error) { }\n    return ieOrEdge;\n}\nfunction isFunction(value) {\n    return typeof value === 'function';\n}\nfunction isNumber(value) {\n    return typeof value === 'number';\n}\n\n/**\n * @fileoverview\n * @suppress {missingRequire}\n */\n// Note that passive event listeners are now supported by most modern browsers,\n// including Chrome, Firefox, Safari, and Edge. There's a pending change that\n// would remove support for legacy browsers by zone.js. Removing `passiveSupported`\n// from the codebase will reduce the final code size for existing apps that still use zone.js.\nlet passiveSupported = false;\nif (typeof window !== 'undefined') {\n    try {\n        const options = Object.defineProperty({}, 'passive', {\n            get: function () {\n                passiveSupported = true;\n            },\n        });\n        // Note: We pass the `options` object as the event handler too. This is not compatible with the\n        // signature of `addEventListener` or `removeEventListener` but enables us to remove the handler\n        // without an actual handler.\n        window.addEventListener('test', options, options);\n        window.removeEventListener('test', options, options);\n    }\n    catch (err) {\n        passiveSupported = false;\n    }\n}\n// an identifier to tell ZoneTask do not create a new invoke closure\nconst OPTIMIZED_ZONE_EVENT_TASK_DATA = {\n    useG: true,\n};\nconst zoneSymbolEventNames = {};\nconst globalSources = {};\nconst EVENT_NAME_SYMBOL_REGX = new RegExp('^' + ZONE_SYMBOL_PREFIX + '(\\\\w+)(true|false)$');\nconst IMMEDIATE_PROPAGATION_SYMBOL = zoneSymbol('propagationStopped');\nfunction prepareEventNames(eventName, eventNameToString) {\n    const falseEventName = (eventNameToString ? eventNameToString(eventName) : eventName) + FALSE_STR;\n    const trueEventName = (eventNameToString ? eventNameToString(eventName) : eventName) + TRUE_STR;\n    const symbol = ZONE_SYMBOL_PREFIX + falseEventName;\n    const symbolCapture = ZONE_SYMBOL_PREFIX + trueEventName;\n    zoneSymbolEventNames[eventName] = {};\n    zoneSymbolEventNames[eventName][FALSE_STR] = symbol;\n    zoneSymbolEventNames[eventName][TRUE_STR] = symbolCapture;\n}\nfunction patchEventTarget(_global, api, apis, patchOptions) {\n    const ADD_EVENT_LISTENER = (patchOptions && patchOptions.add) || ADD_EVENT_LISTENER_STR;\n    const REMOVE_EVENT_LISTENER = (patchOptions && patchOptions.rm) || REMOVE_EVENT_LISTENER_STR;\n    const LISTENERS_EVENT_LISTENER = (patchOptions && patchOptions.listeners) || 'eventListeners';\n    const REMOVE_ALL_LISTENERS_EVENT_LISTENER = (patchOptions && patchOptions.rmAll) || 'removeAllListeners';\n    const zoneSymbolAddEventListener = zoneSymbol(ADD_EVENT_LISTENER);\n    const ADD_EVENT_LISTENER_SOURCE = '.' + ADD_EVENT_LISTENER + ':';\n    const PREPEND_EVENT_LISTENER = 'prependListener';\n    const PREPEND_EVENT_LISTENER_SOURCE = '.' + PREPEND_EVENT_LISTENER + ':';\n    const invokeTask = function (task, target, event) {\n        // for better performance, check isRemoved which is set\n        // by removeEventListener\n        if (task.isRemoved) {\n            return;\n        }\n        const delegate = task.callback;\n        if (typeof delegate === 'object' && delegate.handleEvent) {\n            // create the bind version of handleEvent when invoke\n            task.callback = (event) => delegate.handleEvent(event);\n            task.originalDelegate = delegate;\n        }\n        // invoke static task.invoke\n        // need to try/catch error here, otherwise, the error in one event listener\n        // will break the executions of the other event listeners. Also error will\n        // not remove the event listener when `once` options is true.\n        let error;\n        try {\n            task.invoke(task, target, [event]);\n        }\n        catch (err) {\n            error = err;\n        }\n        const options = task.options;\n        if (options && typeof options === 'object' && options.once) {\n            // if options.once is true, after invoke once remove listener here\n            // only browser need to do this, nodejs eventEmitter will cal removeListener\n            // inside EventEmitter.once\n            const delegate = task.originalDelegate ? task.originalDelegate : task.callback;\n            target[REMOVE_EVENT_LISTENER].call(target, event.type, delegate, options);\n        }\n        return error;\n    };\n    function globalCallback(context, event, isCapture) {\n        // https://github.com/angular/zone.js/issues/911, in IE, sometimes\n        // event will be undefined, so we need to use window.event\n        event = event || _global.event;\n        if (!event) {\n            return;\n        }\n        // event.target is needed for Samsung TV and SourceBuffer\n        // || global is needed https://github.com/angular/zone.js/issues/190\n        const target = context || event.target || _global;\n        const tasks = target[zoneSymbolEventNames[event.type][isCapture ? TRUE_STR : FALSE_STR]];\n        if (tasks) {\n            const errors = [];\n            // invoke all tasks which attached to current target with given event.type and capture = false\n            // for performance concern, if task.length === 1, just invoke\n            if (tasks.length === 1) {\n                const err = invokeTask(tasks[0], target, event);\n                err && errors.push(err);\n            }\n            else {\n                // https://github.com/angular/zone.js/issues/836\n                // copy the tasks array before invoke, to avoid\n                // the callback will remove itself or other listener\n                const copyTasks = tasks.slice();\n                for (let i = 0; i < copyTasks.length; i++) {\n                    if (event && event[IMMEDIATE_PROPAGATION_SYMBOL] === true) {\n                        break;\n                    }\n                    const err = invokeTask(copyTasks[i], target, event);\n                    err && errors.push(err);\n                }\n            }\n            // Since there is only one error, we don't need to schedule microTask\n            // to throw the error.\n            if (errors.length === 1) {\n                throw errors[0];\n            }\n            else {\n                for (let i = 0; i < errors.length; i++) {\n                    const err = errors[i];\n                    api.nativeScheduleMicroTask(() => {\n                        throw err;\n                    });\n                }\n            }\n        }\n    }\n    // global shared zoneAwareCallback to handle all event callback with capture = false\n    const globalZoneAwareCallback = function (event) {\n        return globalCallback(this, event, false);\n    };\n    // global shared zoneAwareCallback to handle all event callback with capture = true\n    const globalZoneAwareCaptureCallback = function (event) {\n        return globalCallback(this, event, true);\n    };\n    function patchEventTargetMethods(obj, patchOptions) {\n        if (!obj) {\n            return false;\n        }\n        let useGlobalCallback = true;\n        if (patchOptions && patchOptions.useG !== undefined) {\n            useGlobalCallback = patchOptions.useG;\n        }\n        const validateHandler = patchOptions && patchOptions.vh;\n        let checkDuplicate = true;\n        if (patchOptions && patchOptions.chkDup !== undefined) {\n            checkDuplicate = patchOptions.chkDup;\n        }\n        let returnTarget = false;\n        if (patchOptions && patchOptions.rt !== undefined) {\n            returnTarget = patchOptions.rt;\n        }\n        let proto = obj;\n        while (proto && !proto.hasOwnProperty(ADD_EVENT_LISTENER)) {\n            proto = ObjectGetPrototypeOf(proto);\n        }\n        if (!proto && obj[ADD_EVENT_LISTENER]) {\n            // somehow we did not find it, but we can see it. This happens on IE for Window properties.\n            proto = obj;\n        }\n        if (!proto) {\n            return false;\n        }\n        if (proto[zoneSymbolAddEventListener]) {\n            return false;\n        }\n        const eventNameToString = patchOptions && patchOptions.eventNameToString;\n        // We use a shared global `taskData` to pass data for `scheduleEventTask`,\n        // eliminating the need to create a new object solely for passing data.\n        // WARNING: This object has a static lifetime, meaning it is not created\n        // each time `addEventListener` is called. It is instantiated only once\n        // and captured by reference inside the `addEventListener` and\n        // `removeEventListener` functions. Do not add any new properties to this\n        // object, as doing so would necessitate maintaining the information\n        // between `addEventListener` calls.\n        const taskData = {};\n        const nativeAddEventListener = (proto[zoneSymbolAddEventListener] = proto[ADD_EVENT_LISTENER]);\n        const nativeRemoveEventListener = (proto[zoneSymbol(REMOVE_EVENT_LISTENER)] =\n            proto[REMOVE_EVENT_LISTENER]);\n        const nativeListeners = (proto[zoneSymbol(LISTENERS_EVENT_LISTENER)] =\n            proto[LISTENERS_EVENT_LISTENER]);\n        const nativeRemoveAllListeners = (proto[zoneSymbol(REMOVE_ALL_LISTENERS_EVENT_LISTENER)] =\n            proto[REMOVE_ALL_LISTENERS_EVENT_LISTENER]);\n        let nativePrependEventListener;\n        if (patchOptions && patchOptions.prepend) {\n            nativePrependEventListener = proto[zoneSymbol(patchOptions.prepend)] =\n                proto[patchOptions.prepend];\n        }\n        /**\n         * This util function will build an option object with passive option\n         * to handle all possible input from the user.\n         */\n        function buildEventListenerOptions(options, passive) {\n            if (!passiveSupported && typeof options === 'object' && options) {\n                // doesn't support passive but user want to pass an object as options.\n                // this will not work on some old browser, so we just pass a boolean\n                // as useCapture parameter\n                return !!options.capture;\n            }\n            if (!passiveSupported || !passive) {\n                return options;\n            }\n            if (typeof options === 'boolean') {\n                return { capture: options, passive: true };\n            }\n            if (!options) {\n                return { passive: true };\n            }\n            if (typeof options === 'object' && options.passive !== false) {\n                return { ...options, passive: true };\n            }\n            return options;\n        }\n        const customScheduleGlobal = function (task) {\n            // if there is already a task for the eventName + capture,\n            // just return, because we use the shared globalZoneAwareCallback here.\n            if (taskData.isExisting) {\n                return;\n            }\n            return nativeAddEventListener.call(taskData.target, taskData.eventName, taskData.capture ? globalZoneAwareCaptureCallback : globalZoneAwareCallback, taskData.options);\n        };\n        /**\n         * In the context of events and listeners, this function will be\n         * called at the end by `cancelTask`, which, in turn, calls `task.cancelFn`.\n         * Cancelling a task is primarily used to remove event listeners from\n         * the task target.\n         */\n        const customCancelGlobal = function (task) {\n            // if task is not marked as isRemoved, this call is directly\n            // from Zone.prototype.cancelTask, we should remove the task\n            // from tasksList of target first\n            if (!task.isRemoved) {\n                const symbolEventNames = zoneSymbolEventNames[task.eventName];\n                let symbolEventName;\n                if (symbolEventNames) {\n                    symbolEventName = symbolEventNames[task.capture ? TRUE_STR : FALSE_STR];\n                }\n                const existingTasks = symbolEventName && task.target[symbolEventName];\n                if (existingTasks) {\n                    for (let i = 0; i < existingTasks.length; i++) {\n                        const existingTask = existingTasks[i];\n                        if (existingTask === task) {\n                            existingTasks.splice(i, 1);\n                            // set isRemoved to data for faster invokeTask check\n                            task.isRemoved = true;\n                            if (task.removeAbortListener) {\n                                task.removeAbortListener();\n                                task.removeAbortListener = null;\n                            }\n                            if (existingTasks.length === 0) {\n                                // all tasks for the eventName + capture have gone,\n                                // remove globalZoneAwareCallback and remove the task cache from target\n                                task.allRemoved = true;\n                                task.target[symbolEventName] = null;\n                            }\n                            break;\n                        }\n                    }\n                }\n            }\n            // if all tasks for the eventName + capture have gone,\n            // we will really remove the global event callback,\n            // if not, return\n            if (!task.allRemoved) {\n                return;\n            }\n            return nativeRemoveEventListener.call(task.target, task.eventName, task.capture ? globalZoneAwareCaptureCallback : globalZoneAwareCallback, task.options);\n        };\n        const customScheduleNonGlobal = function (task) {\n            return nativeAddEventListener.call(taskData.target, taskData.eventName, task.invoke, taskData.options);\n        };\n        const customSchedulePrepend = function (task) {\n            return nativePrependEventListener.call(taskData.target, taskData.eventName, task.invoke, taskData.options);\n        };\n        const customCancelNonGlobal = function (task) {\n            return nativeRemoveEventListener.call(task.target, task.eventName, task.invoke, task.options);\n        };\n        const customSchedule = useGlobalCallback ? customScheduleGlobal : customScheduleNonGlobal;\n        const customCancel = useGlobalCallback ? customCancelGlobal : customCancelNonGlobal;\n        const compareTaskCallbackVsDelegate = function (task, delegate) {\n            const typeOfDelegate = typeof delegate;\n            return ((typeOfDelegate === 'function' && task.callback === delegate) ||\n                (typeOfDelegate === 'object' && task.originalDelegate === delegate));\n        };\n        const compare = patchOptions && patchOptions.diff ? patchOptions.diff : compareTaskCallbackVsDelegate;\n        const unpatchedEvents = Zone[zoneSymbol('UNPATCHED_EVENTS')];\n        const passiveEvents = _global[zoneSymbol('PASSIVE_EVENTS')];\n        function copyEventListenerOptions(options) {\n            if (typeof options === 'object' && options !== null) {\n                // We need to destructure the target `options` object since it may\n                // be frozen or sealed (possibly provided implicitly by a third-party\n                // library), or its properties may be readonly.\n                const newOptions = { ...options };\n                // The `signal` option was recently introduced, which caused regressions in\n                // third-party scenarios where `AbortController` was directly provided to\n                // `addEventListener` as options. For instance, in cases like\n                // `document.addEventListener('keydown', callback, abortControllerInstance)`,\n                // which is valid because `AbortController` includes a `signal` getter, spreading\n                // `{...options}` wouldn't copy the `signal`. Additionally, using `Object.create`\n                // isn't feasible since `AbortController` is a built-in object type, and attempting\n                // to create a new object directly with it as the prototype might result in\n                // unexpected behavior.\n                if (options.signal) {\n                    newOptions.signal = options.signal;\n                }\n                return newOptions;\n            }\n            return options;\n        }\n        const makeAddListener = function (nativeListener, addSource, customScheduleFn, customCancelFn, returnTarget = false, prepend = false) {\n            return function () {\n                const target = this || _global;\n                let eventName = arguments[0];\n                if (patchOptions && patchOptions.transferEventName) {\n                    eventName = patchOptions.transferEventName(eventName);\n                }\n                let delegate = arguments[1];\n                if (!delegate) {\n                    return nativeListener.apply(this, arguments);\n                }\n                if (isNode && eventName === 'uncaughtException') {\n                    // don't patch uncaughtException of nodejs to prevent endless loop\n                    return nativeListener.apply(this, arguments);\n                }\n                // don't create the bind delegate function for handleEvent\n                // case here to improve addEventListener performance\n                // we will create the bind delegate when invoke\n                let isHandleEvent = false;\n                if (typeof delegate !== 'function') {\n                    if (!delegate.handleEvent) {\n                        return nativeListener.apply(this, arguments);\n                    }\n                    isHandleEvent = true;\n                }\n                if (validateHandler && !validateHandler(nativeListener, delegate, target, arguments)) {\n                    return;\n                }\n                const passive = passiveSupported && !!passiveEvents && passiveEvents.indexOf(eventName) !== -1;\n                const options = copyEventListenerOptions(buildEventListenerOptions(arguments[2], passive));\n                const signal = options?.signal;\n                if (signal?.aborted) {\n                    // the signal is an aborted one, just return without attaching the event listener.\n                    return;\n                }\n                if (unpatchedEvents) {\n                    // check unpatched list\n                    for (let i = 0; i < unpatchedEvents.length; i++) {\n                        if (eventName === unpatchedEvents[i]) {\n                            if (passive) {\n                                return nativeListener.call(target, eventName, delegate, options);\n                            }\n                            else {\n                                return nativeListener.apply(this, arguments);\n                            }\n                        }\n                    }\n                }\n                const capture = !options ? false : typeof options === 'boolean' ? true : options.capture;\n                const once = options && typeof options === 'object' ? options.once : false;\n                const zone = Zone.current;\n                let symbolEventNames = zoneSymbolEventNames[eventName];\n                if (!symbolEventNames) {\n                    prepareEventNames(eventName, eventNameToString);\n                    symbolEventNames = zoneSymbolEventNames[eventName];\n                }\n                const symbolEventName = symbolEventNames[capture ? TRUE_STR : FALSE_STR];\n                let existingTasks = target[symbolEventName];\n                let isExisting = false;\n                if (existingTasks) {\n                    // already have task registered\n                    isExisting = true;\n                    if (checkDuplicate) {\n                        for (let i = 0; i < existingTasks.length; i++) {\n                            if (compare(existingTasks[i], delegate)) {\n                                // same callback, same capture, same event name, just return\n                                return;\n                            }\n                        }\n                    }\n                }\n                else {\n                    existingTasks = target[symbolEventName] = [];\n                }\n                let source;\n                const constructorName = target.constructor['name'];\n                const targetSource = globalSources[constructorName];\n                if (targetSource) {\n                    source = targetSource[eventName];\n                }\n                if (!source) {\n                    source =\n                        constructorName +\n                            addSource +\n                            (eventNameToString ? eventNameToString(eventName) : eventName);\n                }\n                // In the code below, `options` should no longer be reassigned; instead, it\n                // should only be mutated. This is because we pass that object to the native\n                // `addEventListener`.\n                // It's generally recommended to use the same object reference for options.\n                // This ensures consistency and avoids potential issues.\n                taskData.options = options;\n                if (once) {\n                    // When using `addEventListener` with the `once` option, we don't pass\n                    // the `once` option directly to the native `addEventListener` method.\n                    // Instead, we keep the `once` setting and handle it ourselves.\n                    taskData.options.once = false;\n                }\n                taskData.target = target;\n                taskData.capture = capture;\n                taskData.eventName = eventName;\n                taskData.isExisting = isExisting;\n                const data = useGlobalCallback ? OPTIMIZED_ZONE_EVENT_TASK_DATA : undefined;\n                // keep taskData into data to allow onScheduleEventTask to access the task information\n                if (data) {\n                    data.taskData = taskData;\n                }\n                if (signal) {\n                    // When using `addEventListener` with the `signal` option, we don't pass\n                    // the `signal` option directly to the native `addEventListener` method.\n                    // Instead, we keep the `signal` setting and handle it ourselves.\n                    taskData.options.signal = undefined;\n                }\n                // The `scheduleEventTask` function will ultimately call `customScheduleGlobal`,\n                // which in turn calls the native `addEventListener`. This is why `taskData.options`\n                // is updated before scheduling the task, as `customScheduleGlobal` uses\n                // `taskData.options` to pass it to the native `addEventListener`.\n                const task = zone.scheduleEventTask(source, delegate, data, customScheduleFn, customCancelFn);\n                if (signal) {\n                    // after task is scheduled, we need to store the signal back to task.options\n                    taskData.options.signal = signal;\n                    // Wrapping `task` in a weak reference would not prevent memory leaks. Weak references are\n                    // primarily used for preventing strong references cycles. `onAbort` is always reachable\n                    // as it's an event listener, so its closure retains a strong reference to the `task`.\n                    const onAbort = () => task.zone.cancelTask(task);\n                    nativeListener.call(signal, 'abort', onAbort, { once: true });\n                    // We need to remove the `abort` listener when the event listener is going to be removed,\n                    // as it creates a closure that captures `task`. This closure retains a reference to the\n                    // `task` object even after it goes out of scope, preventing `task` from being garbage\n                    // collected.\n                    task.removeAbortListener = () => signal.removeEventListener('abort', onAbort);\n                }\n                // should clear taskData.target to avoid memory leak\n                // issue, https://github.com/angular/angular/issues/20442\n                taskData.target = null;\n                // need to clear up taskData because it is a global object\n                if (data) {\n                    data.taskData = null;\n                }\n                // have to save those information to task in case\n                // application may call task.zone.cancelTask() directly\n                if (once) {\n                    taskData.options.once = true;\n                }\n                if (!(!passiveSupported && typeof task.options === 'boolean')) {\n                    // if not support passive, and we pass an option object\n                    // to addEventListener, we should save the options to task\n                    task.options = options;\n                }\n                task.target = target;\n                task.capture = capture;\n                task.eventName = eventName;\n                if (isHandleEvent) {\n                    // save original delegate for compare to check duplicate\n                    task.originalDelegate = delegate;\n                }\n                if (!prepend) {\n                    existingTasks.push(task);\n                }\n                else {\n                    existingTasks.unshift(task);\n                }\n                if (returnTarget) {\n                    return target;\n                }\n            };\n        };\n        proto[ADD_EVENT_LISTENER] = makeAddListener(nativeAddEventListener, ADD_EVENT_LISTENER_SOURCE, customSchedule, customCancel, returnTarget);\n        if (nativePrependEventListener) {\n            proto[PREPEND_EVENT_LISTENER] = makeAddListener(nativePrependEventListener, PREPEND_EVENT_LISTENER_SOURCE, customSchedulePrepend, customCancel, returnTarget, true);\n        }\n        proto[REMOVE_EVENT_LISTENER] = function () {\n            const target = this || _global;\n            let eventName = arguments[0];\n            if (patchOptions && patchOptions.transferEventName) {\n                eventName = patchOptions.transferEventName(eventName);\n            }\n            const options = arguments[2];\n            const capture = !options ? false : typeof options === 'boolean' ? true : options.capture;\n            const delegate = arguments[1];\n            if (!delegate) {\n                return nativeRemoveEventListener.apply(this, arguments);\n            }\n            if (validateHandler &&\n                !validateHandler(nativeRemoveEventListener, delegate, target, arguments)) {\n                return;\n            }\n            const symbolEventNames = zoneSymbolEventNames[eventName];\n            let symbolEventName;\n            if (symbolEventNames) {\n                symbolEventName = symbolEventNames[capture ? TRUE_STR : FALSE_STR];\n            }\n            const existingTasks = symbolEventName && target[symbolEventName];\n            // `existingTasks` may not exist if the `addEventListener` was called before\n            // it was patched by zone.js. Please refer to the attached issue for\n            // clarification, particularly after the `if` condition, before calling\n            // the native `removeEventListener`.\n            if (existingTasks) {\n                for (let i = 0; i < existingTasks.length; i++) {\n                    const existingTask = existingTasks[i];\n                    if (compare(existingTask, delegate)) {\n                        existingTasks.splice(i, 1);\n                        // set isRemoved to data for faster invokeTask check\n                        existingTask.isRemoved = true;\n                        if (existingTasks.length === 0) {\n                            // all tasks for the eventName + capture have gone,\n                            // remove globalZoneAwareCallback and remove the task cache from target\n                            existingTask.allRemoved = true;\n                            target[symbolEventName] = null;\n                            // in the target, we have an event listener which is added by on_property\n                            // such as target.onclick = function() {}, so we need to clear this internal\n                            // property too if all delegates with capture=false were removed\n                            // https:// github.com/angular/angular/issues/31643\n                            // https://github.com/angular/angular/issues/54581\n                            if (!capture && typeof eventName === 'string') {\n                                const onPropertySymbol = ZONE_SYMBOL_PREFIX + 'ON_PROPERTY' + eventName;\n                                target[onPropertySymbol] = null;\n                            }\n                        }\n                        // In all other conditions, when `addEventListener` is called after being\n                        // patched by zone.js, we would always find an event task on the `EventTarget`.\n                        // This will trigger `cancelFn` on the `existingTask`, leading to `customCancelGlobal`,\n                        // which ultimately removes an event listener and cleans up the abort listener\n                        // (if an `AbortSignal` was provided when scheduling a task).\n                        existingTask.zone.cancelTask(existingTask);\n                        if (returnTarget) {\n                            return target;\n                        }\n                        return;\n                    }\n                }\n            }\n            // https://github.com/angular/zone.js/issues/930\n            // We may encounter a situation where the `addEventListener` was\n            // called on the event target before zone.js is loaded, resulting\n            // in no task being stored on the event target due to its invocation\n            // of the native implementation. In this scenario, we simply need to\n            // invoke the native `removeEventListener`.\n            return nativeRemoveEventListener.apply(this, arguments);\n        };\n        proto[LISTENERS_EVENT_LISTENER] = function () {\n            const target = this || _global;\n            let eventName = arguments[0];\n            if (patchOptions && patchOptions.transferEventName) {\n                eventName = patchOptions.transferEventName(eventName);\n            }\n            const listeners = [];\n            const tasks = findEventTasks(target, eventNameToString ? eventNameToString(eventName) : eventName);\n            for (let i = 0; i < tasks.length; i++) {\n                const task = tasks[i];\n                let delegate = task.originalDelegate ? task.originalDelegate : task.callback;\n                listeners.push(delegate);\n            }\n            return listeners;\n        };\n        proto[REMOVE_ALL_LISTENERS_EVENT_LISTENER] = function () {\n            const target = this || _global;\n            let eventName = arguments[0];\n            if (!eventName) {\n                const keys = Object.keys(target);\n                for (let i = 0; i < keys.length; i++) {\n                    const prop = keys[i];\n                    const match = EVENT_NAME_SYMBOL_REGX.exec(prop);\n                    let evtName = match && match[1];\n                    // in nodejs EventEmitter, removeListener event is\n                    // used for monitoring the removeListener call,\n                    // so just keep removeListener eventListener until\n                    // all other eventListeners are removed\n                    if (evtName && evtName !== 'removeListener') {\n                        this[REMOVE_ALL_LISTENERS_EVENT_LISTENER].call(this, evtName);\n                    }\n                }\n                // remove removeListener listener finally\n                this[REMOVE_ALL_LISTENERS_EVENT_LISTENER].call(this, 'removeListener');\n            }\n            else {\n                if (patchOptions && patchOptions.transferEventName) {\n                    eventName = patchOptions.transferEventName(eventName);\n                }\n                const symbolEventNames = zoneSymbolEventNames[eventName];\n                if (symbolEventNames) {\n                    const symbolEventName = symbolEventNames[FALSE_STR];\n                    const symbolCaptureEventName = symbolEventNames[TRUE_STR];\n                    const tasks = target[symbolEventName];\n                    const captureTasks = target[symbolCaptureEventName];\n                    if (tasks) {\n                        const removeTasks = tasks.slice();\n                        for (let i = 0; i < removeTasks.length; i++) {\n                            const task = removeTasks[i];\n                            let delegate = task.originalDelegate ? task.originalDelegate : task.callback;\n                            this[REMOVE_EVENT_LISTENER].call(this, eventName, delegate, task.options);\n                        }\n                    }\n                    if (captureTasks) {\n                        const removeTasks = captureTasks.slice();\n                        for (let i = 0; i < removeTasks.length; i++) {\n                            const task = removeTasks[i];\n                            let delegate = task.originalDelegate ? task.originalDelegate : task.callback;\n                            this[REMOVE_EVENT_LISTENER].call(this, eventName, delegate, task.options);\n                        }\n                    }\n                }\n            }\n            if (returnTarget) {\n                return this;\n            }\n        };\n        // for native toString patch\n        attachOriginToPatched(proto[ADD_EVENT_LISTENER], nativeAddEventListener);\n        attachOriginToPatched(proto[REMOVE_EVENT_LISTENER], nativeRemoveEventListener);\n        if (nativeRemoveAllListeners) {\n            attachOriginToPatched(proto[REMOVE_ALL_LISTENERS_EVENT_LISTENER], nativeRemoveAllListeners);\n        }\n        if (nativeListeners) {\n            attachOriginToPatched(proto[LISTENERS_EVENT_LISTENER], nativeListeners);\n        }\n        return true;\n    }\n    let results = [];\n    for (let i = 0; i < apis.length; i++) {\n        results[i] = patchEventTargetMethods(apis[i], patchOptions);\n    }\n    return results;\n}\nfunction findEventTasks(target, eventName) {\n    if (!eventName) {\n        const foundTasks = [];\n        for (let prop in target) {\n            const match = EVENT_NAME_SYMBOL_REGX.exec(prop);\n            let evtName = match && match[1];\n            if (evtName && (!eventName || evtName === eventName)) {\n                const tasks = target[prop];\n                if (tasks) {\n                    for (let i = 0; i < tasks.length; i++) {\n                        foundTasks.push(tasks[i]);\n                    }\n                }\n            }\n        }\n        return foundTasks;\n    }\n    let symbolEventName = zoneSymbolEventNames[eventName];\n    if (!symbolEventName) {\n        prepareEventNames(eventName);\n        symbolEventName = zoneSymbolEventNames[eventName];\n    }\n    const captureFalseTasks = target[symbolEventName[FALSE_STR]];\n    const captureTrueTasks = target[symbolEventName[TRUE_STR]];\n    if (!captureFalseTasks) {\n        return captureTrueTasks ? captureTrueTasks.slice() : [];\n    }\n    else {\n        return captureTrueTasks\n            ? captureFalseTasks.concat(captureTrueTasks)\n            : captureFalseTasks.slice();\n    }\n}\nfunction patchEventPrototype(global, api) {\n    const Event = global['Event'];\n    if (Event && Event.prototype) {\n        api.patchMethod(Event.prototype, 'stopImmediatePropagation', (delegate) => function (self, args) {\n            self[IMMEDIATE_PROPAGATION_SYMBOL] = true;\n            // we need to call the native stopImmediatePropagation\n            // in case in some hybrid application, some part of\n            // application will be controlled by zone, some are not\n            delegate && delegate.apply(self, args);\n        });\n    }\n}\n\n/**\n * @fileoverview\n * @suppress {missingRequire}\n */\nfunction patchQueueMicrotask(global, api) {\n    api.patchMethod(global, 'queueMicrotask', (delegate) => {\n        return function (self, args) {\n            Zone.current.scheduleMicroTask('queueMicrotask', args[0]);\n        };\n    });\n}\n\n/**\n * @fileoverview\n * @suppress {missingRequire}\n */\nconst taskSymbol = zoneSymbol('zoneTask');\nfunction patchTimer(window, setName, cancelName, nameSuffix) {\n    let setNative = null;\n    let clearNative = null;\n    setName += nameSuffix;\n    cancelName += nameSuffix;\n    const tasksByHandleId = {};\n    function scheduleTask(task) {\n        const data = task.data;\n        data.args[0] = function () {\n            return task.invoke.apply(this, arguments);\n        };\n        const handleOrId = setNative.apply(window, data.args);\n        // Whlist on Node.js when get can the ID by using `[Symbol.toPrimitive]()` we do\n        // to this so that we do not cause potentally leaks when using `setTimeout`\n        // since this can be periodic when using `.refresh`.\n        if (isNumber(handleOrId)) {\n            data.handleId = handleOrId;\n        }\n        else {\n            data.handle = handleOrId;\n            // On Node.js a timeout and interval can be restarted over and over again by using the `.refresh` method.\n            data.isRefreshable = isFunction(handleOrId.refresh);\n        }\n        return task;\n    }\n    function clearTask(task) {\n        const { handle, handleId } = task.data;\n        return clearNative.call(window, handle ?? handleId);\n    }\n    setNative = patchMethod(window, setName, (delegate) => function (self, args) {\n        if (isFunction(args[0])) {\n            const options = {\n                isRefreshable: false,\n                isPeriodic: nameSuffix === 'Interval',\n                delay: nameSuffix === 'Timeout' || nameSuffix === 'Interval' ? args[1] || 0 : undefined,\n                args: args,\n            };\n            const callback = args[0];\n            args[0] = function timer() {\n                try {\n                    return callback.apply(this, arguments);\n                }\n                finally {\n                    // issue-934, task will be cancelled\n                    // even it is a periodic task such as\n                    // setInterval\n                    // https://github.com/angular/angular/issues/40387\n                    // Cleanup tasksByHandleId should be handled before scheduleTask\n                    // Since some zoneSpec may intercept and doesn't trigger\n                    // scheduleFn(scheduleTask) provided here.\n                    const { handle, handleId, isPeriodic, isRefreshable } = options;\n                    if (!isPeriodic && !isRefreshable) {\n                        if (handleId) {\n                            // in non-nodejs env, we remove timerId\n                            // from local cache\n                            delete tasksByHandleId[handleId];\n                        }\n                        else if (handle) {\n                            // Node returns complex objects as handleIds\n                            // we remove task reference from timer object\n                            handle[taskSymbol] = null;\n                        }\n                    }\n                }\n            };\n            const task = scheduleMacroTaskWithCurrentZone(setName, args[0], options, scheduleTask, clearTask);\n            if (!task) {\n                return task;\n            }\n            // Node.js must additionally support the ref and unref functions.\n            const { handleId, handle, isRefreshable, isPeriodic } = task.data;\n            if (handleId) {\n                // for non nodejs env, we save handleId: task\n                // mapping in local cache for clearTimeout\n                tasksByHandleId[handleId] = task;\n            }\n            else if (handle) {\n                // for nodejs env, we save task\n                // reference in timerId Object for clearTimeout\n                handle[taskSymbol] = task;\n                if (isRefreshable && !isPeriodic) {\n                    const originalRefresh = handle.refresh;\n                    handle.refresh = function () {\n                        const { zone, state } = task;\n                        if (state === 'notScheduled') {\n                            task._state = 'scheduled';\n                            zone._updateTaskCount(task, 1);\n                        }\n                        else if (state === 'running') {\n                            task._state = 'scheduling';\n                        }\n                        return originalRefresh.call(this);\n                    };\n                }\n            }\n            return handle ?? handleId ?? task;\n        }\n        else {\n            // cause an error by calling it directly.\n            return delegate.apply(window, args);\n        }\n    });\n    clearNative = patchMethod(window, cancelName, (delegate) => function (self, args) {\n        const id = args[0];\n        let task;\n        if (isNumber(id)) {\n            // non nodejs env.\n            task = tasksByHandleId[id];\n            delete tasksByHandleId[id];\n        }\n        else {\n            // nodejs env ?? other environments.\n            task = id?.[taskSymbol];\n            if (task) {\n                id[taskSymbol] = null;\n            }\n            else {\n                task = id;\n            }\n        }\n        if (task?.type) {\n            if (task.cancelFn) {\n                // Do not cancel already canceled functions\n                task.zone.cancelTask(task);\n            }\n        }\n        else {\n            // cause an error by calling it directly.\n            delegate.apply(window, args);\n        }\n    });\n}\n\nfunction patchCustomElements(_global, api) {\n    const { isBrowser, isMix } = api.getGlobalObjects();\n    if ((!isBrowser && !isMix) || !_global['customElements'] || !('customElements' in _global)) {\n        return;\n    }\n    // https://html.spec.whatwg.org/multipage/custom-elements.html#concept-custom-element-definition-lifecycle-callbacks\n    const callbacks = [\n        'connectedCallback',\n        'disconnectedCallback',\n        'adoptedCallback',\n        'attributeChangedCallback',\n        'formAssociatedCallback',\n        'formDisabledCallback',\n        'formResetCallback',\n        'formStateRestoreCallback',\n    ];\n    api.patchCallbacks(api, _global.customElements, 'customElements', 'define', callbacks);\n}\n\nfunction eventTargetPatch(_global, api) {\n    if (Zone[api.symbol('patchEventTarget')]) {\n        // EventTarget is already patched.\n        return;\n    }\n    const { eventNames, zoneSymbolEventNames, TRUE_STR, FALSE_STR, ZONE_SYMBOL_PREFIX } = api.getGlobalObjects();\n    //  predefine all __zone_symbol__ + eventName + true/false string\n    for (let i = 0; i < eventNames.length; i++) {\n        const eventName = eventNames[i];\n        const falseEventName = eventName + FALSE_STR;\n        const trueEventName = eventName + TRUE_STR;\n        const symbol = ZONE_SYMBOL_PREFIX + falseEventName;\n        const symbolCapture = ZONE_SYMBOL_PREFIX + trueEventName;\n        zoneSymbolEventNames[eventName] = {};\n        zoneSymbolEventNames[eventName][FALSE_STR] = symbol;\n        zoneSymbolEventNames[eventName][TRUE_STR] = symbolCapture;\n    }\n    const EVENT_TARGET = _global['EventTarget'];\n    if (!EVENT_TARGET || !EVENT_TARGET.prototype) {\n        return;\n    }\n    api.patchEventTarget(_global, api, [EVENT_TARGET && EVENT_TARGET.prototype]);\n    return true;\n}\nfunction patchEvent(global, api) {\n    api.patchEventPrototype(global, api);\n}\n\n/**\n * @fileoverview\n * @suppress {globalThis}\n */\nfunction filterProperties(target, onProperties, ignoreProperties) {\n    if (!ignoreProperties || ignoreProperties.length === 0) {\n        return onProperties;\n    }\n    const tip = ignoreProperties.filter((ip) => ip.target === target);\n    if (!tip || tip.length === 0) {\n        return onProperties;\n    }\n    const targetIgnoreProperties = tip[0].ignoreProperties;\n    return onProperties.filter((op) => targetIgnoreProperties.indexOf(op) === -1);\n}\nfunction patchFilteredProperties(target, onProperties, ignoreProperties, prototype) {\n    // check whether target is available, sometimes target will be undefined\n    // because different browser or some 3rd party plugin.\n    if (!target) {\n        return;\n    }\n    const filteredProperties = filterProperties(target, onProperties, ignoreProperties);\n    patchOnProperties(target, filteredProperties, prototype);\n}\n/**\n * Get all event name properties which the event name startsWith `on`\n * from the target object itself, inherited properties are not considered.\n */\nfunction getOnEventNames(target) {\n    return Object.getOwnPropertyNames(target)\n        .filter((name) => name.startsWith('on') && name.length > 2)\n        .map((name) => name.substring(2));\n}\nfunction propertyDescriptorPatch(api, _global) {\n    if (isNode && !isMix) {\n        return;\n    }\n    if (Zone[api.symbol('patchEvents')]) {\n        // events are already been patched by legacy patch.\n        return;\n    }\n    const ignoreProperties = _global['__Zone_ignore_on_properties'];\n    // for browsers that we can patch the descriptor:  Chrome & Firefox\n    let patchTargets = [];\n    if (isBrowser) {\n        const internalWindow = window;\n        patchTargets = patchTargets.concat([\n            'Document',\n            'SVGElement',\n            'Element',\n            'HTMLElement',\n            'HTMLBodyElement',\n            'HTMLMediaElement',\n            'HTMLFrameSetElement',\n            'HTMLFrameElement',\n            'HTMLIFrameElement',\n            'HTMLMarqueeElement',\n            'Worker',\n        ]);\n        const ignoreErrorProperties = isIE()\n            ? [{ target: internalWindow, ignoreProperties: ['error'] }]\n            : [];\n        // in IE/Edge, onProp not exist in window object, but in WindowPrototype\n        // so we need to pass WindowPrototype to check onProp exist or not\n        patchFilteredProperties(internalWindow, getOnEventNames(internalWindow), ignoreProperties ? ignoreProperties.concat(ignoreErrorProperties) : ignoreProperties, ObjectGetPrototypeOf(internalWindow));\n    }\n    patchTargets = patchTargets.concat([\n        'XMLHttpRequest',\n        'XMLHttpRequestEventTarget',\n        'IDBIndex',\n        'IDBRequest',\n        'IDBOpenDBRequest',\n        'IDBDatabase',\n        'IDBTransaction',\n        'IDBCursor',\n        'WebSocket',\n    ]);\n    for (let i = 0; i < patchTargets.length; i++) {\n        const target = _global[patchTargets[i]];\n        target &&\n            target.prototype &&\n            patchFilteredProperties(target.prototype, getOnEventNames(target.prototype), ignoreProperties);\n    }\n}\n\n/**\n * @fileoverview\n * @suppress {missingRequire}\n */\nfunction patchBrowser(Zone) {\n    Zone.__load_patch('legacy', (global) => {\n        const legacyPatch = global[Zone.__symbol__('legacyPatch')];\n        if (legacyPatch) {\n            legacyPatch();\n        }\n    });\n    Zone.__load_patch('timers', (global) => {\n        const set = 'set';\n        const clear = 'clear';\n        patchTimer(global, set, clear, 'Timeout');\n        patchTimer(global, set, clear, 'Interval');\n        patchTimer(global, set, clear, 'Immediate');\n    });\n    Zone.__load_patch('requestAnimationFrame', (global) => {\n        patchTimer(global, 'request', 'cancel', 'AnimationFrame');\n        patchTimer(global, 'mozRequest', 'mozCancel', 'AnimationFrame');\n        patchTimer(global, 'webkitRequest', 'webkitCancel', 'AnimationFrame');\n    });\n    Zone.__load_patch('blocking', (global, Zone) => {\n        const blockingMethods = ['alert', 'prompt', 'confirm'];\n        for (let i = 0; i < blockingMethods.length; i++) {\n            const name = blockingMethods[i];\n            patchMethod(global, name, (delegate, symbol, name) => {\n                return function (s, args) {\n                    return Zone.current.run(delegate, global, args, name);\n                };\n            });\n        }\n    });\n    Zone.__load_patch('EventTarget', (global, Zone, api) => {\n        patchEvent(global, api);\n        eventTargetPatch(global, api);\n        // patch XMLHttpRequestEventTarget's addEventListener/removeEventListener\n        const XMLHttpRequestEventTarget = global['XMLHttpRequestEventTarget'];\n        if (XMLHttpRequestEventTarget && XMLHttpRequestEventTarget.prototype) {\n            api.patchEventTarget(global, api, [XMLHttpRequestEventTarget.prototype]);\n        }\n    });\n    Zone.__load_patch('MutationObserver', (global, Zone, api) => {\n        patchClass('MutationObserver');\n        patchClass('WebKitMutationObserver');\n    });\n    Zone.__load_patch('IntersectionObserver', (global, Zone, api) => {\n        patchClass('IntersectionObserver');\n    });\n    Zone.__load_patch('FileReader', (global, Zone, api) => {\n        patchClass('FileReader');\n    });\n    Zone.__load_patch('on_property', (global, Zone, api) => {\n        propertyDescriptorPatch(api, global);\n    });\n    Zone.__load_patch('customElements', (global, Zone, api) => {\n        patchCustomElements(global, api);\n    });\n    Zone.__load_patch('XHR', (global, Zone) => {\n        // Treat XMLHttpRequest as a macrotask.\n        patchXHR(global);\n        const XHR_TASK = zoneSymbol('xhrTask');\n        const XHR_SYNC = zoneSymbol('xhrSync');\n        const XHR_LISTENER = zoneSymbol('xhrListener');\n        const XHR_SCHEDULED = zoneSymbol('xhrScheduled');\n        const XHR_URL = zoneSymbol('xhrURL');\n        const XHR_ERROR_BEFORE_SCHEDULED = zoneSymbol('xhrErrorBeforeScheduled');\n        function patchXHR(window) {\n            const XMLHttpRequest = window['XMLHttpRequest'];\n            if (!XMLHttpRequest) {\n                // XMLHttpRequest is not available in service worker\n                return;\n            }\n            const XMLHttpRequestPrototype = XMLHttpRequest.prototype;\n            function findPendingTask(target) {\n                return target[XHR_TASK];\n            }\n            let oriAddListener = XMLHttpRequestPrototype[ZONE_SYMBOL_ADD_EVENT_LISTENER];\n            let oriRemoveListener = XMLHttpRequestPrototype[ZONE_SYMBOL_REMOVE_EVENT_LISTENER];\n            if (!oriAddListener) {\n                const XMLHttpRequestEventTarget = window['XMLHttpRequestEventTarget'];\n                if (XMLHttpRequestEventTarget) {\n                    const XMLHttpRequestEventTargetPrototype = XMLHttpRequestEventTarget.prototype;\n                    oriAddListener = XMLHttpRequestEventTargetPrototype[ZONE_SYMBOL_ADD_EVENT_LISTENER];\n                    oriRemoveListener = XMLHttpRequestEventTargetPrototype[ZONE_SYMBOL_REMOVE_EVENT_LISTENER];\n                }\n            }\n            const READY_STATE_CHANGE = 'readystatechange';\n            const SCHEDULED = 'scheduled';\n            function scheduleTask(task) {\n                const data = task.data;\n                const target = data.target;\n                target[XHR_SCHEDULED] = false;\n                target[XHR_ERROR_BEFORE_SCHEDULED] = false;\n                // remove existing event listener\n                const listener = target[XHR_LISTENER];\n                if (!oriAddListener) {\n                    oriAddListener = target[ZONE_SYMBOL_ADD_EVENT_LISTENER];\n                    oriRemoveListener = target[ZONE_SYMBOL_REMOVE_EVENT_LISTENER];\n                }\n                if (listener) {\n                    oriRemoveListener.call(target, READY_STATE_CHANGE, listener);\n                }\n                const newListener = (target[XHR_LISTENER] = () => {\n                    if (target.readyState === target.DONE) {\n                        // sometimes on some browsers XMLHttpRequest will fire onreadystatechange with\n                        // readyState=4 multiple times, so we need to check task state here\n                        if (!data.aborted && target[XHR_SCHEDULED] && task.state === SCHEDULED) {\n                            // check whether the xhr has registered onload listener\n                            // if that is the case, the task should invoke after all\n                            // onload listeners finish.\n                            // Also if the request failed without response (status = 0), the load event handler\n                            // will not be triggered, in that case, we should also invoke the placeholder callback\n                            // to close the XMLHttpRequest::send macroTask.\n                            // https://github.com/angular/angular/issues/38795\n                            const loadTasks = target[Zone.__symbol__('loadfalse')];\n                            if (target.status !== 0 && loadTasks && loadTasks.length > 0) {\n                                const oriInvoke = task.invoke;\n                                task.invoke = function () {\n                                    // need to load the tasks again, because in other\n                                    // load listener, they may remove themselves\n                                    const loadTasks = target[Zone.__symbol__('loadfalse')];\n                                    for (let i = 0; i < loadTasks.length; i++) {\n                                        if (loadTasks[i] === task) {\n                                            loadTasks.splice(i, 1);\n                                        }\n                                    }\n                                    if (!data.aborted && task.state === SCHEDULED) {\n                                        oriInvoke.call(task);\n                                    }\n                                };\n                                loadTasks.push(task);\n                            }\n                            else {\n                                task.invoke();\n                            }\n                        }\n                        else if (!data.aborted && target[XHR_SCHEDULED] === false) {\n                            // error occurs when xhr.send()\n                            target[XHR_ERROR_BEFORE_SCHEDULED] = true;\n                        }\n                    }\n                });\n                oriAddListener.call(target, READY_STATE_CHANGE, newListener);\n                const storedTask = target[XHR_TASK];\n                if (!storedTask) {\n                    target[XHR_TASK] = task;\n                }\n                sendNative.apply(target, data.args);\n                target[XHR_SCHEDULED] = true;\n                return task;\n            }\n            function placeholderCallback() { }\n            function clearTask(task) {\n                const data = task.data;\n                // Note - ideally, we would call data.target.removeEventListener here, but it's too late\n                // to prevent it from firing. So instead, we store info for the event listener.\n                data.aborted = true;\n                return abortNative.apply(data.target, data.args);\n            }\n            const openNative = patchMethod(XMLHttpRequestPrototype, 'open', () => function (self, args) {\n                self[XHR_SYNC] = args[2] == false;\n                self[XHR_URL] = args[1];\n                return openNative.apply(self, args);\n            });\n            const XMLHTTPREQUEST_SOURCE = 'XMLHttpRequest.send';\n            const fetchTaskAborting = zoneSymbol('fetchTaskAborting');\n            const fetchTaskScheduling = zoneSymbol('fetchTaskScheduling');\n            const sendNative = patchMethod(XMLHttpRequestPrototype, 'send', () => function (self, args) {\n                if (Zone.current[fetchTaskScheduling] === true) {\n                    // a fetch is scheduling, so we are using xhr to polyfill fetch\n                    // and because we already schedule macroTask for fetch, we should\n                    // not schedule a macroTask for xhr again\n                    return sendNative.apply(self, args);\n                }\n                if (self[XHR_SYNC]) {\n                    // if the XHR is sync there is no task to schedule, just execute the code.\n                    return sendNative.apply(self, args);\n                }\n                else {\n                    const options = {\n                        target: self,\n                        url: self[XHR_URL],\n                        isPeriodic: false,\n                        args: args,\n                        aborted: false,\n                    };\n                    const task = scheduleMacroTaskWithCurrentZone(XMLHTTPREQUEST_SOURCE, placeholderCallback, options, scheduleTask, clearTask);\n                    if (self &&\n                        self[XHR_ERROR_BEFORE_SCHEDULED] === true &&\n                        !options.aborted &&\n                        task.state === SCHEDULED) {\n                        // xhr request throw error when send\n                        // we should invoke task instead of leaving a scheduled\n                        // pending macroTask\n                        task.invoke();\n                    }\n                }\n            });\n            const abortNative = patchMethod(XMLHttpRequestPrototype, 'abort', () => function (self, args) {\n                const task = findPendingTask(self);\n                if (task && typeof task.type == 'string') {\n                    // If the XHR has already completed, do nothing.\n                    // If the XHR has already been aborted, do nothing.\n                    // Fix #569, call abort multiple times before done will cause\n                    // macroTask task count be negative number\n                    if (task.cancelFn == null || (task.data && task.data.aborted)) {\n                        return;\n                    }\n                    task.zone.cancelTask(task);\n                }\n                else if (Zone.current[fetchTaskAborting] === true) {\n                    // the abort is called from fetch polyfill, we need to call native abort of XHR.\n                    return abortNative.apply(self, args);\n                }\n                // Otherwise, we are trying to abort an XHR which has not yet been sent, so there is no\n                // task\n                // to cancel. Do nothing.\n            });\n        }\n    });\n    Zone.__load_patch('geolocation', (global) => {\n        /// GEO_LOCATION\n        if (global['navigator'] && global['navigator'].geolocation) {\n            patchPrototype(global['navigator'].geolocation, ['getCurrentPosition', 'watchPosition']);\n        }\n    });\n    Zone.__load_patch('PromiseRejectionEvent', (global, Zone) => {\n        // handle unhandled promise rejection\n        function findPromiseRejectionHandler(evtName) {\n            return function (e) {\n                const eventTasks = findEventTasks(global, evtName);\n                eventTasks.forEach((eventTask) => {\n                    // windows has added unhandledrejection event listener\n                    // trigger the event listener\n                    const PromiseRejectionEvent = global['PromiseRejectionEvent'];\n                    if (PromiseRejectionEvent) {\n                        const evt = new PromiseRejectionEvent(evtName, {\n                            promise: e.promise,\n                            reason: e.rejection,\n                        });\n                        eventTask.invoke(evt);\n                    }\n                });\n            };\n        }\n        if (global['PromiseRejectionEvent']) {\n            Zone[zoneSymbol('unhandledPromiseRejectionHandler')] =\n                findPromiseRejectionHandler('unhandledrejection');\n            Zone[zoneSymbol('rejectionHandledHandler')] =\n                findPromiseRejectionHandler('rejectionhandled');\n        }\n    });\n    Zone.__load_patch('queueMicrotask', (global, Zone, api) => {\n        patchQueueMicrotask(global, api);\n    });\n}\n\nfunction patchPromise(Zone) {\n    Zone.__load_patch('ZoneAwarePromise', (global, Zone, api) => {\n        const ObjectGetOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;\n        const ObjectDefineProperty = Object.defineProperty;\n        function readableObjectToString(obj) {\n            if (obj && obj.toString === Object.prototype.toString) {\n                const className = obj.constructor && obj.constructor.name;\n                return (className ? className : '') + ': ' + JSON.stringify(obj);\n            }\n            return obj ? obj.toString() : Object.prototype.toString.call(obj);\n        }\n        const __symbol__ = api.symbol;\n        const _uncaughtPromiseErrors = [];\n        const isDisableWrappingUncaughtPromiseRejection = global[__symbol__('DISABLE_WRAPPING_UNCAUGHT_PROMISE_REJECTION')] !== false;\n        const symbolPromise = __symbol__('Promise');\n        const symbolThen = __symbol__('then');\n        const creationTrace = '__creationTrace__';\n        api.onUnhandledError = (e) => {\n            if (api.showUncaughtError()) {\n                const rejection = e && e.rejection;\n                if (rejection) {\n                    console.error('Unhandled Promise rejection:', rejection instanceof Error ? rejection.message : rejection, '; Zone:', e.zone.name, '; Task:', e.task && e.task.source, '; Value:', rejection, rejection instanceof Error ? rejection.stack : undefined);\n                }\n                else {\n                    console.error(e);\n                }\n            }\n        };\n        api.microtaskDrainDone = () => {\n            while (_uncaughtPromiseErrors.length) {\n                const uncaughtPromiseError = _uncaughtPromiseErrors.shift();\n                try {\n                    uncaughtPromiseError.zone.runGuarded(() => {\n                        if (uncaughtPromiseError.throwOriginal) {\n                            throw uncaughtPromiseError.rejection;\n                        }\n                        throw uncaughtPromiseError;\n                    });\n                }\n                catch (error) {\n                    handleUnhandledRejection(error);\n                }\n            }\n        };\n        const UNHANDLED_PROMISE_REJECTION_HANDLER_SYMBOL = __symbol__('unhandledPromiseRejectionHandler');\n        function handleUnhandledRejection(e) {\n            api.onUnhandledError(e);\n            try {\n                const handler = Zone[UNHANDLED_PROMISE_REJECTION_HANDLER_SYMBOL];\n                if (typeof handler === 'function') {\n                    handler.call(this, e);\n                }\n            }\n            catch (err) { }\n        }\n        function isThenable(value) {\n            return value && value.then;\n        }\n        function forwardResolution(value) {\n            return value;\n        }\n        function forwardRejection(rejection) {\n            return ZoneAwarePromise.reject(rejection);\n        }\n        const symbolState = __symbol__('state');\n        const symbolValue = __symbol__('value');\n        const symbolFinally = __symbol__('finally');\n        const symbolParentPromiseValue = __symbol__('parentPromiseValue');\n        const symbolParentPromiseState = __symbol__('parentPromiseState');\n        const source = 'Promise.then';\n        const UNRESOLVED = null;\n        const RESOLVED = true;\n        const REJECTED = false;\n        const REJECTED_NO_CATCH = 0;\n        function makeResolver(promise, state) {\n            return (v) => {\n                try {\n                    resolvePromise(promise, state, v);\n                }\n                catch (err) {\n                    resolvePromise(promise, false, err);\n                }\n                // Do not return value or you will break the Promise spec.\n            };\n        }\n        const once = function () {\n            let wasCalled = false;\n            return function wrapper(wrappedFunction) {\n                return function () {\n                    if (wasCalled) {\n                        return;\n                    }\n                    wasCalled = true;\n                    wrappedFunction.apply(null, arguments);\n                };\n            };\n        };\n        const TYPE_ERROR = 'Promise resolved with itself';\n        const CURRENT_TASK_TRACE_SYMBOL = __symbol__('currentTaskTrace');\n        // Promise Resolution\n        function resolvePromise(promise, state, value) {\n            const onceWrapper = once();\n            if (promise === value) {\n                throw new TypeError(TYPE_ERROR);\n            }\n            if (promise[symbolState] === UNRESOLVED) {\n                // should only get value.then once based on promise spec.\n                let then = null;\n                try {\n                    if (typeof value === 'object' || typeof value === 'function') {\n                        then = value && value.then;\n                    }\n                }\n                catch (err) {\n                    onceWrapper(() => {\n                        resolvePromise(promise, false, err);\n                    })();\n                    return promise;\n                }\n                // if (value instanceof ZoneAwarePromise) {\n                if (state !== REJECTED &&\n                    value instanceof ZoneAwarePromise &&\n                    value.hasOwnProperty(symbolState) &&\n                    value.hasOwnProperty(symbolValue) &&\n                    value[symbolState] !== UNRESOLVED) {\n                    clearRejectedNoCatch(value);\n                    resolvePromise(promise, value[symbolState], value[symbolValue]);\n                }\n                else if (state !== REJECTED && typeof then === 'function') {\n                    try {\n                        then.call(value, onceWrapper(makeResolver(promise, state)), onceWrapper(makeResolver(promise, false)));\n                    }\n                    catch (err) {\n                        onceWrapper(() => {\n                            resolvePromise(promise, false, err);\n                        })();\n                    }\n                }\n                else {\n                    promise[symbolState] = state;\n                    const queue = promise[symbolValue];\n                    promise[symbolValue] = value;\n                    if (promise[symbolFinally] === symbolFinally) {\n                        // the promise is generated by Promise.prototype.finally\n                        if (state === RESOLVED) {\n                            // the state is resolved, should ignore the value\n                            // and use parent promise value\n                            promise[symbolState] = promise[symbolParentPromiseState];\n                            promise[symbolValue] = promise[symbolParentPromiseValue];\n                        }\n                    }\n                    // record task information in value when error occurs, so we can\n                    // do some additional work such as render longStackTrace\n                    if (state === REJECTED && value instanceof Error) {\n                        // check if longStackTraceZone is here\n                        const trace = Zone.currentTask &&\n                            Zone.currentTask.data &&\n                            Zone.currentTask.data[creationTrace];\n                        if (trace) {\n                            // only keep the long stack trace into error when in longStackTraceZone\n                            ObjectDefineProperty(value, CURRENT_TASK_TRACE_SYMBOL, {\n                                configurable: true,\n                                enumerable: false,\n                                writable: true,\n                                value: trace,\n                            });\n                        }\n                    }\n                    for (let i = 0; i < queue.length;) {\n                        scheduleResolveOrReject(promise, queue[i++], queue[i++], queue[i++], queue[i++]);\n                    }\n                    if (queue.length == 0 && state == REJECTED) {\n                        promise[symbolState] = REJECTED_NO_CATCH;\n                        let uncaughtPromiseError = value;\n                        try {\n                            // Here we throws a new Error to print more readable error log\n                            // and if the value is not an error, zone.js builds an `Error`\n                            // Object here to attach the stack information.\n                            throw new Error('Uncaught (in promise): ' +\n                                readableObjectToString(value) +\n                                (value && value.stack ? '\\n' + value.stack : ''));\n                        }\n                        catch (err) {\n                            uncaughtPromiseError = err;\n                        }\n                        if (isDisableWrappingUncaughtPromiseRejection) {\n                            // If disable wrapping uncaught promise reject\n                            // use the value instead of wrapping it.\n                            uncaughtPromiseError.throwOriginal = true;\n                        }\n                        uncaughtPromiseError.rejection = value;\n                        uncaughtPromiseError.promise = promise;\n                        uncaughtPromiseError.zone = Zone.current;\n                        uncaughtPromiseError.task = Zone.currentTask;\n                        _uncaughtPromiseErrors.push(uncaughtPromiseError);\n                        api.scheduleMicroTask(); // to make sure that it is running\n                    }\n                }\n            }\n            // Resolving an already resolved promise is a noop.\n            return promise;\n        }\n        const REJECTION_HANDLED_HANDLER = __symbol__('rejectionHandledHandler');\n        function clearRejectedNoCatch(promise) {\n            if (promise[symbolState] === REJECTED_NO_CATCH) {\n                // if the promise is rejected no catch status\n                // and queue.length > 0, means there is a error handler\n                // here to handle the rejected promise, we should trigger\n                // windows.rejectionhandled eventHandler or nodejs rejectionHandled\n                // eventHandler\n                try {\n                    const handler = Zone[REJECTION_HANDLED_HANDLER];\n                    if (handler && typeof handler === 'function') {\n                        handler.call(this, { rejection: promise[symbolValue], promise: promise });\n                    }\n                }\n                catch (err) { }\n                promise[symbolState] = REJECTED;\n                for (let i = 0; i < _uncaughtPromiseErrors.length; i++) {\n                    if (promise === _uncaughtPromiseErrors[i].promise) {\n                        _uncaughtPromiseErrors.splice(i, 1);\n                    }\n                }\n            }\n        }\n        function scheduleResolveOrReject(promise, zone, chainPromise, onFulfilled, onRejected) {\n            clearRejectedNoCatch(promise);\n            const promiseState = promise[symbolState];\n            const delegate = promiseState\n                ? typeof onFulfilled === 'function'\n                    ? onFulfilled\n                    : forwardResolution\n                : typeof onRejected === 'function'\n                    ? onRejected\n                    : forwardRejection;\n            zone.scheduleMicroTask(source, () => {\n                try {\n                    const parentPromiseValue = promise[symbolValue];\n                    const isFinallyPromise = !!chainPromise && symbolFinally === chainPromise[symbolFinally];\n                    if (isFinallyPromise) {\n                        // if the promise is generated from finally call, keep parent promise's state and value\n                        chainPromise[symbolParentPromiseValue] = parentPromiseValue;\n                        chainPromise[symbolParentPromiseState] = promiseState;\n                    }\n                    // should not pass value to finally callback\n                    const value = zone.run(delegate, undefined, isFinallyPromise && delegate !== forwardRejection && delegate !== forwardResolution\n                        ? []\n                        : [parentPromiseValue]);\n                    resolvePromise(chainPromise, true, value);\n                }\n                catch (error) {\n                    // if error occurs, should always return this error\n                    resolvePromise(chainPromise, false, error);\n                }\n            }, chainPromise);\n        }\n        const ZONE_AWARE_PROMISE_TO_STRING = 'function ZoneAwarePromise() { [native code] }';\n        const noop = function () { };\n        const AggregateError = global.AggregateError;\n        class ZoneAwarePromise {\n            static toString() {\n                return ZONE_AWARE_PROMISE_TO_STRING;\n            }\n            static resolve(value) {\n                if (value instanceof ZoneAwarePromise) {\n                    return value;\n                }\n                return resolvePromise(new this(null), RESOLVED, value);\n            }\n            static reject(error) {\n                return resolvePromise(new this(null), REJECTED, error);\n            }\n            static withResolvers() {\n                const result = {};\n                result.promise = new ZoneAwarePromise((res, rej) => {\n                    result.resolve = res;\n                    result.reject = rej;\n                });\n                return result;\n            }\n            static any(values) {\n                if (!values || typeof values[Symbol.iterator] !== 'function') {\n                    return Promise.reject(new AggregateError([], 'All promises were rejected'));\n                }\n                const promises = [];\n                let count = 0;\n                try {\n                    for (let v of values) {\n                        count++;\n                        promises.push(ZoneAwarePromise.resolve(v));\n                    }\n                }\n                catch (err) {\n                    return Promise.reject(new AggregateError([], 'All promises were rejected'));\n                }\n                if (count === 0) {\n                    return Promise.reject(new AggregateError([], 'All promises were rejected'));\n                }\n                let finished = false;\n                const errors = [];\n                return new ZoneAwarePromise((resolve, reject) => {\n                    for (let i = 0; i < promises.length; i++) {\n                        promises[i].then((v) => {\n                            if (finished) {\n                                return;\n                            }\n                            finished = true;\n                            resolve(v);\n                        }, (err) => {\n                            errors.push(err);\n                            count--;\n                            if (count === 0) {\n                                finished = true;\n                                reject(new AggregateError(errors, 'All promises were rejected'));\n                            }\n                        });\n                    }\n                });\n            }\n            static race(values) {\n                let resolve;\n                let reject;\n                let promise = new this((res, rej) => {\n                    resolve = res;\n                    reject = rej;\n                });\n                function onResolve(value) {\n                    resolve(value);\n                }\n                function onReject(error) {\n                    reject(error);\n                }\n                for (let value of values) {\n                    if (!isThenable(value)) {\n                        value = this.resolve(value);\n                    }\n                    value.then(onResolve, onReject);\n                }\n                return promise;\n            }\n            static all(values) {\n                return ZoneAwarePromise.allWithCallback(values);\n            }\n            static allSettled(values) {\n                const P = this && this.prototype instanceof ZoneAwarePromise ? this : ZoneAwarePromise;\n                return P.allWithCallback(values, {\n                    thenCallback: (value) => ({ status: 'fulfilled', value }),\n                    errorCallback: (err) => ({ status: 'rejected', reason: err }),\n                });\n            }\n            static allWithCallback(values, callback) {\n                let resolve;\n                let reject;\n                let promise = new this((res, rej) => {\n                    resolve = res;\n                    reject = rej;\n                });\n                // Start at 2 to prevent prematurely resolving if .then is called immediately.\n                let unresolvedCount = 2;\n                let valueIndex = 0;\n                const resolvedValues = [];\n                for (let value of values) {\n                    if (!isThenable(value)) {\n                        value = this.resolve(value);\n                    }\n                    const curValueIndex = valueIndex;\n                    try {\n                        value.then((value) => {\n                            resolvedValues[curValueIndex] = callback ? callback.thenCallback(value) : value;\n                            unresolvedCount--;\n                            if (unresolvedCount === 0) {\n                                resolve(resolvedValues);\n                            }\n                        }, (err) => {\n                            if (!callback) {\n                                reject(err);\n                            }\n                            else {\n                                resolvedValues[curValueIndex] = callback.errorCallback(err);\n                                unresolvedCount--;\n                                if (unresolvedCount === 0) {\n                                    resolve(resolvedValues);\n                                }\n                            }\n                        });\n                    }\n                    catch (thenErr) {\n                        reject(thenErr);\n                    }\n                    unresolvedCount++;\n                    valueIndex++;\n                }\n                // Make the unresolvedCount zero-based again.\n                unresolvedCount -= 2;\n                if (unresolvedCount === 0) {\n                    resolve(resolvedValues);\n                }\n                return promise;\n            }\n            constructor(executor) {\n                const promise = this;\n                if (!(promise instanceof ZoneAwarePromise)) {\n                    throw new Error('Must be an instanceof Promise.');\n                }\n                promise[symbolState] = UNRESOLVED;\n                promise[symbolValue] = []; // queue;\n                try {\n                    const onceWrapper = once();\n                    executor &&\n                        executor(onceWrapper(makeResolver(promise, RESOLVED)), onceWrapper(makeResolver(promise, REJECTED)));\n                }\n                catch (error) {\n                    resolvePromise(promise, false, error);\n                }\n            }\n            get [Symbol.toStringTag]() {\n                return 'Promise';\n            }\n            get [Symbol.species]() {\n                return ZoneAwarePromise;\n            }\n            then(onFulfilled, onRejected) {\n                // We must read `Symbol.species` safely because `this` may be anything. For instance, `this`\n                // may be an object without a prototype (created through `Object.create(null)`); thus\n                // `this.constructor` will be undefined. One of the use cases is SystemJS creating\n                // prototype-less objects (modules) via `Object.create(null)`. The SystemJS creates an empty\n                // object and copies promise properties into that object (within the `getOrCreateLoad`\n                // function). The zone.js then checks if the resolved value has the `then` method and\n                // invokes it with the `value` context. Otherwise, this will throw an error: `TypeError:\n                // Cannot read properties of undefined (reading 'Symbol(Symbol.species)')`.\n                let C = this.constructor?.[Symbol.species];\n                if (!C || typeof C !== 'function') {\n                    C = this.constructor || ZoneAwarePromise;\n                }\n                const chainPromise = new C(noop);\n                const zone = Zone.current;\n                if (this[symbolState] == UNRESOLVED) {\n                    this[symbolValue].push(zone, chainPromise, onFulfilled, onRejected);\n                }\n                else {\n                    scheduleResolveOrReject(this, zone, chainPromise, onFulfilled, onRejected);\n                }\n                return chainPromise;\n            }\n            catch(onRejected) {\n                return this.then(null, onRejected);\n            }\n            finally(onFinally) {\n                // See comment on the call to `then` about why thee `Symbol.species` is safely accessed.\n                let C = this.constructor?.[Symbol.species];\n                if (!C || typeof C !== 'function') {\n                    C = ZoneAwarePromise;\n                }\n                const chainPromise = new C(noop);\n                chainPromise[symbolFinally] = symbolFinally;\n                const zone = Zone.current;\n                if (this[symbolState] == UNRESOLVED) {\n                    this[symbolValue].push(zone, chainPromise, onFinally, onFinally);\n                }\n                else {\n                    scheduleResolveOrReject(this, zone, chainPromise, onFinally, onFinally);\n                }\n                return chainPromise;\n            }\n        }\n        // Protect against aggressive optimizers dropping seemingly unused properties.\n        // E.g. Closure Compiler in advanced mode.\n        ZoneAwarePromise['resolve'] = ZoneAwarePromise.resolve;\n        ZoneAwarePromise['reject'] = ZoneAwarePromise.reject;\n        ZoneAwarePromise['race'] = ZoneAwarePromise.race;\n        ZoneAwarePromise['all'] = ZoneAwarePromise.all;\n        const NativePromise = (global[symbolPromise] = global['Promise']);\n        global['Promise'] = ZoneAwarePromise;\n        const symbolThenPatched = __symbol__('thenPatched');\n        function patchThen(Ctor) {\n            const proto = Ctor.prototype;\n            const prop = ObjectGetOwnPropertyDescriptor(proto, 'then');\n            if (prop && (prop.writable === false || !prop.configurable)) {\n                // check Ctor.prototype.then propertyDescriptor is writable or not\n                // in meteor env, writable is false, we should ignore such case\n                return;\n            }\n            const originalThen = proto.then;\n            // Keep a reference to the original method.\n            proto[symbolThen] = originalThen;\n            Ctor.prototype.then = function (onResolve, onReject) {\n                const wrapped = new ZoneAwarePromise((resolve, reject) => {\n                    originalThen.call(this, resolve, reject);\n                });\n                return wrapped.then(onResolve, onReject);\n            };\n            Ctor[symbolThenPatched] = true;\n        }\n        api.patchThen = patchThen;\n        function zoneify(fn) {\n            return function (self, args) {\n                let resultPromise = fn.apply(self, args);\n                if (resultPromise instanceof ZoneAwarePromise) {\n                    return resultPromise;\n                }\n                let ctor = resultPromise.constructor;\n                if (!ctor[symbolThenPatched]) {\n                    patchThen(ctor);\n                }\n                return resultPromise;\n            };\n        }\n        if (NativePromise) {\n            patchThen(NativePromise);\n            patchMethod(global, 'fetch', (delegate) => zoneify(delegate));\n        }\n        // This is not part of public API, but it is useful for tests, so we expose it.\n        Promise[Zone.__symbol__('uncaughtPromiseErrors')] = _uncaughtPromiseErrors;\n        return ZoneAwarePromise;\n    });\n}\n\nfunction patchToString(Zone) {\n    // override Function.prototype.toString to make zone.js patched function\n    // look like native function\n    Zone.__load_patch('toString', (global) => {\n        // patch Func.prototype.toString to let them look like native\n        const originalFunctionToString = Function.prototype.toString;\n        const ORIGINAL_DELEGATE_SYMBOL = zoneSymbol('OriginalDelegate');\n        const PROMISE_SYMBOL = zoneSymbol('Promise');\n        const ERROR_SYMBOL = zoneSymbol('Error');\n        const newFunctionToString = function toString() {\n            if (typeof this === 'function') {\n                const originalDelegate = this[ORIGINAL_DELEGATE_SYMBOL];\n                if (originalDelegate) {\n                    if (typeof originalDelegate === 'function') {\n                        return originalFunctionToString.call(originalDelegate);\n                    }\n                    else {\n                        return Object.prototype.toString.call(originalDelegate);\n                    }\n                }\n                if (this === Promise) {\n                    const nativePromise = global[PROMISE_SYMBOL];\n                    if (nativePromise) {\n                        return originalFunctionToString.call(nativePromise);\n                    }\n                }\n                if (this === Error) {\n                    const nativeError = global[ERROR_SYMBOL];\n                    if (nativeError) {\n                        return originalFunctionToString.call(nativeError);\n                    }\n                }\n            }\n            return originalFunctionToString.call(this);\n        };\n        newFunctionToString[ORIGINAL_DELEGATE_SYMBOL] = originalFunctionToString;\n        Function.prototype.toString = newFunctionToString;\n        // patch Object.prototype.toString to let them look like native\n        const originalObjectToString = Object.prototype.toString;\n        const PROMISE_OBJECT_TO_STRING = '[object Promise]';\n        Object.prototype.toString = function () {\n            if (typeof Promise === 'function' && this instanceof Promise) {\n                return PROMISE_OBJECT_TO_STRING;\n            }\n            return originalObjectToString.call(this);\n        };\n    });\n}\n\nfunction patchCallbacks(api, target, targetName, method, callbacks) {\n    const symbol = Zone.__symbol__(method);\n    if (target[symbol]) {\n        return;\n    }\n    const nativeDelegate = (target[symbol] = target[method]);\n    target[method] = function (name, opts, options) {\n        if (opts && opts.prototype) {\n            callbacks.forEach(function (callback) {\n                const source = `${targetName}.${method}::` + callback;\n                const prototype = opts.prototype;\n                // Note: the `patchCallbacks` is used for patching the `document.registerElement` and\n                // `customElements.define`. We explicitly wrap the patching code into try-catch since\n                // callbacks may be already patched by other web components frameworks (e.g. LWC), and they\n                // make those properties non-writable. This means that patching callback will throw an error\n                // `cannot assign to read-only property`. See this code as an example:\n                // https://github.com/salesforce/lwc/blob/master/packages/@lwc/engine-core/src/framework/base-bridge-element.ts#L180-L186\n                // We don't want to stop the application rendering if we couldn't patch some\n                // callback, e.g. `attributeChangedCallback`.\n                try {\n                    if (prototype.hasOwnProperty(callback)) {\n                        const descriptor = api.ObjectGetOwnPropertyDescriptor(prototype, callback);\n                        if (descriptor && descriptor.value) {\n                            descriptor.value = api.wrapWithCurrentZone(descriptor.value, source);\n                            api._redefineProperty(opts.prototype, callback, descriptor);\n                        }\n                        else if (prototype[callback]) {\n                            prototype[callback] = api.wrapWithCurrentZone(prototype[callback], source);\n                        }\n                    }\n                    else if (prototype[callback]) {\n                        prototype[callback] = api.wrapWithCurrentZone(prototype[callback], source);\n                    }\n                }\n                catch {\n                    // Note: we leave the catch block empty since there's no way to handle the error related\n                    // to non-writable property.\n                }\n            });\n        }\n        return nativeDelegate.call(target, name, opts, options);\n    };\n    api.attachOriginToPatched(target[method], nativeDelegate);\n}\n\nfunction patchUtil(Zone) {\n    Zone.__load_patch('util', (global, Zone, api) => {\n        // Collect native event names by looking at properties\n        // on the global namespace, e.g. 'onclick'.\n        const eventNames = getOnEventNames(global);\n        api.patchOnProperties = patchOnProperties;\n        api.patchMethod = patchMethod;\n        api.bindArguments = bindArguments;\n        api.patchMacroTask = patchMacroTask;\n        // In earlier version of zone.js (<0.9.0), we use env name `__zone_symbol__BLACK_LISTED_EVENTS`\n        // to define which events will not be patched by `Zone.js`. In newer version (>=0.9.0), we\n        // change the env name to `__zone_symbol__UNPATCHED_EVENTS` to keep the name consistent with\n        // angular repo. The  `__zone_symbol__BLACK_LISTED_EVENTS` is deprecated, but it is still be\n        // supported for backwards compatibility.\n        const SYMBOL_BLACK_LISTED_EVENTS = Zone.__symbol__('BLACK_LISTED_EVENTS');\n        const SYMBOL_UNPATCHED_EVENTS = Zone.__symbol__('UNPATCHED_EVENTS');\n        if (global[SYMBOL_UNPATCHED_EVENTS]) {\n            global[SYMBOL_BLACK_LISTED_EVENTS] = global[SYMBOL_UNPATCHED_EVENTS];\n        }\n        if (global[SYMBOL_BLACK_LISTED_EVENTS]) {\n            Zone[SYMBOL_BLACK_LISTED_EVENTS] = Zone[SYMBOL_UNPATCHED_EVENTS] =\n                global[SYMBOL_BLACK_LISTED_EVENTS];\n        }\n        api.patchEventPrototype = patchEventPrototype;\n        api.patchEventTarget = patchEventTarget;\n        api.isIEOrEdge = isIEOrEdge;\n        api.ObjectDefineProperty = ObjectDefineProperty;\n        api.ObjectGetOwnPropertyDescriptor = ObjectGetOwnPropertyDescriptor;\n        api.ObjectCreate = ObjectCreate;\n        api.ArraySlice = ArraySlice;\n        api.patchClass = patchClass;\n        api.wrapWithCurrentZone = wrapWithCurrentZone;\n        api.filterProperties = filterProperties;\n        api.attachOriginToPatched = attachOriginToPatched;\n        api._redefineProperty = Object.defineProperty;\n        api.patchCallbacks = patchCallbacks;\n        api.getGlobalObjects = () => ({\n            globalSources,\n            zoneSymbolEventNames,\n            eventNames,\n            isBrowser,\n            isMix,\n            isNode,\n            TRUE_STR,\n            FALSE_STR,\n            ZONE_SYMBOL_PREFIX,\n            ADD_EVENT_LISTENER_STR,\n            REMOVE_EVENT_LISTENER_STR,\n        });\n    });\n}\n\nfunction patchCommon(Zone) {\n    patchPromise(Zone);\n    patchToString(Zone);\n    patchUtil(Zone);\n}\n\nconst Zone$1 = loadZone();\npatchCommon(Zone$1);\npatchBrowser(Zone$1);\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { createContextKey } from '@opentelemetry/api';\nvar SUPPRESS_TRACING_KEY = createContextKey('OpenTelemetry SDK Context Key SUPPRESS_TRACING');\nexport function suppressTracing(context) {\n    return context.setValue(SUPPRESS_TRACING_KEY, true);\n}\nexport function unsuppressTracing(context) {\n    return context.deleteValue(SUPPRESS_TRACING_KEY);\n}\nexport function isTracingSuppressed(context) {\n    return context.getValue(SUPPRESS_TRACING_KEY) === true;\n}\n//# sourceMappingURL=suppress-tracing.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport var BAGGAGE_KEY_PAIR_SEPARATOR = '=';\nexport var BAGGAGE_PROPERTIES_SEPARATOR = ';';\nexport var BAGGAGE_ITEMS_SEPARATOR = ',';\n// Name of the http header used to propagate the baggage\nexport var BAGGAGE_HEADER = 'baggage';\n// Maximum number of name-value pairs allowed by w3c spec\nexport var BAGGAGE_MAX_NAME_VALUE_PAIRS = 180;\n// Maximum number of bytes per a single name-value pair allowed by w3c spec\nexport var BAGGAGE_MAX_PER_NAME_VALUE_PAIRS = 4096;\n// Maximum total length of all name-value pairs allowed by w3c spec\nexport var BAGGAGE_MAX_TOTAL_LENGTH = 8192;\n//# sourceMappingURL=constants.js.map","var __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { baggageEntryMetadataFromString, } from '@opentelemetry/api';\nimport { BAGGAGE_ITEMS_SEPARATOR, BAGGAGE_PROPERTIES_SEPARATOR, BAGGAGE_KEY_PAIR_SEPARATOR, BAGGAGE_MAX_TOTAL_LENGTH, } from './constants';\nexport function serializeKeyPairs(keyPairs) {\n    return keyPairs.reduce(function (hValue, current) {\n        var value = \"\" + hValue + (hValue !== '' ? BAGGAGE_ITEMS_SEPARATOR : '') + current;\n        return value.length > BAGGAGE_MAX_TOTAL_LENGTH ? hValue : value;\n    }, '');\n}\nexport function getKeyPairs(baggage) {\n    return baggage.getAllEntries().map(function (_a) {\n        var _b = __read(_a, 2), key = _b[0], value = _b[1];\n        var entry = encodeURIComponent(key) + \"=\" + encodeURIComponent(value.value);\n        // include opaque metadata if provided\n        // NOTE: we intentionally don't URI-encode the metadata - that responsibility falls on the metadata implementation\n        if (value.metadata !== undefined) {\n            entry += BAGGAGE_PROPERTIES_SEPARATOR + value.metadata.toString();\n        }\n        return entry;\n    });\n}\nexport function parsePairKeyValue(entry) {\n    var valueProps = entry.split(BAGGAGE_PROPERTIES_SEPARATOR);\n    if (valueProps.length <= 0)\n        return;\n    var keyPairPart = valueProps.shift();\n    if (!keyPairPart)\n        return;\n    var separatorIndex = keyPairPart.indexOf(BAGGAGE_KEY_PAIR_SEPARATOR);\n    if (separatorIndex <= 0)\n        return;\n    var key = decodeURIComponent(keyPairPart.substring(0, separatorIndex).trim());\n    var value = decodeURIComponent(keyPairPart.substring(separatorIndex + 1).trim());\n    var metadata;\n    if (valueProps.length > 0) {\n        metadata = baggageEntryMetadataFromString(valueProps.join(BAGGAGE_PROPERTIES_SEPARATOR));\n    }\n    return { key: key, value: value, metadata: metadata };\n}\n/**\n * Parse a string serialized in the baggage HTTP Format (without metadata):\n * https://github.com/w3c/baggage/blob/master/baggage/HTTP_HEADER_FORMAT.md\n */\nexport function parseKeyPairsIntoRecord(value) {\n    if (typeof value !== 'string' || value.length === 0)\n        return {};\n    return value\n        .split(BAGGAGE_ITEMS_SEPARATOR)\n        .map(function (entry) {\n        return parsePairKeyValue(entry);\n    })\n        .filter(function (keyPair) { return keyPair !== undefined && keyPair.value.length > 0; })\n        .reduce(function (headers, keyPair) {\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        headers[keyPair.key] = keyPair.value;\n        return headers;\n    }, {});\n}\n//# sourceMappingURL=utils.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __values = (this && this.__values) || function(o) {\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\n    if (m) return m.call(o);\n    if (o && typeof o.length === \"number\") return {\n        next: function () {\n            if (o && i >= o.length) o = void 0;\n            return { value: o && o[i++], done: !o };\n        }\n    };\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\nvar __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nimport { diag } from '@opentelemetry/api';\nexport function sanitizeAttributes(attributes) {\n    var e_1, _a;\n    var out = {};\n    if (typeof attributes !== 'object' || attributes == null) {\n        return out;\n    }\n    try {\n        for (var _b = __values(Object.entries(attributes)), _c = _b.next(); !_c.done; _c = _b.next()) {\n            var _d = __read(_c.value, 2), key = _d[0], val = _d[1];\n            if (!isAttributeKey(key)) {\n                diag.warn(\"Invalid attribute key: \" + key);\n                continue;\n            }\n            if (!isAttributeValue(val)) {\n                diag.warn(\"Invalid attribute value set for key: \" + key);\n                continue;\n            }\n            if (Array.isArray(val)) {\n                out[key] = val.slice();\n            }\n            else {\n                out[key] = val;\n            }\n        }\n    }\n    catch (e_1_1) { e_1 = { error: e_1_1 }; }\n    finally {\n        try {\n            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n        }\n        finally { if (e_1) throw e_1.error; }\n    }\n    return out;\n}\nexport function isAttributeKey(key) {\n    return typeof key === 'string' && key.length > 0;\n}\nexport function isAttributeValue(val) {\n    if (val == null) {\n        return true;\n    }\n    if (Array.isArray(val)) {\n        return isHomogeneousAttributeValueArray(val);\n    }\n    return isValidPrimitiveAttributeValue(val);\n}\nfunction isHomogeneousAttributeValueArray(arr) {\n    var e_2, _a;\n    var type;\n    try {\n        for (var arr_1 = __values(arr), arr_1_1 = arr_1.next(); !arr_1_1.done; arr_1_1 = arr_1.next()) {\n            var element = arr_1_1.value;\n            // null/undefined elements are allowed\n            if (element == null)\n                continue;\n            if (!type) {\n                if (isValidPrimitiveAttributeValue(element)) {\n                    type = typeof element;\n                    continue;\n                }\n                // encountered an invalid primitive\n                return false;\n            }\n            if (typeof element === type) {\n                continue;\n            }\n            return false;\n        }\n    }\n    catch (e_2_1) { e_2 = { error: e_2_1 }; }\n    finally {\n        try {\n            if (arr_1_1 && !arr_1_1.done && (_a = arr_1.return)) _a.call(arr_1);\n        }\n        finally { if (e_2) throw e_2.error; }\n    }\n    return true;\n}\nfunction isValidPrimitiveAttributeValue(val) {\n    switch (typeof val) {\n        case 'number':\n        case 'boolean':\n        case 'string':\n            return true;\n    }\n    return false;\n}\n//# sourceMappingURL=attributes.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { diag } from '@opentelemetry/api';\n/**\n * Returns a function that logs an error using the provided logger, or a\n * console logger if one was not provided.\n */\nexport function loggingErrorHandler() {\n    return function (ex) {\n        diag.error(stringifyException(ex));\n    };\n}\n/**\n * Converts an exception into a string representation\n * @param {Exception} ex\n */\nfunction stringifyException(ex) {\n    if (typeof ex === 'string') {\n        return ex;\n    }\n    else {\n        return JSON.stringify(flattenException(ex));\n    }\n}\n/**\n * Flattens an exception into key-value pairs by traversing the prototype chain\n * and coercing values to strings. Duplicate properties will not be overwritten;\n * the first insert wins.\n */\nfunction flattenException(ex) {\n    var result = {};\n    var current = ex;\n    while (current !== null) {\n        Object.getOwnPropertyNames(current).forEach(function (propertyName) {\n            if (result[propertyName])\n                return;\n            var value = current[propertyName];\n            if (value) {\n                result[propertyName] = String(value);\n            }\n        });\n        current = Object.getPrototypeOf(current);\n    }\n    return result;\n}\n//# sourceMappingURL=logging-error-handler.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { loggingErrorHandler } from './logging-error-handler';\n/** The global error handler delegate */\nvar delegateHandler = loggingErrorHandler();\n/**\n * Set the global error handler\n * @param {ErrorHandler} handler\n */\nexport function setGlobalErrorHandler(handler) {\n    delegateHandler = handler;\n}\n/**\n * Return the global error handler\n * @param {Exception} ex\n */\nexport function globalErrorHandler(ex) {\n    try {\n        delegateHandler(ex);\n    }\n    catch (_a) { } // eslint-disable-line no-empty\n}\n//# sourceMappingURL=global-error-handler.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport var TracesSamplerValues;\n(function (TracesSamplerValues) {\n    TracesSamplerValues[\"AlwaysOff\"] = \"always_off\";\n    TracesSamplerValues[\"AlwaysOn\"] = \"always_on\";\n    TracesSamplerValues[\"ParentBasedAlwaysOff\"] = \"parentbased_always_off\";\n    TracesSamplerValues[\"ParentBasedAlwaysOn\"] = \"parentbased_always_on\";\n    TracesSamplerValues[\"ParentBasedTraceIdRatio\"] = \"parentbased_traceidratio\";\n    TracesSamplerValues[\"TraceIdRatio\"] = \"traceidratio\";\n})(TracesSamplerValues || (TracesSamplerValues = {}));\n//# sourceMappingURL=sampling.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// Updates to this file should also be replicated to @opentelemetry/api too.\n/**\n * - globalThis (New standard)\n * - self (Will return the current window instance for supported browsers)\n * - window (fallback for older browser implementations)\n * - global (NodeJS implementation)\n * - <object> (When all else fails)\n */\n/** only globals that common to node and browsers are allowed */\n// eslint-disable-next-line node/no-unsupported-features/es-builtins, no-undef\nexport var _globalThis = typeof globalThis === 'object'\n    ? globalThis\n    : typeof self === 'object'\n        ? self\n        : typeof window === 'object'\n            ? window\n            : typeof global === 'object'\n                ? global\n                : {};\n//# sourceMappingURL=globalThis.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { DiagLogLevel } from '@opentelemetry/api';\nimport { TracesSamplerValues } from './sampling';\nimport { _globalThis } from '../platform/browser/globalThis';\nvar DEFAULT_LIST_SEPARATOR = ',';\n/**\n * Environment interface to define all names\n */\nvar ENVIRONMENT_BOOLEAN_KEYS = ['OTEL_SDK_DISABLED'];\nfunction isEnvVarABoolean(key) {\n    return (ENVIRONMENT_BOOLEAN_KEYS.indexOf(key) > -1);\n}\nvar ENVIRONMENT_NUMBERS_KEYS = [\n    'OTEL_BSP_EXPORT_TIMEOUT',\n    'OTEL_BSP_MAX_EXPORT_BATCH_SIZE',\n    'OTEL_BSP_MAX_QUEUE_SIZE',\n    'OTEL_BSP_SCHEDULE_DELAY',\n    'OTEL_BLRP_EXPORT_TIMEOUT',\n    'OTEL_BLRP_MAX_EXPORT_BATCH_SIZE',\n    'OTEL_BLRP_MAX_QUEUE_SIZE',\n    'OTEL_BLRP_SCHEDULE_DELAY',\n    'OTEL_ATTRIBUTE_VALUE_LENGTH_LIMIT',\n    'OTEL_ATTRIBUTE_COUNT_LIMIT',\n    'OTEL_SPAN_ATTRIBUTE_VALUE_LENGTH_LIMIT',\n    'OTEL_SPAN_ATTRIBUTE_COUNT_LIMIT',\n    'OTEL_LOGRECORD_ATTRIBUTE_VALUE_LENGTH_LIMIT',\n    'OTEL_LOGRECORD_ATTRIBUTE_COUNT_LIMIT',\n    'OTEL_SPAN_EVENT_COUNT_LIMIT',\n    'OTEL_SPAN_LINK_COUNT_LIMIT',\n    'OTEL_SPAN_ATTRIBUTE_PER_EVENT_COUNT_LIMIT',\n    'OTEL_SPAN_ATTRIBUTE_PER_LINK_COUNT_LIMIT',\n    'OTEL_EXPORTER_OTLP_TIMEOUT',\n    'OTEL_EXPORTER_OTLP_TRACES_TIMEOUT',\n    'OTEL_EXPORTER_OTLP_METRICS_TIMEOUT',\n    'OTEL_EXPORTER_OTLP_LOGS_TIMEOUT',\n    'OTEL_EXPORTER_JAEGER_AGENT_PORT',\n];\nfunction isEnvVarANumber(key) {\n    return (ENVIRONMENT_NUMBERS_KEYS.indexOf(key) > -1);\n}\nvar ENVIRONMENT_LISTS_KEYS = [\n    'OTEL_NO_PATCH_MODULES',\n    'OTEL_PROPAGATORS',\n];\nfunction isEnvVarAList(key) {\n    return ENVIRONMENT_LISTS_KEYS.indexOf(key) > -1;\n}\nexport var DEFAULT_ATTRIBUTE_VALUE_LENGTH_LIMIT = Infinity;\nexport var DEFAULT_ATTRIBUTE_COUNT_LIMIT = 128;\nexport var DEFAULT_SPAN_ATTRIBUTE_PER_EVENT_COUNT_LIMIT = 128;\nexport var DEFAULT_SPAN_ATTRIBUTE_PER_LINK_COUNT_LIMIT = 128;\n/**\n * Default environment variables\n */\nexport var DEFAULT_ENVIRONMENT = {\n    OTEL_SDK_DISABLED: false,\n    CONTAINER_NAME: '',\n    ECS_CONTAINER_METADATA_URI_V4: '',\n    ECS_CONTAINER_METADATA_URI: '',\n    HOSTNAME: '',\n    KUBERNETES_SERVICE_HOST: '',\n    NAMESPACE: '',\n    OTEL_BSP_EXPORT_TIMEOUT: 30000,\n    OTEL_BSP_MAX_EXPORT_BATCH_SIZE: 512,\n    OTEL_BSP_MAX_QUEUE_SIZE: 2048,\n    OTEL_BSP_SCHEDULE_DELAY: 5000,\n    OTEL_BLRP_EXPORT_TIMEOUT: 30000,\n    OTEL_BLRP_MAX_EXPORT_BATCH_SIZE: 512,\n    OTEL_BLRP_MAX_QUEUE_SIZE: 2048,\n    OTEL_BLRP_SCHEDULE_DELAY: 5000,\n    OTEL_EXPORTER_JAEGER_AGENT_HOST: '',\n    OTEL_EXPORTER_JAEGER_AGENT_PORT: 6832,\n    OTEL_EXPORTER_JAEGER_ENDPOINT: '',\n    OTEL_EXPORTER_JAEGER_PASSWORD: '',\n    OTEL_EXPORTER_JAEGER_USER: '',\n    OTEL_EXPORTER_OTLP_ENDPOINT: '',\n    OTEL_EXPORTER_OTLP_TRACES_ENDPOINT: '',\n    OTEL_EXPORTER_OTLP_METRICS_ENDPOINT: '',\n    OTEL_EXPORTER_OTLP_LOGS_ENDPOINT: '',\n    OTEL_EXPORTER_OTLP_HEADERS: '',\n    OTEL_EXPORTER_OTLP_TRACES_HEADERS: '',\n    OTEL_EXPORTER_OTLP_METRICS_HEADERS: '',\n    OTEL_EXPORTER_OTLP_LOGS_HEADERS: '',\n    OTEL_EXPORTER_OTLP_TIMEOUT: 10000,\n    OTEL_EXPORTER_OTLP_TRACES_TIMEOUT: 10000,\n    OTEL_EXPORTER_OTLP_METRICS_TIMEOUT: 10000,\n    OTEL_EXPORTER_OTLP_LOGS_TIMEOUT: 10000,\n    OTEL_EXPORTER_ZIPKIN_ENDPOINT: 'http://localhost:9411/api/v2/spans',\n    OTEL_LOG_LEVEL: DiagLogLevel.INFO,\n    OTEL_NO_PATCH_MODULES: [],\n    OTEL_PROPAGATORS: ['tracecontext', 'baggage'],\n    OTEL_RESOURCE_ATTRIBUTES: '',\n    OTEL_SERVICE_NAME: '',\n    OTEL_ATTRIBUTE_VALUE_LENGTH_LIMIT: DEFAULT_ATTRIBUTE_VALUE_LENGTH_LIMIT,\n    OTEL_ATTRIBUTE_COUNT_LIMIT: DEFAULT_ATTRIBUTE_COUNT_LIMIT,\n    OTEL_SPAN_ATTRIBUTE_VALUE_LENGTH_LIMIT: DEFAULT_ATTRIBUTE_VALUE_LENGTH_LIMIT,\n    OTEL_SPAN_ATTRIBUTE_COUNT_LIMIT: DEFAULT_ATTRIBUTE_COUNT_LIMIT,\n    OTEL_LOGRECORD_ATTRIBUTE_VALUE_LENGTH_LIMIT: DEFAULT_ATTRIBUTE_VALUE_LENGTH_LIMIT,\n    OTEL_LOGRECORD_ATTRIBUTE_COUNT_LIMIT: DEFAULT_ATTRIBUTE_COUNT_LIMIT,\n    OTEL_SPAN_EVENT_COUNT_LIMIT: 128,\n    OTEL_SPAN_LINK_COUNT_LIMIT: 128,\n    OTEL_SPAN_ATTRIBUTE_PER_EVENT_COUNT_LIMIT: DEFAULT_SPAN_ATTRIBUTE_PER_EVENT_COUNT_LIMIT,\n    OTEL_SPAN_ATTRIBUTE_PER_LINK_COUNT_LIMIT: DEFAULT_SPAN_ATTRIBUTE_PER_LINK_COUNT_LIMIT,\n    OTEL_TRACES_EXPORTER: '',\n    OTEL_TRACES_SAMPLER: TracesSamplerValues.ParentBasedAlwaysOn,\n    OTEL_TRACES_SAMPLER_ARG: '',\n    OTEL_LOGS_EXPORTER: '',\n    OTEL_EXPORTER_OTLP_INSECURE: '',\n    OTEL_EXPORTER_OTLP_TRACES_INSECURE: '',\n    OTEL_EXPORTER_OTLP_METRICS_INSECURE: '',\n    OTEL_EXPORTER_OTLP_LOGS_INSECURE: '',\n    OTEL_EXPORTER_OTLP_CERTIFICATE: '',\n    OTEL_EXPORTER_OTLP_TRACES_CERTIFICATE: '',\n    OTEL_EXPORTER_OTLP_METRICS_CERTIFICATE: '',\n    OTEL_EXPORTER_OTLP_LOGS_CERTIFICATE: '',\n    OTEL_EXPORTER_OTLP_COMPRESSION: '',\n    OTEL_EXPORTER_OTLP_TRACES_COMPRESSION: '',\n    OTEL_EXPORTER_OTLP_METRICS_COMPRESSION: '',\n    OTEL_EXPORTER_OTLP_LOGS_COMPRESSION: '',\n    OTEL_EXPORTER_OTLP_CLIENT_KEY: '',\n    OTEL_EXPORTER_OTLP_TRACES_CLIENT_KEY: '',\n    OTEL_EXPORTER_OTLP_METRICS_CLIENT_KEY: '',\n    OTEL_EXPORTER_OTLP_LOGS_CLIENT_KEY: '',\n    OTEL_EXPORTER_OTLP_CLIENT_CERTIFICATE: '',\n    OTEL_EXPORTER_OTLP_TRACES_CLIENT_CERTIFICATE: '',\n    OTEL_EXPORTER_OTLP_METRICS_CLIENT_CERTIFICATE: '',\n    OTEL_EXPORTER_OTLP_LOGS_CLIENT_CERTIFICATE: '',\n    OTEL_EXPORTER_OTLP_PROTOCOL: 'http/protobuf',\n    OTEL_EXPORTER_OTLP_TRACES_PROTOCOL: 'http/protobuf',\n    OTEL_EXPORTER_OTLP_METRICS_PROTOCOL: 'http/protobuf',\n    OTEL_EXPORTER_OTLP_LOGS_PROTOCOL: 'http/protobuf',\n    OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE: 'cumulative',\n};\n/**\n * @param key\n * @param environment\n * @param values\n */\nfunction parseBoolean(key, environment, values) {\n    if (typeof values[key] === 'undefined') {\n        return;\n    }\n    var value = String(values[key]);\n    // support case-insensitive \"true\"\n    environment[key] = value.toLowerCase() === 'true';\n}\n/**\n * Parses a variable as number with number validation\n * @param name\n * @param environment\n * @param values\n * @param min\n * @param max\n */\nfunction parseNumber(name, environment, values, min, max) {\n    if (min === void 0) { min = -Infinity; }\n    if (max === void 0) { max = Infinity; }\n    if (typeof values[name] !== 'undefined') {\n        var value = Number(values[name]);\n        if (!isNaN(value)) {\n            if (value < min) {\n                environment[name] = min;\n            }\n            else if (value > max) {\n                environment[name] = max;\n            }\n            else {\n                environment[name] = value;\n            }\n        }\n    }\n}\n/**\n * Parses list-like strings from input into output.\n * @param name\n * @param environment\n * @param values\n * @param separator\n */\nfunction parseStringList(name, output, input, separator) {\n    if (separator === void 0) { separator = DEFAULT_LIST_SEPARATOR; }\n    var givenValue = input[name];\n    if (typeof givenValue === 'string') {\n        output[name] = givenValue.split(separator).map(function (v) { return v.trim(); });\n    }\n}\n// The support string -> DiagLogLevel mappings\nvar logLevelMap = {\n    ALL: DiagLogLevel.ALL,\n    VERBOSE: DiagLogLevel.VERBOSE,\n    DEBUG: DiagLogLevel.DEBUG,\n    INFO: DiagLogLevel.INFO,\n    WARN: DiagLogLevel.WARN,\n    ERROR: DiagLogLevel.ERROR,\n    NONE: DiagLogLevel.NONE,\n};\n/**\n * Environmentally sets log level if valid log level string is provided\n * @param key\n * @param environment\n * @param values\n */\nfunction setLogLevelFromEnv(key, environment, values) {\n    var value = values[key];\n    if (typeof value === 'string') {\n        var theLevel = logLevelMap[value.toUpperCase()];\n        if (theLevel != null) {\n            environment[key] = theLevel;\n        }\n    }\n}\n/**\n * Parses environment values\n * @param values\n */\nexport function parseEnvironment(values) {\n    var environment = {};\n    for (var env in DEFAULT_ENVIRONMENT) {\n        var key = env;\n        switch (key) {\n            case 'OTEL_LOG_LEVEL':\n                setLogLevelFromEnv(key, environment, values);\n                break;\n            default:\n                if (isEnvVarABoolean(key)) {\n                    parseBoolean(key, environment, values);\n                }\n                else if (isEnvVarANumber(key)) {\n                    parseNumber(key, environment, values);\n                }\n                else if (isEnvVarAList(key)) {\n                    parseStringList(key, environment, values);\n                }\n                else {\n                    var value = values[key];\n                    if (typeof value !== 'undefined' && value !== null) {\n                        environment[key] = String(value);\n                    }\n                }\n        }\n    }\n    return environment;\n}\n/**\n * Get environment in node or browser without\n * populating default values.\n */\nexport function getEnvWithoutDefaults() {\n    return typeof process !== 'undefined' && process && process.env\n        ? parseEnvironment(process.env)\n        : parseEnvironment(_globalThis);\n}\n//# sourceMappingURL=environment.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { DEFAULT_ENVIRONMENT, parseEnvironment, } from '../../utils/environment';\nimport { _globalThis } from './globalThis';\n/**\n * Gets the environment variables\n */\nexport function getEnv() {\n    var globalEnv = parseEnvironment(_globalThis);\n    return Object.assign({}, DEFAULT_ENVIRONMENT, globalEnv);\n}\n//# sourceMappingURL=environment.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nfunction intValue(charCode) {\n    // 0-9\n    if (charCode >= 48 && charCode <= 57) {\n        return charCode - 48;\n    }\n    // a-f\n    if (charCode >= 97 && charCode <= 102) {\n        return charCode - 87;\n    }\n    // A-F\n    return charCode - 55;\n}\nexport function hexToBinary(hexStr) {\n    var buf = new Uint8Array(hexStr.length / 2);\n    var offset = 0;\n    for (var i = 0; i < hexStr.length; i += 2) {\n        var hi = intValue(hexStr.charCodeAt(i));\n        var lo = intValue(hexStr.charCodeAt(i + 1));\n        buf[offset++] = (hi << 4) | lo;\n    }\n    return buf;\n}\n//# sourceMappingURL=hex-to-binary.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport var otperformance = performance;\n//# sourceMappingURL=performance.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// this is autogenerated file, see scripts/version-update.js\nexport var VERSION = '1.21.0';\n//# sourceMappingURL=version.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// DO NOT EDIT, this is an Auto-generated file from scripts/semconv/templates//templates/SemanticAttributes.ts.j2\nexport var SemanticResourceAttributes = {\n    /**\n     * Name of the cloud provider.\n     */\n    CLOUD_PROVIDER: 'cloud.provider',\n    /**\n     * The cloud account ID the resource is assigned to.\n     */\n    CLOUD_ACCOUNT_ID: 'cloud.account.id',\n    /**\n     * The geographical region the resource is running. Refer to your provider&#39;s docs to see the available regions, for example [Alibaba Cloud regions](https://www.alibabacloud.com/help/doc-detail/40654.htm), [AWS regions](https://aws.amazon.com/about-aws/global-infrastructure/regions_az/), [Azure regions](https://azure.microsoft.com/en-us/global-infrastructure/geographies/), or [Google Cloud regions](https://cloud.google.com/about/locations).\n     */\n    CLOUD_REGION: 'cloud.region',\n    /**\n     * Cloud regions often have multiple, isolated locations known as zones to increase availability. Availability zone represents the zone where the resource is running.\n     *\n     * Note: Availability zones are called &#34;zones&#34; on Alibaba Cloud and Google Cloud.\n     */\n    CLOUD_AVAILABILITY_ZONE: 'cloud.availability_zone',\n    /**\n     * The cloud platform in use.\n     *\n     * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.\n     */\n    CLOUD_PLATFORM: 'cloud.platform',\n    /**\n     * The Amazon Resource Name (ARN) of an [ECS container instance](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ECS_instances.html).\n     */\n    AWS_ECS_CONTAINER_ARN: 'aws.ecs.container.arn',\n    /**\n     * The ARN of an [ECS cluster](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/clusters.html).\n     */\n    AWS_ECS_CLUSTER_ARN: 'aws.ecs.cluster.arn',\n    /**\n     * The [launch type](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/launch_types.html) for an ECS task.\n     */\n    AWS_ECS_LAUNCHTYPE: 'aws.ecs.launchtype',\n    /**\n     * The ARN of an [ECS task definition](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task_definitions.html).\n     */\n    AWS_ECS_TASK_ARN: 'aws.ecs.task.arn',\n    /**\n     * The task definition family this task definition is a member of.\n     */\n    AWS_ECS_TASK_FAMILY: 'aws.ecs.task.family',\n    /**\n     * The revision for this task definition.\n     */\n    AWS_ECS_TASK_REVISION: 'aws.ecs.task.revision',\n    /**\n     * The ARN of an EKS cluster.\n     */\n    AWS_EKS_CLUSTER_ARN: 'aws.eks.cluster.arn',\n    /**\n     * The name(s) of the AWS log group(s) an application is writing to.\n     *\n     * Note: Multiple log groups must be supported for cases like multi-container applications, where a single application has sidecar containers, and each write to their own log group.\n     */\n    AWS_LOG_GROUP_NAMES: 'aws.log.group.names',\n    /**\n     * The Amazon Resource Name(s) (ARN) of the AWS log group(s).\n     *\n     * Note: See the [log group ARN format documentation](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/iam-access-control-overview-cwl.html#CWL_ARN_Format).\n     */\n    AWS_LOG_GROUP_ARNS: 'aws.log.group.arns',\n    /**\n     * The name(s) of the AWS log stream(s) an application is writing to.\n     */\n    AWS_LOG_STREAM_NAMES: 'aws.log.stream.names',\n    /**\n     * The ARN(s) of the AWS log stream(s).\n     *\n     * Note: See the [log stream ARN format documentation](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/iam-access-control-overview-cwl.html#CWL_ARN_Format). One log group can contain several log streams, so these ARNs necessarily identify both a log group and a log stream.\n     */\n    AWS_LOG_STREAM_ARNS: 'aws.log.stream.arns',\n    /**\n     * Container name.\n     */\n    CONTAINER_NAME: 'container.name',\n    /**\n     * Container ID. Usually a UUID, as for example used to [identify Docker containers](https://docs.docker.com/engine/reference/run/#container-identification). The UUID might be abbreviated.\n     */\n    CONTAINER_ID: 'container.id',\n    /**\n     * The container runtime managing this container.\n     */\n    CONTAINER_RUNTIME: 'container.runtime',\n    /**\n     * Name of the image the container was built on.\n     */\n    CONTAINER_IMAGE_NAME: 'container.image.name',\n    /**\n     * Container image tag.\n     */\n    CONTAINER_IMAGE_TAG: 'container.image.tag',\n    /**\n     * Name of the [deployment environment](https://en.wikipedia.org/wiki/Deployment_environment) (aka deployment tier).\n     */\n    DEPLOYMENT_ENVIRONMENT: 'deployment.environment',\n    /**\n     * A unique identifier representing the device.\n     *\n     * Note: The device identifier MUST only be defined using the values outlined below. This value is not an advertising identifier and MUST NOT be used as such. On iOS (Swift or Objective-C), this value MUST be equal to the [vendor identifier](https://developer.apple.com/documentation/uikit/uidevice/1620059-identifierforvendor). On Android (Java or Kotlin), this value MUST be equal to the Firebase Installation ID or a globally unique UUID which is persisted across sessions in your application. More information can be found [here](https://developer.android.com/training/articles/user-data-ids) on best practices and exact implementation details. Caution should be taken when storing personal data or anything which can identify a user. GDPR and data protection laws may apply, ensure you do your own due diligence.\n     */\n    DEVICE_ID: 'device.id',\n    /**\n     * The model identifier for the device.\n     *\n     * Note: It&#39;s recommended this value represents a machine readable version of the model identifier rather than the market or consumer-friendly name of the device.\n     */\n    DEVICE_MODEL_IDENTIFIER: 'device.model.identifier',\n    /**\n     * The marketing name for the device model.\n     *\n     * Note: It&#39;s recommended this value represents a human readable version of the device model rather than a machine readable alternative.\n     */\n    DEVICE_MODEL_NAME: 'device.model.name',\n    /**\n     * The name of the single function that this runtime instance executes.\n     *\n     * Note: This is the name of the function as configured/deployed on the FaaS platform and is usually different from the name of the callback function (which may be stored in the [`code.namespace`/`code.function`](../../trace/semantic_conventions/span-general.md#source-code-attributes) span attributes).\n     */\n    FAAS_NAME: 'faas.name',\n    /**\n    * The unique ID of the single function that this runtime instance executes.\n    *\n    * Note: Depending on the cloud provider, use:\n  \n  * **AWS Lambda:** The function [ARN](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html).\n  Take care not to use the &#34;invoked ARN&#34; directly but replace any\n  [alias suffix](https://docs.aws.amazon.com/lambda/latest/dg/configuration-aliases.html) with the resolved function version, as the same runtime instance may be invokable with multiple\n  different aliases.\n  * **GCP:** The [URI of the resource](https://cloud.google.com/iam/docs/full-resource-names)\n  * **Azure:** The [Fully Qualified Resource ID](https://docs.microsoft.com/en-us/rest/api/resources/resources/get-by-id).\n  \n  On some providers, it may not be possible to determine the full ID at startup,\n  which is why this field cannot be made required. For example, on AWS the account ID\n  part of the ARN is not available without calling another AWS API\n  which may be deemed too slow for a short-running lambda function.\n  As an alternative, consider setting `faas.id` as a span attribute instead.\n    */\n    FAAS_ID: 'faas.id',\n    /**\n    * The immutable version of the function being executed.\n    *\n    * Note: Depending on the cloud provider and platform, use:\n  \n  * **AWS Lambda:** The [function version](https://docs.aws.amazon.com/lambda/latest/dg/configuration-versions.html)\n    (an integer represented as a decimal string).\n  * **Google Cloud Run:** The [revision](https://cloud.google.com/run/docs/managing/revisions)\n    (i.e., the function name plus the revision suffix).\n  * **Google Cloud Functions:** The value of the\n    [`K_REVISION` environment variable](https://cloud.google.com/functions/docs/env-var#runtime_environment_variables_set_automatically).\n  * **Azure Functions:** Not applicable. Do not set this attribute.\n    */\n    FAAS_VERSION: 'faas.version',\n    /**\n     * The execution environment ID as a string, that will be potentially reused for other invocations to the same function/function version.\n     *\n     * Note: * **AWS Lambda:** Use the (full) log stream name.\n     */\n    FAAS_INSTANCE: 'faas.instance',\n    /**\n     * The amount of memory available to the serverless function in MiB.\n     *\n     * Note: It&#39;s recommended to set this attribute since e.g. too little memory can easily stop a Java AWS Lambda function from working correctly. On AWS Lambda, the environment variable `AWS_LAMBDA_FUNCTION_MEMORY_SIZE` provides this information.\n     */\n    FAAS_MAX_MEMORY: 'faas.max_memory',\n    /**\n     * Unique host ID. For Cloud, this must be the instance_id assigned by the cloud provider.\n     */\n    HOST_ID: 'host.id',\n    /**\n     * Name of the host. On Unix systems, it may contain what the hostname command returns, or the fully qualified hostname, or another name specified by the user.\n     */\n    HOST_NAME: 'host.name',\n    /**\n     * Type of host. For Cloud, this must be the machine type.\n     */\n    HOST_TYPE: 'host.type',\n    /**\n     * The CPU architecture the host system is running on.\n     */\n    HOST_ARCH: 'host.arch',\n    /**\n     * Name of the VM image or OS install the host was instantiated from.\n     */\n    HOST_IMAGE_NAME: 'host.image.name',\n    /**\n     * VM image ID. For Cloud, this value is from the provider.\n     */\n    HOST_IMAGE_ID: 'host.image.id',\n    /**\n     * The version string of the VM image as defined in [Version SpanAttributes](README.md#version-attributes).\n     */\n    HOST_IMAGE_VERSION: 'host.image.version',\n    /**\n     * The name of the cluster.\n     */\n    K8S_CLUSTER_NAME: 'k8s.cluster.name',\n    /**\n     * The name of the Node.\n     */\n    K8S_NODE_NAME: 'k8s.node.name',\n    /**\n     * The UID of the Node.\n     */\n    K8S_NODE_UID: 'k8s.node.uid',\n    /**\n     * The name of the namespace that the pod is running in.\n     */\n    K8S_NAMESPACE_NAME: 'k8s.namespace.name',\n    /**\n     * The UID of the Pod.\n     */\n    K8S_POD_UID: 'k8s.pod.uid',\n    /**\n     * The name of the Pod.\n     */\n    K8S_POD_NAME: 'k8s.pod.name',\n    /**\n     * The name of the Container in a Pod template.\n     */\n    K8S_CONTAINER_NAME: 'k8s.container.name',\n    /**\n     * The UID of the ReplicaSet.\n     */\n    K8S_REPLICASET_UID: 'k8s.replicaset.uid',\n    /**\n     * The name of the ReplicaSet.\n     */\n    K8S_REPLICASET_NAME: 'k8s.replicaset.name',\n    /**\n     * The UID of the Deployment.\n     */\n    K8S_DEPLOYMENT_UID: 'k8s.deployment.uid',\n    /**\n     * The name of the Deployment.\n     */\n    K8S_DEPLOYMENT_NAME: 'k8s.deployment.name',\n    /**\n     * The UID of the StatefulSet.\n     */\n    K8S_STATEFULSET_UID: 'k8s.statefulset.uid',\n    /**\n     * The name of the StatefulSet.\n     */\n    K8S_STATEFULSET_NAME: 'k8s.statefulset.name',\n    /**\n     * The UID of the DaemonSet.\n     */\n    K8S_DAEMONSET_UID: 'k8s.daemonset.uid',\n    /**\n     * The name of the DaemonSet.\n     */\n    K8S_DAEMONSET_NAME: 'k8s.daemonset.name',\n    /**\n     * The UID of the Job.\n     */\n    K8S_JOB_UID: 'k8s.job.uid',\n    /**\n     * The name of the Job.\n     */\n    K8S_JOB_NAME: 'k8s.job.name',\n    /**\n     * The UID of the CronJob.\n     */\n    K8S_CRONJOB_UID: 'k8s.cronjob.uid',\n    /**\n     * The name of the CronJob.\n     */\n    K8S_CRONJOB_NAME: 'k8s.cronjob.name',\n    /**\n     * The operating system type.\n     */\n    OS_TYPE: 'os.type',\n    /**\n     * Human readable (not intended to be parsed) OS version information, like e.g. reported by `ver` or `lsb_release -a` commands.\n     */\n    OS_DESCRIPTION: 'os.description',\n    /**\n     * Human readable operating system name.\n     */\n    OS_NAME: 'os.name',\n    /**\n     * The version string of the operating system as defined in [Version SpanAttributes](../../resource/semantic_conventions/README.md#version-attributes).\n     */\n    OS_VERSION: 'os.version',\n    /**\n     * Process identifier (PID).\n     */\n    PROCESS_PID: 'process.pid',\n    /**\n     * The name of the process executable. On Linux based systems, can be set to the `Name` in `proc/[pid]/status`. On Windows, can be set to the base name of `GetProcessImageFileNameW`.\n     */\n    PROCESS_EXECUTABLE_NAME: 'process.executable.name',\n    /**\n     * The full path to the process executable. On Linux based systems, can be set to the target of `proc/[pid]/exe`. On Windows, can be set to the result of `GetProcessImageFileNameW`.\n     */\n    PROCESS_EXECUTABLE_PATH: 'process.executable.path',\n    /**\n     * The command used to launch the process (i.e. the command name). On Linux based systems, can be set to the zeroth string in `proc/[pid]/cmdline`. On Windows, can be set to the first parameter extracted from `GetCommandLineW`.\n     */\n    PROCESS_COMMAND: 'process.command',\n    /**\n     * The full command used to launch the process as a single string representing the full command. On Windows, can be set to the result of `GetCommandLineW`. Do not set this if you have to assemble it just for monitoring; use `process.command_args` instead.\n     */\n    PROCESS_COMMAND_LINE: 'process.command_line',\n    /**\n     * All the command arguments (including the command/executable itself) as received by the process. On Linux-based systems (and some other Unixoid systems supporting procfs), can be set according to the list of null-delimited strings extracted from `proc/[pid]/cmdline`. For libc-based executables, this would be the full argv vector passed to `main`.\n     */\n    PROCESS_COMMAND_ARGS: 'process.command_args',\n    /**\n     * The username of the user that owns the process.\n     */\n    PROCESS_OWNER: 'process.owner',\n    /**\n     * The name of the runtime of this process. For compiled native binaries, this SHOULD be the name of the compiler.\n     */\n    PROCESS_RUNTIME_NAME: 'process.runtime.name',\n    /**\n     * The version of the runtime of this process, as returned by the runtime without modification.\n     */\n    PROCESS_RUNTIME_VERSION: 'process.runtime.version',\n    /**\n     * An additional description about the runtime of the process, for example a specific vendor customization of the runtime environment.\n     */\n    PROCESS_RUNTIME_DESCRIPTION: 'process.runtime.description',\n    /**\n     * Logical name of the service.\n     *\n     * Note: MUST be the same for all instances of horizontally scaled services. If the value was not specified, SDKs MUST fallback to `unknown_service:` concatenated with [`process.executable.name`](process.md#process), e.g. `unknown_service:bash`. If `process.executable.name` is not available, the value MUST be set to `unknown_service`.\n     */\n    SERVICE_NAME: 'service.name',\n    /**\n     * A namespace for `service.name`.\n     *\n     * Note: A string value having a meaning that helps to distinguish a group of services, for example the team name that owns a group of services. `service.name` is expected to be unique within the same namespace. If `service.namespace` is not specified in the Resource then `service.name` is expected to be unique for all services that have no explicit namespace defined (so the empty/unspecified namespace is simply one more valid namespace). Zero-length namespace string is assumed equal to unspecified namespace.\n     */\n    SERVICE_NAMESPACE: 'service.namespace',\n    /**\n     * The string ID of the service instance.\n     *\n     * Note: MUST be unique for each instance of the same `service.namespace,service.name` pair (in other words `service.namespace,service.name,service.instance.id` triplet MUST be globally unique). The ID helps to distinguish instances of the same service that exist at the same time (e.g. instances of a horizontally scaled service). It is preferable for the ID to be persistent and stay the same for the lifetime of the service instance, however it is acceptable that the ID is ephemeral and changes during important lifetime events for the service (e.g. service restarts). If the service has no inherent unique ID that can be used as the value of this attribute it is recommended to generate a random Version 1 or Version 4 RFC 4122 UUID (services aiming for reproducible UUIDs may also use Version 5, see RFC 4122 for more recommendations).\n     */\n    SERVICE_INSTANCE_ID: 'service.instance.id',\n    /**\n     * The version string of the service API or implementation.\n     */\n    SERVICE_VERSION: 'service.version',\n    /**\n     * The name of the telemetry SDK as defined above.\n     */\n    TELEMETRY_SDK_NAME: 'telemetry.sdk.name',\n    /**\n     * The language of the telemetry SDK.\n     */\n    TELEMETRY_SDK_LANGUAGE: 'telemetry.sdk.language',\n    /**\n     * The version string of the telemetry SDK.\n     */\n    TELEMETRY_SDK_VERSION: 'telemetry.sdk.version',\n    /**\n     * The version string of the auto instrumentation agent, if used.\n     */\n    TELEMETRY_AUTO_VERSION: 'telemetry.auto.version',\n    /**\n     * The name of the web engine.\n     */\n    WEBENGINE_NAME: 'webengine.name',\n    /**\n     * The version of the web engine.\n     */\n    WEBENGINE_VERSION: 'webengine.version',\n    /**\n     * Additional description of the web engine (e.g. detailed version and edition information).\n     */\n    WEBENGINE_DESCRIPTION: 'webengine.description',\n};\nexport var CloudProviderValues = {\n    /** Alibaba Cloud. */\n    ALIBABA_CLOUD: 'alibaba_cloud',\n    /** Amazon Web Services. */\n    AWS: 'aws',\n    /** Microsoft Azure. */\n    AZURE: 'azure',\n    /** Google Cloud Platform. */\n    GCP: 'gcp',\n};\nexport var CloudPlatformValues = {\n    /** Alibaba Cloud Elastic Compute Service. */\n    ALIBABA_CLOUD_ECS: 'alibaba_cloud_ecs',\n    /** Alibaba Cloud Function Compute. */\n    ALIBABA_CLOUD_FC: 'alibaba_cloud_fc',\n    /** AWS Elastic Compute Cloud. */\n    AWS_EC2: 'aws_ec2',\n    /** AWS Elastic Container Service. */\n    AWS_ECS: 'aws_ecs',\n    /** AWS Elastic Kubernetes Service. */\n    AWS_EKS: 'aws_eks',\n    /** AWS Lambda. */\n    AWS_LAMBDA: 'aws_lambda',\n    /** AWS Elastic Beanstalk. */\n    AWS_ELASTIC_BEANSTALK: 'aws_elastic_beanstalk',\n    /** Azure Virtual Machines. */\n    AZURE_VM: 'azure_vm',\n    /** Azure Container Instances. */\n    AZURE_CONTAINER_INSTANCES: 'azure_container_instances',\n    /** Azure Kubernetes Service. */\n    AZURE_AKS: 'azure_aks',\n    /** Azure Functions. */\n    AZURE_FUNCTIONS: 'azure_functions',\n    /** Azure App Service. */\n    AZURE_APP_SERVICE: 'azure_app_service',\n    /** Google Cloud Compute Engine (GCE). */\n    GCP_COMPUTE_ENGINE: 'gcp_compute_engine',\n    /** Google Cloud Run. */\n    GCP_CLOUD_RUN: 'gcp_cloud_run',\n    /** Google Cloud Kubernetes Engine (GKE). */\n    GCP_KUBERNETES_ENGINE: 'gcp_kubernetes_engine',\n    /** Google Cloud Functions (GCF). */\n    GCP_CLOUD_FUNCTIONS: 'gcp_cloud_functions',\n    /** Google Cloud App Engine (GAE). */\n    GCP_APP_ENGINE: 'gcp_app_engine',\n};\nexport var AwsEcsLaunchtypeValues = {\n    /** ec2. */\n    EC2: 'ec2',\n    /** fargate. */\n    FARGATE: 'fargate',\n};\nexport var HostArchValues = {\n    /** AMD64. */\n    AMD64: 'amd64',\n    /** ARM32. */\n    ARM32: 'arm32',\n    /** ARM64. */\n    ARM64: 'arm64',\n    /** Itanium. */\n    IA64: 'ia64',\n    /** 32-bit PowerPC. */\n    PPC32: 'ppc32',\n    /** 64-bit PowerPC. */\n    PPC64: 'ppc64',\n    /** 32-bit x86. */\n    X86: 'x86',\n};\nexport var OsTypeValues = {\n    /** Microsoft Windows. */\n    WINDOWS: 'windows',\n    /** Linux. */\n    LINUX: 'linux',\n    /** Apple Darwin. */\n    DARWIN: 'darwin',\n    /** FreeBSD. */\n    FREEBSD: 'freebsd',\n    /** NetBSD. */\n    NETBSD: 'netbsd',\n    /** OpenBSD. */\n    OPENBSD: 'openbsd',\n    /** DragonFly BSD. */\n    DRAGONFLYBSD: 'dragonflybsd',\n    /** HP-UX (Hewlett Packard Unix). */\n    HPUX: 'hpux',\n    /** AIX (Advanced Interactive eXecutive). */\n    AIX: 'aix',\n    /** Oracle Solaris. */\n    SOLARIS: 'solaris',\n    /** IBM z/OS. */\n    Z_OS: 'z_os',\n};\nexport var TelemetrySdkLanguageValues = {\n    /** cpp. */\n    CPP: 'cpp',\n    /** dotnet. */\n    DOTNET: 'dotnet',\n    /** erlang. */\n    ERLANG: 'erlang',\n    /** go. */\n    GO: 'go',\n    /** java. */\n    JAVA: 'java',\n    /** nodejs. */\n    NODEJS: 'nodejs',\n    /** php. */\n    PHP: 'php',\n    /** python. */\n    PYTHON: 'python',\n    /** ruby. */\n    RUBY: 'ruby',\n    /** webjs. */\n    WEBJS: 'webjs',\n};\n//# sourceMappingURL=SemanticResourceAttributes.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar _a;\nimport { VERSION } from '../../version';\nimport { TelemetrySdkLanguageValues, SemanticResourceAttributes, } from '@opentelemetry/semantic-conventions';\n/** Constants describing the SDK in use */\nexport var SDK_INFO = (_a = {},\n    _a[SemanticResourceAttributes.TELEMETRY_SDK_NAME] = 'opentelemetry',\n    _a[SemanticResourceAttributes.PROCESS_RUNTIME_NAME] = 'browser',\n    _a[SemanticResourceAttributes.TELEMETRY_SDK_LANGUAGE] = TelemetrySdkLanguageValues.WEBJS,\n    _a[SemanticResourceAttributes.TELEMETRY_SDK_VERSION] = VERSION,\n    _a);\n//# sourceMappingURL=sdk-info.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { otperformance as performance } from '../platform';\nvar NANOSECOND_DIGITS = 9;\nvar NANOSECOND_DIGITS_IN_MILLIS = 6;\nvar MILLISECONDS_TO_NANOSECONDS = Math.pow(10, NANOSECOND_DIGITS_IN_MILLIS);\nvar SECOND_TO_NANOSECONDS = Math.pow(10, NANOSECOND_DIGITS);\n/**\n * Converts a number of milliseconds from epoch to HrTime([seconds, remainder in nanoseconds]).\n * @param epochMillis\n */\nexport function millisToHrTime(epochMillis) {\n    var epochSeconds = epochMillis / 1000;\n    // Decimals only.\n    var seconds = Math.trunc(epochSeconds);\n    // Round sub-nanosecond accuracy to nanosecond.\n    var nanos = Math.round((epochMillis % 1000) * MILLISECONDS_TO_NANOSECONDS);\n    return [seconds, nanos];\n}\nexport function getTimeOrigin() {\n    var timeOrigin = performance.timeOrigin;\n    if (typeof timeOrigin !== 'number') {\n        var perf = performance;\n        timeOrigin = perf.timing && perf.timing.fetchStart;\n    }\n    return timeOrigin;\n}\n/**\n * Returns an hrtime calculated via performance component.\n * @param performanceNow\n */\nexport function hrTime(performanceNow) {\n    var timeOrigin = millisToHrTime(getTimeOrigin());\n    var now = millisToHrTime(typeof performanceNow === 'number' ? performanceNow : performance.now());\n    return addHrTimes(timeOrigin, now);\n}\n/**\n *\n * Converts a TimeInput to an HrTime, defaults to _hrtime().\n * @param time\n */\nexport function timeInputToHrTime(time) {\n    // process.hrtime\n    if (isTimeInputHrTime(time)) {\n        return time;\n    }\n    else if (typeof time === 'number') {\n        // Must be a performance.now() if it's smaller than process start time.\n        if (time < getTimeOrigin()) {\n            return hrTime(time);\n        }\n        else {\n            // epoch milliseconds or performance.timeOrigin\n            return millisToHrTime(time);\n        }\n    }\n    else if (time instanceof Date) {\n        return millisToHrTime(time.getTime());\n    }\n    else {\n        throw TypeError('Invalid input type');\n    }\n}\n/**\n * Returns a duration of two hrTime.\n * @param startTime\n * @param endTime\n */\nexport function hrTimeDuration(startTime, endTime) {\n    var seconds = endTime[0] - startTime[0];\n    var nanos = endTime[1] - startTime[1];\n    // overflow\n    if (nanos < 0) {\n        seconds -= 1;\n        // negate\n        nanos += SECOND_TO_NANOSECONDS;\n    }\n    return [seconds, nanos];\n}\n/**\n * Convert hrTime to timestamp, for example \"2019-05-14T17:00:00.000123456Z\"\n * @param time\n */\nexport function hrTimeToTimeStamp(time) {\n    var precision = NANOSECOND_DIGITS;\n    var tmp = \"\" + '0'.repeat(precision) + time[1] + \"Z\";\n    var nanoString = tmp.substr(tmp.length - precision - 1);\n    var date = new Date(time[0] * 1000).toISOString();\n    return date.replace('000Z', nanoString);\n}\n/**\n * Convert hrTime to nanoseconds.\n * @param time\n */\nexport function hrTimeToNanoseconds(time) {\n    return time[0] * SECOND_TO_NANOSECONDS + time[1];\n}\n/**\n * Convert hrTime to milliseconds.\n * @param time\n */\nexport function hrTimeToMilliseconds(time) {\n    return time[0] * 1e3 + time[1] / 1e6;\n}\n/**\n * Convert hrTime to microseconds.\n * @param time\n */\nexport function hrTimeToMicroseconds(time) {\n    return time[0] * 1e6 + time[1] / 1e3;\n}\n/**\n * check if time is HrTime\n * @param value\n */\nexport function isTimeInputHrTime(value) {\n    return (Array.isArray(value) &&\n        value.length === 2 &&\n        typeof value[0] === 'number' &&\n        typeof value[1] === 'number');\n}\n/**\n * check if input value is a correct types.TimeInput\n * @param value\n */\nexport function isTimeInput(value) {\n    return (isTimeInputHrTime(value) ||\n        typeof value === 'number' ||\n        value instanceof Date);\n}\n/**\n * Given 2 HrTime formatted times, return their sum as an HrTime.\n */\nexport function addHrTimes(time1, time2) {\n    var out = [time1[0] + time2[0], time1[1] + time2[1]];\n    // Nanoseconds\n    if (out[1] >= SECOND_TO_NANOSECONDS) {\n        out[1] -= SECOND_TO_NANOSECONDS;\n        out[0] += 1;\n    }\n    return out;\n}\n//# sourceMappingURL=time.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport var ExportResultCode;\n(function (ExportResultCode) {\n    ExportResultCode[ExportResultCode[\"SUCCESS\"] = 0] = \"SUCCESS\";\n    ExportResultCode[ExportResultCode[\"FAILED\"] = 1] = \"FAILED\";\n})(ExportResultCode || (ExportResultCode = {}));\n//# sourceMappingURL=ExportResult.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/* eslint-disable @typescript-eslint/no-explicit-any */\n/**\n * based on lodash in order to support esm builds without esModuleInterop.\n * lodash is using MIT License.\n **/\nvar objectTag = '[object Object]';\nvar nullTag = '[object Null]';\nvar undefinedTag = '[object Undefined]';\nvar funcProto = Function.prototype;\nvar funcToString = funcProto.toString;\nvar objectCtorString = funcToString.call(Object);\nvar getPrototype = overArg(Object.getPrototypeOf, Object);\nvar objectProto = Object.prototype;\nvar hasOwnProperty = objectProto.hasOwnProperty;\nvar symToStringTag = Symbol ? Symbol.toStringTag : undefined;\nvar nativeObjectToString = objectProto.toString;\n/**\n * Creates a unary function that invokes `func` with its argument transformed.\n *\n * @private\n * @param {Function} func The function to wrap.\n * @param {Function} transform The argument transform.\n * @returns {Function} Returns the new function.\n */\nfunction overArg(func, transform) {\n    return function (arg) {\n        return func(transform(arg));\n    };\n}\n/**\n * Checks if `value` is a plain object, that is, an object created by the\n * `Object` constructor or one with a `[[Prototype]]` of `null`.\n *\n * @static\n * @memberOf _\n * @since 0.8.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n * }\n *\n * _.isPlainObject(new Foo);\n * // => false\n *\n * _.isPlainObject([1, 2, 3]);\n * // => false\n *\n * _.isPlainObject({ 'x': 0, 'y': 0 });\n * // => true\n *\n * _.isPlainObject(Object.create(null));\n * // => true\n */\nexport function isPlainObject(value) {\n    if (!isObjectLike(value) || baseGetTag(value) !== objectTag) {\n        return false;\n    }\n    var proto = getPrototype(value);\n    if (proto === null) {\n        return true;\n    }\n    var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;\n    return (typeof Ctor == 'function' &&\n        Ctor instanceof Ctor &&\n        funcToString.call(Ctor) === objectCtorString);\n}\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n    return value != null && typeof value == 'object';\n}\n/**\n * The base implementation of `getTag` without fallbacks for buggy environments.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nfunction baseGetTag(value) {\n    if (value == null) {\n        return value === undefined ? undefinedTag : nullTag;\n    }\n    return symToStringTag && symToStringTag in Object(value)\n        ? getRawTag(value)\n        : objectToString(value);\n}\n/**\n * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the raw `toStringTag`.\n */\nfunction getRawTag(value) {\n    var isOwn = hasOwnProperty.call(value, symToStringTag), tag = value[symToStringTag];\n    var unmasked = false;\n    try {\n        value[symToStringTag] = undefined;\n        unmasked = true;\n    }\n    catch (e) {\n        // silence\n    }\n    var result = nativeObjectToString.call(value);\n    if (unmasked) {\n        if (isOwn) {\n            value[symToStringTag] = tag;\n        }\n        else {\n            delete value[symToStringTag];\n        }\n    }\n    return result;\n}\n/**\n * Converts `value` to a string using `Object.prototype.toString`.\n *\n * @private\n * @param {*} value The value to convert.\n * @returns {string} Returns the converted string.\n */\nfunction objectToString(value) {\n    return nativeObjectToString.call(value);\n}\n//# sourceMappingURL=lodash.merge.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { isPlainObject } from './lodash.merge';\nvar MAX_LEVEL = 20;\n/**\n * Merges objects together\n * @param args - objects / values to be merged\n */\nexport function merge() {\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n    }\n    var result = args.shift();\n    var objects = new WeakMap();\n    while (args.length > 0) {\n        result = mergeTwoObjects(result, args.shift(), 0, objects);\n    }\n    return result;\n}\nfunction takeValue(value) {\n    if (isArray(value)) {\n        return value.slice();\n    }\n    return value;\n}\n/**\n * Merges two objects\n * @param one - first object\n * @param two - second object\n * @param level - current deep level\n * @param objects - objects holder that has been already referenced - to prevent\n * cyclic dependency\n */\nfunction mergeTwoObjects(one, two, level, objects) {\n    if (level === void 0) { level = 0; }\n    var result;\n    if (level > MAX_LEVEL) {\n        return undefined;\n    }\n    level++;\n    if (isPrimitive(one) || isPrimitive(two) || isFunction(two)) {\n        result = takeValue(two);\n    }\n    else if (isArray(one)) {\n        result = one.slice();\n        if (isArray(two)) {\n            for (var i = 0, j = two.length; i < j; i++) {\n                result.push(takeValue(two[i]));\n            }\n        }\n        else if (isObject(two)) {\n            var keys = Object.keys(two);\n            for (var i = 0, j = keys.length; i < j; i++) {\n                var key = keys[i];\n                result[key] = takeValue(two[key]);\n            }\n        }\n    }\n    else if (isObject(one)) {\n        if (isObject(two)) {\n            if (!shouldMerge(one, two)) {\n                return two;\n            }\n            result = Object.assign({}, one);\n            var keys = Object.keys(two);\n            for (var i = 0, j = keys.length; i < j; i++) {\n                var key = keys[i];\n                var twoValue = two[key];\n                if (isPrimitive(twoValue)) {\n                    if (typeof twoValue === 'undefined') {\n                        delete result[key];\n                    }\n                    else {\n                        // result[key] = takeValue(twoValue);\n                        result[key] = twoValue;\n                    }\n                }\n                else {\n                    var obj1 = result[key];\n                    var obj2 = twoValue;\n                    if (wasObjectReferenced(one, key, objects) ||\n                        wasObjectReferenced(two, key, objects)) {\n                        delete result[key];\n                    }\n                    else {\n                        if (isObject(obj1) && isObject(obj2)) {\n                            var arr1 = objects.get(obj1) || [];\n                            var arr2 = objects.get(obj2) || [];\n                            arr1.push({ obj: one, key: key });\n                            arr2.push({ obj: two, key: key });\n                            objects.set(obj1, arr1);\n                            objects.set(obj2, arr2);\n                        }\n                        result[key] = mergeTwoObjects(result[key], twoValue, level, objects);\n                    }\n                }\n            }\n        }\n        else {\n            result = two;\n        }\n    }\n    return result;\n}\n/**\n * Function to check if object has been already reference\n * @param obj\n * @param key\n * @param objects\n */\nfunction wasObjectReferenced(obj, key, objects) {\n    var arr = objects.get(obj[key]) || [];\n    for (var i = 0, j = arr.length; i < j; i++) {\n        var info = arr[i];\n        if (info.key === key && info.obj === obj) {\n            return true;\n        }\n    }\n    return false;\n}\nfunction isArray(value) {\n    return Array.isArray(value);\n}\nfunction isFunction(value) {\n    return typeof value === 'function';\n}\nfunction isObject(value) {\n    return (!isPrimitive(value) &&\n        !isArray(value) &&\n        !isFunction(value) &&\n        typeof value === 'object');\n}\nfunction isPrimitive(value) {\n    return (typeof value === 'string' ||\n        typeof value === 'number' ||\n        typeof value === 'boolean' ||\n        typeof value === 'undefined' ||\n        value instanceof Date ||\n        value instanceof RegExp ||\n        value === null);\n}\nfunction shouldMerge(one, two) {\n    if (!isPlainObject(one) || !isPlainObject(two)) {\n        return false;\n    }\n    return true;\n}\n//# sourceMappingURL=merge.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n/**\n * Error that is thrown on timeouts.\n */\nvar TimeoutError = /** @class */ (function (_super) {\n    __extends(TimeoutError, _super);\n    function TimeoutError(message) {\n        var _this = _super.call(this, message) || this;\n        // manually adjust prototype to retain `instanceof` functionality when targeting ES5, see:\n        // https://github.com/Microsoft/TypeScript-wiki/blob/main/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work\n        Object.setPrototypeOf(_this, TimeoutError.prototype);\n        return _this;\n    }\n    return TimeoutError;\n}(Error));\nexport { TimeoutError };\n/**\n * Adds a timeout to a promise and rejects if the specified timeout has elapsed. Also rejects if the specified promise\n * rejects, and resolves if the specified promise resolves.\n *\n * <p> NOTE: this operation will continue even after it throws a {@link TimeoutError}.\n *\n * @param promise promise to use with timeout.\n * @param timeout the timeout in milliseconds until the returned promise is rejected.\n */\nexport function callWithTimeout(promise, timeout) {\n    var timeoutHandle;\n    var timeoutPromise = new Promise(function timeoutFunction(_resolve, reject) {\n        timeoutHandle = setTimeout(function timeoutHandler() {\n            reject(new TimeoutError('Operation timed out.'));\n        }, timeout);\n    });\n    return Promise.race([promise, timeoutPromise]).then(function (result) {\n        clearTimeout(timeoutHandle);\n        return result;\n    }, function (reason) {\n        clearTimeout(timeoutHandle);\n        throw reason;\n    });\n}\n//# sourceMappingURL=timeout.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar Deferred = /** @class */ (function () {\n    function Deferred() {\n        var _this = this;\n        this._promise = new Promise(function (resolve, reject) {\n            _this._resolve = resolve;\n            _this._reject = reject;\n        });\n    }\n    Object.defineProperty(Deferred.prototype, \"promise\", {\n        get: function () {\n            return this._promise;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Deferred.prototype.resolve = function (val) {\n        this._resolve(val);\n    };\n    Deferred.prototype.reject = function (err) {\n        this._reject(err);\n    };\n    return Deferred;\n}());\nexport { Deferred };\n//# sourceMappingURL=promise.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nvar __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n        if (ar || !(i in from)) {\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n            ar[i] = from[i];\n        }\n    }\n    return to.concat(ar || Array.prototype.slice.call(from));\n};\nimport { Deferred } from './promise';\n/**\n * Bind the callback and only invoke the callback once regardless how many times `BindOnceFuture.call` is invoked.\n */\nvar BindOnceFuture = /** @class */ (function () {\n    function BindOnceFuture(_callback, _that) {\n        this._callback = _callback;\n        this._that = _that;\n        this._isCalled = false;\n        this._deferred = new Deferred();\n    }\n    Object.defineProperty(BindOnceFuture.prototype, \"isCalled\", {\n        get: function () {\n            return this._isCalled;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(BindOnceFuture.prototype, \"promise\", {\n        get: function () {\n            return this._deferred.promise;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    BindOnceFuture.prototype.call = function () {\n        var _a;\n        var _this = this;\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        if (!this._isCalled) {\n            this._isCalled = true;\n            try {\n                Promise.resolve((_a = this._callback).call.apply(_a, __spreadArray([this._that], __read(args), false))).then(function (val) { return _this._deferred.resolve(val); }, function (err) { return _this._deferred.reject(err); });\n            }\n            catch (err) {\n                this._deferred.reject(err);\n            }\n        }\n        return this._deferred.promise;\n    };\n    return BindOnceFuture;\n}());\nexport { BindOnceFuture };\n//# sourceMappingURL=callback.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { context } from '@opentelemetry/api';\nimport { suppressTracing } from '../trace/suppress-tracing';\n/**\n * @internal\n * Shared functionality used by Exporters while exporting data, including suppresion of Traces.\n */\nexport function _export(exporter, arg) {\n    return new Promise(function (resolve) {\n        // prevent downstream exporter calls from generating spans\n        context.with(suppressTracing(context.active()), function () {\n            exporter.export(arg, function (result) {\n                resolve(result);\n            });\n        });\n    });\n}\n//# sourceMappingURL=exporter.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport * from './baggage/propagation/W3CBaggagePropagator';\nexport * from './common/anchored-clock';\nexport * from './common/attributes';\nexport * from './common/global-error-handler';\nexport * from './common/logging-error-handler';\nexport * from './common/time';\nexport * from './common/types';\nexport * from './common/hex-to-binary';\nexport * from './ExportResult';\nimport * as baggageUtils_1 from './baggage/utils';\nexport { baggageUtils_1 as baggageUtils };\nexport * from './platform';\nexport * from './propagation/composite';\nexport * from './trace/W3CTraceContextPropagator';\nexport * from './trace/IdGenerator';\nexport * from './trace/rpc-metadata';\nexport * from './trace/sampler/AlwaysOffSampler';\nexport * from './trace/sampler/AlwaysOnSampler';\nexport * from './trace/sampler/ParentBasedSampler';\nexport * from './trace/sampler/TraceIdRatioBasedSampler';\nexport * from './trace/suppress-tracing';\nexport * from './trace/TraceState';\nexport * from './utils/environment';\nexport * from './utils/merge';\nexport * from './utils/sampling';\nexport * from './utils/timeout';\nexport * from './utils/url';\nexport * from './utils/wrap';\nexport * from './utils/callback';\nexport * from './version';\nimport { _export } from './internal/exporter';\nexport var internal = {\n    _export: _export,\n};\n//# sourceMappingURL=index.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nimport { diag } from '@opentelemetry/api';\nimport { getEnv } from '@opentelemetry/core';\nvar DEFAULT_TRACE_TIMEOUT = 10000;\nexport var DEFAULT_EXPORT_MAX_ATTEMPTS = 5;\nexport var DEFAULT_EXPORT_INITIAL_BACKOFF = 1000;\nexport var DEFAULT_EXPORT_MAX_BACKOFF = 5000;\nexport var DEFAULT_EXPORT_BACKOFF_MULTIPLIER = 1.5;\n/**\n * Parses headers from config leaving only those that have defined values\n * @param partialHeaders\n */\nexport function parseHeaders(partialHeaders) {\n    if (partialHeaders === void 0) { partialHeaders = {}; }\n    var headers = {};\n    Object.entries(partialHeaders).forEach(function (_a) {\n        var _b = __read(_a, 2), key = _b[0], value = _b[1];\n        if (typeof value !== 'undefined') {\n            headers[key] = String(value);\n        }\n        else {\n            diag.warn(\"Header \\\"\" + key + \"\\\" has wrong value and will be ignored\");\n        }\n    });\n    return headers;\n}\n/**\n * Adds path (version + signal) to a no per-signal endpoint\n * @param url\n * @param path\n * @returns url + path\n */\nexport function appendResourcePathToUrl(url, path) {\n    if (!url.endsWith('/')) {\n        url = url + '/';\n    }\n    return url + path;\n}\n/**\n * Adds root path to signal specific endpoint when endpoint contains no path part and no root path\n * @param url\n * @returns url\n */\nexport function appendRootPathToUrlIfNeeded(url) {\n    try {\n        var parsedUrl = new URL(url);\n        if (parsedUrl.pathname === '') {\n            parsedUrl.pathname = parsedUrl.pathname + '/';\n        }\n        return parsedUrl.toString();\n    }\n    catch (_a) {\n        diag.warn(\"Could not parse export URL: '\" + url + \"'\");\n        return url;\n    }\n}\n/**\n * Configure exporter trace timeout value from passed in value or environment variables\n * @param timeoutMillis\n * @returns timeout value in milliseconds\n */\nexport function configureExporterTimeout(timeoutMillis) {\n    if (typeof timeoutMillis === 'number') {\n        if (timeoutMillis <= 0) {\n            // OTLP exporter configured timeout - using default value of 10000ms\n            return invalidTimeout(timeoutMillis, DEFAULT_TRACE_TIMEOUT);\n        }\n        return timeoutMillis;\n    }\n    else {\n        return getExporterTimeoutFromEnv();\n    }\n}\nfunction getExporterTimeoutFromEnv() {\n    var _a;\n    var definedTimeout = Number((_a = getEnv().OTEL_EXPORTER_OTLP_TRACES_TIMEOUT) !== null && _a !== void 0 ? _a : getEnv().OTEL_EXPORTER_OTLP_TIMEOUT);\n    if (definedTimeout <= 0) {\n        // OTLP exporter configured timeout - using default value of 10000ms\n        return invalidTimeout(definedTimeout, DEFAULT_TRACE_TIMEOUT);\n    }\n    else {\n        return definedTimeout;\n    }\n}\n// OTLP exporter configured timeout - using default value of 10000ms\nexport function invalidTimeout(timeout, defaultTimeout) {\n    diag.warn('Timeout must be greater than 0', timeout);\n    return defaultTimeout;\n}\nexport function isExportRetryable(statusCode) {\n    var retryCodes = [429, 502, 503, 504];\n    return retryCodes.includes(statusCode);\n}\nexport function parseRetryAfterToMills(retryAfter) {\n    if (retryAfter == null) {\n        return -1;\n    }\n    var seconds = Number.parseInt(retryAfter, 10);\n    if (Number.isInteger(seconds)) {\n        return seconds > 0 ? seconds * 1000 : -1;\n    }\n    // https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Retry-After#directives\n    var delay = new Date(retryAfter).getTime() - Date.now();\n    if (delay >= 0) {\n        return delay;\n    }\n    return 0;\n}\n//# sourceMappingURL=util.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { diag } from '@opentelemetry/api';\nimport { ExportResultCode, BindOnceFuture, } from '@opentelemetry/core';\nimport { configureExporterTimeout } from './util';\n/**\n * Collector Exporter abstract base class\n */\nvar OTLPExporterBase = /** @class */ (function () {\n    /**\n     * @param config\n     */\n    function OTLPExporterBase(config) {\n        if (config === void 0) { config = {}; }\n        this._sendingPromises = [];\n        this.url = this.getDefaultUrl(config);\n        if (typeof config.hostname === 'string') {\n            this.hostname = config.hostname;\n        }\n        this.shutdown = this.shutdown.bind(this);\n        this._shutdownOnce = new BindOnceFuture(this._shutdown, this);\n        this._concurrencyLimit =\n            typeof config.concurrencyLimit === 'number'\n                ? config.concurrencyLimit\n                : 30;\n        this.timeoutMillis = configureExporterTimeout(config.timeoutMillis);\n        // platform dependent\n        this.onInit(config);\n    }\n    /**\n     * Export items.\n     * @param items\n     * @param resultCallback\n     */\n    OTLPExporterBase.prototype.export = function (items, resultCallback) {\n        if (this._shutdownOnce.isCalled) {\n            resultCallback({\n                code: ExportResultCode.FAILED,\n                error: new Error('Exporter has been shutdown'),\n            });\n            return;\n        }\n        if (this._sendingPromises.length >= this._concurrencyLimit) {\n            resultCallback({\n                code: ExportResultCode.FAILED,\n                error: new Error('Concurrent export limit reached'),\n            });\n            return;\n        }\n        this._export(items)\n            .then(function () {\n            resultCallback({ code: ExportResultCode.SUCCESS });\n        })\n            .catch(function (error) {\n            resultCallback({ code: ExportResultCode.FAILED, error: error });\n        });\n    };\n    OTLPExporterBase.prototype._export = function (items) {\n        var _this = this;\n        return new Promise(function (resolve, reject) {\n            try {\n                diag.debug('items to be sent', items);\n                _this.send(items, resolve, reject);\n            }\n            catch (e) {\n                reject(e);\n            }\n        });\n    };\n    /**\n     * Shutdown the exporter.\n     */\n    OTLPExporterBase.prototype.shutdown = function () {\n        return this._shutdownOnce.call();\n    };\n    /**\n     * Exports any pending spans in the exporter\n     */\n    OTLPExporterBase.prototype.forceFlush = function () {\n        return Promise.all(this._sendingPromises).then(function () {\n            /** ignore resolved values */\n        });\n    };\n    /**\n     * Called by _shutdownOnce with BindOnceFuture\n     */\n    OTLPExporterBase.prototype._shutdown = function () {\n        diag.debug('shutdown started');\n        this.onShutdown();\n        return this.forceFlush();\n    };\n    return OTLPExporterBase;\n}());\nexport { OTLPExporterBase };\n//# sourceMappingURL=OTLPExporterBase.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n/**\n * Interface for handling error\n */\nvar OTLPExporterError = /** @class */ (function (_super) {\n    __extends(OTLPExporterError, _super);\n    function OTLPExporterError(message, code, data) {\n        var _this = _super.call(this, message) || this;\n        _this.name = 'OTLPExporterError';\n        _this.data = data;\n        _this.code = code;\n        return _this;\n    }\n    return OTLPExporterError;\n}(Error));\nexport { OTLPExporterError };\n//# sourceMappingURL=types.js.map","var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { diag } from '@opentelemetry/api';\nimport { OTLPExporterError } from '../../types';\nimport { DEFAULT_EXPORT_MAX_ATTEMPTS, DEFAULT_EXPORT_INITIAL_BACKOFF, DEFAULT_EXPORT_BACKOFF_MULTIPLIER, DEFAULT_EXPORT_MAX_BACKOFF, isExportRetryable, parseRetryAfterToMills, } from '../../util';\n/**\n * Send metrics/spans using browser navigator.sendBeacon\n * @param body\n * @param url\n * @param blobPropertyBag\n * @param onSuccess\n * @param onError\n */\nexport function sendWithBeacon(body, url, blobPropertyBag, onSuccess, onError) {\n    if (navigator.sendBeacon(url, new Blob([body], blobPropertyBag))) {\n        diag.debug('sendBeacon - can send', body);\n        onSuccess();\n    }\n    else {\n        var error = new OTLPExporterError(\"sendBeacon - cannot send \" + body);\n        onError(error);\n    }\n}\n/**\n * function to send metrics/spans using browser XMLHttpRequest\n *     used when navigator.sendBeacon is not available\n * @param body\n * @param url\n * @param headers\n * @param onSuccess\n * @param onError\n */\nexport function sendWithXhr(body, url, headers, exporterTimeout, onSuccess, onError) {\n    var retryTimer;\n    var xhr;\n    var reqIsDestroyed = false;\n    var exporterTimer = setTimeout(function () {\n        clearTimeout(retryTimer);\n        reqIsDestroyed = true;\n        if (xhr.readyState === XMLHttpRequest.DONE) {\n            var err = new OTLPExporterError('Request Timeout');\n            onError(err);\n        }\n        else {\n            xhr.abort();\n        }\n    }, exporterTimeout);\n    var sendWithRetry = function (retries, minDelay) {\n        if (retries === void 0) { retries = DEFAULT_EXPORT_MAX_ATTEMPTS; }\n        if (minDelay === void 0) { minDelay = DEFAULT_EXPORT_INITIAL_BACKOFF; }\n        xhr = new XMLHttpRequest();\n        xhr.open('POST', url);\n        var defaultHeaders = {\n            Accept: 'application/json',\n            'Content-Type': 'application/json',\n        };\n        Object.entries(__assign(__assign({}, defaultHeaders), headers)).forEach(function (_a) {\n            var _b = __read(_a, 2), k = _b[0], v = _b[1];\n            xhr.setRequestHeader(k, v);\n        });\n        xhr.send(body);\n        xhr.onreadystatechange = function () {\n            if (xhr.readyState === XMLHttpRequest.DONE && reqIsDestroyed === false) {\n                if (xhr.status >= 200 && xhr.status <= 299) {\n                    diag.debug('xhr success', body);\n                    onSuccess();\n                    clearTimeout(exporterTimer);\n                    clearTimeout(retryTimer);\n                }\n                else if (xhr.status && isExportRetryable(xhr.status) && retries > 0) {\n                    var retryTime = void 0;\n                    minDelay = DEFAULT_EXPORT_BACKOFF_MULTIPLIER * minDelay;\n                    // retry after interval specified in Retry-After header\n                    if (xhr.getResponseHeader('Retry-After')) {\n                        retryTime = parseRetryAfterToMills(xhr.getResponseHeader('Retry-After'));\n                    }\n                    else {\n                        // exponential backoff with jitter\n                        retryTime = Math.round(Math.random() * (DEFAULT_EXPORT_MAX_BACKOFF - minDelay) + minDelay);\n                    }\n                    retryTimer = setTimeout(function () {\n                        sendWithRetry(retries - 1, minDelay);\n                    }, retryTime);\n                }\n                else {\n                    var error = new OTLPExporterError(\"Failed to export with XHR (status: \" + xhr.status + \")\", xhr.status);\n                    onError(error);\n                    clearTimeout(exporterTimer);\n                    clearTimeout(retryTimer);\n                }\n            }\n        };\n        xhr.onabort = function () {\n            if (reqIsDestroyed) {\n                var err = new OTLPExporterError('Request Timeout');\n                onError(err);\n            }\n            clearTimeout(exporterTimer);\n            clearTimeout(retryTimer);\n        };\n        xhr.onerror = function () {\n            if (reqIsDestroyed) {\n                var err = new OTLPExporterError('Request Timeout');\n                onError(err);\n            }\n            clearTimeout(exporterTimer);\n            clearTimeout(retryTimer);\n        };\n    };\n    sendWithRetry();\n}\n//# sourceMappingURL=util.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport { OTLPExporterBase } from '../../OTLPExporterBase';\nimport { parseHeaders } from '../../util';\nimport { sendWithBeacon, sendWithXhr } from './util';\nimport { diag } from '@opentelemetry/api';\nimport { getEnv, baggageUtils, _globalThis } from '@opentelemetry/core';\n/**\n * Collector Metric Exporter abstract base class\n */\nvar OTLPExporterBrowserBase = /** @class */ (function (_super) {\n    __extends(OTLPExporterBrowserBase, _super);\n    /**\n     * @param config\n     */\n    function OTLPExporterBrowserBase(config) {\n        if (config === void 0) { config = {}; }\n        var _this = _super.call(this, config) || this;\n        _this._useXHR = false;\n        _this._useXHR =\n            !!config.headers || typeof navigator.sendBeacon !== 'function';\n        if (_this._useXHR) {\n            _this._headers = Object.assign({}, parseHeaders(config.headers), baggageUtils.parseKeyPairsIntoRecord(getEnv().OTEL_EXPORTER_OTLP_HEADERS));\n        }\n        else {\n            _this._headers = {};\n        }\n        return _this;\n    }\n    OTLPExporterBrowserBase.prototype.onInit = function () {\n        _globalThis.addEventListener('unload', this.shutdown);\n    };\n    OTLPExporterBrowserBase.prototype.onShutdown = function () {\n        _globalThis.removeEventListener('unload', this.shutdown);\n    };\n    OTLPExporterBrowserBase.prototype.send = function (items, onSuccess, onError) {\n        var _this = this;\n        if (this._shutdownOnce.isCalled) {\n            diag.debug('Shutdown already started. Cannot send objects');\n            return;\n        }\n        var serviceRequest = this.convert(items);\n        var body = JSON.stringify(serviceRequest);\n        var promise = new Promise(function (resolve, reject) {\n            if (_this._useXHR) {\n                sendWithXhr(body, _this.url, _this._headers, _this.timeoutMillis, resolve, reject);\n            }\n            else {\n                sendWithBeacon(body, _this.url, { type: 'application/json' }, resolve, reject);\n            }\n        }).then(onSuccess, onError);\n        this._sendingPromises.push(promise);\n        var popPromise = function () {\n            var index = _this._sendingPromises.indexOf(promise);\n            _this._sendingPromises.splice(index, 1);\n        };\n        promise.then(popPromise, popPromise);\n    };\n    return OTLPExporterBrowserBase;\n}(OTLPExporterBase));\nexport { OTLPExporterBrowserBase };\n//# sourceMappingURL=OTLPExporterBrowserBase.js.map","\"use strict\";\r\nmodule.exports = asPromise;\r\n\r\n/**\r\n * Callback as used by {@link util.asPromise}.\r\n * @typedef asPromiseCallback\r\n * @type {function}\r\n * @param {Error|null} error Error, if any\r\n * @param {...*} params Additional arguments\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Returns a promise from a node-style callback function.\r\n * @memberof util\r\n * @param {asPromiseCallback} fn Function to call\r\n * @param {*} ctx Function context\r\n * @param {...*} params Function arguments\r\n * @returns {Promise<*>} Promisified function\r\n */\r\nfunction asPromise(fn, ctx/*, varargs */) {\r\n    var params  = new Array(arguments.length - 1),\r\n        offset  = 0,\r\n        index   = 2,\r\n        pending = true;\r\n    while (index < arguments.length)\r\n        params[offset++] = arguments[index++];\r\n    return new Promise(function executor(resolve, reject) {\r\n        params[offset] = function callback(err/*, varargs */) {\r\n            if (pending) {\r\n                pending = false;\r\n                if (err)\r\n                    reject(err);\r\n                else {\r\n                    var params = new Array(arguments.length - 1),\r\n                        offset = 0;\r\n                    while (offset < params.length)\r\n                        params[offset++] = arguments[offset];\r\n                    resolve.apply(null, params);\r\n                }\r\n            }\r\n        };\r\n        try {\r\n            fn.apply(ctx || null, params);\r\n        } catch (err) {\r\n            if (pending) {\r\n                pending = false;\r\n                reject(err);\r\n            }\r\n        }\r\n    });\r\n}\r\n","\"use strict\";\r\n\r\n/**\r\n * A minimal base64 implementation for number arrays.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar base64 = exports;\r\n\r\n/**\r\n * Calculates the byte length of a base64 encoded string.\r\n * @param {string} string Base64 encoded string\r\n * @returns {number} Byte length\r\n */\r\nbase64.length = function length(string) {\r\n    var p = string.length;\r\n    if (!p)\r\n        return 0;\r\n    var n = 0;\r\n    while (--p % 4 > 1 && string.charAt(p) === \"=\")\r\n        ++n;\r\n    return Math.ceil(string.length * 3) / 4 - n;\r\n};\r\n\r\n// Base64 encoding table\r\nvar b64 = new Array(64);\r\n\r\n// Base64 decoding table\r\nvar s64 = new Array(123);\r\n\r\n// 65..90, 97..122, 48..57, 43, 47\r\nfor (var i = 0; i < 64;)\r\n    s64[b64[i] = i < 26 ? i + 65 : i < 52 ? i + 71 : i < 62 ? i - 4 : i - 59 | 43] = i++;\r\n\r\n/**\r\n * Encodes a buffer to a base64 encoded string.\r\n * @param {Uint8Array} buffer Source buffer\r\n * @param {number} start Source start\r\n * @param {number} end Source end\r\n * @returns {string} Base64 encoded string\r\n */\r\nbase64.encode = function encode(buffer, start, end) {\r\n    var parts = null,\r\n        chunk = [];\r\n    var i = 0, // output index\r\n        j = 0, // goto index\r\n        t;     // temporary\r\n    while (start < end) {\r\n        var b = buffer[start++];\r\n        switch (j) {\r\n            case 0:\r\n                chunk[i++] = b64[b >> 2];\r\n                t = (b & 3) << 4;\r\n                j = 1;\r\n                break;\r\n            case 1:\r\n                chunk[i++] = b64[t | b >> 4];\r\n                t = (b & 15) << 2;\r\n                j = 2;\r\n                break;\r\n            case 2:\r\n                chunk[i++] = b64[t | b >> 6];\r\n                chunk[i++] = b64[b & 63];\r\n                j = 0;\r\n                break;\r\n        }\r\n        if (i > 8191) {\r\n            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));\r\n            i = 0;\r\n        }\r\n    }\r\n    if (j) {\r\n        chunk[i++] = b64[t];\r\n        chunk[i++] = 61;\r\n        if (j === 1)\r\n            chunk[i++] = 61;\r\n    }\r\n    if (parts) {\r\n        if (i)\r\n            parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));\r\n        return parts.join(\"\");\r\n    }\r\n    return String.fromCharCode.apply(String, chunk.slice(0, i));\r\n};\r\n\r\nvar invalidEncoding = \"invalid encoding\";\r\n\r\n/**\r\n * Decodes a base64 encoded string to a buffer.\r\n * @param {string} string Source string\r\n * @param {Uint8Array} buffer Destination buffer\r\n * @param {number} offset Destination offset\r\n * @returns {number} Number of bytes written\r\n * @throws {Error} If encoding is invalid\r\n */\r\nbase64.decode = function decode(string, buffer, offset) {\r\n    var start = offset;\r\n    var j = 0, // goto index\r\n        t;     // temporary\r\n    for (var i = 0; i < string.length;) {\r\n        var c = string.charCodeAt(i++);\r\n        if (c === 61 && j > 1)\r\n            break;\r\n        if ((c = s64[c]) === undefined)\r\n            throw Error(invalidEncoding);\r\n        switch (j) {\r\n            case 0:\r\n                t = c;\r\n                j = 1;\r\n                break;\r\n            case 1:\r\n                buffer[offset++] = t << 2 | (c & 48) >> 4;\r\n                t = c;\r\n                j = 2;\r\n                break;\r\n            case 2:\r\n                buffer[offset++] = (t & 15) << 4 | (c & 60) >> 2;\r\n                t = c;\r\n                j = 3;\r\n                break;\r\n            case 3:\r\n                buffer[offset++] = (t & 3) << 6 | c;\r\n                j = 0;\r\n                break;\r\n        }\r\n    }\r\n    if (j === 1)\r\n        throw Error(invalidEncoding);\r\n    return offset - start;\r\n};\r\n\r\n/**\r\n * Tests if the specified string appears to be base64 encoded.\r\n * @param {string} string String to test\r\n * @returns {boolean} `true` if probably base64 encoded, otherwise false\r\n */\r\nbase64.test = function test(string) {\r\n    return /^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/.test(string);\r\n};\r\n","\"use strict\";\r\nmodule.exports = EventEmitter;\r\n\r\n/**\r\n * Constructs a new event emitter instance.\r\n * @classdesc A minimal event emitter.\r\n * @memberof util\r\n * @constructor\r\n */\r\nfunction EventEmitter() {\r\n\r\n    /**\r\n     * Registered listeners.\r\n     * @type {Object.<string,*>}\r\n     * @private\r\n     */\r\n    this._listeners = {};\r\n}\r\n\r\n/**\r\n * Registers an event listener.\r\n * @param {string} evt Event name\r\n * @param {function} fn Listener\r\n * @param {*} [ctx] Listener context\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.on = function on(evt, fn, ctx) {\r\n    (this._listeners[evt] || (this._listeners[evt] = [])).push({\r\n        fn  : fn,\r\n        ctx : ctx || this\r\n    });\r\n    return this;\r\n};\r\n\r\n/**\r\n * Removes an event listener or any matching listeners if arguments are omitted.\r\n * @param {string} [evt] Event name. Removes all listeners if omitted.\r\n * @param {function} [fn] Listener to remove. Removes all listeners of `evt` if omitted.\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.off = function off(evt, fn) {\r\n    if (evt === undefined)\r\n        this._listeners = {};\r\n    else {\r\n        if (fn === undefined)\r\n            this._listeners[evt] = [];\r\n        else {\r\n            var listeners = this._listeners[evt];\r\n            for (var i = 0; i < listeners.length;)\r\n                if (listeners[i].fn === fn)\r\n                    listeners.splice(i, 1);\r\n                else\r\n                    ++i;\r\n        }\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Emits an event by calling its listeners with the specified arguments.\r\n * @param {string} evt Event name\r\n * @param {...*} args Arguments\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.emit = function emit(evt) {\r\n    var listeners = this._listeners[evt];\r\n    if (listeners) {\r\n        var args = [],\r\n            i = 1;\r\n        for (; i < arguments.length;)\r\n            args.push(arguments[i++]);\r\n        for (i = 0; i < listeners.length;)\r\n            listeners[i].fn.apply(listeners[i++].ctx, args);\r\n    }\r\n    return this;\r\n};\r\n","\"use strict\";\r\n\r\nmodule.exports = factory(factory);\r\n\r\n/**\r\n * Reads / writes floats / doubles from / to buffers.\r\n * @name util.float\r\n * @namespace\r\n */\r\n\r\n/**\r\n * Writes a 32 bit float to a buffer using little endian byte order.\r\n * @name util.float.writeFloatLE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Writes a 32 bit float to a buffer using big endian byte order.\r\n * @name util.float.writeFloatBE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Reads a 32 bit float from a buffer using little endian byte order.\r\n * @name util.float.readFloatLE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n/**\r\n * Reads a 32 bit float from a buffer using big endian byte order.\r\n * @name util.float.readFloatBE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n/**\r\n * Writes a 64 bit double to a buffer using little endian byte order.\r\n * @name util.float.writeDoubleLE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Writes a 64 bit double to a buffer using big endian byte order.\r\n * @name util.float.writeDoubleBE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Reads a 64 bit double from a buffer using little endian byte order.\r\n * @name util.float.readDoubleLE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n/**\r\n * Reads a 64 bit double from a buffer using big endian byte order.\r\n * @name util.float.readDoubleBE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n// Factory function for the purpose of node-based testing in modified global environments\r\nfunction factory(exports) {\r\n\r\n    // float: typed array\r\n    if (typeof Float32Array !== \"undefined\") (function() {\r\n\r\n        var f32 = new Float32Array([ -0 ]),\r\n            f8b = new Uint8Array(f32.buffer),\r\n            le  = f8b[3] === 128;\r\n\r\n        function writeFloat_f32_cpy(val, buf, pos) {\r\n            f32[0] = val;\r\n            buf[pos    ] = f8b[0];\r\n            buf[pos + 1] = f8b[1];\r\n            buf[pos + 2] = f8b[2];\r\n            buf[pos + 3] = f8b[3];\r\n        }\r\n\r\n        function writeFloat_f32_rev(val, buf, pos) {\r\n            f32[0] = val;\r\n            buf[pos    ] = f8b[3];\r\n            buf[pos + 1] = f8b[2];\r\n            buf[pos + 2] = f8b[1];\r\n            buf[pos + 3] = f8b[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.writeFloatLE = le ? writeFloat_f32_cpy : writeFloat_f32_rev;\r\n        /* istanbul ignore next */\r\n        exports.writeFloatBE = le ? writeFloat_f32_rev : writeFloat_f32_cpy;\r\n\r\n        function readFloat_f32_cpy(buf, pos) {\r\n            f8b[0] = buf[pos    ];\r\n            f8b[1] = buf[pos + 1];\r\n            f8b[2] = buf[pos + 2];\r\n            f8b[3] = buf[pos + 3];\r\n            return f32[0];\r\n        }\r\n\r\n        function readFloat_f32_rev(buf, pos) {\r\n            f8b[3] = buf[pos    ];\r\n            f8b[2] = buf[pos + 1];\r\n            f8b[1] = buf[pos + 2];\r\n            f8b[0] = buf[pos + 3];\r\n            return f32[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.readFloatLE = le ? readFloat_f32_cpy : readFloat_f32_rev;\r\n        /* istanbul ignore next */\r\n        exports.readFloatBE = le ? readFloat_f32_rev : readFloat_f32_cpy;\r\n\r\n    // float: ieee754\r\n    })(); else (function() {\r\n\r\n        function writeFloat_ieee754(writeUint, val, buf, pos) {\r\n            var sign = val < 0 ? 1 : 0;\r\n            if (sign)\r\n                val = -val;\r\n            if (val === 0)\r\n                writeUint(1 / val > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos);\r\n            else if (isNaN(val))\r\n                writeUint(2143289344, buf, pos);\r\n            else if (val > 3.4028234663852886e+38) // +-Infinity\r\n                writeUint((sign << 31 | 2139095040) >>> 0, buf, pos);\r\n            else if (val < 1.1754943508222875e-38) // denormal\r\n                writeUint((sign << 31 | Math.round(val / 1.401298464324817e-45)) >>> 0, buf, pos);\r\n            else {\r\n                var exponent = Math.floor(Math.log(val) / Math.LN2),\r\n                    mantissa = Math.round(val * Math.pow(2, -exponent) * 8388608) & 8388607;\r\n                writeUint((sign << 31 | exponent + 127 << 23 | mantissa) >>> 0, buf, pos);\r\n            }\r\n        }\r\n\r\n        exports.writeFloatLE = writeFloat_ieee754.bind(null, writeUintLE);\r\n        exports.writeFloatBE = writeFloat_ieee754.bind(null, writeUintBE);\r\n\r\n        function readFloat_ieee754(readUint, buf, pos) {\r\n            var uint = readUint(buf, pos),\r\n                sign = (uint >> 31) * 2 + 1,\r\n                exponent = uint >>> 23 & 255,\r\n                mantissa = uint & 8388607;\r\n            return exponent === 255\r\n                ? mantissa\r\n                ? NaN\r\n                : sign * Infinity\r\n                : exponent === 0 // denormal\r\n                ? sign * 1.401298464324817e-45 * mantissa\r\n                : sign * Math.pow(2, exponent - 150) * (mantissa + 8388608);\r\n        }\r\n\r\n        exports.readFloatLE = readFloat_ieee754.bind(null, readUintLE);\r\n        exports.readFloatBE = readFloat_ieee754.bind(null, readUintBE);\r\n\r\n    })();\r\n\r\n    // double: typed array\r\n    if (typeof Float64Array !== \"undefined\") (function() {\r\n\r\n        var f64 = new Float64Array([-0]),\r\n            f8b = new Uint8Array(f64.buffer),\r\n            le  = f8b[7] === 128;\r\n\r\n        function writeDouble_f64_cpy(val, buf, pos) {\r\n            f64[0] = val;\r\n            buf[pos    ] = f8b[0];\r\n            buf[pos + 1] = f8b[1];\r\n            buf[pos + 2] = f8b[2];\r\n            buf[pos + 3] = f8b[3];\r\n            buf[pos + 4] = f8b[4];\r\n            buf[pos + 5] = f8b[5];\r\n            buf[pos + 6] = f8b[6];\r\n            buf[pos + 7] = f8b[7];\r\n        }\r\n\r\n        function writeDouble_f64_rev(val, buf, pos) {\r\n            f64[0] = val;\r\n            buf[pos    ] = f8b[7];\r\n            buf[pos + 1] = f8b[6];\r\n            buf[pos + 2] = f8b[5];\r\n            buf[pos + 3] = f8b[4];\r\n            buf[pos + 4] = f8b[3];\r\n            buf[pos + 5] = f8b[2];\r\n            buf[pos + 6] = f8b[1];\r\n            buf[pos + 7] = f8b[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.writeDoubleLE = le ? writeDouble_f64_cpy : writeDouble_f64_rev;\r\n        /* istanbul ignore next */\r\n        exports.writeDoubleBE = le ? writeDouble_f64_rev : writeDouble_f64_cpy;\r\n\r\n        function readDouble_f64_cpy(buf, pos) {\r\n            f8b[0] = buf[pos    ];\r\n            f8b[1] = buf[pos + 1];\r\n            f8b[2] = buf[pos + 2];\r\n            f8b[3] = buf[pos + 3];\r\n            f8b[4] = buf[pos + 4];\r\n            f8b[5] = buf[pos + 5];\r\n            f8b[6] = buf[pos + 6];\r\n            f8b[7] = buf[pos + 7];\r\n            return f64[0];\r\n        }\r\n\r\n        function readDouble_f64_rev(buf, pos) {\r\n            f8b[7] = buf[pos    ];\r\n            f8b[6] = buf[pos + 1];\r\n            f8b[5] = buf[pos + 2];\r\n            f8b[4] = buf[pos + 3];\r\n            f8b[3] = buf[pos + 4];\r\n            f8b[2] = buf[pos + 5];\r\n            f8b[1] = buf[pos + 6];\r\n            f8b[0] = buf[pos + 7];\r\n            return f64[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.readDoubleLE = le ? readDouble_f64_cpy : readDouble_f64_rev;\r\n        /* istanbul ignore next */\r\n        exports.readDoubleBE = le ? readDouble_f64_rev : readDouble_f64_cpy;\r\n\r\n    // double: ieee754\r\n    })(); else (function() {\r\n\r\n        function writeDouble_ieee754(writeUint, off0, off1, val, buf, pos) {\r\n            var sign = val < 0 ? 1 : 0;\r\n            if (sign)\r\n                val = -val;\r\n            if (val === 0) {\r\n                writeUint(0, buf, pos + off0);\r\n                writeUint(1 / val > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos + off1);\r\n            } else if (isNaN(val)) {\r\n                writeUint(0, buf, pos + off0);\r\n                writeUint(2146959360, buf, pos + off1);\r\n            } else if (val > 1.7976931348623157e+308) { // +-Infinity\r\n                writeUint(0, buf, pos + off0);\r\n                writeUint((sign << 31 | 2146435072) >>> 0, buf, pos + off1);\r\n            } else {\r\n                var mantissa;\r\n                if (val < 2.2250738585072014e-308) { // denormal\r\n                    mantissa = val / 5e-324;\r\n                    writeUint(mantissa >>> 0, buf, pos + off0);\r\n                    writeUint((sign << 31 | mantissa / 4294967296) >>> 0, buf, pos + off1);\r\n                } else {\r\n                    var exponent = Math.floor(Math.log(val) / Math.LN2);\r\n                    if (exponent === 1024)\r\n                        exponent = 1023;\r\n                    mantissa = val * Math.pow(2, -exponent);\r\n                    writeUint(mantissa * 4503599627370496 >>> 0, buf, pos + off0);\r\n                    writeUint((sign << 31 | exponent + 1023 << 20 | mantissa * 1048576 & 1048575) >>> 0, buf, pos + off1);\r\n                }\r\n            }\r\n        }\r\n\r\n        exports.writeDoubleLE = writeDouble_ieee754.bind(null, writeUintLE, 0, 4);\r\n        exports.writeDoubleBE = writeDouble_ieee754.bind(null, writeUintBE, 4, 0);\r\n\r\n        function readDouble_ieee754(readUint, off0, off1, buf, pos) {\r\n            var lo = readUint(buf, pos + off0),\r\n                hi = readUint(buf, pos + off1);\r\n            var sign = (hi >> 31) * 2 + 1,\r\n                exponent = hi >>> 20 & 2047,\r\n                mantissa = 4294967296 * (hi & 1048575) + lo;\r\n            return exponent === 2047\r\n                ? mantissa\r\n                ? NaN\r\n                : sign * Infinity\r\n                : exponent === 0 // denormal\r\n                ? sign * 5e-324 * mantissa\r\n                : sign * Math.pow(2, exponent - 1075) * (mantissa + 4503599627370496);\r\n        }\r\n\r\n        exports.readDoubleLE = readDouble_ieee754.bind(null, readUintLE, 0, 4);\r\n        exports.readDoubleBE = readDouble_ieee754.bind(null, readUintBE, 4, 0);\r\n\r\n    })();\r\n\r\n    return exports;\r\n}\r\n\r\n// uint helpers\r\n\r\nfunction writeUintLE(val, buf, pos) {\r\n    buf[pos    ] =  val        & 255;\r\n    buf[pos + 1] =  val >>> 8  & 255;\r\n    buf[pos + 2] =  val >>> 16 & 255;\r\n    buf[pos + 3] =  val >>> 24;\r\n}\r\n\r\nfunction writeUintBE(val, buf, pos) {\r\n    buf[pos    ] =  val >>> 24;\r\n    buf[pos + 1] =  val >>> 16 & 255;\r\n    buf[pos + 2] =  val >>> 8  & 255;\r\n    buf[pos + 3] =  val        & 255;\r\n}\r\n\r\nfunction readUintLE(buf, pos) {\r\n    return (buf[pos    ]\r\n          | buf[pos + 1] << 8\r\n          | buf[pos + 2] << 16\r\n          | buf[pos + 3] << 24) >>> 0;\r\n}\r\n\r\nfunction readUintBE(buf, pos) {\r\n    return (buf[pos    ] << 24\r\n          | buf[pos + 1] << 16\r\n          | buf[pos + 2] << 8\r\n          | buf[pos + 3]) >>> 0;\r\n}\r\n","\"use strict\";\r\nmodule.exports = inquire;\r\n\r\n/**\r\n * Requires a module only if available.\r\n * @memberof util\r\n * @param {string} moduleName Module to require\r\n * @returns {?Object} Required module if available and not empty, otherwise `null`\r\n */\r\nfunction inquire(moduleName) {\r\n    try {\r\n        var mod = eval(\"quire\".replace(/^/,\"re\"))(moduleName); // eslint-disable-line no-eval\r\n        if (mod && (mod.length || Object.keys(mod).length))\r\n            return mod;\r\n    } catch (e) {} // eslint-disable-line no-empty\r\n    return null;\r\n}\r\n","\"use strict\";\r\n\r\n/**\r\n * A minimal UTF8 implementation for number arrays.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar utf8 = exports;\r\n\r\n/**\r\n * Calculates the UTF8 byte length of a string.\r\n * @param {string} string String\r\n * @returns {number} Byte length\r\n */\r\nutf8.length = function utf8_length(string) {\r\n    var len = 0,\r\n        c = 0;\r\n    for (var i = 0; i < string.length; ++i) {\r\n        c = string.charCodeAt(i);\r\n        if (c < 128)\r\n            len += 1;\r\n        else if (c < 2048)\r\n            len += 2;\r\n        else if ((c & 0xFC00) === 0xD800 && (string.charCodeAt(i + 1) & 0xFC00) === 0xDC00) {\r\n            ++i;\r\n            len += 4;\r\n        } else\r\n            len += 3;\r\n    }\r\n    return len;\r\n};\r\n\r\n/**\r\n * Reads UTF8 bytes as a string.\r\n * @param {Uint8Array} buffer Source buffer\r\n * @param {number} start Source start\r\n * @param {number} end Source end\r\n * @returns {string} String read\r\n */\r\nutf8.read = function utf8_read(buffer, start, end) {\r\n    var len = end - start;\r\n    if (len < 1)\r\n        return \"\";\r\n    var parts = null,\r\n        chunk = [],\r\n        i = 0, // char offset\r\n        t;     // temporary\r\n    while (start < end) {\r\n        t = buffer[start++];\r\n        if (t < 128)\r\n            chunk[i++] = t;\r\n        else if (t > 191 && t < 224)\r\n            chunk[i++] = (t & 31) << 6 | buffer[start++] & 63;\r\n        else if (t > 239 && t < 365) {\r\n            t = ((t & 7) << 18 | (buffer[start++] & 63) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63) - 0x10000;\r\n            chunk[i++] = 0xD800 + (t >> 10);\r\n            chunk[i++] = 0xDC00 + (t & 1023);\r\n        } else\r\n            chunk[i++] = (t & 15) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63;\r\n        if (i > 8191) {\r\n            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));\r\n            i = 0;\r\n        }\r\n    }\r\n    if (parts) {\r\n        if (i)\r\n            parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));\r\n        return parts.join(\"\");\r\n    }\r\n    return String.fromCharCode.apply(String, chunk.slice(0, i));\r\n};\r\n\r\n/**\r\n * Writes a string as UTF8 bytes.\r\n * @param {string} string Source string\r\n * @param {Uint8Array} buffer Destination buffer\r\n * @param {number} offset Destination offset\r\n * @returns {number} Bytes written\r\n */\r\nutf8.write = function utf8_write(string, buffer, offset) {\r\n    var start = offset,\r\n        c1, // character 1\r\n        c2; // character 2\r\n    for (var i = 0; i < string.length; ++i) {\r\n        c1 = string.charCodeAt(i);\r\n        if (c1 < 128) {\r\n            buffer[offset++] = c1;\r\n        } else if (c1 < 2048) {\r\n            buffer[offset++] = c1 >> 6       | 192;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        } else if ((c1 & 0xFC00) === 0xD800 && ((c2 = string.charCodeAt(i + 1)) & 0xFC00) === 0xDC00) {\r\n            c1 = 0x10000 + ((c1 & 0x03FF) << 10) + (c2 & 0x03FF);\r\n            ++i;\r\n            buffer[offset++] = c1 >> 18      | 240;\r\n            buffer[offset++] = c1 >> 12 & 63 | 128;\r\n            buffer[offset++] = c1 >> 6  & 63 | 128;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        } else {\r\n            buffer[offset++] = c1 >> 12      | 224;\r\n            buffer[offset++] = c1 >> 6  & 63 | 128;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        }\r\n    }\r\n    return offset - start;\r\n};\r\n","\"use strict\";\r\nmodule.exports = pool;\r\n\r\n/**\r\n * An allocator as used by {@link util.pool}.\r\n * @typedef PoolAllocator\r\n * @type {function}\r\n * @param {number} size Buffer size\r\n * @returns {Uint8Array} Buffer\r\n */\r\n\r\n/**\r\n * A slicer as used by {@link util.pool}.\r\n * @typedef PoolSlicer\r\n * @type {function}\r\n * @param {number} start Start offset\r\n * @param {number} end End offset\r\n * @returns {Uint8Array} Buffer slice\r\n * @this {Uint8Array}\r\n */\r\n\r\n/**\r\n * A general purpose buffer pool.\r\n * @memberof util\r\n * @function\r\n * @param {PoolAllocator} alloc Allocator\r\n * @param {PoolSlicer} slice Slicer\r\n * @param {number} [size=8192] Slab size\r\n * @returns {PoolAllocator} Pooled allocator\r\n */\r\nfunction pool(alloc, slice, size) {\r\n    var SIZE   = size || 8192;\r\n    var MAX    = SIZE >>> 1;\r\n    var slab   = null;\r\n    var offset = SIZE;\r\n    return function pool_alloc(size) {\r\n        if (size < 1 || size > MAX)\r\n            return alloc(size);\r\n        if (offset + size > SIZE) {\r\n            slab = alloc(SIZE);\r\n            offset = 0;\r\n        }\r\n        var buf = slice.call(slab, offset, offset += size);\r\n        if (offset & 7) // align to 32 bit\r\n            offset = (offset | 7) + 1;\r\n        return buf;\r\n    };\r\n}\r\n","\"use strict\";\r\nmodule.exports = LongBits;\r\n\r\nvar util = require(\"../util/minimal\");\r\n\r\n/**\r\n * Constructs new long bits.\r\n * @classdesc Helper class for working with the low and high bits of a 64 bit value.\r\n * @memberof util\r\n * @constructor\r\n * @param {number} lo Low 32 bits, unsigned\r\n * @param {number} hi High 32 bits, unsigned\r\n */\r\nfunction LongBits(lo, hi) {\r\n\r\n    // note that the casts below are theoretically unnecessary as of today, but older statically\r\n    // generated converter code might still call the ctor with signed 32bits. kept for compat.\r\n\r\n    /**\r\n     * Low bits.\r\n     * @type {number}\r\n     */\r\n    this.lo = lo >>> 0;\r\n\r\n    /**\r\n     * High bits.\r\n     * @type {number}\r\n     */\r\n    this.hi = hi >>> 0;\r\n}\r\n\r\n/**\r\n * Zero bits.\r\n * @memberof util.LongBits\r\n * @type {util.LongBits}\r\n */\r\nvar zero = LongBits.zero = new LongBits(0, 0);\r\n\r\nzero.toNumber = function() { return 0; };\r\nzero.zzEncode = zero.zzDecode = function() { return this; };\r\nzero.length = function() { return 1; };\r\n\r\n/**\r\n * Zero hash.\r\n * @memberof util.LongBits\r\n * @type {string}\r\n */\r\nvar zeroHash = LongBits.zeroHash = \"\\0\\0\\0\\0\\0\\0\\0\\0\";\r\n\r\n/**\r\n * Constructs new long bits from the specified number.\r\n * @param {number} value Value\r\n * @returns {util.LongBits} Instance\r\n */\r\nLongBits.fromNumber = function fromNumber(value) {\r\n    if (value === 0)\r\n        return zero;\r\n    var sign = value < 0;\r\n    if (sign)\r\n        value = -value;\r\n    var lo = value >>> 0,\r\n        hi = (value - lo) / 4294967296 >>> 0;\r\n    if (sign) {\r\n        hi = ~hi >>> 0;\r\n        lo = ~lo >>> 0;\r\n        if (++lo > 4294967295) {\r\n            lo = 0;\r\n            if (++hi > 4294967295)\r\n                hi = 0;\r\n        }\r\n    }\r\n    return new LongBits(lo, hi);\r\n};\r\n\r\n/**\r\n * Constructs new long bits from a number, long or string.\r\n * @param {Long|number|string} value Value\r\n * @returns {util.LongBits} Instance\r\n */\r\nLongBits.from = function from(value) {\r\n    if (typeof value === \"number\")\r\n        return LongBits.fromNumber(value);\r\n    if (util.isString(value)) {\r\n        /* istanbul ignore else */\r\n        if (util.Long)\r\n            value = util.Long.fromString(value);\r\n        else\r\n            return LongBits.fromNumber(parseInt(value, 10));\r\n    }\r\n    return value.low || value.high ? new LongBits(value.low >>> 0, value.high >>> 0) : zero;\r\n};\r\n\r\n/**\r\n * Converts this long bits to a possibly unsafe JavaScript number.\r\n * @param {boolean} [unsigned=false] Whether unsigned or not\r\n * @returns {number} Possibly unsafe number\r\n */\r\nLongBits.prototype.toNumber = function toNumber(unsigned) {\r\n    if (!unsigned && this.hi >>> 31) {\r\n        var lo = ~this.lo + 1 >>> 0,\r\n            hi = ~this.hi     >>> 0;\r\n        if (!lo)\r\n            hi = hi + 1 >>> 0;\r\n        return -(lo + hi * 4294967296);\r\n    }\r\n    return this.lo + this.hi * 4294967296;\r\n};\r\n\r\n/**\r\n * Converts this long bits to a long.\r\n * @param {boolean} [unsigned=false] Whether unsigned or not\r\n * @returns {Long} Long\r\n */\r\nLongBits.prototype.toLong = function toLong(unsigned) {\r\n    return util.Long\r\n        ? new util.Long(this.lo | 0, this.hi | 0, Boolean(unsigned))\r\n        /* istanbul ignore next */\r\n        : { low: this.lo | 0, high: this.hi | 0, unsigned: Boolean(unsigned) };\r\n};\r\n\r\nvar charCodeAt = String.prototype.charCodeAt;\r\n\r\n/**\r\n * Constructs new long bits from the specified 8 characters long hash.\r\n * @param {string} hash Hash\r\n * @returns {util.LongBits} Bits\r\n */\r\nLongBits.fromHash = function fromHash(hash) {\r\n    if (hash === zeroHash)\r\n        return zero;\r\n    return new LongBits(\r\n        ( charCodeAt.call(hash, 0)\r\n        | charCodeAt.call(hash, 1) << 8\r\n        | charCodeAt.call(hash, 2) << 16\r\n        | charCodeAt.call(hash, 3) << 24) >>> 0\r\n    ,\r\n        ( charCodeAt.call(hash, 4)\r\n        | charCodeAt.call(hash, 5) << 8\r\n        | charCodeAt.call(hash, 6) << 16\r\n        | charCodeAt.call(hash, 7) << 24) >>> 0\r\n    );\r\n};\r\n\r\n/**\r\n * Converts this long bits to a 8 characters long hash.\r\n * @returns {string} Hash\r\n */\r\nLongBits.prototype.toHash = function toHash() {\r\n    return String.fromCharCode(\r\n        this.lo        & 255,\r\n        this.lo >>> 8  & 255,\r\n        this.lo >>> 16 & 255,\r\n        this.lo >>> 24      ,\r\n        this.hi        & 255,\r\n        this.hi >>> 8  & 255,\r\n        this.hi >>> 16 & 255,\r\n        this.hi >>> 24\r\n    );\r\n};\r\n\r\n/**\r\n * Zig-zag encodes this long bits.\r\n * @returns {util.LongBits} `this`\r\n */\r\nLongBits.prototype.zzEncode = function zzEncode() {\r\n    var mask =   this.hi >> 31;\r\n    this.hi  = ((this.hi << 1 | this.lo >>> 31) ^ mask) >>> 0;\r\n    this.lo  = ( this.lo << 1                   ^ mask) >>> 0;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Zig-zag decodes this long bits.\r\n * @returns {util.LongBits} `this`\r\n */\r\nLongBits.prototype.zzDecode = function zzDecode() {\r\n    var mask = -(this.lo & 1);\r\n    this.lo  = ((this.lo >>> 1 | this.hi << 31) ^ mask) >>> 0;\r\n    this.hi  = ( this.hi >>> 1                  ^ mask) >>> 0;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Calculates the length of this longbits when encoded as a varint.\r\n * @returns {number} Length\r\n */\r\nLongBits.prototype.length = function length() {\r\n    var part0 =  this.lo,\r\n        part1 = (this.lo >>> 28 | this.hi << 4) >>> 0,\r\n        part2 =  this.hi >>> 24;\r\n    return part2 === 0\r\n         ? part1 === 0\r\n           ? part0 < 16384\r\n             ? part0 < 128 ? 1 : 2\r\n             : part0 < 2097152 ? 3 : 4\r\n           : part1 < 16384\r\n             ? part1 < 128 ? 5 : 6\r\n             : part1 < 2097152 ? 7 : 8\r\n         : part2 < 128 ? 9 : 10;\r\n};\r\n","\"use strict\";\r\nvar util = exports;\r\n\r\n// used to return a Promise where callback is omitted\r\nutil.asPromise = require(\"@protobufjs/aspromise\");\r\n\r\n// converts to / from base64 encoded strings\r\nutil.base64 = require(\"@protobufjs/base64\");\r\n\r\n// base class of rpc.Service\r\nutil.EventEmitter = require(\"@protobufjs/eventemitter\");\r\n\r\n// float handling accross browsers\r\nutil.float = require(\"@protobufjs/float\");\r\n\r\n// requires modules optionally and hides the call from bundlers\r\nutil.inquire = require(\"@protobufjs/inquire\");\r\n\r\n// converts to / from utf8 encoded strings\r\nutil.utf8 = require(\"@protobufjs/utf8\");\r\n\r\n// provides a node-like buffer pool in the browser\r\nutil.pool = require(\"@protobufjs/pool\");\r\n\r\n// utility to work with the low and high bits of a 64 bit value\r\nutil.LongBits = require(\"./longbits\");\r\n\r\n/**\r\n * Whether running within node or not.\r\n * @memberof util\r\n * @type {boolean}\r\n */\r\nutil.isNode = Boolean(typeof global !== \"undefined\"\r\n                   && global\r\n                   && global.process\r\n                   && global.process.versions\r\n                   && global.process.versions.node);\r\n\r\n/**\r\n * Global object reference.\r\n * @memberof util\r\n * @type {Object}\r\n */\r\nutil.global = util.isNode && global\r\n           || typeof window !== \"undefined\" && window\r\n           || typeof self   !== \"undefined\" && self\r\n           || this; // eslint-disable-line no-invalid-this\r\n\r\n/**\r\n * An immuable empty array.\r\n * @memberof util\r\n * @type {Array.<*>}\r\n * @const\r\n */\r\nutil.emptyArray = Object.freeze ? Object.freeze([]) : /* istanbul ignore next */ []; // used on prototypes\r\n\r\n/**\r\n * An immutable empty object.\r\n * @type {Object}\r\n * @const\r\n */\r\nutil.emptyObject = Object.freeze ? Object.freeze({}) : /* istanbul ignore next */ {}; // used on prototypes\r\n\r\n/**\r\n * Tests if the specified value is an integer.\r\n * @function\r\n * @param {*} value Value to test\r\n * @returns {boolean} `true` if the value is an integer\r\n */\r\nutil.isInteger = Number.isInteger || /* istanbul ignore next */ function isInteger(value) {\r\n    return typeof value === \"number\" && isFinite(value) && Math.floor(value) === value;\r\n};\r\n\r\n/**\r\n * Tests if the specified value is a string.\r\n * @param {*} value Value to test\r\n * @returns {boolean} `true` if the value is a string\r\n */\r\nutil.isString = function isString(value) {\r\n    return typeof value === \"string\" || value instanceof String;\r\n};\r\n\r\n/**\r\n * Tests if the specified value is a non-null object.\r\n * @param {*} value Value to test\r\n * @returns {boolean} `true` if the value is a non-null object\r\n */\r\nutil.isObject = function isObject(value) {\r\n    return value && typeof value === \"object\";\r\n};\r\n\r\n/**\r\n * Checks if a property on a message is considered to be present.\r\n * This is an alias of {@link util.isSet}.\r\n * @function\r\n * @param {Object} obj Plain object or message instance\r\n * @param {string} prop Property name\r\n * @returns {boolean} `true` if considered to be present, otherwise `false`\r\n */\r\nutil.isset =\r\n\r\n/**\r\n * Checks if a property on a message is considered to be present.\r\n * @param {Object} obj Plain object or message instance\r\n * @param {string} prop Property name\r\n * @returns {boolean} `true` if considered to be present, otherwise `false`\r\n */\r\nutil.isSet = function isSet(obj, prop) {\r\n    var value = obj[prop];\r\n    if (value != null && obj.hasOwnProperty(prop)) // eslint-disable-line eqeqeq, no-prototype-builtins\r\n        return typeof value !== \"object\" || (Array.isArray(value) ? value.length : Object.keys(value).length) > 0;\r\n    return false;\r\n};\r\n\r\n/**\r\n * Any compatible Buffer instance.\r\n * This is a minimal stand-alone definition of a Buffer instance. The actual type is that exported by node's typings.\r\n * @interface Buffer\r\n * @extends Uint8Array\r\n */\r\n\r\n/**\r\n * Node's Buffer class if available.\r\n * @type {Constructor<Buffer>}\r\n */\r\nutil.Buffer = (function() {\r\n    try {\r\n        var Buffer = util.inquire(\"buffer\").Buffer;\r\n        // refuse to use non-node buffers if not explicitly assigned (perf reasons):\r\n        return Buffer.prototype.utf8Write ? Buffer : /* istanbul ignore next */ null;\r\n    } catch (e) {\r\n        /* istanbul ignore next */\r\n        return null;\r\n    }\r\n})();\r\n\r\n// Internal alias of or polyfull for Buffer.from.\r\nutil._Buffer_from = null;\r\n\r\n// Internal alias of or polyfill for Buffer.allocUnsafe.\r\nutil._Buffer_allocUnsafe = null;\r\n\r\n/**\r\n * Creates a new buffer of whatever type supported by the environment.\r\n * @param {number|number[]} [sizeOrArray=0] Buffer size or number array\r\n * @returns {Uint8Array|Buffer} Buffer\r\n */\r\nutil.newBuffer = function newBuffer(sizeOrArray) {\r\n    /* istanbul ignore next */\r\n    return typeof sizeOrArray === \"number\"\r\n        ? util.Buffer\r\n            ? util._Buffer_allocUnsafe(sizeOrArray)\r\n            : new util.Array(sizeOrArray)\r\n        : util.Buffer\r\n            ? util._Buffer_from(sizeOrArray)\r\n            : typeof Uint8Array === \"undefined\"\r\n                ? sizeOrArray\r\n                : new Uint8Array(sizeOrArray);\r\n};\r\n\r\n/**\r\n * Array implementation used in the browser. `Uint8Array` if supported, otherwise `Array`.\r\n * @type {Constructor<Uint8Array>}\r\n */\r\nutil.Array = typeof Uint8Array !== \"undefined\" ? Uint8Array /* istanbul ignore next */ : Array;\r\n\r\n/**\r\n * Any compatible Long instance.\r\n * This is a minimal stand-alone definition of a Long instance. The actual type is that exported by long.js.\r\n * @interface Long\r\n * @property {number} low Low bits\r\n * @property {number} high High bits\r\n * @property {boolean} unsigned Whether unsigned or not\r\n */\r\n\r\n/**\r\n * Long.js's Long class if available.\r\n * @type {Constructor<Long>}\r\n */\r\nutil.Long = /* istanbul ignore next */ util.global.dcodeIO && /* istanbul ignore next */ util.global.dcodeIO.Long\r\n         || /* istanbul ignore next */ util.global.Long\r\n         || util.inquire(\"long\");\r\n\r\n/**\r\n * Regular expression used to verify 2 bit (`bool`) map keys.\r\n * @type {RegExp}\r\n * @const\r\n */\r\nutil.key2Re = /^true|false|0|1$/;\r\n\r\n/**\r\n * Regular expression used to verify 32 bit (`int32` etc.) map keys.\r\n * @type {RegExp}\r\n * @const\r\n */\r\nutil.key32Re = /^-?(?:0|[1-9][0-9]*)$/;\r\n\r\n/**\r\n * Regular expression used to verify 64 bit (`int64` etc.) map keys.\r\n * @type {RegExp}\r\n * @const\r\n */\r\nutil.key64Re = /^(?:[\\\\x00-\\\\xff]{8}|-?(?:0|[1-9][0-9]*))$/;\r\n\r\n/**\r\n * Converts a number or long to an 8 characters long hash string.\r\n * @param {Long|number} value Value to convert\r\n * @returns {string} Hash\r\n */\r\nutil.longToHash = function longToHash(value) {\r\n    return value\r\n        ? util.LongBits.from(value).toHash()\r\n        : util.LongBits.zeroHash;\r\n};\r\n\r\n/**\r\n * Converts an 8 characters long hash string to a long or number.\r\n * @param {string} hash Hash\r\n * @param {boolean} [unsigned=false] Whether unsigned or not\r\n * @returns {Long|number} Original value\r\n */\r\nutil.longFromHash = function longFromHash(hash, unsigned) {\r\n    var bits = util.LongBits.fromHash(hash);\r\n    if (util.Long)\r\n        return util.Long.fromBits(bits.lo, bits.hi, unsigned);\r\n    return bits.toNumber(Boolean(unsigned));\r\n};\r\n\r\n/**\r\n * Merges the properties of the source object into the destination object.\r\n * @memberof util\r\n * @param {Object.<string,*>} dst Destination object\r\n * @param {Object.<string,*>} src Source object\r\n * @param {boolean} [ifNotSet=false] Merges only if the key is not already set\r\n * @returns {Object.<string,*>} Destination object\r\n */\r\nfunction merge(dst, src, ifNotSet) { // used by converters\r\n    for (var keys = Object.keys(src), i = 0; i < keys.length; ++i)\r\n        if (dst[keys[i]] === undefined || !ifNotSet)\r\n            dst[keys[i]] = src[keys[i]];\r\n    return dst;\r\n}\r\n\r\nutil.merge = merge;\r\n\r\n/**\r\n * Converts the first character of a string to lower case.\r\n * @param {string} str String to convert\r\n * @returns {string} Converted string\r\n */\r\nutil.lcFirst = function lcFirst(str) {\r\n    return str.charAt(0).toLowerCase() + str.substring(1);\r\n};\r\n\r\n/**\r\n * Creates a custom error constructor.\r\n * @memberof util\r\n * @param {string} name Error name\r\n * @returns {Constructor<Error>} Custom error constructor\r\n */\r\nfunction newError(name) {\r\n\r\n    function CustomError(message, properties) {\r\n\r\n        if (!(this instanceof CustomError))\r\n            return new CustomError(message, properties);\r\n\r\n        // Error.call(this, message);\r\n        // ^ just returns a new error instance because the ctor can be called as a function\r\n\r\n        Object.defineProperty(this, \"message\", { get: function() { return message; } });\r\n\r\n        /* istanbul ignore next */\r\n        if (Error.captureStackTrace) // node\r\n            Error.captureStackTrace(this, CustomError);\r\n        else\r\n            Object.defineProperty(this, \"stack\", { value: new Error().stack || \"\" });\r\n\r\n        if (properties)\r\n            merge(this, properties);\r\n    }\r\n\r\n    CustomError.prototype = Object.create(Error.prototype, {\r\n        constructor: {\r\n            value: CustomError,\r\n            writable: true,\r\n            enumerable: false,\r\n            configurable: true,\r\n        },\r\n        name: {\r\n            get: function get() { return name; },\r\n            set: undefined,\r\n            enumerable: false,\r\n            // configurable: false would accurately preserve the behavior of\r\n            // the original, but I'm guessing that was not intentional.\r\n            // For an actual error subclass, this property would\r\n            // be configurable.\r\n            configurable: true,\r\n        },\r\n        toString: {\r\n            value: function value() { return this.name + \": \" + this.message; },\r\n            writable: true,\r\n            enumerable: false,\r\n            configurable: true,\r\n        },\r\n    });\r\n\r\n    return CustomError;\r\n}\r\n\r\nutil.newError = newError;\r\n\r\n/**\r\n * Constructs a new protocol error.\r\n * @classdesc Error subclass indicating a protocol specifc error.\r\n * @memberof util\r\n * @extends Error\r\n * @template T extends Message<T>\r\n * @constructor\r\n * @param {string} message Error message\r\n * @param {Object.<string,*>} [properties] Additional properties\r\n * @example\r\n * try {\r\n *     MyMessage.decode(someBuffer); // throws if required fields are missing\r\n * } catch (e) {\r\n *     if (e instanceof ProtocolError && e.instance)\r\n *         console.log(\"decoded so far: \" + JSON.stringify(e.instance));\r\n * }\r\n */\r\nutil.ProtocolError = newError(\"ProtocolError\");\r\n\r\n/**\r\n * So far decoded message instance.\r\n * @name util.ProtocolError#instance\r\n * @type {Message<T>}\r\n */\r\n\r\n/**\r\n * A OneOf getter as returned by {@link util.oneOfGetter}.\r\n * @typedef OneOfGetter\r\n * @type {function}\r\n * @returns {string|undefined} Set field name, if any\r\n */\r\n\r\n/**\r\n * Builds a getter for a oneof's present field name.\r\n * @param {string[]} fieldNames Field names\r\n * @returns {OneOfGetter} Unbound getter\r\n */\r\nutil.oneOfGetter = function getOneOf(fieldNames) {\r\n    var fieldMap = {};\r\n    for (var i = 0; i < fieldNames.length; ++i)\r\n        fieldMap[fieldNames[i]] = 1;\r\n\r\n    /**\r\n     * @returns {string|undefined} Set field name, if any\r\n     * @this Object\r\n     * @ignore\r\n     */\r\n    return function() { // eslint-disable-line consistent-return\r\n        for (var keys = Object.keys(this), i = keys.length - 1; i > -1; --i)\r\n            if (fieldMap[keys[i]] === 1 && this[keys[i]] !== undefined && this[keys[i]] !== null)\r\n                return keys[i];\r\n    };\r\n};\r\n\r\n/**\r\n * A OneOf setter as returned by {@link util.oneOfSetter}.\r\n * @typedef OneOfSetter\r\n * @type {function}\r\n * @param {string|undefined} value Field name\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Builds a setter for a oneof's present field name.\r\n * @param {string[]} fieldNames Field names\r\n * @returns {OneOfSetter} Unbound setter\r\n */\r\nutil.oneOfSetter = function setOneOf(fieldNames) {\r\n\r\n    /**\r\n     * @param {string} name Field name\r\n     * @returns {undefined}\r\n     * @this Object\r\n     * @ignore\r\n     */\r\n    return function(name) {\r\n        for (var i = 0; i < fieldNames.length; ++i)\r\n            if (fieldNames[i] !== name)\r\n                delete this[fieldNames[i]];\r\n    };\r\n};\r\n\r\n/**\r\n * Default conversion options used for {@link Message#toJSON} implementations.\r\n *\r\n * These options are close to proto3's JSON mapping with the exception that internal types like Any are handled just like messages. More precisely:\r\n *\r\n * - Longs become strings\r\n * - Enums become string keys\r\n * - Bytes become base64 encoded strings\r\n * - (Sub-)Messages become plain objects\r\n * - Maps become plain objects with all string keys\r\n * - Repeated fields become arrays\r\n * - NaN and Infinity for float and double fields become strings\r\n *\r\n * @type {IConversionOptions}\r\n * @see https://developers.google.com/protocol-buffers/docs/proto3?hl=en#json\r\n */\r\nutil.toJSONOptions = {\r\n    longs: String,\r\n    enums: String,\r\n    bytes: String,\r\n    json: true\r\n};\r\n\r\n// Sets up buffer utility according to the environment (called in index-minimal)\r\nutil._configure = function() {\r\n    var Buffer = util.Buffer;\r\n    /* istanbul ignore if */\r\n    if (!Buffer) {\r\n        util._Buffer_from = util._Buffer_allocUnsafe = null;\r\n        return;\r\n    }\r\n    // because node 4.x buffers are incompatible & immutable\r\n    // see: https://github.com/dcodeIO/protobuf.js/pull/665\r\n    util._Buffer_from = Buffer.from !== Uint8Array.from && Buffer.from ||\r\n        /* istanbul ignore next */\r\n        function Buffer_from(value, encoding) {\r\n            return new Buffer(value, encoding);\r\n        };\r\n    util._Buffer_allocUnsafe = Buffer.allocUnsafe ||\r\n        /* istanbul ignore next */\r\n        function Buffer_allocUnsafe(size) {\r\n            return new Buffer(size);\r\n        };\r\n};\r\n","\"use strict\";\r\nmodule.exports = Writer;\r\n\r\nvar util      = require(\"./util/minimal\");\r\n\r\nvar BufferWriter; // cyclic\r\n\r\nvar LongBits  = util.LongBits,\r\n    base64    = util.base64,\r\n    utf8      = util.utf8;\r\n\r\n/**\r\n * Constructs a new writer operation instance.\r\n * @classdesc Scheduled writer operation.\r\n * @constructor\r\n * @param {function(*, Uint8Array, number)} fn Function to call\r\n * @param {number} len Value byte length\r\n * @param {*} val Value to write\r\n * @ignore\r\n */\r\nfunction Op(fn, len, val) {\r\n\r\n    /**\r\n     * Function to call.\r\n     * @type {function(Uint8Array, number, *)}\r\n     */\r\n    this.fn = fn;\r\n\r\n    /**\r\n     * Value byte length.\r\n     * @type {number}\r\n     */\r\n    this.len = len;\r\n\r\n    /**\r\n     * Next operation.\r\n     * @type {Writer.Op|undefined}\r\n     */\r\n    this.next = undefined;\r\n\r\n    /**\r\n     * Value to write.\r\n     * @type {*}\r\n     */\r\n    this.val = val; // type varies\r\n}\r\n\r\n/* istanbul ignore next */\r\nfunction noop() {} // eslint-disable-line no-empty-function\r\n\r\n/**\r\n * Constructs a new writer state instance.\r\n * @classdesc Copied writer state.\r\n * @memberof Writer\r\n * @constructor\r\n * @param {Writer} writer Writer to copy state from\r\n * @ignore\r\n */\r\nfunction State(writer) {\r\n\r\n    /**\r\n     * Current head.\r\n     * @type {Writer.Op}\r\n     */\r\n    this.head = writer.head;\r\n\r\n    /**\r\n     * Current tail.\r\n     * @type {Writer.Op}\r\n     */\r\n    this.tail = writer.tail;\r\n\r\n    /**\r\n     * Current buffer length.\r\n     * @type {number}\r\n     */\r\n    this.len = writer.len;\r\n\r\n    /**\r\n     * Next state.\r\n     * @type {State|null}\r\n     */\r\n    this.next = writer.states;\r\n}\r\n\r\n/**\r\n * Constructs a new writer instance.\r\n * @classdesc Wire format writer using `Uint8Array` if available, otherwise `Array`.\r\n * @constructor\r\n */\r\nfunction Writer() {\r\n\r\n    /**\r\n     * Current length.\r\n     * @type {number}\r\n     */\r\n    this.len = 0;\r\n\r\n    /**\r\n     * Operations head.\r\n     * @type {Object}\r\n     */\r\n    this.head = new Op(noop, 0, 0);\r\n\r\n    /**\r\n     * Operations tail\r\n     * @type {Object}\r\n     */\r\n    this.tail = this.head;\r\n\r\n    /**\r\n     * Linked forked states.\r\n     * @type {Object|null}\r\n     */\r\n    this.states = null;\r\n\r\n    // When a value is written, the writer calculates its byte length and puts it into a linked\r\n    // list of operations to perform when finish() is called. This both allows us to allocate\r\n    // buffers of the exact required size and reduces the amount of work we have to do compared\r\n    // to first calculating over objects and then encoding over objects. In our case, the encoding\r\n    // part is just a linked list walk calling operations with already prepared values.\r\n}\r\n\r\nvar create = function create() {\r\n    return util.Buffer\r\n        ? function create_buffer_setup() {\r\n            return (Writer.create = function create_buffer() {\r\n                return new BufferWriter();\r\n            })();\r\n        }\r\n        /* istanbul ignore next */\r\n        : function create_array() {\r\n            return new Writer();\r\n        };\r\n};\r\n\r\n/**\r\n * Creates a new writer.\r\n * @function\r\n * @returns {BufferWriter|Writer} A {@link BufferWriter} when Buffers are supported, otherwise a {@link Writer}\r\n */\r\nWriter.create = create();\r\n\r\n/**\r\n * Allocates a buffer of the specified size.\r\n * @param {number} size Buffer size\r\n * @returns {Uint8Array} Buffer\r\n */\r\nWriter.alloc = function alloc(size) {\r\n    return new util.Array(size);\r\n};\r\n\r\n// Use Uint8Array buffer pool in the browser, just like node does with buffers\r\n/* istanbul ignore else */\r\nif (util.Array !== Array)\r\n    Writer.alloc = util.pool(Writer.alloc, util.Array.prototype.subarray);\r\n\r\n/**\r\n * Pushes a new operation to the queue.\r\n * @param {function(Uint8Array, number, *)} fn Function to call\r\n * @param {number} len Value byte length\r\n * @param {number} val Value to write\r\n * @returns {Writer} `this`\r\n * @private\r\n */\r\nWriter.prototype._push = function push(fn, len, val) {\r\n    this.tail = this.tail.next = new Op(fn, len, val);\r\n    this.len += len;\r\n    return this;\r\n};\r\n\r\nfunction writeByte(val, buf, pos) {\r\n    buf[pos] = val & 255;\r\n}\r\n\r\nfunction writeVarint32(val, buf, pos) {\r\n    while (val > 127) {\r\n        buf[pos++] = val & 127 | 128;\r\n        val >>>= 7;\r\n    }\r\n    buf[pos] = val;\r\n}\r\n\r\n/**\r\n * Constructs a new varint writer operation instance.\r\n * @classdesc Scheduled varint writer operation.\r\n * @extends Op\r\n * @constructor\r\n * @param {number} len Value byte length\r\n * @param {number} val Value to write\r\n * @ignore\r\n */\r\nfunction VarintOp(len, val) {\r\n    this.len = len;\r\n    this.next = undefined;\r\n    this.val = val;\r\n}\r\n\r\nVarintOp.prototype = Object.create(Op.prototype);\r\nVarintOp.prototype.fn = writeVarint32;\r\n\r\n/**\r\n * Writes an unsigned 32 bit value as a varint.\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.uint32 = function write_uint32(value) {\r\n    // here, the call to this.push has been inlined and a varint specific Op subclass is used.\r\n    // uint32 is by far the most frequently used operation and benefits significantly from this.\r\n    this.len += (this.tail = this.tail.next = new VarintOp(\r\n        (value = value >>> 0)\r\n                < 128       ? 1\r\n        : value < 16384     ? 2\r\n        : value < 2097152   ? 3\r\n        : value < 268435456 ? 4\r\n        :                     5,\r\n    value)).len;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Writes a signed 32 bit value as a varint.\r\n * @function\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.int32 = function write_int32(value) {\r\n    return value < 0\r\n        ? this._push(writeVarint64, 10, LongBits.fromNumber(value)) // 10 bytes per spec\r\n        : this.uint32(value);\r\n};\r\n\r\n/**\r\n * Writes a 32 bit value as a varint, zig-zag encoded.\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.sint32 = function write_sint32(value) {\r\n    return this.uint32((value << 1 ^ value >> 31) >>> 0);\r\n};\r\n\r\nfunction writeVarint64(val, buf, pos) {\r\n    while (val.hi) {\r\n        buf[pos++] = val.lo & 127 | 128;\r\n        val.lo = (val.lo >>> 7 | val.hi << 25) >>> 0;\r\n        val.hi >>>= 7;\r\n    }\r\n    while (val.lo > 127) {\r\n        buf[pos++] = val.lo & 127 | 128;\r\n        val.lo = val.lo >>> 7;\r\n    }\r\n    buf[pos++] = val.lo;\r\n}\r\n\r\n/**\r\n * Writes an unsigned 64 bit value as a varint.\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriter.prototype.uint64 = function write_uint64(value) {\r\n    var bits = LongBits.from(value);\r\n    return this._push(writeVarint64, bits.length(), bits);\r\n};\r\n\r\n/**\r\n * Writes a signed 64 bit value as a varint.\r\n * @function\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriter.prototype.int64 = Writer.prototype.uint64;\r\n\r\n/**\r\n * Writes a signed 64 bit value as a varint, zig-zag encoded.\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriter.prototype.sint64 = function write_sint64(value) {\r\n    var bits = LongBits.from(value).zzEncode();\r\n    return this._push(writeVarint64, bits.length(), bits);\r\n};\r\n\r\n/**\r\n * Writes a boolish value as a varint.\r\n * @param {boolean} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.bool = function write_bool(value) {\r\n    return this._push(writeByte, 1, value ? 1 : 0);\r\n};\r\n\r\nfunction writeFixed32(val, buf, pos) {\r\n    buf[pos    ] =  val         & 255;\r\n    buf[pos + 1] =  val >>> 8   & 255;\r\n    buf[pos + 2] =  val >>> 16  & 255;\r\n    buf[pos + 3] =  val >>> 24;\r\n}\r\n\r\n/**\r\n * Writes an unsigned 32 bit value as fixed 32 bits.\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.fixed32 = function write_fixed32(value) {\r\n    return this._push(writeFixed32, 4, value >>> 0);\r\n};\r\n\r\n/**\r\n * Writes a signed 32 bit value as fixed 32 bits.\r\n * @function\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.sfixed32 = Writer.prototype.fixed32;\r\n\r\n/**\r\n * Writes an unsigned 64 bit value as fixed 64 bits.\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriter.prototype.fixed64 = function write_fixed64(value) {\r\n    var bits = LongBits.from(value);\r\n    return this._push(writeFixed32, 4, bits.lo)._push(writeFixed32, 4, bits.hi);\r\n};\r\n\r\n/**\r\n * Writes a signed 64 bit value as fixed 64 bits.\r\n * @function\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriter.prototype.sfixed64 = Writer.prototype.fixed64;\r\n\r\n/**\r\n * Writes a float (32 bit).\r\n * @function\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.float = function write_float(value) {\r\n    return this._push(util.float.writeFloatLE, 4, value);\r\n};\r\n\r\n/**\r\n * Writes a double (64 bit float).\r\n * @function\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.double = function write_double(value) {\r\n    return this._push(util.float.writeDoubleLE, 8, value);\r\n};\r\n\r\nvar writeBytes = util.Array.prototype.set\r\n    ? function writeBytes_set(val, buf, pos) {\r\n        buf.set(val, pos); // also works for plain array values\r\n    }\r\n    /* istanbul ignore next */\r\n    : function writeBytes_for(val, buf, pos) {\r\n        for (var i = 0; i < val.length; ++i)\r\n            buf[pos + i] = val[i];\r\n    };\r\n\r\n/**\r\n * Writes a sequence of bytes.\r\n * @param {Uint8Array|string} value Buffer or base64 encoded string to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.bytes = function write_bytes(value) {\r\n    var len = value.length >>> 0;\r\n    if (!len)\r\n        return this._push(writeByte, 1, 0);\r\n    if (util.isString(value)) {\r\n        var buf = Writer.alloc(len = base64.length(value));\r\n        base64.decode(value, buf, 0);\r\n        value = buf;\r\n    }\r\n    return this.uint32(len)._push(writeBytes, len, value);\r\n};\r\n\r\n/**\r\n * Writes a string.\r\n * @param {string} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.string = function write_string(value) {\r\n    var len = utf8.length(value);\r\n    return len\r\n        ? this.uint32(len)._push(utf8.write, len, value)\r\n        : this._push(writeByte, 1, 0);\r\n};\r\n\r\n/**\r\n * Forks this writer's state by pushing it to a stack.\r\n * Calling {@link Writer#reset|reset} or {@link Writer#ldelim|ldelim} resets the writer to the previous state.\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.fork = function fork() {\r\n    this.states = new State(this);\r\n    this.head = this.tail = new Op(noop, 0, 0);\r\n    this.len = 0;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Resets this instance to the last state.\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.reset = function reset() {\r\n    if (this.states) {\r\n        this.head   = this.states.head;\r\n        this.tail   = this.states.tail;\r\n        this.len    = this.states.len;\r\n        this.states = this.states.next;\r\n    } else {\r\n        this.head = this.tail = new Op(noop, 0, 0);\r\n        this.len  = 0;\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Resets to the last state and appends the fork state's current write length as a varint followed by its operations.\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.ldelim = function ldelim() {\r\n    var head = this.head,\r\n        tail = this.tail,\r\n        len  = this.len;\r\n    this.reset().uint32(len);\r\n    if (len) {\r\n        this.tail.next = head.next; // skip noop\r\n        this.tail = tail;\r\n        this.len += len;\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Finishes the write operation.\r\n * @returns {Uint8Array} Finished buffer\r\n */\r\nWriter.prototype.finish = function finish() {\r\n    var head = this.head.next, // skip noop\r\n        buf  = this.constructor.alloc(this.len),\r\n        pos  = 0;\r\n    while (head) {\r\n        head.fn(head.val, buf, pos);\r\n        pos += head.len;\r\n        head = head.next;\r\n    }\r\n    // this.head = this.tail = null;\r\n    return buf;\r\n};\r\n\r\nWriter._configure = function(BufferWriter_) {\r\n    BufferWriter = BufferWriter_;\r\n    Writer.create = create();\r\n    BufferWriter._configure();\r\n};\r\n","\"use strict\";\r\nmodule.exports = BufferWriter;\r\n\r\n// extends Writer\r\nvar Writer = require(\"./writer\");\r\n(BufferWriter.prototype = Object.create(Writer.prototype)).constructor = BufferWriter;\r\n\r\nvar util = require(\"./util/minimal\");\r\n\r\n/**\r\n * Constructs a new buffer writer instance.\r\n * @classdesc Wire format writer using node buffers.\r\n * @extends Writer\r\n * @constructor\r\n */\r\nfunction BufferWriter() {\r\n    Writer.call(this);\r\n}\r\n\r\nBufferWriter._configure = function () {\r\n    /**\r\n     * Allocates a buffer of the specified size.\r\n     * @function\r\n     * @param {number} size Buffer size\r\n     * @returns {Buffer} Buffer\r\n     */\r\n    BufferWriter.alloc = util._Buffer_allocUnsafe;\r\n\r\n    BufferWriter.writeBytesBuffer = util.Buffer && util.Buffer.prototype instanceof Uint8Array && util.Buffer.prototype.set.name === \"set\"\r\n        ? function writeBytesBuffer_set(val, buf, pos) {\r\n          buf.set(val, pos); // faster than copy (requires node >= 4 where Buffers extend Uint8Array and set is properly inherited)\r\n          // also works for plain array values\r\n        }\r\n        /* istanbul ignore next */\r\n        : function writeBytesBuffer_copy(val, buf, pos) {\r\n          if (val.copy) // Buffer values\r\n            val.copy(buf, pos, 0, val.length);\r\n          else for (var i = 0; i < val.length;) // plain array values\r\n            buf[pos++] = val[i++];\r\n        };\r\n};\r\n\r\n\r\n/**\r\n * @override\r\n */\r\nBufferWriter.prototype.bytes = function write_bytes_buffer(value) {\r\n    if (util.isString(value))\r\n        value = util._Buffer_from(value, \"base64\");\r\n    var len = value.length >>> 0;\r\n    this.uint32(len);\r\n    if (len)\r\n        this._push(BufferWriter.writeBytesBuffer, len, value);\r\n    return this;\r\n};\r\n\r\nfunction writeStringBuffer(val, buf, pos) {\r\n    if (val.length < 40) // plain js is faster for short strings (probably due to redundant assertions)\r\n        util.utf8.write(val, buf, pos);\r\n    else if (buf.utf8Write)\r\n        buf.utf8Write(val, pos);\r\n    else\r\n        buf.write(val, pos);\r\n}\r\n\r\n/**\r\n * @override\r\n */\r\nBufferWriter.prototype.string = function write_string_buffer(value) {\r\n    var len = util.Buffer.byteLength(value);\r\n    this.uint32(len);\r\n    if (len)\r\n        this._push(writeStringBuffer, len, value);\r\n    return this;\r\n};\r\n\r\n\r\n/**\r\n * Finishes the write operation.\r\n * @name BufferWriter#finish\r\n * @function\r\n * @returns {Buffer} Finished buffer\r\n */\r\n\r\nBufferWriter._configure();\r\n","\"use strict\";\r\nmodule.exports = Reader;\r\n\r\nvar util      = require(\"./util/minimal\");\r\n\r\nvar BufferReader; // cyclic\r\n\r\nvar LongBits  = util.LongBits,\r\n    utf8      = util.utf8;\r\n\r\n/* istanbul ignore next */\r\nfunction indexOutOfRange(reader, writeLength) {\r\n    return RangeError(\"index out of range: \" + reader.pos + \" + \" + (writeLength || 1) + \" > \" + reader.len);\r\n}\r\n\r\n/**\r\n * Constructs a new reader instance using the specified buffer.\r\n * @classdesc Wire format reader using `Uint8Array` if available, otherwise `Array`.\r\n * @constructor\r\n * @param {Uint8Array} buffer Buffer to read from\r\n */\r\nfunction Reader(buffer) {\r\n\r\n    /**\r\n     * Read buffer.\r\n     * @type {Uint8Array}\r\n     */\r\n    this.buf = buffer;\r\n\r\n    /**\r\n     * Read buffer position.\r\n     * @type {number}\r\n     */\r\n    this.pos = 0;\r\n\r\n    /**\r\n     * Read buffer length.\r\n     * @type {number}\r\n     */\r\n    this.len = buffer.length;\r\n}\r\n\r\nvar create_array = typeof Uint8Array !== \"undefined\"\r\n    ? function create_typed_array(buffer) {\r\n        if (buffer instanceof Uint8Array || Array.isArray(buffer))\r\n            return new Reader(buffer);\r\n        throw Error(\"illegal buffer\");\r\n    }\r\n    /* istanbul ignore next */\r\n    : function create_array(buffer) {\r\n        if (Array.isArray(buffer))\r\n            return new Reader(buffer);\r\n        throw Error(\"illegal buffer\");\r\n    };\r\n\r\nvar create = function create() {\r\n    return util.Buffer\r\n        ? function create_buffer_setup(buffer) {\r\n            return (Reader.create = function create_buffer(buffer) {\r\n                return util.Buffer.isBuffer(buffer)\r\n                    ? new BufferReader(buffer)\r\n                    /* istanbul ignore next */\r\n                    : create_array(buffer);\r\n            })(buffer);\r\n        }\r\n        /* istanbul ignore next */\r\n        : create_array;\r\n};\r\n\r\n/**\r\n * Creates a new reader using the specified buffer.\r\n * @function\r\n * @param {Uint8Array|Buffer} buffer Buffer to read from\r\n * @returns {Reader|BufferReader} A {@link BufferReader} if `buffer` is a Buffer, otherwise a {@link Reader}\r\n * @throws {Error} If `buffer` is not a valid buffer\r\n */\r\nReader.create = create();\r\n\r\nReader.prototype._slice = util.Array.prototype.subarray || /* istanbul ignore next */ util.Array.prototype.slice;\r\n\r\n/**\r\n * Reads a varint as an unsigned 32 bit value.\r\n * @function\r\n * @returns {number} Value read\r\n */\r\nReader.prototype.uint32 = (function read_uint32_setup() {\r\n    var value = 4294967295; // optimizer type-hint, tends to deopt otherwise (?!)\r\n    return function read_uint32() {\r\n        value = (         this.buf[this.pos] & 127       ) >>> 0; if (this.buf[this.pos++] < 128) return value;\r\n        value = (value | (this.buf[this.pos] & 127) <<  7) >>> 0; if (this.buf[this.pos++] < 128) return value;\r\n        value = (value | (this.buf[this.pos] & 127) << 14) >>> 0; if (this.buf[this.pos++] < 128) return value;\r\n        value = (value | (this.buf[this.pos] & 127) << 21) >>> 0; if (this.buf[this.pos++] < 128) return value;\r\n        value = (value | (this.buf[this.pos] &  15) << 28) >>> 0; if (this.buf[this.pos++] < 128) return value;\r\n\r\n        /* istanbul ignore if */\r\n        if ((this.pos += 5) > this.len) {\r\n            this.pos = this.len;\r\n            throw indexOutOfRange(this, 10);\r\n        }\r\n        return value;\r\n    };\r\n})();\r\n\r\n/**\r\n * Reads a varint as a signed 32 bit value.\r\n * @returns {number} Value read\r\n */\r\nReader.prototype.int32 = function read_int32() {\r\n    return this.uint32() | 0;\r\n};\r\n\r\n/**\r\n * Reads a zig-zag encoded varint as a signed 32 bit value.\r\n * @returns {number} Value read\r\n */\r\nReader.prototype.sint32 = function read_sint32() {\r\n    var value = this.uint32();\r\n    return value >>> 1 ^ -(value & 1) | 0;\r\n};\r\n\r\n/* eslint-disable no-invalid-this */\r\n\r\nfunction readLongVarint() {\r\n    // tends to deopt with local vars for octet etc.\r\n    var bits = new LongBits(0, 0);\r\n    var i = 0;\r\n    if (this.len - this.pos > 4) { // fast route (lo)\r\n        for (; i < 4; ++i) {\r\n            // 1st..4th\r\n            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\r\n            if (this.buf[this.pos++] < 128)\r\n                return bits;\r\n        }\r\n        // 5th\r\n        bits.lo = (bits.lo | (this.buf[this.pos] & 127) << 28) >>> 0;\r\n        bits.hi = (bits.hi | (this.buf[this.pos] & 127) >>  4) >>> 0;\r\n        if (this.buf[this.pos++] < 128)\r\n            return bits;\r\n        i = 0;\r\n    } else {\r\n        for (; i < 3; ++i) {\r\n            /* istanbul ignore if */\r\n            if (this.pos >= this.len)\r\n                throw indexOutOfRange(this);\r\n            // 1st..3th\r\n            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\r\n            if (this.buf[this.pos++] < 128)\r\n                return bits;\r\n        }\r\n        // 4th\r\n        bits.lo = (bits.lo | (this.buf[this.pos++] & 127) << i * 7) >>> 0;\r\n        return bits;\r\n    }\r\n    if (this.len - this.pos > 4) { // fast route (hi)\r\n        for (; i < 5; ++i) {\r\n            // 6th..10th\r\n            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\r\n            if (this.buf[this.pos++] < 128)\r\n                return bits;\r\n        }\r\n    } else {\r\n        for (; i < 5; ++i) {\r\n            /* istanbul ignore if */\r\n            if (this.pos >= this.len)\r\n                throw indexOutOfRange(this);\r\n            // 6th..10th\r\n            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\r\n            if (this.buf[this.pos++] < 128)\r\n                return bits;\r\n        }\r\n    }\r\n    /* istanbul ignore next */\r\n    throw Error(\"invalid varint encoding\");\r\n}\r\n\r\n/* eslint-enable no-invalid-this */\r\n\r\n/**\r\n * Reads a varint as a signed 64 bit value.\r\n * @name Reader#int64\r\n * @function\r\n * @returns {Long} Value read\r\n */\r\n\r\n/**\r\n * Reads a varint as an unsigned 64 bit value.\r\n * @name Reader#uint64\r\n * @function\r\n * @returns {Long} Value read\r\n */\r\n\r\n/**\r\n * Reads a zig-zag encoded varint as a signed 64 bit value.\r\n * @name Reader#sint64\r\n * @function\r\n * @returns {Long} Value read\r\n */\r\n\r\n/**\r\n * Reads a varint as a boolean.\r\n * @returns {boolean} Value read\r\n */\r\nReader.prototype.bool = function read_bool() {\r\n    return this.uint32() !== 0;\r\n};\r\n\r\nfunction readFixed32_end(buf, end) { // note that this uses `end`, not `pos`\r\n    return (buf[end - 4]\r\n          | buf[end - 3] << 8\r\n          | buf[end - 2] << 16\r\n          | buf[end - 1] << 24) >>> 0;\r\n}\r\n\r\n/**\r\n * Reads fixed 32 bits as an unsigned 32 bit integer.\r\n * @returns {number} Value read\r\n */\r\nReader.prototype.fixed32 = function read_fixed32() {\r\n\r\n    /* istanbul ignore if */\r\n    if (this.pos + 4 > this.len)\r\n        throw indexOutOfRange(this, 4);\r\n\r\n    return readFixed32_end(this.buf, this.pos += 4);\r\n};\r\n\r\n/**\r\n * Reads fixed 32 bits as a signed 32 bit integer.\r\n * @returns {number} Value read\r\n */\r\nReader.prototype.sfixed32 = function read_sfixed32() {\r\n\r\n    /* istanbul ignore if */\r\n    if (this.pos + 4 > this.len)\r\n        throw indexOutOfRange(this, 4);\r\n\r\n    return readFixed32_end(this.buf, this.pos += 4) | 0;\r\n};\r\n\r\n/* eslint-disable no-invalid-this */\r\n\r\nfunction readFixed64(/* this: Reader */) {\r\n\r\n    /* istanbul ignore if */\r\n    if (this.pos + 8 > this.len)\r\n        throw indexOutOfRange(this, 8);\r\n\r\n    return new LongBits(readFixed32_end(this.buf, this.pos += 4), readFixed32_end(this.buf, this.pos += 4));\r\n}\r\n\r\n/* eslint-enable no-invalid-this */\r\n\r\n/**\r\n * Reads fixed 64 bits.\r\n * @name Reader#fixed64\r\n * @function\r\n * @returns {Long} Value read\r\n */\r\n\r\n/**\r\n * Reads zig-zag encoded fixed 64 bits.\r\n * @name Reader#sfixed64\r\n * @function\r\n * @returns {Long} Value read\r\n */\r\n\r\n/**\r\n * Reads a float (32 bit) as a number.\r\n * @function\r\n * @returns {number} Value read\r\n */\r\nReader.prototype.float = function read_float() {\r\n\r\n    /* istanbul ignore if */\r\n    if (this.pos + 4 > this.len)\r\n        throw indexOutOfRange(this, 4);\r\n\r\n    var value = util.float.readFloatLE(this.buf, this.pos);\r\n    this.pos += 4;\r\n    return value;\r\n};\r\n\r\n/**\r\n * Reads a double (64 bit float) as a number.\r\n * @function\r\n * @returns {number} Value read\r\n */\r\nReader.prototype.double = function read_double() {\r\n\r\n    /* istanbul ignore if */\r\n    if (this.pos + 8 > this.len)\r\n        throw indexOutOfRange(this, 4);\r\n\r\n    var value = util.float.readDoubleLE(this.buf, this.pos);\r\n    this.pos += 8;\r\n    return value;\r\n};\r\n\r\n/**\r\n * Reads a sequence of bytes preceeded by its length as a varint.\r\n * @returns {Uint8Array} Value read\r\n */\r\nReader.prototype.bytes = function read_bytes() {\r\n    var length = this.uint32(),\r\n        start  = this.pos,\r\n        end    = this.pos + length;\r\n\r\n    /* istanbul ignore if */\r\n    if (end > this.len)\r\n        throw indexOutOfRange(this, length);\r\n\r\n    this.pos += length;\r\n    if (Array.isArray(this.buf)) // plain array\r\n        return this.buf.slice(start, end);\r\n\r\n    if (start === end) { // fix for IE 10/Win8 and others' subarray returning array of size 1\r\n        var nativeBuffer = util.Buffer;\r\n        return nativeBuffer\r\n            ? nativeBuffer.alloc(0)\r\n            : new this.buf.constructor(0);\r\n    }\r\n    return this._slice.call(this.buf, start, end);\r\n};\r\n\r\n/**\r\n * Reads a string preceeded by its byte length as a varint.\r\n * @returns {string} Value read\r\n */\r\nReader.prototype.string = function read_string() {\r\n    var bytes = this.bytes();\r\n    return utf8.read(bytes, 0, bytes.length);\r\n};\r\n\r\n/**\r\n * Skips the specified number of bytes if specified, otherwise skips a varint.\r\n * @param {number} [length] Length if known, otherwise a varint is assumed\r\n * @returns {Reader} `this`\r\n */\r\nReader.prototype.skip = function skip(length) {\r\n    if (typeof length === \"number\") {\r\n        /* istanbul ignore if */\r\n        if (this.pos + length > this.len)\r\n            throw indexOutOfRange(this, length);\r\n        this.pos += length;\r\n    } else {\r\n        do {\r\n            /* istanbul ignore if */\r\n            if (this.pos >= this.len)\r\n                throw indexOutOfRange(this);\r\n        } while (this.buf[this.pos++] & 128);\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Skips the next element of the specified wire type.\r\n * @param {number} wireType Wire type received\r\n * @returns {Reader} `this`\r\n */\r\nReader.prototype.skipType = function(wireType) {\r\n    switch (wireType) {\r\n        case 0:\r\n            this.skip();\r\n            break;\r\n        case 1:\r\n            this.skip(8);\r\n            break;\r\n        case 2:\r\n            this.skip(this.uint32());\r\n            break;\r\n        case 3:\r\n            while ((wireType = this.uint32() & 7) !== 4) {\r\n                this.skipType(wireType);\r\n            }\r\n            break;\r\n        case 5:\r\n            this.skip(4);\r\n            break;\r\n\r\n        /* istanbul ignore next */\r\n        default:\r\n            throw Error(\"invalid wire type \" + wireType + \" at offset \" + this.pos);\r\n    }\r\n    return this;\r\n};\r\n\r\nReader._configure = function(BufferReader_) {\r\n    BufferReader = BufferReader_;\r\n    Reader.create = create();\r\n    BufferReader._configure();\r\n\r\n    var fn = util.Long ? \"toLong\" : /* istanbul ignore next */ \"toNumber\";\r\n    util.merge(Reader.prototype, {\r\n\r\n        int64: function read_int64() {\r\n            return readLongVarint.call(this)[fn](false);\r\n        },\r\n\r\n        uint64: function read_uint64() {\r\n            return readLongVarint.call(this)[fn](true);\r\n        },\r\n\r\n        sint64: function read_sint64() {\r\n            return readLongVarint.call(this).zzDecode()[fn](false);\r\n        },\r\n\r\n        fixed64: function read_fixed64() {\r\n            return readFixed64.call(this)[fn](true);\r\n        },\r\n\r\n        sfixed64: function read_sfixed64() {\r\n            return readFixed64.call(this)[fn](false);\r\n        }\r\n\r\n    });\r\n};\r\n","\"use strict\";\r\nmodule.exports = BufferReader;\r\n\r\n// extends Reader\r\nvar Reader = require(\"./reader\");\r\n(BufferReader.prototype = Object.create(Reader.prototype)).constructor = BufferReader;\r\n\r\nvar util = require(\"./util/minimal\");\r\n\r\n/**\r\n * Constructs a new buffer reader instance.\r\n * @classdesc Wire format reader using node buffers.\r\n * @extends Reader\r\n * @constructor\r\n * @param {Buffer} buffer Buffer to read from\r\n */\r\nfunction BufferReader(buffer) {\r\n    Reader.call(this, buffer);\r\n\r\n    /**\r\n     * Read buffer.\r\n     * @name BufferReader#buf\r\n     * @type {Buffer}\r\n     */\r\n}\r\n\r\nBufferReader._configure = function () {\r\n    /* istanbul ignore else */\r\n    if (util.Buffer)\r\n        BufferReader.prototype._slice = util.Buffer.prototype.slice;\r\n};\r\n\r\n\r\n/**\r\n * @override\r\n */\r\nBufferReader.prototype.string = function read_string_buffer() {\r\n    var len = this.uint32(); // modifies pos\r\n    return this.buf.utf8Slice\r\n        ? this.buf.utf8Slice(this.pos, this.pos = Math.min(this.pos + len, this.len))\r\n        : this.buf.toString(\"utf-8\", this.pos, this.pos = Math.min(this.pos + len, this.len));\r\n};\r\n\r\n/**\r\n * Reads a sequence of bytes preceeded by its length as a varint.\r\n * @name BufferReader#bytes\r\n * @function\r\n * @returns {Buffer} Value read\r\n */\r\n\r\nBufferReader._configure();\r\n","\"use strict\";\r\nmodule.exports = Service;\r\n\r\nvar util = require(\"../util/minimal\");\r\n\r\n// Extends EventEmitter\r\n(Service.prototype = Object.create(util.EventEmitter.prototype)).constructor = Service;\r\n\r\n/**\r\n * A service method callback as used by {@link rpc.ServiceMethod|ServiceMethod}.\r\n *\r\n * Differs from {@link RPCImplCallback} in that it is an actual callback of a service method which may not return `response = null`.\r\n * @typedef rpc.ServiceMethodCallback\r\n * @template TRes extends Message<TRes>\r\n * @type {function}\r\n * @param {Error|null} error Error, if any\r\n * @param {TRes} [response] Response message\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * A service method part of a {@link rpc.Service} as created by {@link Service.create}.\r\n * @typedef rpc.ServiceMethod\r\n * @template TReq extends Message<TReq>\r\n * @template TRes extends Message<TRes>\r\n * @type {function}\r\n * @param {TReq|Properties<TReq>} request Request message or plain object\r\n * @param {rpc.ServiceMethodCallback<TRes>} [callback] Node-style callback called with the error, if any, and the response message\r\n * @returns {Promise<Message<TRes>>} Promise if `callback` has been omitted, otherwise `undefined`\r\n */\r\n\r\n/**\r\n * Constructs a new RPC service instance.\r\n * @classdesc An RPC service as returned by {@link Service#create}.\r\n * @exports rpc.Service\r\n * @extends util.EventEmitter\r\n * @constructor\r\n * @param {RPCImpl} rpcImpl RPC implementation\r\n * @param {boolean} [requestDelimited=false] Whether requests are length-delimited\r\n * @param {boolean} [responseDelimited=false] Whether responses are length-delimited\r\n */\r\nfunction Service(rpcImpl, requestDelimited, responseDelimited) {\r\n\r\n    if (typeof rpcImpl !== \"function\")\r\n        throw TypeError(\"rpcImpl must be a function\");\r\n\r\n    util.EventEmitter.call(this);\r\n\r\n    /**\r\n     * RPC implementation. Becomes `null` once the service is ended.\r\n     * @type {RPCImpl|null}\r\n     */\r\n    this.rpcImpl = rpcImpl;\r\n\r\n    /**\r\n     * Whether requests are length-delimited.\r\n     * @type {boolean}\r\n     */\r\n    this.requestDelimited = Boolean(requestDelimited);\r\n\r\n    /**\r\n     * Whether responses are length-delimited.\r\n     * @type {boolean}\r\n     */\r\n    this.responseDelimited = Boolean(responseDelimited);\r\n}\r\n\r\n/**\r\n * Calls a service method through {@link rpc.Service#rpcImpl|rpcImpl}.\r\n * @param {Method|rpc.ServiceMethod<TReq,TRes>} method Reflected or static method\r\n * @param {Constructor<TReq>} requestCtor Request constructor\r\n * @param {Constructor<TRes>} responseCtor Response constructor\r\n * @param {TReq|Properties<TReq>} request Request message or plain object\r\n * @param {rpc.ServiceMethodCallback<TRes>} callback Service callback\r\n * @returns {undefined}\r\n * @template TReq extends Message<TReq>\r\n * @template TRes extends Message<TRes>\r\n */\r\nService.prototype.rpcCall = function rpcCall(method, requestCtor, responseCtor, request, callback) {\r\n\r\n    if (!request)\r\n        throw TypeError(\"request must be specified\");\r\n\r\n    var self = this;\r\n    if (!callback)\r\n        return util.asPromise(rpcCall, self, method, requestCtor, responseCtor, request);\r\n\r\n    if (!self.rpcImpl) {\r\n        setTimeout(function() { callback(Error(\"already ended\")); }, 0);\r\n        return undefined;\r\n    }\r\n\r\n    try {\r\n        return self.rpcImpl(\r\n            method,\r\n            requestCtor[self.requestDelimited ? \"encodeDelimited\" : \"encode\"](request).finish(),\r\n            function rpcCallback(err, response) {\r\n\r\n                if (err) {\r\n                    self.emit(\"error\", err, method);\r\n                    return callback(err);\r\n                }\r\n\r\n                if (response === null) {\r\n                    self.end(/* endedByRPC */ true);\r\n                    return undefined;\r\n                }\r\n\r\n                if (!(response instanceof responseCtor)) {\r\n                    try {\r\n                        response = responseCtor[self.responseDelimited ? \"decodeDelimited\" : \"decode\"](response);\r\n                    } catch (err) {\r\n                        self.emit(\"error\", err, method);\r\n                        return callback(err);\r\n                    }\r\n                }\r\n\r\n                self.emit(\"data\", response, method);\r\n                return callback(null, response);\r\n            }\r\n        );\r\n    } catch (err) {\r\n        self.emit(\"error\", err, method);\r\n        setTimeout(function() { callback(err); }, 0);\r\n        return undefined;\r\n    }\r\n};\r\n\r\n/**\r\n * Ends this service and emits the `end` event.\r\n * @param {boolean} [endedByRPC=false] Whether the service has been ended by the RPC implementation.\r\n * @returns {rpc.Service} `this`\r\n */\r\nService.prototype.end = function end(endedByRPC) {\r\n    if (this.rpcImpl) {\r\n        if (!endedByRPC) // signal end to rpcImpl\r\n            this.rpcImpl(null, null, null);\r\n        this.rpcImpl = null;\r\n        this.emit(\"end\").off();\r\n    }\r\n    return this;\r\n};\r\n","\"use strict\";\r\n\r\n/**\r\n * Streaming RPC helpers.\r\n * @namespace\r\n */\r\nvar rpc = exports;\r\n\r\n/**\r\n * RPC implementation passed to {@link Service#create} performing a service request on network level, i.e. by utilizing http requests or websockets.\r\n * @typedef RPCImpl\r\n * @type {function}\r\n * @param {Method|rpc.ServiceMethod<Message<{}>,Message<{}>>} method Reflected or static method being called\r\n * @param {Uint8Array} requestData Request data\r\n * @param {RPCImplCallback} callback Callback function\r\n * @returns {undefined}\r\n * @example\r\n * function rpcImpl(method, requestData, callback) {\r\n *     if (protobuf.util.lcFirst(method.name) !== \"myMethod\") // compatible with static code\r\n *         throw Error(\"no such method\");\r\n *     asynchronouslyObtainAResponse(requestData, function(err, responseData) {\r\n *         callback(err, responseData);\r\n *     });\r\n * }\r\n */\r\n\r\n/**\r\n * Node-style callback as used by {@link RPCImpl}.\r\n * @typedef RPCImplCallback\r\n * @type {function}\r\n * @param {Error|null} error Error, if any, otherwise `null`\r\n * @param {Uint8Array|null} [response] Response data or `null` to signal end of stream, if there hasn't been an error\r\n * @returns {undefined}\r\n */\r\n\r\nrpc.Service = require(\"./rpc/service\");\r\n","\"use strict\";\r\nmodule.exports = {};\r\n\r\n/**\r\n * Named roots.\r\n * This is where pbjs stores generated structures (the option `-r, --root` specifies a name).\r\n * Can also be used manually to make roots available across modules.\r\n * @name roots\r\n * @type {Object.<string,Root>}\r\n * @example\r\n * // pbjs -r myroot -o compiled.js ...\r\n *\r\n * // in another module:\r\n * require(\"./compiled.js\");\r\n *\r\n * // in any subsequent module:\r\n * var root = protobuf.roots[\"myroot\"];\r\n */\r\n","\"use strict\";\r\nvar protobuf = exports;\r\n\r\n/**\r\n * Build type, one of `\"full\"`, `\"light\"` or `\"minimal\"`.\r\n * @name build\r\n * @type {string}\r\n * @const\r\n */\r\nprotobuf.build = \"minimal\";\r\n\r\n// Serialization\r\nprotobuf.Writer       = require(\"./writer\");\r\nprotobuf.BufferWriter = require(\"./writer_buffer\");\r\nprotobuf.Reader       = require(\"./reader\");\r\nprotobuf.BufferReader = require(\"./reader_buffer\");\r\n\r\n// Utility\r\nprotobuf.util         = require(\"./util/minimal\");\r\nprotobuf.rpc          = require(\"./rpc\");\r\nprotobuf.roots        = require(\"./roots\");\r\nprotobuf.configure    = configure;\r\n\r\n/* istanbul ignore next */\r\n/**\r\n * Reconfigures the library according to the environment.\r\n * @returns {undefined}\r\n */\r\nfunction configure() {\r\n    protobuf.util._configure();\r\n    protobuf.Writer._configure(protobuf.BufferWriter);\r\n    protobuf.Reader._configure(protobuf.BufferReader);\r\n}\r\n\r\n// Set up buffer utility according to the environment\r\nconfigure();\r\n","// minimal library entry point.\r\n\r\n\"use strict\";\r\nmodule.exports = require(\"./src/index-minimal\");\r\n","/*eslint-disable block-scoped-var, id-length, no-control-regex, no-magic-numbers, no-prototype-builtins, no-redeclare, no-shadow, no-var, sort-vars*/\n\"use strict\";\nvar $protobuf = require(\"protobufjs/minimal\");\n// Common aliases\nvar $Reader = $protobuf.Reader, $Writer = $protobuf.Writer, $util = $protobuf.util;\n// Exported root namespace\nvar $root = $protobuf.roots[\"default\"] || ($protobuf.roots[\"default\"] = {});\n$root.opentelemetry = (function () {\n    /**\n     * Namespace opentelemetry.\n     * @exports opentelemetry\n     * @namespace\n     */\n    var opentelemetry = {};\n    opentelemetry.proto = (function () {\n        /**\n         * Namespace proto.\n         * @memberof opentelemetry\n         * @namespace\n         */\n        var proto = {};\n        proto.common = (function () {\n            /**\n             * Namespace common.\n             * @memberof opentelemetry.proto\n             * @namespace\n             */\n            var common = {};\n            common.v1 = (function () {\n                /**\n                 * Namespace v1.\n                 * @memberof opentelemetry.proto.common\n                 * @namespace\n                 */\n                var v1 = {};\n                v1.AnyValue = (function () {\n                    /**\n                     * Properties of an AnyValue.\n                     * @memberof opentelemetry.proto.common.v1\n                     * @interface IAnyValue\n                     * @property {string|null} [stringValue] AnyValue stringValue\n                     * @property {boolean|null} [boolValue] AnyValue boolValue\n                     * @property {number|Long|null} [intValue] AnyValue intValue\n                     * @property {number|null} [doubleValue] AnyValue doubleValue\n                     * @property {opentelemetry.proto.common.v1.IArrayValue|null} [arrayValue] AnyValue arrayValue\n                     * @property {opentelemetry.proto.common.v1.IKeyValueList|null} [kvlistValue] AnyValue kvlistValue\n                     * @property {Uint8Array|null} [bytesValue] AnyValue bytesValue\n                     */\n                    /**\n                     * Constructs a new AnyValue.\n                     * @memberof opentelemetry.proto.common.v1\n                     * @classdesc Represents an AnyValue.\n                     * @implements IAnyValue\n                     * @constructor\n                     * @param {opentelemetry.proto.common.v1.IAnyValue=} [properties] Properties to set\n                     */\n                    function AnyValue(properties) {\n                        if (properties)\n                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                                if (properties[keys[i]] != null)\n                                    this[keys[i]] = properties[keys[i]];\n                    }\n                    /**\n                     * AnyValue stringValue.\n                     * @member {string|null|undefined} stringValue\n                     * @memberof opentelemetry.proto.common.v1.AnyValue\n                     * @instance\n                     */\n                    AnyValue.prototype.stringValue = null;\n                    /**\n                     * AnyValue boolValue.\n                     * @member {boolean|null|undefined} boolValue\n                     * @memberof opentelemetry.proto.common.v1.AnyValue\n                     * @instance\n                     */\n                    AnyValue.prototype.boolValue = null;\n                    /**\n                     * AnyValue intValue.\n                     * @member {number|Long|null|undefined} intValue\n                     * @memberof opentelemetry.proto.common.v1.AnyValue\n                     * @instance\n                     */\n                    AnyValue.prototype.intValue = null;\n                    /**\n                     * AnyValue doubleValue.\n                     * @member {number|null|undefined} doubleValue\n                     * @memberof opentelemetry.proto.common.v1.AnyValue\n                     * @instance\n                     */\n                    AnyValue.prototype.doubleValue = null;\n                    /**\n                     * AnyValue arrayValue.\n                     * @member {opentelemetry.proto.common.v1.IArrayValue|null|undefined} arrayValue\n                     * @memberof opentelemetry.proto.common.v1.AnyValue\n                     * @instance\n                     */\n                    AnyValue.prototype.arrayValue = null;\n                    /**\n                     * AnyValue kvlistValue.\n                     * @member {opentelemetry.proto.common.v1.IKeyValueList|null|undefined} kvlistValue\n                     * @memberof opentelemetry.proto.common.v1.AnyValue\n                     * @instance\n                     */\n                    AnyValue.prototype.kvlistValue = null;\n                    /**\n                     * AnyValue bytesValue.\n                     * @member {Uint8Array|null|undefined} bytesValue\n                     * @memberof opentelemetry.proto.common.v1.AnyValue\n                     * @instance\n                     */\n                    AnyValue.prototype.bytesValue = null;\n                    // OneOf field names bound to virtual getters and setters\n                    var $oneOfFields;\n                    /**\n                     * AnyValue value.\n                     * @member {\"stringValue\"|\"boolValue\"|\"intValue\"|\"doubleValue\"|\"arrayValue\"|\"kvlistValue\"|\"bytesValue\"|undefined} value\n                     * @memberof opentelemetry.proto.common.v1.AnyValue\n                     * @instance\n                     */\n                    Object.defineProperty(AnyValue.prototype, \"value\", {\n                        get: $util.oneOfGetter($oneOfFields = [\"stringValue\", \"boolValue\", \"intValue\", \"doubleValue\", \"arrayValue\", \"kvlistValue\", \"bytesValue\"]),\n                        set: $util.oneOfSetter($oneOfFields)\n                    });\n                    /**\n                     * Creates a new AnyValue instance using the specified properties.\n                     * @function create\n                     * @memberof opentelemetry.proto.common.v1.AnyValue\n                     * @static\n                     * @param {opentelemetry.proto.common.v1.IAnyValue=} [properties] Properties to set\n                     * @returns {opentelemetry.proto.common.v1.AnyValue} AnyValue instance\n                     */\n                    AnyValue.create = function create(properties) {\n                        return new AnyValue(properties);\n                    };\n                    /**\n                     * Encodes the specified AnyValue message. Does not implicitly {@link opentelemetry.proto.common.v1.AnyValue.verify|verify} messages.\n                     * @function encode\n                     * @memberof opentelemetry.proto.common.v1.AnyValue\n                     * @static\n                     * @param {opentelemetry.proto.common.v1.IAnyValue} message AnyValue message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    AnyValue.encode = function encode(message, writer) {\n                        if (!writer)\n                            writer = $Writer.create();\n                        if (message.stringValue != null && Object.hasOwnProperty.call(message, \"stringValue\"))\n                            writer.uint32(/* id 1, wireType 2 =*/ 10).string(message.stringValue);\n                        if (message.boolValue != null && Object.hasOwnProperty.call(message, \"boolValue\"))\n                            writer.uint32(/* id 2, wireType 0 =*/ 16).bool(message.boolValue);\n                        if (message.intValue != null && Object.hasOwnProperty.call(message, \"intValue\"))\n                            writer.uint32(/* id 3, wireType 0 =*/ 24).int64(message.intValue);\n                        if (message.doubleValue != null && Object.hasOwnProperty.call(message, \"doubleValue\"))\n                            writer.uint32(/* id 4, wireType 1 =*/ 33).double(message.doubleValue);\n                        if (message.arrayValue != null && Object.hasOwnProperty.call(message, \"arrayValue\"))\n                            $root.opentelemetry.proto.common.v1.ArrayValue.encode(message.arrayValue, writer.uint32(/* id 5, wireType 2 =*/ 42).fork()).ldelim();\n                        if (message.kvlistValue != null && Object.hasOwnProperty.call(message, \"kvlistValue\"))\n                            $root.opentelemetry.proto.common.v1.KeyValueList.encode(message.kvlistValue, writer.uint32(/* id 6, wireType 2 =*/ 50).fork()).ldelim();\n                        if (message.bytesValue != null && Object.hasOwnProperty.call(message, \"bytesValue\"))\n                            writer.uint32(/* id 7, wireType 2 =*/ 58).bytes(message.bytesValue);\n                        return writer;\n                    };\n                    /**\n                     * Encodes the specified AnyValue message, length delimited. Does not implicitly {@link opentelemetry.proto.common.v1.AnyValue.verify|verify} messages.\n                     * @function encodeDelimited\n                     * @memberof opentelemetry.proto.common.v1.AnyValue\n                     * @static\n                     * @param {opentelemetry.proto.common.v1.IAnyValue} message AnyValue message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    AnyValue.encodeDelimited = function encodeDelimited(message, writer) {\n                        return this.encode(message, writer).ldelim();\n                    };\n                    /**\n                     * Decodes an AnyValue message from the specified reader or buffer.\n                     * @function decode\n                     * @memberof opentelemetry.proto.common.v1.AnyValue\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @param {number} [length] Message length if known beforehand\n                     * @returns {opentelemetry.proto.common.v1.AnyValue} AnyValue\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    AnyValue.decode = function decode(reader, length) {\n                        if (!(reader instanceof $Reader))\n                            reader = $Reader.create(reader);\n                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.opentelemetry.proto.common.v1.AnyValue();\n                        while (reader.pos < end) {\n                            var tag = reader.uint32();\n                            switch (tag >>> 3) {\n                                case 1: {\n                                    message.stringValue = reader.string();\n                                    break;\n                                }\n                                case 2: {\n                                    message.boolValue = reader.bool();\n                                    break;\n                                }\n                                case 3: {\n                                    message.intValue = reader.int64();\n                                    break;\n                                }\n                                case 4: {\n                                    message.doubleValue = reader.double();\n                                    break;\n                                }\n                                case 5: {\n                                    message.arrayValue = $root.opentelemetry.proto.common.v1.ArrayValue.decode(reader, reader.uint32());\n                                    break;\n                                }\n                                case 6: {\n                                    message.kvlistValue = $root.opentelemetry.proto.common.v1.KeyValueList.decode(reader, reader.uint32());\n                                    break;\n                                }\n                                case 7: {\n                                    message.bytesValue = reader.bytes();\n                                    break;\n                                }\n                                default:\n                                    reader.skipType(tag & 7);\n                                    break;\n                            }\n                        }\n                        return message;\n                    };\n                    /**\n                     * Decodes an AnyValue message from the specified reader or buffer, length delimited.\n                     * @function decodeDelimited\n                     * @memberof opentelemetry.proto.common.v1.AnyValue\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @returns {opentelemetry.proto.common.v1.AnyValue} AnyValue\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    AnyValue.decodeDelimited = function decodeDelimited(reader) {\n                        if (!(reader instanceof $Reader))\n                            reader = new $Reader(reader);\n                        return this.decode(reader, reader.uint32());\n                    };\n                    /**\n                     * Verifies an AnyValue message.\n                     * @function verify\n                     * @memberof opentelemetry.proto.common.v1.AnyValue\n                     * @static\n                     * @param {Object.<string,*>} message Plain object to verify\n                     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                     */\n                    AnyValue.verify = function verify(message) {\n                        if (typeof message !== \"object\" || message === null)\n                            return \"object expected\";\n                        var properties = {};\n                        if (message.stringValue != null && message.hasOwnProperty(\"stringValue\")) {\n                            properties.value = 1;\n                            if (!$util.isString(message.stringValue))\n                                return \"stringValue: string expected\";\n                        }\n                        if (message.boolValue != null && message.hasOwnProperty(\"boolValue\")) {\n                            if (properties.value === 1)\n                                return \"value: multiple values\";\n                            properties.value = 1;\n                            if (typeof message.boolValue !== \"boolean\")\n                                return \"boolValue: boolean expected\";\n                        }\n                        if (message.intValue != null && message.hasOwnProperty(\"intValue\")) {\n                            if (properties.value === 1)\n                                return \"value: multiple values\";\n                            properties.value = 1;\n                            if (!$util.isInteger(message.intValue) && !(message.intValue && $util.isInteger(message.intValue.low) && $util.isInteger(message.intValue.high)))\n                                return \"intValue: integer|Long expected\";\n                        }\n                        if (message.doubleValue != null && message.hasOwnProperty(\"doubleValue\")) {\n                            if (properties.value === 1)\n                                return \"value: multiple values\";\n                            properties.value = 1;\n                            if (typeof message.doubleValue !== \"number\")\n                                return \"doubleValue: number expected\";\n                        }\n                        if (message.arrayValue != null && message.hasOwnProperty(\"arrayValue\")) {\n                            if (properties.value === 1)\n                                return \"value: multiple values\";\n                            properties.value = 1;\n                            {\n                                var error = $root.opentelemetry.proto.common.v1.ArrayValue.verify(message.arrayValue);\n                                if (error)\n                                    return \"arrayValue.\" + error;\n                            }\n                        }\n                        if (message.kvlistValue != null && message.hasOwnProperty(\"kvlistValue\")) {\n                            if (properties.value === 1)\n                                return \"value: multiple values\";\n                            properties.value = 1;\n                            {\n                                var error = $root.opentelemetry.proto.common.v1.KeyValueList.verify(message.kvlistValue);\n                                if (error)\n                                    return \"kvlistValue.\" + error;\n                            }\n                        }\n                        if (message.bytesValue != null && message.hasOwnProperty(\"bytesValue\")) {\n                            if (properties.value === 1)\n                                return \"value: multiple values\";\n                            properties.value = 1;\n                            if (!(message.bytesValue && typeof message.bytesValue.length === \"number\" || $util.isString(message.bytesValue)))\n                                return \"bytesValue: buffer expected\";\n                        }\n                        return null;\n                    };\n                    /**\n                     * Creates an AnyValue message from a plain object. Also converts values to their respective internal types.\n                     * @function fromObject\n                     * @memberof opentelemetry.proto.common.v1.AnyValue\n                     * @static\n                     * @param {Object.<string,*>} object Plain object\n                     * @returns {opentelemetry.proto.common.v1.AnyValue} AnyValue\n                     */\n                    AnyValue.fromObject = function fromObject(object) {\n                        if (object instanceof $root.opentelemetry.proto.common.v1.AnyValue)\n                            return object;\n                        var message = new $root.opentelemetry.proto.common.v1.AnyValue();\n                        if (object.stringValue != null)\n                            message.stringValue = String(object.stringValue);\n                        if (object.boolValue != null)\n                            message.boolValue = Boolean(object.boolValue);\n                        if (object.intValue != null)\n                            if ($util.Long)\n                                (message.intValue = $util.Long.fromValue(object.intValue)).unsigned = false;\n                            else if (typeof object.intValue === \"string\")\n                                message.intValue = parseInt(object.intValue, 10);\n                            else if (typeof object.intValue === \"number\")\n                                message.intValue = object.intValue;\n                            else if (typeof object.intValue === \"object\")\n                                message.intValue = new $util.LongBits(object.intValue.low >>> 0, object.intValue.high >>> 0).toNumber();\n                        if (object.doubleValue != null)\n                            message.doubleValue = Number(object.doubleValue);\n                        if (object.arrayValue != null) {\n                            if (typeof object.arrayValue !== \"object\")\n                                throw TypeError(\".opentelemetry.proto.common.v1.AnyValue.arrayValue: object expected\");\n                            message.arrayValue = $root.opentelemetry.proto.common.v1.ArrayValue.fromObject(object.arrayValue);\n                        }\n                        if (object.kvlistValue != null) {\n                            if (typeof object.kvlistValue !== \"object\")\n                                throw TypeError(\".opentelemetry.proto.common.v1.AnyValue.kvlistValue: object expected\");\n                            message.kvlistValue = $root.opentelemetry.proto.common.v1.KeyValueList.fromObject(object.kvlistValue);\n                        }\n                        if (object.bytesValue != null)\n                            if (typeof object.bytesValue === \"string\")\n                                $util.base64.decode(object.bytesValue, message.bytesValue = $util.newBuffer($util.base64.length(object.bytesValue)), 0);\n                            else if (object.bytesValue.length >= 0)\n                                message.bytesValue = object.bytesValue;\n                        return message;\n                    };\n                    /**\n                     * Creates a plain object from an AnyValue message. Also converts values to other types if specified.\n                     * @function toObject\n                     * @memberof opentelemetry.proto.common.v1.AnyValue\n                     * @static\n                     * @param {opentelemetry.proto.common.v1.AnyValue} message AnyValue\n                     * @param {$protobuf.IConversionOptions} [options] Conversion options\n                     * @returns {Object.<string,*>} Plain object\n                     */\n                    AnyValue.toObject = function toObject(message, options) {\n                        if (!options)\n                            options = {};\n                        var object = {};\n                        if (message.stringValue != null && message.hasOwnProperty(\"stringValue\")) {\n                            object.stringValue = message.stringValue;\n                            if (options.oneofs)\n                                object.value = \"stringValue\";\n                        }\n                        if (message.boolValue != null && message.hasOwnProperty(\"boolValue\")) {\n                            object.boolValue = message.boolValue;\n                            if (options.oneofs)\n                                object.value = \"boolValue\";\n                        }\n                        if (message.intValue != null && message.hasOwnProperty(\"intValue\")) {\n                            if (typeof message.intValue === \"number\")\n                                object.intValue = options.longs === String ? String(message.intValue) : message.intValue;\n                            else\n                                object.intValue = options.longs === String ? $util.Long.prototype.toString.call(message.intValue) : options.longs === Number ? new $util.LongBits(message.intValue.low >>> 0, message.intValue.high >>> 0).toNumber() : message.intValue;\n                            if (options.oneofs)\n                                object.value = \"intValue\";\n                        }\n                        if (message.doubleValue != null && message.hasOwnProperty(\"doubleValue\")) {\n                            object.doubleValue = options.json && !isFinite(message.doubleValue) ? String(message.doubleValue) : message.doubleValue;\n                            if (options.oneofs)\n                                object.value = \"doubleValue\";\n                        }\n                        if (message.arrayValue != null && message.hasOwnProperty(\"arrayValue\")) {\n                            object.arrayValue = $root.opentelemetry.proto.common.v1.ArrayValue.toObject(message.arrayValue, options);\n                            if (options.oneofs)\n                                object.value = \"arrayValue\";\n                        }\n                        if (message.kvlistValue != null && message.hasOwnProperty(\"kvlistValue\")) {\n                            object.kvlistValue = $root.opentelemetry.proto.common.v1.KeyValueList.toObject(message.kvlistValue, options);\n                            if (options.oneofs)\n                                object.value = \"kvlistValue\";\n                        }\n                        if (message.bytesValue != null && message.hasOwnProperty(\"bytesValue\")) {\n                            object.bytesValue = options.bytes === String ? $util.base64.encode(message.bytesValue, 0, message.bytesValue.length) : options.bytes === Array ? Array.prototype.slice.call(message.bytesValue) : message.bytesValue;\n                            if (options.oneofs)\n                                object.value = \"bytesValue\";\n                        }\n                        return object;\n                    };\n                    /**\n                     * Converts this AnyValue to JSON.\n                     * @function toJSON\n                     * @memberof opentelemetry.proto.common.v1.AnyValue\n                     * @instance\n                     * @returns {Object.<string,*>} JSON object\n                     */\n                    AnyValue.prototype.toJSON = function toJSON() {\n                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                    };\n                    /**\n                     * Gets the default type url for AnyValue\n                     * @function getTypeUrl\n                     * @memberof opentelemetry.proto.common.v1.AnyValue\n                     * @static\n                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n                     * @returns {string} The default type url\n                     */\n                    AnyValue.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                        if (typeUrlPrefix === undefined) {\n                            typeUrlPrefix = \"type.googleapis.com\";\n                        }\n                        return typeUrlPrefix + \"/opentelemetry.proto.common.v1.AnyValue\";\n                    };\n                    return AnyValue;\n                })();\n                v1.ArrayValue = (function () {\n                    /**\n                     * Properties of an ArrayValue.\n                     * @memberof opentelemetry.proto.common.v1\n                     * @interface IArrayValue\n                     * @property {Array.<opentelemetry.proto.common.v1.IAnyValue>|null} [values] ArrayValue values\n                     */\n                    /**\n                     * Constructs a new ArrayValue.\n                     * @memberof opentelemetry.proto.common.v1\n                     * @classdesc Represents an ArrayValue.\n                     * @implements IArrayValue\n                     * @constructor\n                     * @param {opentelemetry.proto.common.v1.IArrayValue=} [properties] Properties to set\n                     */\n                    function ArrayValue(properties) {\n                        this.values = [];\n                        if (properties)\n                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                                if (properties[keys[i]] != null)\n                                    this[keys[i]] = properties[keys[i]];\n                    }\n                    /**\n                     * ArrayValue values.\n                     * @member {Array.<opentelemetry.proto.common.v1.IAnyValue>} values\n                     * @memberof opentelemetry.proto.common.v1.ArrayValue\n                     * @instance\n                     */\n                    ArrayValue.prototype.values = $util.emptyArray;\n                    /**\n                     * Creates a new ArrayValue instance using the specified properties.\n                     * @function create\n                     * @memberof opentelemetry.proto.common.v1.ArrayValue\n                     * @static\n                     * @param {opentelemetry.proto.common.v1.IArrayValue=} [properties] Properties to set\n                     * @returns {opentelemetry.proto.common.v1.ArrayValue} ArrayValue instance\n                     */\n                    ArrayValue.create = function create(properties) {\n                        return new ArrayValue(properties);\n                    };\n                    /**\n                     * Encodes the specified ArrayValue message. Does not implicitly {@link opentelemetry.proto.common.v1.ArrayValue.verify|verify} messages.\n                     * @function encode\n                     * @memberof opentelemetry.proto.common.v1.ArrayValue\n                     * @static\n                     * @param {opentelemetry.proto.common.v1.IArrayValue} message ArrayValue message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    ArrayValue.encode = function encode(message, writer) {\n                        if (!writer)\n                            writer = $Writer.create();\n                        if (message.values != null && message.values.length)\n                            for (var i = 0; i < message.values.length; ++i)\n                                $root.opentelemetry.proto.common.v1.AnyValue.encode(message.values[i], writer.uint32(/* id 1, wireType 2 =*/ 10).fork()).ldelim();\n                        return writer;\n                    };\n                    /**\n                     * Encodes the specified ArrayValue message, length delimited. Does not implicitly {@link opentelemetry.proto.common.v1.ArrayValue.verify|verify} messages.\n                     * @function encodeDelimited\n                     * @memberof opentelemetry.proto.common.v1.ArrayValue\n                     * @static\n                     * @param {opentelemetry.proto.common.v1.IArrayValue} message ArrayValue message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    ArrayValue.encodeDelimited = function encodeDelimited(message, writer) {\n                        return this.encode(message, writer).ldelim();\n                    };\n                    /**\n                     * Decodes an ArrayValue message from the specified reader or buffer.\n                     * @function decode\n                     * @memberof opentelemetry.proto.common.v1.ArrayValue\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @param {number} [length] Message length if known beforehand\n                     * @returns {opentelemetry.proto.common.v1.ArrayValue} ArrayValue\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    ArrayValue.decode = function decode(reader, length) {\n                        if (!(reader instanceof $Reader))\n                            reader = $Reader.create(reader);\n                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.opentelemetry.proto.common.v1.ArrayValue();\n                        while (reader.pos < end) {\n                            var tag = reader.uint32();\n                            switch (tag >>> 3) {\n                                case 1: {\n                                    if (!(message.values && message.values.length))\n                                        message.values = [];\n                                    message.values.push($root.opentelemetry.proto.common.v1.AnyValue.decode(reader, reader.uint32()));\n                                    break;\n                                }\n                                default:\n                                    reader.skipType(tag & 7);\n                                    break;\n                            }\n                        }\n                        return message;\n                    };\n                    /**\n                     * Decodes an ArrayValue message from the specified reader or buffer, length delimited.\n                     * @function decodeDelimited\n                     * @memberof opentelemetry.proto.common.v1.ArrayValue\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @returns {opentelemetry.proto.common.v1.ArrayValue} ArrayValue\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    ArrayValue.decodeDelimited = function decodeDelimited(reader) {\n                        if (!(reader instanceof $Reader))\n                            reader = new $Reader(reader);\n                        return this.decode(reader, reader.uint32());\n                    };\n                    /**\n                     * Verifies an ArrayValue message.\n                     * @function verify\n                     * @memberof opentelemetry.proto.common.v1.ArrayValue\n                     * @static\n                     * @param {Object.<string,*>} message Plain object to verify\n                     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                     */\n                    ArrayValue.verify = function verify(message) {\n                        if (typeof message !== \"object\" || message === null)\n                            return \"object expected\";\n                        if (message.values != null && message.hasOwnProperty(\"values\")) {\n                            if (!Array.isArray(message.values))\n                                return \"values: array expected\";\n                            for (var i = 0; i < message.values.length; ++i) {\n                                var error = $root.opentelemetry.proto.common.v1.AnyValue.verify(message.values[i]);\n                                if (error)\n                                    return \"values.\" + error;\n                            }\n                        }\n                        return null;\n                    };\n                    /**\n                     * Creates an ArrayValue message from a plain object. Also converts values to their respective internal types.\n                     * @function fromObject\n                     * @memberof opentelemetry.proto.common.v1.ArrayValue\n                     * @static\n                     * @param {Object.<string,*>} object Plain object\n                     * @returns {opentelemetry.proto.common.v1.ArrayValue} ArrayValue\n                     */\n                    ArrayValue.fromObject = function fromObject(object) {\n                        if (object instanceof $root.opentelemetry.proto.common.v1.ArrayValue)\n                            return object;\n                        var message = new $root.opentelemetry.proto.common.v1.ArrayValue();\n                        if (object.values) {\n                            if (!Array.isArray(object.values))\n                                throw TypeError(\".opentelemetry.proto.common.v1.ArrayValue.values: array expected\");\n                            message.values = [];\n                            for (var i = 0; i < object.values.length; ++i) {\n                                if (typeof object.values[i] !== \"object\")\n                                    throw TypeError(\".opentelemetry.proto.common.v1.ArrayValue.values: object expected\");\n                                message.values[i] = $root.opentelemetry.proto.common.v1.AnyValue.fromObject(object.values[i]);\n                            }\n                        }\n                        return message;\n                    };\n                    /**\n                     * Creates a plain object from an ArrayValue message. Also converts values to other types if specified.\n                     * @function toObject\n                     * @memberof opentelemetry.proto.common.v1.ArrayValue\n                     * @static\n                     * @param {opentelemetry.proto.common.v1.ArrayValue} message ArrayValue\n                     * @param {$protobuf.IConversionOptions} [options] Conversion options\n                     * @returns {Object.<string,*>} Plain object\n                     */\n                    ArrayValue.toObject = function toObject(message, options) {\n                        if (!options)\n                            options = {};\n                        var object = {};\n                        if (options.arrays || options.defaults)\n                            object.values = [];\n                        if (message.values && message.values.length) {\n                            object.values = [];\n                            for (var j = 0; j < message.values.length; ++j)\n                                object.values[j] = $root.opentelemetry.proto.common.v1.AnyValue.toObject(message.values[j], options);\n                        }\n                        return object;\n                    };\n                    /**\n                     * Converts this ArrayValue to JSON.\n                     * @function toJSON\n                     * @memberof opentelemetry.proto.common.v1.ArrayValue\n                     * @instance\n                     * @returns {Object.<string,*>} JSON object\n                     */\n                    ArrayValue.prototype.toJSON = function toJSON() {\n                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                    };\n                    /**\n                     * Gets the default type url for ArrayValue\n                     * @function getTypeUrl\n                     * @memberof opentelemetry.proto.common.v1.ArrayValue\n                     * @static\n                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n                     * @returns {string} The default type url\n                     */\n                    ArrayValue.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                        if (typeUrlPrefix === undefined) {\n                            typeUrlPrefix = \"type.googleapis.com\";\n                        }\n                        return typeUrlPrefix + \"/opentelemetry.proto.common.v1.ArrayValue\";\n                    };\n                    return ArrayValue;\n                })();\n                v1.KeyValueList = (function () {\n                    /**\n                     * Properties of a KeyValueList.\n                     * @memberof opentelemetry.proto.common.v1\n                     * @interface IKeyValueList\n                     * @property {Array.<opentelemetry.proto.common.v1.IKeyValue>|null} [values] KeyValueList values\n                     */\n                    /**\n                     * Constructs a new KeyValueList.\n                     * @memberof opentelemetry.proto.common.v1\n                     * @classdesc Represents a KeyValueList.\n                     * @implements IKeyValueList\n                     * @constructor\n                     * @param {opentelemetry.proto.common.v1.IKeyValueList=} [properties] Properties to set\n                     */\n                    function KeyValueList(properties) {\n                        this.values = [];\n                        if (properties)\n                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                                if (properties[keys[i]] != null)\n                                    this[keys[i]] = properties[keys[i]];\n                    }\n                    /**\n                     * KeyValueList values.\n                     * @member {Array.<opentelemetry.proto.common.v1.IKeyValue>} values\n                     * @memberof opentelemetry.proto.common.v1.KeyValueList\n                     * @instance\n                     */\n                    KeyValueList.prototype.values = $util.emptyArray;\n                    /**\n                     * Creates a new KeyValueList instance using the specified properties.\n                     * @function create\n                     * @memberof opentelemetry.proto.common.v1.KeyValueList\n                     * @static\n                     * @param {opentelemetry.proto.common.v1.IKeyValueList=} [properties] Properties to set\n                     * @returns {opentelemetry.proto.common.v1.KeyValueList} KeyValueList instance\n                     */\n                    KeyValueList.create = function create(properties) {\n                        return new KeyValueList(properties);\n                    };\n                    /**\n                     * Encodes the specified KeyValueList message. Does not implicitly {@link opentelemetry.proto.common.v1.KeyValueList.verify|verify} messages.\n                     * @function encode\n                     * @memberof opentelemetry.proto.common.v1.KeyValueList\n                     * @static\n                     * @param {opentelemetry.proto.common.v1.IKeyValueList} message KeyValueList message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    KeyValueList.encode = function encode(message, writer) {\n                        if (!writer)\n                            writer = $Writer.create();\n                        if (message.values != null && message.values.length)\n                            for (var i = 0; i < message.values.length; ++i)\n                                $root.opentelemetry.proto.common.v1.KeyValue.encode(message.values[i], writer.uint32(/* id 1, wireType 2 =*/ 10).fork()).ldelim();\n                        return writer;\n                    };\n                    /**\n                     * Encodes the specified KeyValueList message, length delimited. Does not implicitly {@link opentelemetry.proto.common.v1.KeyValueList.verify|verify} messages.\n                     * @function encodeDelimited\n                     * @memberof opentelemetry.proto.common.v1.KeyValueList\n                     * @static\n                     * @param {opentelemetry.proto.common.v1.IKeyValueList} message KeyValueList message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    KeyValueList.encodeDelimited = function encodeDelimited(message, writer) {\n                        return this.encode(message, writer).ldelim();\n                    };\n                    /**\n                     * Decodes a KeyValueList message from the specified reader or buffer.\n                     * @function decode\n                     * @memberof opentelemetry.proto.common.v1.KeyValueList\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @param {number} [length] Message length if known beforehand\n                     * @returns {opentelemetry.proto.common.v1.KeyValueList} KeyValueList\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    KeyValueList.decode = function decode(reader, length) {\n                        if (!(reader instanceof $Reader))\n                            reader = $Reader.create(reader);\n                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.opentelemetry.proto.common.v1.KeyValueList();\n                        while (reader.pos < end) {\n                            var tag = reader.uint32();\n                            switch (tag >>> 3) {\n                                case 1: {\n                                    if (!(message.values && message.values.length))\n                                        message.values = [];\n                                    message.values.push($root.opentelemetry.proto.common.v1.KeyValue.decode(reader, reader.uint32()));\n                                    break;\n                                }\n                                default:\n                                    reader.skipType(tag & 7);\n                                    break;\n                            }\n                        }\n                        return message;\n                    };\n                    /**\n                     * Decodes a KeyValueList message from the specified reader or buffer, length delimited.\n                     * @function decodeDelimited\n                     * @memberof opentelemetry.proto.common.v1.KeyValueList\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @returns {opentelemetry.proto.common.v1.KeyValueList} KeyValueList\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    KeyValueList.decodeDelimited = function decodeDelimited(reader) {\n                        if (!(reader instanceof $Reader))\n                            reader = new $Reader(reader);\n                        return this.decode(reader, reader.uint32());\n                    };\n                    /**\n                     * Verifies a KeyValueList message.\n                     * @function verify\n                     * @memberof opentelemetry.proto.common.v1.KeyValueList\n                     * @static\n                     * @param {Object.<string,*>} message Plain object to verify\n                     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                     */\n                    KeyValueList.verify = function verify(message) {\n                        if (typeof message !== \"object\" || message === null)\n                            return \"object expected\";\n                        if (message.values != null && message.hasOwnProperty(\"values\")) {\n                            if (!Array.isArray(message.values))\n                                return \"values: array expected\";\n                            for (var i = 0; i < message.values.length; ++i) {\n                                var error = $root.opentelemetry.proto.common.v1.KeyValue.verify(message.values[i]);\n                                if (error)\n                                    return \"values.\" + error;\n                            }\n                        }\n                        return null;\n                    };\n                    /**\n                     * Creates a KeyValueList message from a plain object. Also converts values to their respective internal types.\n                     * @function fromObject\n                     * @memberof opentelemetry.proto.common.v1.KeyValueList\n                     * @static\n                     * @param {Object.<string,*>} object Plain object\n                     * @returns {opentelemetry.proto.common.v1.KeyValueList} KeyValueList\n                     */\n                    KeyValueList.fromObject = function fromObject(object) {\n                        if (object instanceof $root.opentelemetry.proto.common.v1.KeyValueList)\n                            return object;\n                        var message = new $root.opentelemetry.proto.common.v1.KeyValueList();\n                        if (object.values) {\n                            if (!Array.isArray(object.values))\n                                throw TypeError(\".opentelemetry.proto.common.v1.KeyValueList.values: array expected\");\n                            message.values = [];\n                            for (var i = 0; i < object.values.length; ++i) {\n                                if (typeof object.values[i] !== \"object\")\n                                    throw TypeError(\".opentelemetry.proto.common.v1.KeyValueList.values: object expected\");\n                                message.values[i] = $root.opentelemetry.proto.common.v1.KeyValue.fromObject(object.values[i]);\n                            }\n                        }\n                        return message;\n                    };\n                    /**\n                     * Creates a plain object from a KeyValueList message. Also converts values to other types if specified.\n                     * @function toObject\n                     * @memberof opentelemetry.proto.common.v1.KeyValueList\n                     * @static\n                     * @param {opentelemetry.proto.common.v1.KeyValueList} message KeyValueList\n                     * @param {$protobuf.IConversionOptions} [options] Conversion options\n                     * @returns {Object.<string,*>} Plain object\n                     */\n                    KeyValueList.toObject = function toObject(message, options) {\n                        if (!options)\n                            options = {};\n                        var object = {};\n                        if (options.arrays || options.defaults)\n                            object.values = [];\n                        if (message.values && message.values.length) {\n                            object.values = [];\n                            for (var j = 0; j < message.values.length; ++j)\n                                object.values[j] = $root.opentelemetry.proto.common.v1.KeyValue.toObject(message.values[j], options);\n                        }\n                        return object;\n                    };\n                    /**\n                     * Converts this KeyValueList to JSON.\n                     * @function toJSON\n                     * @memberof opentelemetry.proto.common.v1.KeyValueList\n                     * @instance\n                     * @returns {Object.<string,*>} JSON object\n                     */\n                    KeyValueList.prototype.toJSON = function toJSON() {\n                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                    };\n                    /**\n                     * Gets the default type url for KeyValueList\n                     * @function getTypeUrl\n                     * @memberof opentelemetry.proto.common.v1.KeyValueList\n                     * @static\n                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n                     * @returns {string} The default type url\n                     */\n                    KeyValueList.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                        if (typeUrlPrefix === undefined) {\n                            typeUrlPrefix = \"type.googleapis.com\";\n                        }\n                        return typeUrlPrefix + \"/opentelemetry.proto.common.v1.KeyValueList\";\n                    };\n                    return KeyValueList;\n                })();\n                v1.KeyValue = (function () {\n                    /**\n                     * Properties of a KeyValue.\n                     * @memberof opentelemetry.proto.common.v1\n                     * @interface IKeyValue\n                     * @property {string|null} [key] KeyValue key\n                     * @property {opentelemetry.proto.common.v1.IAnyValue|null} [value] KeyValue value\n                     */\n                    /**\n                     * Constructs a new KeyValue.\n                     * @memberof opentelemetry.proto.common.v1\n                     * @classdesc Represents a KeyValue.\n                     * @implements IKeyValue\n                     * @constructor\n                     * @param {opentelemetry.proto.common.v1.IKeyValue=} [properties] Properties to set\n                     */\n                    function KeyValue(properties) {\n                        if (properties)\n                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                                if (properties[keys[i]] != null)\n                                    this[keys[i]] = properties[keys[i]];\n                    }\n                    /**\n                     * KeyValue key.\n                     * @member {string|null|undefined} key\n                     * @memberof opentelemetry.proto.common.v1.KeyValue\n                     * @instance\n                     */\n                    KeyValue.prototype.key = null;\n                    /**\n                     * KeyValue value.\n                     * @member {opentelemetry.proto.common.v1.IAnyValue|null|undefined} value\n                     * @memberof opentelemetry.proto.common.v1.KeyValue\n                     * @instance\n                     */\n                    KeyValue.prototype.value = null;\n                    /**\n                     * Creates a new KeyValue instance using the specified properties.\n                     * @function create\n                     * @memberof opentelemetry.proto.common.v1.KeyValue\n                     * @static\n                     * @param {opentelemetry.proto.common.v1.IKeyValue=} [properties] Properties to set\n                     * @returns {opentelemetry.proto.common.v1.KeyValue} KeyValue instance\n                     */\n                    KeyValue.create = function create(properties) {\n                        return new KeyValue(properties);\n                    };\n                    /**\n                     * Encodes the specified KeyValue message. Does not implicitly {@link opentelemetry.proto.common.v1.KeyValue.verify|verify} messages.\n                     * @function encode\n                     * @memberof opentelemetry.proto.common.v1.KeyValue\n                     * @static\n                     * @param {opentelemetry.proto.common.v1.IKeyValue} message KeyValue message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    KeyValue.encode = function encode(message, writer) {\n                        if (!writer)\n                            writer = $Writer.create();\n                        if (message.key != null && Object.hasOwnProperty.call(message, \"key\"))\n                            writer.uint32(/* id 1, wireType 2 =*/ 10).string(message.key);\n                        if (message.value != null && Object.hasOwnProperty.call(message, \"value\"))\n                            $root.opentelemetry.proto.common.v1.AnyValue.encode(message.value, writer.uint32(/* id 2, wireType 2 =*/ 18).fork()).ldelim();\n                        return writer;\n                    };\n                    /**\n                     * Encodes the specified KeyValue message, length delimited. Does not implicitly {@link opentelemetry.proto.common.v1.KeyValue.verify|verify} messages.\n                     * @function encodeDelimited\n                     * @memberof opentelemetry.proto.common.v1.KeyValue\n                     * @static\n                     * @param {opentelemetry.proto.common.v1.IKeyValue} message KeyValue message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    KeyValue.encodeDelimited = function encodeDelimited(message, writer) {\n                        return this.encode(message, writer).ldelim();\n                    };\n                    /**\n                     * Decodes a KeyValue message from the specified reader or buffer.\n                     * @function decode\n                     * @memberof opentelemetry.proto.common.v1.KeyValue\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @param {number} [length] Message length if known beforehand\n                     * @returns {opentelemetry.proto.common.v1.KeyValue} KeyValue\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    KeyValue.decode = function decode(reader, length) {\n                        if (!(reader instanceof $Reader))\n                            reader = $Reader.create(reader);\n                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.opentelemetry.proto.common.v1.KeyValue();\n                        while (reader.pos < end) {\n                            var tag = reader.uint32();\n                            switch (tag >>> 3) {\n                                case 1: {\n                                    message.key = reader.string();\n                                    break;\n                                }\n                                case 2: {\n                                    message.value = $root.opentelemetry.proto.common.v1.AnyValue.decode(reader, reader.uint32());\n                                    break;\n                                }\n                                default:\n                                    reader.skipType(tag & 7);\n                                    break;\n                            }\n                        }\n                        return message;\n                    };\n                    /**\n                     * Decodes a KeyValue message from the specified reader or buffer, length delimited.\n                     * @function decodeDelimited\n                     * @memberof opentelemetry.proto.common.v1.KeyValue\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @returns {opentelemetry.proto.common.v1.KeyValue} KeyValue\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    KeyValue.decodeDelimited = function decodeDelimited(reader) {\n                        if (!(reader instanceof $Reader))\n                            reader = new $Reader(reader);\n                        return this.decode(reader, reader.uint32());\n                    };\n                    /**\n                     * Verifies a KeyValue message.\n                     * @function verify\n                     * @memberof opentelemetry.proto.common.v1.KeyValue\n                     * @static\n                     * @param {Object.<string,*>} message Plain object to verify\n                     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                     */\n                    KeyValue.verify = function verify(message) {\n                        if (typeof message !== \"object\" || message === null)\n                            return \"object expected\";\n                        if (message.key != null && message.hasOwnProperty(\"key\"))\n                            if (!$util.isString(message.key))\n                                return \"key: string expected\";\n                        if (message.value != null && message.hasOwnProperty(\"value\")) {\n                            var error = $root.opentelemetry.proto.common.v1.AnyValue.verify(message.value);\n                            if (error)\n                                return \"value.\" + error;\n                        }\n                        return null;\n                    };\n                    /**\n                     * Creates a KeyValue message from a plain object. Also converts values to their respective internal types.\n                     * @function fromObject\n                     * @memberof opentelemetry.proto.common.v1.KeyValue\n                     * @static\n                     * @param {Object.<string,*>} object Plain object\n                     * @returns {opentelemetry.proto.common.v1.KeyValue} KeyValue\n                     */\n                    KeyValue.fromObject = function fromObject(object) {\n                        if (object instanceof $root.opentelemetry.proto.common.v1.KeyValue)\n                            return object;\n                        var message = new $root.opentelemetry.proto.common.v1.KeyValue();\n                        if (object.key != null)\n                            message.key = String(object.key);\n                        if (object.value != null) {\n                            if (typeof object.value !== \"object\")\n                                throw TypeError(\".opentelemetry.proto.common.v1.KeyValue.value: object expected\");\n                            message.value = $root.opentelemetry.proto.common.v1.AnyValue.fromObject(object.value);\n                        }\n                        return message;\n                    };\n                    /**\n                     * Creates a plain object from a KeyValue message. Also converts values to other types if specified.\n                     * @function toObject\n                     * @memberof opentelemetry.proto.common.v1.KeyValue\n                     * @static\n                     * @param {opentelemetry.proto.common.v1.KeyValue} message KeyValue\n                     * @param {$protobuf.IConversionOptions} [options] Conversion options\n                     * @returns {Object.<string,*>} Plain object\n                     */\n                    KeyValue.toObject = function toObject(message, options) {\n                        if (!options)\n                            options = {};\n                        var object = {};\n                        if (options.defaults) {\n                            object.key = \"\";\n                            object.value = null;\n                        }\n                        if (message.key != null && message.hasOwnProperty(\"key\"))\n                            object.key = message.key;\n                        if (message.value != null && message.hasOwnProperty(\"value\"))\n                            object.value = $root.opentelemetry.proto.common.v1.AnyValue.toObject(message.value, options);\n                        return object;\n                    };\n                    /**\n                     * Converts this KeyValue to JSON.\n                     * @function toJSON\n                     * @memberof opentelemetry.proto.common.v1.KeyValue\n                     * @instance\n                     * @returns {Object.<string,*>} JSON object\n                     */\n                    KeyValue.prototype.toJSON = function toJSON() {\n                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                    };\n                    /**\n                     * Gets the default type url for KeyValue\n                     * @function getTypeUrl\n                     * @memberof opentelemetry.proto.common.v1.KeyValue\n                     * @static\n                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n                     * @returns {string} The default type url\n                     */\n                    KeyValue.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                        if (typeUrlPrefix === undefined) {\n                            typeUrlPrefix = \"type.googleapis.com\";\n                        }\n                        return typeUrlPrefix + \"/opentelemetry.proto.common.v1.KeyValue\";\n                    };\n                    return KeyValue;\n                })();\n                v1.InstrumentationScope = (function () {\n                    /**\n                     * Properties of an InstrumentationScope.\n                     * @memberof opentelemetry.proto.common.v1\n                     * @interface IInstrumentationScope\n                     * @property {string|null} [name] InstrumentationScope name\n                     * @property {string|null} [version] InstrumentationScope version\n                     * @property {Array.<opentelemetry.proto.common.v1.IKeyValue>|null} [attributes] InstrumentationScope attributes\n                     * @property {number|null} [droppedAttributesCount] InstrumentationScope droppedAttributesCount\n                     */\n                    /**\n                     * Constructs a new InstrumentationScope.\n                     * @memberof opentelemetry.proto.common.v1\n                     * @classdesc Represents an InstrumentationScope.\n                     * @implements IInstrumentationScope\n                     * @constructor\n                     * @param {opentelemetry.proto.common.v1.IInstrumentationScope=} [properties] Properties to set\n                     */\n                    function InstrumentationScope(properties) {\n                        this.attributes = [];\n                        if (properties)\n                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                                if (properties[keys[i]] != null)\n                                    this[keys[i]] = properties[keys[i]];\n                    }\n                    /**\n                     * InstrumentationScope name.\n                     * @member {string|null|undefined} name\n                     * @memberof opentelemetry.proto.common.v1.InstrumentationScope\n                     * @instance\n                     */\n                    InstrumentationScope.prototype.name = null;\n                    /**\n                     * InstrumentationScope version.\n                     * @member {string|null|undefined} version\n                     * @memberof opentelemetry.proto.common.v1.InstrumentationScope\n                     * @instance\n                     */\n                    InstrumentationScope.prototype.version = null;\n                    /**\n                     * InstrumentationScope attributes.\n                     * @member {Array.<opentelemetry.proto.common.v1.IKeyValue>} attributes\n                     * @memberof opentelemetry.proto.common.v1.InstrumentationScope\n                     * @instance\n                     */\n                    InstrumentationScope.prototype.attributes = $util.emptyArray;\n                    /**\n                     * InstrumentationScope droppedAttributesCount.\n                     * @member {number|null|undefined} droppedAttributesCount\n                     * @memberof opentelemetry.proto.common.v1.InstrumentationScope\n                     * @instance\n                     */\n                    InstrumentationScope.prototype.droppedAttributesCount = null;\n                    /**\n                     * Creates a new InstrumentationScope instance using the specified properties.\n                     * @function create\n                     * @memberof opentelemetry.proto.common.v1.InstrumentationScope\n                     * @static\n                     * @param {opentelemetry.proto.common.v1.IInstrumentationScope=} [properties] Properties to set\n                     * @returns {opentelemetry.proto.common.v1.InstrumentationScope} InstrumentationScope instance\n                     */\n                    InstrumentationScope.create = function create(properties) {\n                        return new InstrumentationScope(properties);\n                    };\n                    /**\n                     * Encodes the specified InstrumentationScope message. Does not implicitly {@link opentelemetry.proto.common.v1.InstrumentationScope.verify|verify} messages.\n                     * @function encode\n                     * @memberof opentelemetry.proto.common.v1.InstrumentationScope\n                     * @static\n                     * @param {opentelemetry.proto.common.v1.IInstrumentationScope} message InstrumentationScope message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    InstrumentationScope.encode = function encode(message, writer) {\n                        if (!writer)\n                            writer = $Writer.create();\n                        if (message.name != null && Object.hasOwnProperty.call(message, \"name\"))\n                            writer.uint32(/* id 1, wireType 2 =*/ 10).string(message.name);\n                        if (message.version != null && Object.hasOwnProperty.call(message, \"version\"))\n                            writer.uint32(/* id 2, wireType 2 =*/ 18).string(message.version);\n                        if (message.attributes != null && message.attributes.length)\n                            for (var i = 0; i < message.attributes.length; ++i)\n                                $root.opentelemetry.proto.common.v1.KeyValue.encode(message.attributes[i], writer.uint32(/* id 3, wireType 2 =*/ 26).fork()).ldelim();\n                        if (message.droppedAttributesCount != null && Object.hasOwnProperty.call(message, \"droppedAttributesCount\"))\n                            writer.uint32(/* id 4, wireType 0 =*/ 32).uint32(message.droppedAttributesCount);\n                        return writer;\n                    };\n                    /**\n                     * Encodes the specified InstrumentationScope message, length delimited. Does not implicitly {@link opentelemetry.proto.common.v1.InstrumentationScope.verify|verify} messages.\n                     * @function encodeDelimited\n                     * @memberof opentelemetry.proto.common.v1.InstrumentationScope\n                     * @static\n                     * @param {opentelemetry.proto.common.v1.IInstrumentationScope} message InstrumentationScope message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    InstrumentationScope.encodeDelimited = function encodeDelimited(message, writer) {\n                        return this.encode(message, writer).ldelim();\n                    };\n                    /**\n                     * Decodes an InstrumentationScope message from the specified reader or buffer.\n                     * @function decode\n                     * @memberof opentelemetry.proto.common.v1.InstrumentationScope\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @param {number} [length] Message length if known beforehand\n                     * @returns {opentelemetry.proto.common.v1.InstrumentationScope} InstrumentationScope\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    InstrumentationScope.decode = function decode(reader, length) {\n                        if (!(reader instanceof $Reader))\n                            reader = $Reader.create(reader);\n                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.opentelemetry.proto.common.v1.InstrumentationScope();\n                        while (reader.pos < end) {\n                            var tag = reader.uint32();\n                            switch (tag >>> 3) {\n                                case 1: {\n                                    message.name = reader.string();\n                                    break;\n                                }\n                                case 2: {\n                                    message.version = reader.string();\n                                    break;\n                                }\n                                case 3: {\n                                    if (!(message.attributes && message.attributes.length))\n                                        message.attributes = [];\n                                    message.attributes.push($root.opentelemetry.proto.common.v1.KeyValue.decode(reader, reader.uint32()));\n                                    break;\n                                }\n                                case 4: {\n                                    message.droppedAttributesCount = reader.uint32();\n                                    break;\n                                }\n                                default:\n                                    reader.skipType(tag & 7);\n                                    break;\n                            }\n                        }\n                        return message;\n                    };\n                    /**\n                     * Decodes an InstrumentationScope message from the specified reader or buffer, length delimited.\n                     * @function decodeDelimited\n                     * @memberof opentelemetry.proto.common.v1.InstrumentationScope\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @returns {opentelemetry.proto.common.v1.InstrumentationScope} InstrumentationScope\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    InstrumentationScope.decodeDelimited = function decodeDelimited(reader) {\n                        if (!(reader instanceof $Reader))\n                            reader = new $Reader(reader);\n                        return this.decode(reader, reader.uint32());\n                    };\n                    /**\n                     * Verifies an InstrumentationScope message.\n                     * @function verify\n                     * @memberof opentelemetry.proto.common.v1.InstrumentationScope\n                     * @static\n                     * @param {Object.<string,*>} message Plain object to verify\n                     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                     */\n                    InstrumentationScope.verify = function verify(message) {\n                        if (typeof message !== \"object\" || message === null)\n                            return \"object expected\";\n                        if (message.name != null && message.hasOwnProperty(\"name\"))\n                            if (!$util.isString(message.name))\n                                return \"name: string expected\";\n                        if (message.version != null && message.hasOwnProperty(\"version\"))\n                            if (!$util.isString(message.version))\n                                return \"version: string expected\";\n                        if (message.attributes != null && message.hasOwnProperty(\"attributes\")) {\n                            if (!Array.isArray(message.attributes))\n                                return \"attributes: array expected\";\n                            for (var i = 0; i < message.attributes.length; ++i) {\n                                var error = $root.opentelemetry.proto.common.v1.KeyValue.verify(message.attributes[i]);\n                                if (error)\n                                    return \"attributes.\" + error;\n                            }\n                        }\n                        if (message.droppedAttributesCount != null && message.hasOwnProperty(\"droppedAttributesCount\"))\n                            if (!$util.isInteger(message.droppedAttributesCount))\n                                return \"droppedAttributesCount: integer expected\";\n                        return null;\n                    };\n                    /**\n                     * Creates an InstrumentationScope message from a plain object. Also converts values to their respective internal types.\n                     * @function fromObject\n                     * @memberof opentelemetry.proto.common.v1.InstrumentationScope\n                     * @static\n                     * @param {Object.<string,*>} object Plain object\n                     * @returns {opentelemetry.proto.common.v1.InstrumentationScope} InstrumentationScope\n                     */\n                    InstrumentationScope.fromObject = function fromObject(object) {\n                        if (object instanceof $root.opentelemetry.proto.common.v1.InstrumentationScope)\n                            return object;\n                        var message = new $root.opentelemetry.proto.common.v1.InstrumentationScope();\n                        if (object.name != null)\n                            message.name = String(object.name);\n                        if (object.version != null)\n                            message.version = String(object.version);\n                        if (object.attributes) {\n                            if (!Array.isArray(object.attributes))\n                                throw TypeError(\".opentelemetry.proto.common.v1.InstrumentationScope.attributes: array expected\");\n                            message.attributes = [];\n                            for (var i = 0; i < object.attributes.length; ++i) {\n                                if (typeof object.attributes[i] !== \"object\")\n                                    throw TypeError(\".opentelemetry.proto.common.v1.InstrumentationScope.attributes: object expected\");\n                                message.attributes[i] = $root.opentelemetry.proto.common.v1.KeyValue.fromObject(object.attributes[i]);\n                            }\n                        }\n                        if (object.droppedAttributesCount != null)\n                            message.droppedAttributesCount = object.droppedAttributesCount >>> 0;\n                        return message;\n                    };\n                    /**\n                     * Creates a plain object from an InstrumentationScope message. Also converts values to other types if specified.\n                     * @function toObject\n                     * @memberof opentelemetry.proto.common.v1.InstrumentationScope\n                     * @static\n                     * @param {opentelemetry.proto.common.v1.InstrumentationScope} message InstrumentationScope\n                     * @param {$protobuf.IConversionOptions} [options] Conversion options\n                     * @returns {Object.<string,*>} Plain object\n                     */\n                    InstrumentationScope.toObject = function toObject(message, options) {\n                        if (!options)\n                            options = {};\n                        var object = {};\n                        if (options.arrays || options.defaults)\n                            object.attributes = [];\n                        if (options.defaults) {\n                            object.name = \"\";\n                            object.version = \"\";\n                            object.droppedAttributesCount = 0;\n                        }\n                        if (message.name != null && message.hasOwnProperty(\"name\"))\n                            object.name = message.name;\n                        if (message.version != null && message.hasOwnProperty(\"version\"))\n                            object.version = message.version;\n                        if (message.attributes && message.attributes.length) {\n                            object.attributes = [];\n                            for (var j = 0; j < message.attributes.length; ++j)\n                                object.attributes[j] = $root.opentelemetry.proto.common.v1.KeyValue.toObject(message.attributes[j], options);\n                        }\n                        if (message.droppedAttributesCount != null && message.hasOwnProperty(\"droppedAttributesCount\"))\n                            object.droppedAttributesCount = message.droppedAttributesCount;\n                        return object;\n                    };\n                    /**\n                     * Converts this InstrumentationScope to JSON.\n                     * @function toJSON\n                     * @memberof opentelemetry.proto.common.v1.InstrumentationScope\n                     * @instance\n                     * @returns {Object.<string,*>} JSON object\n                     */\n                    InstrumentationScope.prototype.toJSON = function toJSON() {\n                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                    };\n                    /**\n                     * Gets the default type url for InstrumentationScope\n                     * @function getTypeUrl\n                     * @memberof opentelemetry.proto.common.v1.InstrumentationScope\n                     * @static\n                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n                     * @returns {string} The default type url\n                     */\n                    InstrumentationScope.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                        if (typeUrlPrefix === undefined) {\n                            typeUrlPrefix = \"type.googleapis.com\";\n                        }\n                        return typeUrlPrefix + \"/opentelemetry.proto.common.v1.InstrumentationScope\";\n                    };\n                    return InstrumentationScope;\n                })();\n                return v1;\n            })();\n            return common;\n        })();\n        proto.resource = (function () {\n            /**\n             * Namespace resource.\n             * @memberof opentelemetry.proto\n             * @namespace\n             */\n            var resource = {};\n            resource.v1 = (function () {\n                /**\n                 * Namespace v1.\n                 * @memberof opentelemetry.proto.resource\n                 * @namespace\n                 */\n                var v1 = {};\n                v1.Resource = (function () {\n                    /**\n                     * Properties of a Resource.\n                     * @memberof opentelemetry.proto.resource.v1\n                     * @interface IResource\n                     * @property {Array.<opentelemetry.proto.common.v1.IKeyValue>|null} [attributes] Resource attributes\n                     * @property {number|null} [droppedAttributesCount] Resource droppedAttributesCount\n                     */\n                    /**\n                     * Constructs a new Resource.\n                     * @memberof opentelemetry.proto.resource.v1\n                     * @classdesc Represents a Resource.\n                     * @implements IResource\n                     * @constructor\n                     * @param {opentelemetry.proto.resource.v1.IResource=} [properties] Properties to set\n                     */\n                    function Resource(properties) {\n                        this.attributes = [];\n                        if (properties)\n                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                                if (properties[keys[i]] != null)\n                                    this[keys[i]] = properties[keys[i]];\n                    }\n                    /**\n                     * Resource attributes.\n                     * @member {Array.<opentelemetry.proto.common.v1.IKeyValue>} attributes\n                     * @memberof opentelemetry.proto.resource.v1.Resource\n                     * @instance\n                     */\n                    Resource.prototype.attributes = $util.emptyArray;\n                    /**\n                     * Resource droppedAttributesCount.\n                     * @member {number|null|undefined} droppedAttributesCount\n                     * @memberof opentelemetry.proto.resource.v1.Resource\n                     * @instance\n                     */\n                    Resource.prototype.droppedAttributesCount = null;\n                    /**\n                     * Creates a new Resource instance using the specified properties.\n                     * @function create\n                     * @memberof opentelemetry.proto.resource.v1.Resource\n                     * @static\n                     * @param {opentelemetry.proto.resource.v1.IResource=} [properties] Properties to set\n                     * @returns {opentelemetry.proto.resource.v1.Resource} Resource instance\n                     */\n                    Resource.create = function create(properties) {\n                        return new Resource(properties);\n                    };\n                    /**\n                     * Encodes the specified Resource message. Does not implicitly {@link opentelemetry.proto.resource.v1.Resource.verify|verify} messages.\n                     * @function encode\n                     * @memberof opentelemetry.proto.resource.v1.Resource\n                     * @static\n                     * @param {opentelemetry.proto.resource.v1.IResource} message Resource message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    Resource.encode = function encode(message, writer) {\n                        if (!writer)\n                            writer = $Writer.create();\n                        if (message.attributes != null && message.attributes.length)\n                            for (var i = 0; i < message.attributes.length; ++i)\n                                $root.opentelemetry.proto.common.v1.KeyValue.encode(message.attributes[i], writer.uint32(/* id 1, wireType 2 =*/ 10).fork()).ldelim();\n                        if (message.droppedAttributesCount != null && Object.hasOwnProperty.call(message, \"droppedAttributesCount\"))\n                            writer.uint32(/* id 2, wireType 0 =*/ 16).uint32(message.droppedAttributesCount);\n                        return writer;\n                    };\n                    /**\n                     * Encodes the specified Resource message, length delimited. Does not implicitly {@link opentelemetry.proto.resource.v1.Resource.verify|verify} messages.\n                     * @function encodeDelimited\n                     * @memberof opentelemetry.proto.resource.v1.Resource\n                     * @static\n                     * @param {opentelemetry.proto.resource.v1.IResource} message Resource message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    Resource.encodeDelimited = function encodeDelimited(message, writer) {\n                        return this.encode(message, writer).ldelim();\n                    };\n                    /**\n                     * Decodes a Resource message from the specified reader or buffer.\n                     * @function decode\n                     * @memberof opentelemetry.proto.resource.v1.Resource\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @param {number} [length] Message length if known beforehand\n                     * @returns {opentelemetry.proto.resource.v1.Resource} Resource\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    Resource.decode = function decode(reader, length) {\n                        if (!(reader instanceof $Reader))\n                            reader = $Reader.create(reader);\n                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.opentelemetry.proto.resource.v1.Resource();\n                        while (reader.pos < end) {\n                            var tag = reader.uint32();\n                            switch (tag >>> 3) {\n                                case 1: {\n                                    if (!(message.attributes && message.attributes.length))\n                                        message.attributes = [];\n                                    message.attributes.push($root.opentelemetry.proto.common.v1.KeyValue.decode(reader, reader.uint32()));\n                                    break;\n                                }\n                                case 2: {\n                                    message.droppedAttributesCount = reader.uint32();\n                                    break;\n                                }\n                                default:\n                                    reader.skipType(tag & 7);\n                                    break;\n                            }\n                        }\n                        return message;\n                    };\n                    /**\n                     * Decodes a Resource message from the specified reader or buffer, length delimited.\n                     * @function decodeDelimited\n                     * @memberof opentelemetry.proto.resource.v1.Resource\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @returns {opentelemetry.proto.resource.v1.Resource} Resource\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    Resource.decodeDelimited = function decodeDelimited(reader) {\n                        if (!(reader instanceof $Reader))\n                            reader = new $Reader(reader);\n                        return this.decode(reader, reader.uint32());\n                    };\n                    /**\n                     * Verifies a Resource message.\n                     * @function verify\n                     * @memberof opentelemetry.proto.resource.v1.Resource\n                     * @static\n                     * @param {Object.<string,*>} message Plain object to verify\n                     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                     */\n                    Resource.verify = function verify(message) {\n                        if (typeof message !== \"object\" || message === null)\n                            return \"object expected\";\n                        if (message.attributes != null && message.hasOwnProperty(\"attributes\")) {\n                            if (!Array.isArray(message.attributes))\n                                return \"attributes: array expected\";\n                            for (var i = 0; i < message.attributes.length; ++i) {\n                                var error = $root.opentelemetry.proto.common.v1.KeyValue.verify(message.attributes[i]);\n                                if (error)\n                                    return \"attributes.\" + error;\n                            }\n                        }\n                        if (message.droppedAttributesCount != null && message.hasOwnProperty(\"droppedAttributesCount\"))\n                            if (!$util.isInteger(message.droppedAttributesCount))\n                                return \"droppedAttributesCount: integer expected\";\n                        return null;\n                    };\n                    /**\n                     * Creates a Resource message from a plain object. Also converts values to their respective internal types.\n                     * @function fromObject\n                     * @memberof opentelemetry.proto.resource.v1.Resource\n                     * @static\n                     * @param {Object.<string,*>} object Plain object\n                     * @returns {opentelemetry.proto.resource.v1.Resource} Resource\n                     */\n                    Resource.fromObject = function fromObject(object) {\n                        if (object instanceof $root.opentelemetry.proto.resource.v1.Resource)\n                            return object;\n                        var message = new $root.opentelemetry.proto.resource.v1.Resource();\n                        if (object.attributes) {\n                            if (!Array.isArray(object.attributes))\n                                throw TypeError(\".opentelemetry.proto.resource.v1.Resource.attributes: array expected\");\n                            message.attributes = [];\n                            for (var i = 0; i < object.attributes.length; ++i) {\n                                if (typeof object.attributes[i] !== \"object\")\n                                    throw TypeError(\".opentelemetry.proto.resource.v1.Resource.attributes: object expected\");\n                                message.attributes[i] = $root.opentelemetry.proto.common.v1.KeyValue.fromObject(object.attributes[i]);\n                            }\n                        }\n                        if (object.droppedAttributesCount != null)\n                            message.droppedAttributesCount = object.droppedAttributesCount >>> 0;\n                        return message;\n                    };\n                    /**\n                     * Creates a plain object from a Resource message. Also converts values to other types if specified.\n                     * @function toObject\n                     * @memberof opentelemetry.proto.resource.v1.Resource\n                     * @static\n                     * @param {opentelemetry.proto.resource.v1.Resource} message Resource\n                     * @param {$protobuf.IConversionOptions} [options] Conversion options\n                     * @returns {Object.<string,*>} Plain object\n                     */\n                    Resource.toObject = function toObject(message, options) {\n                        if (!options)\n                            options = {};\n                        var object = {};\n                        if (options.arrays || options.defaults)\n                            object.attributes = [];\n                        if (options.defaults)\n                            object.droppedAttributesCount = 0;\n                        if (message.attributes && message.attributes.length) {\n                            object.attributes = [];\n                            for (var j = 0; j < message.attributes.length; ++j)\n                                object.attributes[j] = $root.opentelemetry.proto.common.v1.KeyValue.toObject(message.attributes[j], options);\n                        }\n                        if (message.droppedAttributesCount != null && message.hasOwnProperty(\"droppedAttributesCount\"))\n                            object.droppedAttributesCount = message.droppedAttributesCount;\n                        return object;\n                    };\n                    /**\n                     * Converts this Resource to JSON.\n                     * @function toJSON\n                     * @memberof opentelemetry.proto.resource.v1.Resource\n                     * @instance\n                     * @returns {Object.<string,*>} JSON object\n                     */\n                    Resource.prototype.toJSON = function toJSON() {\n                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                    };\n                    /**\n                     * Gets the default type url for Resource\n                     * @function getTypeUrl\n                     * @memberof opentelemetry.proto.resource.v1.Resource\n                     * @static\n                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n                     * @returns {string} The default type url\n                     */\n                    Resource.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                        if (typeUrlPrefix === undefined) {\n                            typeUrlPrefix = \"type.googleapis.com\";\n                        }\n                        return typeUrlPrefix + \"/opentelemetry.proto.resource.v1.Resource\";\n                    };\n                    return Resource;\n                })();\n                return v1;\n            })();\n            return resource;\n        })();\n        proto.trace = (function () {\n            /**\n             * Namespace trace.\n             * @memberof opentelemetry.proto\n             * @namespace\n             */\n            var trace = {};\n            trace.v1 = (function () {\n                /**\n                 * Namespace v1.\n                 * @memberof opentelemetry.proto.trace\n                 * @namespace\n                 */\n                var v1 = {};\n                v1.TracesData = (function () {\n                    /**\n                     * Properties of a TracesData.\n                     * @memberof opentelemetry.proto.trace.v1\n                     * @interface ITracesData\n                     * @property {Array.<opentelemetry.proto.trace.v1.IResourceSpans>|null} [resourceSpans] TracesData resourceSpans\n                     */\n                    /**\n                     * Constructs a new TracesData.\n                     * @memberof opentelemetry.proto.trace.v1\n                     * @classdesc Represents a TracesData.\n                     * @implements ITracesData\n                     * @constructor\n                     * @param {opentelemetry.proto.trace.v1.ITracesData=} [properties] Properties to set\n                     */\n                    function TracesData(properties) {\n                        this.resourceSpans = [];\n                        if (properties)\n                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                                if (properties[keys[i]] != null)\n                                    this[keys[i]] = properties[keys[i]];\n                    }\n                    /**\n                     * TracesData resourceSpans.\n                     * @member {Array.<opentelemetry.proto.trace.v1.IResourceSpans>} resourceSpans\n                     * @memberof opentelemetry.proto.trace.v1.TracesData\n                     * @instance\n                     */\n                    TracesData.prototype.resourceSpans = $util.emptyArray;\n                    /**\n                     * Creates a new TracesData instance using the specified properties.\n                     * @function create\n                     * @memberof opentelemetry.proto.trace.v1.TracesData\n                     * @static\n                     * @param {opentelemetry.proto.trace.v1.ITracesData=} [properties] Properties to set\n                     * @returns {opentelemetry.proto.trace.v1.TracesData} TracesData instance\n                     */\n                    TracesData.create = function create(properties) {\n                        return new TracesData(properties);\n                    };\n                    /**\n                     * Encodes the specified TracesData message. Does not implicitly {@link opentelemetry.proto.trace.v1.TracesData.verify|verify} messages.\n                     * @function encode\n                     * @memberof opentelemetry.proto.trace.v1.TracesData\n                     * @static\n                     * @param {opentelemetry.proto.trace.v1.ITracesData} message TracesData message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    TracesData.encode = function encode(message, writer) {\n                        if (!writer)\n                            writer = $Writer.create();\n                        if (message.resourceSpans != null && message.resourceSpans.length)\n                            for (var i = 0; i < message.resourceSpans.length; ++i)\n                                $root.opentelemetry.proto.trace.v1.ResourceSpans.encode(message.resourceSpans[i], writer.uint32(/* id 1, wireType 2 =*/ 10).fork()).ldelim();\n                        return writer;\n                    };\n                    /**\n                     * Encodes the specified TracesData message, length delimited. Does not implicitly {@link opentelemetry.proto.trace.v1.TracesData.verify|verify} messages.\n                     * @function encodeDelimited\n                     * @memberof opentelemetry.proto.trace.v1.TracesData\n                     * @static\n                     * @param {opentelemetry.proto.trace.v1.ITracesData} message TracesData message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    TracesData.encodeDelimited = function encodeDelimited(message, writer) {\n                        return this.encode(message, writer).ldelim();\n                    };\n                    /**\n                     * Decodes a TracesData message from the specified reader or buffer.\n                     * @function decode\n                     * @memberof opentelemetry.proto.trace.v1.TracesData\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @param {number} [length] Message length if known beforehand\n                     * @returns {opentelemetry.proto.trace.v1.TracesData} TracesData\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    TracesData.decode = function decode(reader, length) {\n                        if (!(reader instanceof $Reader))\n                            reader = $Reader.create(reader);\n                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.opentelemetry.proto.trace.v1.TracesData();\n                        while (reader.pos < end) {\n                            var tag = reader.uint32();\n                            switch (tag >>> 3) {\n                                case 1: {\n                                    if (!(message.resourceSpans && message.resourceSpans.length))\n                                        message.resourceSpans = [];\n                                    message.resourceSpans.push($root.opentelemetry.proto.trace.v1.ResourceSpans.decode(reader, reader.uint32()));\n                                    break;\n                                }\n                                default:\n                                    reader.skipType(tag & 7);\n                                    break;\n                            }\n                        }\n                        return message;\n                    };\n                    /**\n                     * Decodes a TracesData message from the specified reader or buffer, length delimited.\n                     * @function decodeDelimited\n                     * @memberof opentelemetry.proto.trace.v1.TracesData\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @returns {opentelemetry.proto.trace.v1.TracesData} TracesData\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    TracesData.decodeDelimited = function decodeDelimited(reader) {\n                        if (!(reader instanceof $Reader))\n                            reader = new $Reader(reader);\n                        return this.decode(reader, reader.uint32());\n                    };\n                    /**\n                     * Verifies a TracesData message.\n                     * @function verify\n                     * @memberof opentelemetry.proto.trace.v1.TracesData\n                     * @static\n                     * @param {Object.<string,*>} message Plain object to verify\n                     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                     */\n                    TracesData.verify = function verify(message) {\n                        if (typeof message !== \"object\" || message === null)\n                            return \"object expected\";\n                        if (message.resourceSpans != null && message.hasOwnProperty(\"resourceSpans\")) {\n                            if (!Array.isArray(message.resourceSpans))\n                                return \"resourceSpans: array expected\";\n                            for (var i = 0; i < message.resourceSpans.length; ++i) {\n                                var error = $root.opentelemetry.proto.trace.v1.ResourceSpans.verify(message.resourceSpans[i]);\n                                if (error)\n                                    return \"resourceSpans.\" + error;\n                            }\n                        }\n                        return null;\n                    };\n                    /**\n                     * Creates a TracesData message from a plain object. Also converts values to their respective internal types.\n                     * @function fromObject\n                     * @memberof opentelemetry.proto.trace.v1.TracesData\n                     * @static\n                     * @param {Object.<string,*>} object Plain object\n                     * @returns {opentelemetry.proto.trace.v1.TracesData} TracesData\n                     */\n                    TracesData.fromObject = function fromObject(object) {\n                        if (object instanceof $root.opentelemetry.proto.trace.v1.TracesData)\n                            return object;\n                        var message = new $root.opentelemetry.proto.trace.v1.TracesData();\n                        if (object.resourceSpans) {\n                            if (!Array.isArray(object.resourceSpans))\n                                throw TypeError(\".opentelemetry.proto.trace.v1.TracesData.resourceSpans: array expected\");\n                            message.resourceSpans = [];\n                            for (var i = 0; i < object.resourceSpans.length; ++i) {\n                                if (typeof object.resourceSpans[i] !== \"object\")\n                                    throw TypeError(\".opentelemetry.proto.trace.v1.TracesData.resourceSpans: object expected\");\n                                message.resourceSpans[i] = $root.opentelemetry.proto.trace.v1.ResourceSpans.fromObject(object.resourceSpans[i]);\n                            }\n                        }\n                        return message;\n                    };\n                    /**\n                     * Creates a plain object from a TracesData message. Also converts values to other types if specified.\n                     * @function toObject\n                     * @memberof opentelemetry.proto.trace.v1.TracesData\n                     * @static\n                     * @param {opentelemetry.proto.trace.v1.TracesData} message TracesData\n                     * @param {$protobuf.IConversionOptions} [options] Conversion options\n                     * @returns {Object.<string,*>} Plain object\n                     */\n                    TracesData.toObject = function toObject(message, options) {\n                        if (!options)\n                            options = {};\n                        var object = {};\n                        if (options.arrays || options.defaults)\n                            object.resourceSpans = [];\n                        if (message.resourceSpans && message.resourceSpans.length) {\n                            object.resourceSpans = [];\n                            for (var j = 0; j < message.resourceSpans.length; ++j)\n                                object.resourceSpans[j] = $root.opentelemetry.proto.trace.v1.ResourceSpans.toObject(message.resourceSpans[j], options);\n                        }\n                        return object;\n                    };\n                    /**\n                     * Converts this TracesData to JSON.\n                     * @function toJSON\n                     * @memberof opentelemetry.proto.trace.v1.TracesData\n                     * @instance\n                     * @returns {Object.<string,*>} JSON object\n                     */\n                    TracesData.prototype.toJSON = function toJSON() {\n                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                    };\n                    /**\n                     * Gets the default type url for TracesData\n                     * @function getTypeUrl\n                     * @memberof opentelemetry.proto.trace.v1.TracesData\n                     * @static\n                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n                     * @returns {string} The default type url\n                     */\n                    TracesData.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                        if (typeUrlPrefix === undefined) {\n                            typeUrlPrefix = \"type.googleapis.com\";\n                        }\n                        return typeUrlPrefix + \"/opentelemetry.proto.trace.v1.TracesData\";\n                    };\n                    return TracesData;\n                })();\n                v1.ResourceSpans = (function () {\n                    /**\n                     * Properties of a ResourceSpans.\n                     * @memberof opentelemetry.proto.trace.v1\n                     * @interface IResourceSpans\n                     * @property {opentelemetry.proto.resource.v1.IResource|null} [resource] ResourceSpans resource\n                     * @property {Array.<opentelemetry.proto.trace.v1.IScopeSpans>|null} [scopeSpans] ResourceSpans scopeSpans\n                     * @property {string|null} [schemaUrl] ResourceSpans schemaUrl\n                     */\n                    /**\n                     * Constructs a new ResourceSpans.\n                     * @memberof opentelemetry.proto.trace.v1\n                     * @classdesc Represents a ResourceSpans.\n                     * @implements IResourceSpans\n                     * @constructor\n                     * @param {opentelemetry.proto.trace.v1.IResourceSpans=} [properties] Properties to set\n                     */\n                    function ResourceSpans(properties) {\n                        this.scopeSpans = [];\n                        if (properties)\n                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                                if (properties[keys[i]] != null)\n                                    this[keys[i]] = properties[keys[i]];\n                    }\n                    /**\n                     * ResourceSpans resource.\n                     * @member {opentelemetry.proto.resource.v1.IResource|null|undefined} resource\n                     * @memberof opentelemetry.proto.trace.v1.ResourceSpans\n                     * @instance\n                     */\n                    ResourceSpans.prototype.resource = null;\n                    /**\n                     * ResourceSpans scopeSpans.\n                     * @member {Array.<opentelemetry.proto.trace.v1.IScopeSpans>} scopeSpans\n                     * @memberof opentelemetry.proto.trace.v1.ResourceSpans\n                     * @instance\n                     */\n                    ResourceSpans.prototype.scopeSpans = $util.emptyArray;\n                    /**\n                     * ResourceSpans schemaUrl.\n                     * @member {string|null|undefined} schemaUrl\n                     * @memberof opentelemetry.proto.trace.v1.ResourceSpans\n                     * @instance\n                     */\n                    ResourceSpans.prototype.schemaUrl = null;\n                    /**\n                     * Creates a new ResourceSpans instance using the specified properties.\n                     * @function create\n                     * @memberof opentelemetry.proto.trace.v1.ResourceSpans\n                     * @static\n                     * @param {opentelemetry.proto.trace.v1.IResourceSpans=} [properties] Properties to set\n                     * @returns {opentelemetry.proto.trace.v1.ResourceSpans} ResourceSpans instance\n                     */\n                    ResourceSpans.create = function create(properties) {\n                        return new ResourceSpans(properties);\n                    };\n                    /**\n                     * Encodes the specified ResourceSpans message. Does not implicitly {@link opentelemetry.proto.trace.v1.ResourceSpans.verify|verify} messages.\n                     * @function encode\n                     * @memberof opentelemetry.proto.trace.v1.ResourceSpans\n                     * @static\n                     * @param {opentelemetry.proto.trace.v1.IResourceSpans} message ResourceSpans message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    ResourceSpans.encode = function encode(message, writer) {\n                        if (!writer)\n                            writer = $Writer.create();\n                        if (message.resource != null && Object.hasOwnProperty.call(message, \"resource\"))\n                            $root.opentelemetry.proto.resource.v1.Resource.encode(message.resource, writer.uint32(/* id 1, wireType 2 =*/ 10).fork()).ldelim();\n                        if (message.scopeSpans != null && message.scopeSpans.length)\n                            for (var i = 0; i < message.scopeSpans.length; ++i)\n                                $root.opentelemetry.proto.trace.v1.ScopeSpans.encode(message.scopeSpans[i], writer.uint32(/* id 2, wireType 2 =*/ 18).fork()).ldelim();\n                        if (message.schemaUrl != null && Object.hasOwnProperty.call(message, \"schemaUrl\"))\n                            writer.uint32(/* id 3, wireType 2 =*/ 26).string(message.schemaUrl);\n                        return writer;\n                    };\n                    /**\n                     * Encodes the specified ResourceSpans message, length delimited. Does not implicitly {@link opentelemetry.proto.trace.v1.ResourceSpans.verify|verify} messages.\n                     * @function encodeDelimited\n                     * @memberof opentelemetry.proto.trace.v1.ResourceSpans\n                     * @static\n                     * @param {opentelemetry.proto.trace.v1.IResourceSpans} message ResourceSpans message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    ResourceSpans.encodeDelimited = function encodeDelimited(message, writer) {\n                        return this.encode(message, writer).ldelim();\n                    };\n                    /**\n                     * Decodes a ResourceSpans message from the specified reader or buffer.\n                     * @function decode\n                     * @memberof opentelemetry.proto.trace.v1.ResourceSpans\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @param {number} [length] Message length if known beforehand\n                     * @returns {opentelemetry.proto.trace.v1.ResourceSpans} ResourceSpans\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    ResourceSpans.decode = function decode(reader, length) {\n                        if (!(reader instanceof $Reader))\n                            reader = $Reader.create(reader);\n                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.opentelemetry.proto.trace.v1.ResourceSpans();\n                        while (reader.pos < end) {\n                            var tag = reader.uint32();\n                            switch (tag >>> 3) {\n                                case 1: {\n                                    message.resource = $root.opentelemetry.proto.resource.v1.Resource.decode(reader, reader.uint32());\n                                    break;\n                                }\n                                case 2: {\n                                    if (!(message.scopeSpans && message.scopeSpans.length))\n                                        message.scopeSpans = [];\n                                    message.scopeSpans.push($root.opentelemetry.proto.trace.v1.ScopeSpans.decode(reader, reader.uint32()));\n                                    break;\n                                }\n                                case 3: {\n                                    message.schemaUrl = reader.string();\n                                    break;\n                                }\n                                default:\n                                    reader.skipType(tag & 7);\n                                    break;\n                            }\n                        }\n                        return message;\n                    };\n                    /**\n                     * Decodes a ResourceSpans message from the specified reader or buffer, length delimited.\n                     * @function decodeDelimited\n                     * @memberof opentelemetry.proto.trace.v1.ResourceSpans\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @returns {opentelemetry.proto.trace.v1.ResourceSpans} ResourceSpans\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    ResourceSpans.decodeDelimited = function decodeDelimited(reader) {\n                        if (!(reader instanceof $Reader))\n                            reader = new $Reader(reader);\n                        return this.decode(reader, reader.uint32());\n                    };\n                    /**\n                     * Verifies a ResourceSpans message.\n                     * @function verify\n                     * @memberof opentelemetry.proto.trace.v1.ResourceSpans\n                     * @static\n                     * @param {Object.<string,*>} message Plain object to verify\n                     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                     */\n                    ResourceSpans.verify = function verify(message) {\n                        if (typeof message !== \"object\" || message === null)\n                            return \"object expected\";\n                        if (message.resource != null && message.hasOwnProperty(\"resource\")) {\n                            var error = $root.opentelemetry.proto.resource.v1.Resource.verify(message.resource);\n                            if (error)\n                                return \"resource.\" + error;\n                        }\n                        if (message.scopeSpans != null && message.hasOwnProperty(\"scopeSpans\")) {\n                            if (!Array.isArray(message.scopeSpans))\n                                return \"scopeSpans: array expected\";\n                            for (var i = 0; i < message.scopeSpans.length; ++i) {\n                                var error = $root.opentelemetry.proto.trace.v1.ScopeSpans.verify(message.scopeSpans[i]);\n                                if (error)\n                                    return \"scopeSpans.\" + error;\n                            }\n                        }\n                        if (message.schemaUrl != null && message.hasOwnProperty(\"schemaUrl\"))\n                            if (!$util.isString(message.schemaUrl))\n                                return \"schemaUrl: string expected\";\n                        return null;\n                    };\n                    /**\n                     * Creates a ResourceSpans message from a plain object. Also converts values to their respective internal types.\n                     * @function fromObject\n                     * @memberof opentelemetry.proto.trace.v1.ResourceSpans\n                     * @static\n                     * @param {Object.<string,*>} object Plain object\n                     * @returns {opentelemetry.proto.trace.v1.ResourceSpans} ResourceSpans\n                     */\n                    ResourceSpans.fromObject = function fromObject(object) {\n                        if (object instanceof $root.opentelemetry.proto.trace.v1.ResourceSpans)\n                            return object;\n                        var message = new $root.opentelemetry.proto.trace.v1.ResourceSpans();\n                        if (object.resource != null) {\n                            if (typeof object.resource !== \"object\")\n                                throw TypeError(\".opentelemetry.proto.trace.v1.ResourceSpans.resource: object expected\");\n                            message.resource = $root.opentelemetry.proto.resource.v1.Resource.fromObject(object.resource);\n                        }\n                        if (object.scopeSpans) {\n                            if (!Array.isArray(object.scopeSpans))\n                                throw TypeError(\".opentelemetry.proto.trace.v1.ResourceSpans.scopeSpans: array expected\");\n                            message.scopeSpans = [];\n                            for (var i = 0; i < object.scopeSpans.length; ++i) {\n                                if (typeof object.scopeSpans[i] !== \"object\")\n                                    throw TypeError(\".opentelemetry.proto.trace.v1.ResourceSpans.scopeSpans: object expected\");\n                                message.scopeSpans[i] = $root.opentelemetry.proto.trace.v1.ScopeSpans.fromObject(object.scopeSpans[i]);\n                            }\n                        }\n                        if (object.schemaUrl != null)\n                            message.schemaUrl = String(object.schemaUrl);\n                        return message;\n                    };\n                    /**\n                     * Creates a plain object from a ResourceSpans message. Also converts values to other types if specified.\n                     * @function toObject\n                     * @memberof opentelemetry.proto.trace.v1.ResourceSpans\n                     * @static\n                     * @param {opentelemetry.proto.trace.v1.ResourceSpans} message ResourceSpans\n                     * @param {$protobuf.IConversionOptions} [options] Conversion options\n                     * @returns {Object.<string,*>} Plain object\n                     */\n                    ResourceSpans.toObject = function toObject(message, options) {\n                        if (!options)\n                            options = {};\n                        var object = {};\n                        if (options.arrays || options.defaults)\n                            object.scopeSpans = [];\n                        if (options.defaults) {\n                            object.resource = null;\n                            object.schemaUrl = \"\";\n                        }\n                        if (message.resource != null && message.hasOwnProperty(\"resource\"))\n                            object.resource = $root.opentelemetry.proto.resource.v1.Resource.toObject(message.resource, options);\n                        if (message.scopeSpans && message.scopeSpans.length) {\n                            object.scopeSpans = [];\n                            for (var j = 0; j < message.scopeSpans.length; ++j)\n                                object.scopeSpans[j] = $root.opentelemetry.proto.trace.v1.ScopeSpans.toObject(message.scopeSpans[j], options);\n                        }\n                        if (message.schemaUrl != null && message.hasOwnProperty(\"schemaUrl\"))\n                            object.schemaUrl = message.schemaUrl;\n                        return object;\n                    };\n                    /**\n                     * Converts this ResourceSpans to JSON.\n                     * @function toJSON\n                     * @memberof opentelemetry.proto.trace.v1.ResourceSpans\n                     * @instance\n                     * @returns {Object.<string,*>} JSON object\n                     */\n                    ResourceSpans.prototype.toJSON = function toJSON() {\n                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                    };\n                    /**\n                     * Gets the default type url for ResourceSpans\n                     * @function getTypeUrl\n                     * @memberof opentelemetry.proto.trace.v1.ResourceSpans\n                     * @static\n                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n                     * @returns {string} The default type url\n                     */\n                    ResourceSpans.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                        if (typeUrlPrefix === undefined) {\n                            typeUrlPrefix = \"type.googleapis.com\";\n                        }\n                        return typeUrlPrefix + \"/opentelemetry.proto.trace.v1.ResourceSpans\";\n                    };\n                    return ResourceSpans;\n                })();\n                v1.ScopeSpans = (function () {\n                    /**\n                     * Properties of a ScopeSpans.\n                     * @memberof opentelemetry.proto.trace.v1\n                     * @interface IScopeSpans\n                     * @property {opentelemetry.proto.common.v1.IInstrumentationScope|null} [scope] ScopeSpans scope\n                     * @property {Array.<opentelemetry.proto.trace.v1.ISpan>|null} [spans] ScopeSpans spans\n                     * @property {string|null} [schemaUrl] ScopeSpans schemaUrl\n                     */\n                    /**\n                     * Constructs a new ScopeSpans.\n                     * @memberof opentelemetry.proto.trace.v1\n                     * @classdesc Represents a ScopeSpans.\n                     * @implements IScopeSpans\n                     * @constructor\n                     * @param {opentelemetry.proto.trace.v1.IScopeSpans=} [properties] Properties to set\n                     */\n                    function ScopeSpans(properties) {\n                        this.spans = [];\n                        if (properties)\n                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                                if (properties[keys[i]] != null)\n                                    this[keys[i]] = properties[keys[i]];\n                    }\n                    /**\n                     * ScopeSpans scope.\n                     * @member {opentelemetry.proto.common.v1.IInstrumentationScope|null|undefined} scope\n                     * @memberof opentelemetry.proto.trace.v1.ScopeSpans\n                     * @instance\n                     */\n                    ScopeSpans.prototype.scope = null;\n                    /**\n                     * ScopeSpans spans.\n                     * @member {Array.<opentelemetry.proto.trace.v1.ISpan>} spans\n                     * @memberof opentelemetry.proto.trace.v1.ScopeSpans\n                     * @instance\n                     */\n                    ScopeSpans.prototype.spans = $util.emptyArray;\n                    /**\n                     * ScopeSpans schemaUrl.\n                     * @member {string|null|undefined} schemaUrl\n                     * @memberof opentelemetry.proto.trace.v1.ScopeSpans\n                     * @instance\n                     */\n                    ScopeSpans.prototype.schemaUrl = null;\n                    /**\n                     * Creates a new ScopeSpans instance using the specified properties.\n                     * @function create\n                     * @memberof opentelemetry.proto.trace.v1.ScopeSpans\n                     * @static\n                     * @param {opentelemetry.proto.trace.v1.IScopeSpans=} [properties] Properties to set\n                     * @returns {opentelemetry.proto.trace.v1.ScopeSpans} ScopeSpans instance\n                     */\n                    ScopeSpans.create = function create(properties) {\n                        return new ScopeSpans(properties);\n                    };\n                    /**\n                     * Encodes the specified ScopeSpans message. Does not implicitly {@link opentelemetry.proto.trace.v1.ScopeSpans.verify|verify} messages.\n                     * @function encode\n                     * @memberof opentelemetry.proto.trace.v1.ScopeSpans\n                     * @static\n                     * @param {opentelemetry.proto.trace.v1.IScopeSpans} message ScopeSpans message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    ScopeSpans.encode = function encode(message, writer) {\n                        if (!writer)\n                            writer = $Writer.create();\n                        if (message.scope != null && Object.hasOwnProperty.call(message, \"scope\"))\n                            $root.opentelemetry.proto.common.v1.InstrumentationScope.encode(message.scope, writer.uint32(/* id 1, wireType 2 =*/ 10).fork()).ldelim();\n                        if (message.spans != null && message.spans.length)\n                            for (var i = 0; i < message.spans.length; ++i)\n                                $root.opentelemetry.proto.trace.v1.Span.encode(message.spans[i], writer.uint32(/* id 2, wireType 2 =*/ 18).fork()).ldelim();\n                        if (message.schemaUrl != null && Object.hasOwnProperty.call(message, \"schemaUrl\"))\n                            writer.uint32(/* id 3, wireType 2 =*/ 26).string(message.schemaUrl);\n                        return writer;\n                    };\n                    /**\n                     * Encodes the specified ScopeSpans message, length delimited. Does not implicitly {@link opentelemetry.proto.trace.v1.ScopeSpans.verify|verify} messages.\n                     * @function encodeDelimited\n                     * @memberof opentelemetry.proto.trace.v1.ScopeSpans\n                     * @static\n                     * @param {opentelemetry.proto.trace.v1.IScopeSpans} message ScopeSpans message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    ScopeSpans.encodeDelimited = function encodeDelimited(message, writer) {\n                        return this.encode(message, writer).ldelim();\n                    };\n                    /**\n                     * Decodes a ScopeSpans message from the specified reader or buffer.\n                     * @function decode\n                     * @memberof opentelemetry.proto.trace.v1.ScopeSpans\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @param {number} [length] Message length if known beforehand\n                     * @returns {opentelemetry.proto.trace.v1.ScopeSpans} ScopeSpans\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    ScopeSpans.decode = function decode(reader, length) {\n                        if (!(reader instanceof $Reader))\n                            reader = $Reader.create(reader);\n                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.opentelemetry.proto.trace.v1.ScopeSpans();\n                        while (reader.pos < end) {\n                            var tag = reader.uint32();\n                            switch (tag >>> 3) {\n                                case 1: {\n                                    message.scope = $root.opentelemetry.proto.common.v1.InstrumentationScope.decode(reader, reader.uint32());\n                                    break;\n                                }\n                                case 2: {\n                                    if (!(message.spans && message.spans.length))\n                                        message.spans = [];\n                                    message.spans.push($root.opentelemetry.proto.trace.v1.Span.decode(reader, reader.uint32()));\n                                    break;\n                                }\n                                case 3: {\n                                    message.schemaUrl = reader.string();\n                                    break;\n                                }\n                                default:\n                                    reader.skipType(tag & 7);\n                                    break;\n                            }\n                        }\n                        return message;\n                    };\n                    /**\n                     * Decodes a ScopeSpans message from the specified reader or buffer, length delimited.\n                     * @function decodeDelimited\n                     * @memberof opentelemetry.proto.trace.v1.ScopeSpans\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @returns {opentelemetry.proto.trace.v1.ScopeSpans} ScopeSpans\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    ScopeSpans.decodeDelimited = function decodeDelimited(reader) {\n                        if (!(reader instanceof $Reader))\n                            reader = new $Reader(reader);\n                        return this.decode(reader, reader.uint32());\n                    };\n                    /**\n                     * Verifies a ScopeSpans message.\n                     * @function verify\n                     * @memberof opentelemetry.proto.trace.v1.ScopeSpans\n                     * @static\n                     * @param {Object.<string,*>} message Plain object to verify\n                     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                     */\n                    ScopeSpans.verify = function verify(message) {\n                        if (typeof message !== \"object\" || message === null)\n                            return \"object expected\";\n                        if (message.scope != null && message.hasOwnProperty(\"scope\")) {\n                            var error = $root.opentelemetry.proto.common.v1.InstrumentationScope.verify(message.scope);\n                            if (error)\n                                return \"scope.\" + error;\n                        }\n                        if (message.spans != null && message.hasOwnProperty(\"spans\")) {\n                            if (!Array.isArray(message.spans))\n                                return \"spans: array expected\";\n                            for (var i = 0; i < message.spans.length; ++i) {\n                                var error = $root.opentelemetry.proto.trace.v1.Span.verify(message.spans[i]);\n                                if (error)\n                                    return \"spans.\" + error;\n                            }\n                        }\n                        if (message.schemaUrl != null && message.hasOwnProperty(\"schemaUrl\"))\n                            if (!$util.isString(message.schemaUrl))\n                                return \"schemaUrl: string expected\";\n                        return null;\n                    };\n                    /**\n                     * Creates a ScopeSpans message from a plain object. Also converts values to their respective internal types.\n                     * @function fromObject\n                     * @memberof opentelemetry.proto.trace.v1.ScopeSpans\n                     * @static\n                     * @param {Object.<string,*>} object Plain object\n                     * @returns {opentelemetry.proto.trace.v1.ScopeSpans} ScopeSpans\n                     */\n                    ScopeSpans.fromObject = function fromObject(object) {\n                        if (object instanceof $root.opentelemetry.proto.trace.v1.ScopeSpans)\n                            return object;\n                        var message = new $root.opentelemetry.proto.trace.v1.ScopeSpans();\n                        if (object.scope != null) {\n                            if (typeof object.scope !== \"object\")\n                                throw TypeError(\".opentelemetry.proto.trace.v1.ScopeSpans.scope: object expected\");\n                            message.scope = $root.opentelemetry.proto.common.v1.InstrumentationScope.fromObject(object.scope);\n                        }\n                        if (object.spans) {\n                            if (!Array.isArray(object.spans))\n                                throw TypeError(\".opentelemetry.proto.trace.v1.ScopeSpans.spans: array expected\");\n                            message.spans = [];\n                            for (var i = 0; i < object.spans.length; ++i) {\n                                if (typeof object.spans[i] !== \"object\")\n                                    throw TypeError(\".opentelemetry.proto.trace.v1.ScopeSpans.spans: object expected\");\n                                message.spans[i] = $root.opentelemetry.proto.trace.v1.Span.fromObject(object.spans[i]);\n                            }\n                        }\n                        if (object.schemaUrl != null)\n                            message.schemaUrl = String(object.schemaUrl);\n                        return message;\n                    };\n                    /**\n                     * Creates a plain object from a ScopeSpans message. Also converts values to other types if specified.\n                     * @function toObject\n                     * @memberof opentelemetry.proto.trace.v1.ScopeSpans\n                     * @static\n                     * @param {opentelemetry.proto.trace.v1.ScopeSpans} message ScopeSpans\n                     * @param {$protobuf.IConversionOptions} [options] Conversion options\n                     * @returns {Object.<string,*>} Plain object\n                     */\n                    ScopeSpans.toObject = function toObject(message, options) {\n                        if (!options)\n                            options = {};\n                        var object = {};\n                        if (options.arrays || options.defaults)\n                            object.spans = [];\n                        if (options.defaults) {\n                            object.scope = null;\n                            object.schemaUrl = \"\";\n                        }\n                        if (message.scope != null && message.hasOwnProperty(\"scope\"))\n                            object.scope = $root.opentelemetry.proto.common.v1.InstrumentationScope.toObject(message.scope, options);\n                        if (message.spans && message.spans.length) {\n                            object.spans = [];\n                            for (var j = 0; j < message.spans.length; ++j)\n                                object.spans[j] = $root.opentelemetry.proto.trace.v1.Span.toObject(message.spans[j], options);\n                        }\n                        if (message.schemaUrl != null && message.hasOwnProperty(\"schemaUrl\"))\n                            object.schemaUrl = message.schemaUrl;\n                        return object;\n                    };\n                    /**\n                     * Converts this ScopeSpans to JSON.\n                     * @function toJSON\n                     * @memberof opentelemetry.proto.trace.v1.ScopeSpans\n                     * @instance\n                     * @returns {Object.<string,*>} JSON object\n                     */\n                    ScopeSpans.prototype.toJSON = function toJSON() {\n                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                    };\n                    /**\n                     * Gets the default type url for ScopeSpans\n                     * @function getTypeUrl\n                     * @memberof opentelemetry.proto.trace.v1.ScopeSpans\n                     * @static\n                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n                     * @returns {string} The default type url\n                     */\n                    ScopeSpans.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                        if (typeUrlPrefix === undefined) {\n                            typeUrlPrefix = \"type.googleapis.com\";\n                        }\n                        return typeUrlPrefix + \"/opentelemetry.proto.trace.v1.ScopeSpans\";\n                    };\n                    return ScopeSpans;\n                })();\n                v1.Span = (function () {\n                    /**\n                     * Properties of a Span.\n                     * @memberof opentelemetry.proto.trace.v1\n                     * @interface ISpan\n                     * @property {Uint8Array|null} [traceId] Span traceId\n                     * @property {Uint8Array|null} [spanId] Span spanId\n                     * @property {string|null} [traceState] Span traceState\n                     * @property {Uint8Array|null} [parentSpanId] Span parentSpanId\n                     * @property {string|null} [name] Span name\n                     * @property {opentelemetry.proto.trace.v1.Span.SpanKind|null} [kind] Span kind\n                     * @property {number|Long|null} [startTimeUnixNano] Span startTimeUnixNano\n                     * @property {number|Long|null} [endTimeUnixNano] Span endTimeUnixNano\n                     * @property {Array.<opentelemetry.proto.common.v1.IKeyValue>|null} [attributes] Span attributes\n                     * @property {number|null} [droppedAttributesCount] Span droppedAttributesCount\n                     * @property {Array.<opentelemetry.proto.trace.v1.Span.IEvent>|null} [events] Span events\n                     * @property {number|null} [droppedEventsCount] Span droppedEventsCount\n                     * @property {Array.<opentelemetry.proto.trace.v1.Span.ILink>|null} [links] Span links\n                     * @property {number|null} [droppedLinksCount] Span droppedLinksCount\n                     * @property {opentelemetry.proto.trace.v1.IStatus|null} [status] Span status\n                     */\n                    /**\n                     * Constructs a new Span.\n                     * @memberof opentelemetry.proto.trace.v1\n                     * @classdesc Represents a Span.\n                     * @implements ISpan\n                     * @constructor\n                     * @param {opentelemetry.proto.trace.v1.ISpan=} [properties] Properties to set\n                     */\n                    function Span(properties) {\n                        this.attributes = [];\n                        this.events = [];\n                        this.links = [];\n                        if (properties)\n                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                                if (properties[keys[i]] != null)\n                                    this[keys[i]] = properties[keys[i]];\n                    }\n                    /**\n                     * Span traceId.\n                     * @member {Uint8Array|null|undefined} traceId\n                     * @memberof opentelemetry.proto.trace.v1.Span\n                     * @instance\n                     */\n                    Span.prototype.traceId = null;\n                    /**\n                     * Span spanId.\n                     * @member {Uint8Array|null|undefined} spanId\n                     * @memberof opentelemetry.proto.trace.v1.Span\n                     * @instance\n                     */\n                    Span.prototype.spanId = null;\n                    /**\n                     * Span traceState.\n                     * @member {string|null|undefined} traceState\n                     * @memberof opentelemetry.proto.trace.v1.Span\n                     * @instance\n                     */\n                    Span.prototype.traceState = null;\n                    /**\n                     * Span parentSpanId.\n                     * @member {Uint8Array|null|undefined} parentSpanId\n                     * @memberof opentelemetry.proto.trace.v1.Span\n                     * @instance\n                     */\n                    Span.prototype.parentSpanId = null;\n                    /**\n                     * Span name.\n                     * @member {string|null|undefined} name\n                     * @memberof opentelemetry.proto.trace.v1.Span\n                     * @instance\n                     */\n                    Span.prototype.name = null;\n                    /**\n                     * Span kind.\n                     * @member {opentelemetry.proto.trace.v1.Span.SpanKind|null|undefined} kind\n                     * @memberof opentelemetry.proto.trace.v1.Span\n                     * @instance\n                     */\n                    Span.prototype.kind = null;\n                    /**\n                     * Span startTimeUnixNano.\n                     * @member {number|Long|null|undefined} startTimeUnixNano\n                     * @memberof opentelemetry.proto.trace.v1.Span\n                     * @instance\n                     */\n                    Span.prototype.startTimeUnixNano = null;\n                    /**\n                     * Span endTimeUnixNano.\n                     * @member {number|Long|null|undefined} endTimeUnixNano\n                     * @memberof opentelemetry.proto.trace.v1.Span\n                     * @instance\n                     */\n                    Span.prototype.endTimeUnixNano = null;\n                    /**\n                     * Span attributes.\n                     * @member {Array.<opentelemetry.proto.common.v1.IKeyValue>} attributes\n                     * @memberof opentelemetry.proto.trace.v1.Span\n                     * @instance\n                     */\n                    Span.prototype.attributes = $util.emptyArray;\n                    /**\n                     * Span droppedAttributesCount.\n                     * @member {number|null|undefined} droppedAttributesCount\n                     * @memberof opentelemetry.proto.trace.v1.Span\n                     * @instance\n                     */\n                    Span.prototype.droppedAttributesCount = null;\n                    /**\n                     * Span events.\n                     * @member {Array.<opentelemetry.proto.trace.v1.Span.IEvent>} events\n                     * @memberof opentelemetry.proto.trace.v1.Span\n                     * @instance\n                     */\n                    Span.prototype.events = $util.emptyArray;\n                    /**\n                     * Span droppedEventsCount.\n                     * @member {number|null|undefined} droppedEventsCount\n                     * @memberof opentelemetry.proto.trace.v1.Span\n                     * @instance\n                     */\n                    Span.prototype.droppedEventsCount = null;\n                    /**\n                     * Span links.\n                     * @member {Array.<opentelemetry.proto.trace.v1.Span.ILink>} links\n                     * @memberof opentelemetry.proto.trace.v1.Span\n                     * @instance\n                     */\n                    Span.prototype.links = $util.emptyArray;\n                    /**\n                     * Span droppedLinksCount.\n                     * @member {number|null|undefined} droppedLinksCount\n                     * @memberof opentelemetry.proto.trace.v1.Span\n                     * @instance\n                     */\n                    Span.prototype.droppedLinksCount = null;\n                    /**\n                     * Span status.\n                     * @member {opentelemetry.proto.trace.v1.IStatus|null|undefined} status\n                     * @memberof opentelemetry.proto.trace.v1.Span\n                     * @instance\n                     */\n                    Span.prototype.status = null;\n                    /**\n                     * Creates a new Span instance using the specified properties.\n                     * @function create\n                     * @memberof opentelemetry.proto.trace.v1.Span\n                     * @static\n                     * @param {opentelemetry.proto.trace.v1.ISpan=} [properties] Properties to set\n                     * @returns {opentelemetry.proto.trace.v1.Span} Span instance\n                     */\n                    Span.create = function create(properties) {\n                        return new Span(properties);\n                    };\n                    /**\n                     * Encodes the specified Span message. Does not implicitly {@link opentelemetry.proto.trace.v1.Span.verify|verify} messages.\n                     * @function encode\n                     * @memberof opentelemetry.proto.trace.v1.Span\n                     * @static\n                     * @param {opentelemetry.proto.trace.v1.ISpan} message Span message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    Span.encode = function encode(message, writer) {\n                        if (!writer)\n                            writer = $Writer.create();\n                        if (message.traceId != null && Object.hasOwnProperty.call(message, \"traceId\"))\n                            writer.uint32(/* id 1, wireType 2 =*/ 10).bytes(message.traceId);\n                        if (message.spanId != null && Object.hasOwnProperty.call(message, \"spanId\"))\n                            writer.uint32(/* id 2, wireType 2 =*/ 18).bytes(message.spanId);\n                        if (message.traceState != null && Object.hasOwnProperty.call(message, \"traceState\"))\n                            writer.uint32(/* id 3, wireType 2 =*/ 26).string(message.traceState);\n                        if (message.parentSpanId != null && Object.hasOwnProperty.call(message, \"parentSpanId\"))\n                            writer.uint32(/* id 4, wireType 2 =*/ 34).bytes(message.parentSpanId);\n                        if (message.name != null && Object.hasOwnProperty.call(message, \"name\"))\n                            writer.uint32(/* id 5, wireType 2 =*/ 42).string(message.name);\n                        if (message.kind != null && Object.hasOwnProperty.call(message, \"kind\"))\n                            writer.uint32(/* id 6, wireType 0 =*/ 48).int32(message.kind);\n                        if (message.startTimeUnixNano != null && Object.hasOwnProperty.call(message, \"startTimeUnixNano\"))\n                            writer.uint32(/* id 7, wireType 1 =*/ 57).fixed64(message.startTimeUnixNano);\n                        if (message.endTimeUnixNano != null && Object.hasOwnProperty.call(message, \"endTimeUnixNano\"))\n                            writer.uint32(/* id 8, wireType 1 =*/ 65).fixed64(message.endTimeUnixNano);\n                        if (message.attributes != null && message.attributes.length)\n                            for (var i = 0; i < message.attributes.length; ++i)\n                                $root.opentelemetry.proto.common.v1.KeyValue.encode(message.attributes[i], writer.uint32(/* id 9, wireType 2 =*/ 74).fork()).ldelim();\n                        if (message.droppedAttributesCount != null && Object.hasOwnProperty.call(message, \"droppedAttributesCount\"))\n                            writer.uint32(/* id 10, wireType 0 =*/ 80).uint32(message.droppedAttributesCount);\n                        if (message.events != null && message.events.length)\n                            for (var i = 0; i < message.events.length; ++i)\n                                $root.opentelemetry.proto.trace.v1.Span.Event.encode(message.events[i], writer.uint32(/* id 11, wireType 2 =*/ 90).fork()).ldelim();\n                        if (message.droppedEventsCount != null && Object.hasOwnProperty.call(message, \"droppedEventsCount\"))\n                            writer.uint32(/* id 12, wireType 0 =*/ 96).uint32(message.droppedEventsCount);\n                        if (message.links != null && message.links.length)\n                            for (var i = 0; i < message.links.length; ++i)\n                                $root.opentelemetry.proto.trace.v1.Span.Link.encode(message.links[i], writer.uint32(/* id 13, wireType 2 =*/ 106).fork()).ldelim();\n                        if (message.droppedLinksCount != null && Object.hasOwnProperty.call(message, \"droppedLinksCount\"))\n                            writer.uint32(/* id 14, wireType 0 =*/ 112).uint32(message.droppedLinksCount);\n                        if (message.status != null && Object.hasOwnProperty.call(message, \"status\"))\n                            $root.opentelemetry.proto.trace.v1.Status.encode(message.status, writer.uint32(/* id 15, wireType 2 =*/ 122).fork()).ldelim();\n                        return writer;\n                    };\n                    /**\n                     * Encodes the specified Span message, length delimited. Does not implicitly {@link opentelemetry.proto.trace.v1.Span.verify|verify} messages.\n                     * @function encodeDelimited\n                     * @memberof opentelemetry.proto.trace.v1.Span\n                     * @static\n                     * @param {opentelemetry.proto.trace.v1.ISpan} message Span message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    Span.encodeDelimited = function encodeDelimited(message, writer) {\n                        return this.encode(message, writer).ldelim();\n                    };\n                    /**\n                     * Decodes a Span message from the specified reader or buffer.\n                     * @function decode\n                     * @memberof opentelemetry.proto.trace.v1.Span\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @param {number} [length] Message length if known beforehand\n                     * @returns {opentelemetry.proto.trace.v1.Span} Span\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    Span.decode = function decode(reader, length) {\n                        if (!(reader instanceof $Reader))\n                            reader = $Reader.create(reader);\n                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.opentelemetry.proto.trace.v1.Span();\n                        while (reader.pos < end) {\n                            var tag = reader.uint32();\n                            switch (tag >>> 3) {\n                                case 1: {\n                                    message.traceId = reader.bytes();\n                                    break;\n                                }\n                                case 2: {\n                                    message.spanId = reader.bytes();\n                                    break;\n                                }\n                                case 3: {\n                                    message.traceState = reader.string();\n                                    break;\n                                }\n                                case 4: {\n                                    message.parentSpanId = reader.bytes();\n                                    break;\n                                }\n                                case 5: {\n                                    message.name = reader.string();\n                                    break;\n                                }\n                                case 6: {\n                                    message.kind = reader.int32();\n                                    break;\n                                }\n                                case 7: {\n                                    message.startTimeUnixNano = reader.fixed64();\n                                    break;\n                                }\n                                case 8: {\n                                    message.endTimeUnixNano = reader.fixed64();\n                                    break;\n                                }\n                                case 9: {\n                                    if (!(message.attributes && message.attributes.length))\n                                        message.attributes = [];\n                                    message.attributes.push($root.opentelemetry.proto.common.v1.KeyValue.decode(reader, reader.uint32()));\n                                    break;\n                                }\n                                case 10: {\n                                    message.droppedAttributesCount = reader.uint32();\n                                    break;\n                                }\n                                case 11: {\n                                    if (!(message.events && message.events.length))\n                                        message.events = [];\n                                    message.events.push($root.opentelemetry.proto.trace.v1.Span.Event.decode(reader, reader.uint32()));\n                                    break;\n                                }\n                                case 12: {\n                                    message.droppedEventsCount = reader.uint32();\n                                    break;\n                                }\n                                case 13: {\n                                    if (!(message.links && message.links.length))\n                                        message.links = [];\n                                    message.links.push($root.opentelemetry.proto.trace.v1.Span.Link.decode(reader, reader.uint32()));\n                                    break;\n                                }\n                                case 14: {\n                                    message.droppedLinksCount = reader.uint32();\n                                    break;\n                                }\n                                case 15: {\n                                    message.status = $root.opentelemetry.proto.trace.v1.Status.decode(reader, reader.uint32());\n                                    break;\n                                }\n                                default:\n                                    reader.skipType(tag & 7);\n                                    break;\n                            }\n                        }\n                        return message;\n                    };\n                    /**\n                     * Decodes a Span message from the specified reader or buffer, length delimited.\n                     * @function decodeDelimited\n                     * @memberof opentelemetry.proto.trace.v1.Span\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @returns {opentelemetry.proto.trace.v1.Span} Span\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    Span.decodeDelimited = function decodeDelimited(reader) {\n                        if (!(reader instanceof $Reader))\n                            reader = new $Reader(reader);\n                        return this.decode(reader, reader.uint32());\n                    };\n                    /**\n                     * Verifies a Span message.\n                     * @function verify\n                     * @memberof opentelemetry.proto.trace.v1.Span\n                     * @static\n                     * @param {Object.<string,*>} message Plain object to verify\n                     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                     */\n                    Span.verify = function verify(message) {\n                        if (typeof message !== \"object\" || message === null)\n                            return \"object expected\";\n                        if (message.traceId != null && message.hasOwnProperty(\"traceId\"))\n                            if (!(message.traceId && typeof message.traceId.length === \"number\" || $util.isString(message.traceId)))\n                                return \"traceId: buffer expected\";\n                        if (message.spanId != null && message.hasOwnProperty(\"spanId\"))\n                            if (!(message.spanId && typeof message.spanId.length === \"number\" || $util.isString(message.spanId)))\n                                return \"spanId: buffer expected\";\n                        if (message.traceState != null && message.hasOwnProperty(\"traceState\"))\n                            if (!$util.isString(message.traceState))\n                                return \"traceState: string expected\";\n                        if (message.parentSpanId != null && message.hasOwnProperty(\"parentSpanId\"))\n                            if (!(message.parentSpanId && typeof message.parentSpanId.length === \"number\" || $util.isString(message.parentSpanId)))\n                                return \"parentSpanId: buffer expected\";\n                        if (message.name != null && message.hasOwnProperty(\"name\"))\n                            if (!$util.isString(message.name))\n                                return \"name: string expected\";\n                        if (message.kind != null && message.hasOwnProperty(\"kind\"))\n                            switch (message.kind) {\n                                default:\n                                    return \"kind: enum value expected\";\n                                case 0:\n                                case 1:\n                                case 2:\n                                case 3:\n                                case 4:\n                                case 5:\n                                    break;\n                            }\n                        if (message.startTimeUnixNano != null && message.hasOwnProperty(\"startTimeUnixNano\"))\n                            if (!$util.isInteger(message.startTimeUnixNano) && !(message.startTimeUnixNano && $util.isInteger(message.startTimeUnixNano.low) && $util.isInteger(message.startTimeUnixNano.high)))\n                                return \"startTimeUnixNano: integer|Long expected\";\n                        if (message.endTimeUnixNano != null && message.hasOwnProperty(\"endTimeUnixNano\"))\n                            if (!$util.isInteger(message.endTimeUnixNano) && !(message.endTimeUnixNano && $util.isInteger(message.endTimeUnixNano.low) && $util.isInteger(message.endTimeUnixNano.high)))\n                                return \"endTimeUnixNano: integer|Long expected\";\n                        if (message.attributes != null && message.hasOwnProperty(\"attributes\")) {\n                            if (!Array.isArray(message.attributes))\n                                return \"attributes: array expected\";\n                            for (var i = 0; i < message.attributes.length; ++i) {\n                                var error = $root.opentelemetry.proto.common.v1.KeyValue.verify(message.attributes[i]);\n                                if (error)\n                                    return \"attributes.\" + error;\n                            }\n                        }\n                        if (message.droppedAttributesCount != null && message.hasOwnProperty(\"droppedAttributesCount\"))\n                            if (!$util.isInteger(message.droppedAttributesCount))\n                                return \"droppedAttributesCount: integer expected\";\n                        if (message.events != null && message.hasOwnProperty(\"events\")) {\n                            if (!Array.isArray(message.events))\n                                return \"events: array expected\";\n                            for (var i = 0; i < message.events.length; ++i) {\n                                var error = $root.opentelemetry.proto.trace.v1.Span.Event.verify(message.events[i]);\n                                if (error)\n                                    return \"events.\" + error;\n                            }\n                        }\n                        if (message.droppedEventsCount != null && message.hasOwnProperty(\"droppedEventsCount\"))\n                            if (!$util.isInteger(message.droppedEventsCount))\n                                return \"droppedEventsCount: integer expected\";\n                        if (message.links != null && message.hasOwnProperty(\"links\")) {\n                            if (!Array.isArray(message.links))\n                                return \"links: array expected\";\n                            for (var i = 0; i < message.links.length; ++i) {\n                                var error = $root.opentelemetry.proto.trace.v1.Span.Link.verify(message.links[i]);\n                                if (error)\n                                    return \"links.\" + error;\n                            }\n                        }\n                        if (message.droppedLinksCount != null && message.hasOwnProperty(\"droppedLinksCount\"))\n                            if (!$util.isInteger(message.droppedLinksCount))\n                                return \"droppedLinksCount: integer expected\";\n                        if (message.status != null && message.hasOwnProperty(\"status\")) {\n                            var error = $root.opentelemetry.proto.trace.v1.Status.verify(message.status);\n                            if (error)\n                                return \"status.\" + error;\n                        }\n                        return null;\n                    };\n                    /**\n                     * Creates a Span message from a plain object. Also converts values to their respective internal types.\n                     * @function fromObject\n                     * @memberof opentelemetry.proto.trace.v1.Span\n                     * @static\n                     * @param {Object.<string,*>} object Plain object\n                     * @returns {opentelemetry.proto.trace.v1.Span} Span\n                     */\n                    Span.fromObject = function fromObject(object) {\n                        if (object instanceof $root.opentelemetry.proto.trace.v1.Span)\n                            return object;\n                        var message = new $root.opentelemetry.proto.trace.v1.Span();\n                        if (object.traceId != null)\n                            if (typeof object.traceId === \"string\")\n                                $util.base64.decode(object.traceId, message.traceId = $util.newBuffer($util.base64.length(object.traceId)), 0);\n                            else if (object.traceId.length >= 0)\n                                message.traceId = object.traceId;\n                        if (object.spanId != null)\n                            if (typeof object.spanId === \"string\")\n                                $util.base64.decode(object.spanId, message.spanId = $util.newBuffer($util.base64.length(object.spanId)), 0);\n                            else if (object.spanId.length >= 0)\n                                message.spanId = object.spanId;\n                        if (object.traceState != null)\n                            message.traceState = String(object.traceState);\n                        if (object.parentSpanId != null)\n                            if (typeof object.parentSpanId === \"string\")\n                                $util.base64.decode(object.parentSpanId, message.parentSpanId = $util.newBuffer($util.base64.length(object.parentSpanId)), 0);\n                            else if (object.parentSpanId.length >= 0)\n                                message.parentSpanId = object.parentSpanId;\n                        if (object.name != null)\n                            message.name = String(object.name);\n                        switch (object.kind) {\n                            default:\n                                if (typeof object.kind === \"number\") {\n                                    message.kind = object.kind;\n                                    break;\n                                }\n                                break;\n                            case \"SPAN_KIND_UNSPECIFIED\":\n                            case 0:\n                                message.kind = 0;\n                                break;\n                            case \"SPAN_KIND_INTERNAL\":\n                            case 1:\n                                message.kind = 1;\n                                break;\n                            case \"SPAN_KIND_SERVER\":\n                            case 2:\n                                message.kind = 2;\n                                break;\n                            case \"SPAN_KIND_CLIENT\":\n                            case 3:\n                                message.kind = 3;\n                                break;\n                            case \"SPAN_KIND_PRODUCER\":\n                            case 4:\n                                message.kind = 4;\n                                break;\n                            case \"SPAN_KIND_CONSUMER\":\n                            case 5:\n                                message.kind = 5;\n                                break;\n                        }\n                        if (object.startTimeUnixNano != null)\n                            if ($util.Long)\n                                (message.startTimeUnixNano = $util.Long.fromValue(object.startTimeUnixNano)).unsigned = false;\n                            else if (typeof object.startTimeUnixNano === \"string\")\n                                message.startTimeUnixNano = parseInt(object.startTimeUnixNano, 10);\n                            else if (typeof object.startTimeUnixNano === \"number\")\n                                message.startTimeUnixNano = object.startTimeUnixNano;\n                            else if (typeof object.startTimeUnixNano === \"object\")\n                                message.startTimeUnixNano = new $util.LongBits(object.startTimeUnixNano.low >>> 0, object.startTimeUnixNano.high >>> 0).toNumber();\n                        if (object.endTimeUnixNano != null)\n                            if ($util.Long)\n                                (message.endTimeUnixNano = $util.Long.fromValue(object.endTimeUnixNano)).unsigned = false;\n                            else if (typeof object.endTimeUnixNano === \"string\")\n                                message.endTimeUnixNano = parseInt(object.endTimeUnixNano, 10);\n                            else if (typeof object.endTimeUnixNano === \"number\")\n                                message.endTimeUnixNano = object.endTimeUnixNano;\n                            else if (typeof object.endTimeUnixNano === \"object\")\n                                message.endTimeUnixNano = new $util.LongBits(object.endTimeUnixNano.low >>> 0, object.endTimeUnixNano.high >>> 0).toNumber();\n                        if (object.attributes) {\n                            if (!Array.isArray(object.attributes))\n                                throw TypeError(\".opentelemetry.proto.trace.v1.Span.attributes: array expected\");\n                            message.attributes = [];\n                            for (var i = 0; i < object.attributes.length; ++i) {\n                                if (typeof object.attributes[i] !== \"object\")\n                                    throw TypeError(\".opentelemetry.proto.trace.v1.Span.attributes: object expected\");\n                                message.attributes[i] = $root.opentelemetry.proto.common.v1.KeyValue.fromObject(object.attributes[i]);\n                            }\n                        }\n                        if (object.droppedAttributesCount != null)\n                            message.droppedAttributesCount = object.droppedAttributesCount >>> 0;\n                        if (object.events) {\n                            if (!Array.isArray(object.events))\n                                throw TypeError(\".opentelemetry.proto.trace.v1.Span.events: array expected\");\n                            message.events = [];\n                            for (var i = 0; i < object.events.length; ++i) {\n                                if (typeof object.events[i] !== \"object\")\n                                    throw TypeError(\".opentelemetry.proto.trace.v1.Span.events: object expected\");\n                                message.events[i] = $root.opentelemetry.proto.trace.v1.Span.Event.fromObject(object.events[i]);\n                            }\n                        }\n                        if (object.droppedEventsCount != null)\n                            message.droppedEventsCount = object.droppedEventsCount >>> 0;\n                        if (object.links) {\n                            if (!Array.isArray(object.links))\n                                throw TypeError(\".opentelemetry.proto.trace.v1.Span.links: array expected\");\n                            message.links = [];\n                            for (var i = 0; i < object.links.length; ++i) {\n                                if (typeof object.links[i] !== \"object\")\n                                    throw TypeError(\".opentelemetry.proto.trace.v1.Span.links: object expected\");\n                                message.links[i] = $root.opentelemetry.proto.trace.v1.Span.Link.fromObject(object.links[i]);\n                            }\n                        }\n                        if (object.droppedLinksCount != null)\n                            message.droppedLinksCount = object.droppedLinksCount >>> 0;\n                        if (object.status != null) {\n                            if (typeof object.status !== \"object\")\n                                throw TypeError(\".opentelemetry.proto.trace.v1.Span.status: object expected\");\n                            message.status = $root.opentelemetry.proto.trace.v1.Status.fromObject(object.status);\n                        }\n                        return message;\n                    };\n                    /**\n                     * Creates a plain object from a Span message. Also converts values to other types if specified.\n                     * @function toObject\n                     * @memberof opentelemetry.proto.trace.v1.Span\n                     * @static\n                     * @param {opentelemetry.proto.trace.v1.Span} message Span\n                     * @param {$protobuf.IConversionOptions} [options] Conversion options\n                     * @returns {Object.<string,*>} Plain object\n                     */\n                    Span.toObject = function toObject(message, options) {\n                        if (!options)\n                            options = {};\n                        var object = {};\n                        if (options.arrays || options.defaults) {\n                            object.attributes = [];\n                            object.events = [];\n                            object.links = [];\n                        }\n                        if (options.defaults) {\n                            if (options.bytes === String)\n                                object.traceId = \"\";\n                            else {\n                                object.traceId = [];\n                                if (options.bytes !== Array)\n                                    object.traceId = $util.newBuffer(object.traceId);\n                            }\n                            if (options.bytes === String)\n                                object.spanId = \"\";\n                            else {\n                                object.spanId = [];\n                                if (options.bytes !== Array)\n                                    object.spanId = $util.newBuffer(object.spanId);\n                            }\n                            object.traceState = \"\";\n                            if (options.bytes === String)\n                                object.parentSpanId = \"\";\n                            else {\n                                object.parentSpanId = [];\n                                if (options.bytes !== Array)\n                                    object.parentSpanId = $util.newBuffer(object.parentSpanId);\n                            }\n                            object.name = \"\";\n                            object.kind = options.enums === String ? \"SPAN_KIND_UNSPECIFIED\" : 0;\n                            if ($util.Long) {\n                                var long = new $util.Long(0, 0, false);\n                                object.startTimeUnixNano = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                            }\n                            else\n                                object.startTimeUnixNano = options.longs === String ? \"0\" : 0;\n                            if ($util.Long) {\n                                var long = new $util.Long(0, 0, false);\n                                object.endTimeUnixNano = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                            }\n                            else\n                                object.endTimeUnixNano = options.longs === String ? \"0\" : 0;\n                            object.droppedAttributesCount = 0;\n                            object.droppedEventsCount = 0;\n                            object.droppedLinksCount = 0;\n                            object.status = null;\n                        }\n                        if (message.traceId != null && message.hasOwnProperty(\"traceId\"))\n                            object.traceId = options.bytes === String ? $util.base64.encode(message.traceId, 0, message.traceId.length) : options.bytes === Array ? Array.prototype.slice.call(message.traceId) : message.traceId;\n                        if (message.spanId != null && message.hasOwnProperty(\"spanId\"))\n                            object.spanId = options.bytes === String ? $util.base64.encode(message.spanId, 0, message.spanId.length) : options.bytes === Array ? Array.prototype.slice.call(message.spanId) : message.spanId;\n                        if (message.traceState != null && message.hasOwnProperty(\"traceState\"))\n                            object.traceState = message.traceState;\n                        if (message.parentSpanId != null && message.hasOwnProperty(\"parentSpanId\"))\n                            object.parentSpanId = options.bytes === String ? $util.base64.encode(message.parentSpanId, 0, message.parentSpanId.length) : options.bytes === Array ? Array.prototype.slice.call(message.parentSpanId) : message.parentSpanId;\n                        if (message.name != null && message.hasOwnProperty(\"name\"))\n                            object.name = message.name;\n                        if (message.kind != null && message.hasOwnProperty(\"kind\"))\n                            object.kind = options.enums === String ? $root.opentelemetry.proto.trace.v1.Span.SpanKind[message.kind] === undefined ? message.kind : $root.opentelemetry.proto.trace.v1.Span.SpanKind[message.kind] : message.kind;\n                        if (message.startTimeUnixNano != null && message.hasOwnProperty(\"startTimeUnixNano\"))\n                            if (typeof message.startTimeUnixNano === \"number\")\n                                object.startTimeUnixNano = options.longs === String ? String(message.startTimeUnixNano) : message.startTimeUnixNano;\n                            else\n                                object.startTimeUnixNano = options.longs === String ? $util.Long.prototype.toString.call(message.startTimeUnixNano) : options.longs === Number ? new $util.LongBits(message.startTimeUnixNano.low >>> 0, message.startTimeUnixNano.high >>> 0).toNumber() : message.startTimeUnixNano;\n                        if (message.endTimeUnixNano != null && message.hasOwnProperty(\"endTimeUnixNano\"))\n                            if (typeof message.endTimeUnixNano === \"number\")\n                                object.endTimeUnixNano = options.longs === String ? String(message.endTimeUnixNano) : message.endTimeUnixNano;\n                            else\n                                object.endTimeUnixNano = options.longs === String ? $util.Long.prototype.toString.call(message.endTimeUnixNano) : options.longs === Number ? new $util.LongBits(message.endTimeUnixNano.low >>> 0, message.endTimeUnixNano.high >>> 0).toNumber() : message.endTimeUnixNano;\n                        if (message.attributes && message.attributes.length) {\n                            object.attributes = [];\n                            for (var j = 0; j < message.attributes.length; ++j)\n                                object.attributes[j] = $root.opentelemetry.proto.common.v1.KeyValue.toObject(message.attributes[j], options);\n                        }\n                        if (message.droppedAttributesCount != null && message.hasOwnProperty(\"droppedAttributesCount\"))\n                            object.droppedAttributesCount = message.droppedAttributesCount;\n                        if (message.events && message.events.length) {\n                            object.events = [];\n                            for (var j = 0; j < message.events.length; ++j)\n                                object.events[j] = $root.opentelemetry.proto.trace.v1.Span.Event.toObject(message.events[j], options);\n                        }\n                        if (message.droppedEventsCount != null && message.hasOwnProperty(\"droppedEventsCount\"))\n                            object.droppedEventsCount = message.droppedEventsCount;\n                        if (message.links && message.links.length) {\n                            object.links = [];\n                            for (var j = 0; j < message.links.length; ++j)\n                                object.links[j] = $root.opentelemetry.proto.trace.v1.Span.Link.toObject(message.links[j], options);\n                        }\n                        if (message.droppedLinksCount != null && message.hasOwnProperty(\"droppedLinksCount\"))\n                            object.droppedLinksCount = message.droppedLinksCount;\n                        if (message.status != null && message.hasOwnProperty(\"status\"))\n                            object.status = $root.opentelemetry.proto.trace.v1.Status.toObject(message.status, options);\n                        return object;\n                    };\n                    /**\n                     * Converts this Span to JSON.\n                     * @function toJSON\n                     * @memberof opentelemetry.proto.trace.v1.Span\n                     * @instance\n                     * @returns {Object.<string,*>} JSON object\n                     */\n                    Span.prototype.toJSON = function toJSON() {\n                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                    };\n                    /**\n                     * Gets the default type url for Span\n                     * @function getTypeUrl\n                     * @memberof opentelemetry.proto.trace.v1.Span\n                     * @static\n                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n                     * @returns {string} The default type url\n                     */\n                    Span.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                        if (typeUrlPrefix === undefined) {\n                            typeUrlPrefix = \"type.googleapis.com\";\n                        }\n                        return typeUrlPrefix + \"/opentelemetry.proto.trace.v1.Span\";\n                    };\n                    /**\n                     * SpanKind enum.\n                     * @name opentelemetry.proto.trace.v1.Span.SpanKind\n                     * @enum {number}\n                     * @property {number} SPAN_KIND_UNSPECIFIED=0 SPAN_KIND_UNSPECIFIED value\n                     * @property {number} SPAN_KIND_INTERNAL=1 SPAN_KIND_INTERNAL value\n                     * @property {number} SPAN_KIND_SERVER=2 SPAN_KIND_SERVER value\n                     * @property {number} SPAN_KIND_CLIENT=3 SPAN_KIND_CLIENT value\n                     * @property {number} SPAN_KIND_PRODUCER=4 SPAN_KIND_PRODUCER value\n                     * @property {number} SPAN_KIND_CONSUMER=5 SPAN_KIND_CONSUMER value\n                     */\n                    Span.SpanKind = (function () {\n                        var valuesById = {}, values = Object.create(valuesById);\n                        values[valuesById[0] = \"SPAN_KIND_UNSPECIFIED\"] = 0;\n                        values[valuesById[1] = \"SPAN_KIND_INTERNAL\"] = 1;\n                        values[valuesById[2] = \"SPAN_KIND_SERVER\"] = 2;\n                        values[valuesById[3] = \"SPAN_KIND_CLIENT\"] = 3;\n                        values[valuesById[4] = \"SPAN_KIND_PRODUCER\"] = 4;\n                        values[valuesById[5] = \"SPAN_KIND_CONSUMER\"] = 5;\n                        return values;\n                    })();\n                    Span.Event = (function () {\n                        /**\n                         * Properties of an Event.\n                         * @memberof opentelemetry.proto.trace.v1.Span\n                         * @interface IEvent\n                         * @property {number|Long|null} [timeUnixNano] Event timeUnixNano\n                         * @property {string|null} [name] Event name\n                         * @property {Array.<opentelemetry.proto.common.v1.IKeyValue>|null} [attributes] Event attributes\n                         * @property {number|null} [droppedAttributesCount] Event droppedAttributesCount\n                         */\n                        /**\n                         * Constructs a new Event.\n                         * @memberof opentelemetry.proto.trace.v1.Span\n                         * @classdesc Represents an Event.\n                         * @implements IEvent\n                         * @constructor\n                         * @param {opentelemetry.proto.trace.v1.Span.IEvent=} [properties] Properties to set\n                         */\n                        function Event(properties) {\n                            this.attributes = [];\n                            if (properties)\n                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                                    if (properties[keys[i]] != null)\n                                        this[keys[i]] = properties[keys[i]];\n                        }\n                        /**\n                         * Event timeUnixNano.\n                         * @member {number|Long|null|undefined} timeUnixNano\n                         * @memberof opentelemetry.proto.trace.v1.Span.Event\n                         * @instance\n                         */\n                        Event.prototype.timeUnixNano = null;\n                        /**\n                         * Event name.\n                         * @member {string|null|undefined} name\n                         * @memberof opentelemetry.proto.trace.v1.Span.Event\n                         * @instance\n                         */\n                        Event.prototype.name = null;\n                        /**\n                         * Event attributes.\n                         * @member {Array.<opentelemetry.proto.common.v1.IKeyValue>} attributes\n                         * @memberof opentelemetry.proto.trace.v1.Span.Event\n                         * @instance\n                         */\n                        Event.prototype.attributes = $util.emptyArray;\n                        /**\n                         * Event droppedAttributesCount.\n                         * @member {number|null|undefined} droppedAttributesCount\n                         * @memberof opentelemetry.proto.trace.v1.Span.Event\n                         * @instance\n                         */\n                        Event.prototype.droppedAttributesCount = null;\n                        /**\n                         * Creates a new Event instance using the specified properties.\n                         * @function create\n                         * @memberof opentelemetry.proto.trace.v1.Span.Event\n                         * @static\n                         * @param {opentelemetry.proto.trace.v1.Span.IEvent=} [properties] Properties to set\n                         * @returns {opentelemetry.proto.trace.v1.Span.Event} Event instance\n                         */\n                        Event.create = function create(properties) {\n                            return new Event(properties);\n                        };\n                        /**\n                         * Encodes the specified Event message. Does not implicitly {@link opentelemetry.proto.trace.v1.Span.Event.verify|verify} messages.\n                         * @function encode\n                         * @memberof opentelemetry.proto.trace.v1.Span.Event\n                         * @static\n                         * @param {opentelemetry.proto.trace.v1.Span.IEvent} message Event message or plain object to encode\n                         * @param {$protobuf.Writer} [writer] Writer to encode to\n                         * @returns {$protobuf.Writer} Writer\n                         */\n                        Event.encode = function encode(message, writer) {\n                            if (!writer)\n                                writer = $Writer.create();\n                            if (message.timeUnixNano != null && Object.hasOwnProperty.call(message, \"timeUnixNano\"))\n                                writer.uint32(/* id 1, wireType 1 =*/ 9).fixed64(message.timeUnixNano);\n                            if (message.name != null && Object.hasOwnProperty.call(message, \"name\"))\n                                writer.uint32(/* id 2, wireType 2 =*/ 18).string(message.name);\n                            if (message.attributes != null && message.attributes.length)\n                                for (var i = 0; i < message.attributes.length; ++i)\n                                    $root.opentelemetry.proto.common.v1.KeyValue.encode(message.attributes[i], writer.uint32(/* id 3, wireType 2 =*/ 26).fork()).ldelim();\n                            if (message.droppedAttributesCount != null && Object.hasOwnProperty.call(message, \"droppedAttributesCount\"))\n                                writer.uint32(/* id 4, wireType 0 =*/ 32).uint32(message.droppedAttributesCount);\n                            return writer;\n                        };\n                        /**\n                         * Encodes the specified Event message, length delimited. Does not implicitly {@link opentelemetry.proto.trace.v1.Span.Event.verify|verify} messages.\n                         * @function encodeDelimited\n                         * @memberof opentelemetry.proto.trace.v1.Span.Event\n                         * @static\n                         * @param {opentelemetry.proto.trace.v1.Span.IEvent} message Event message or plain object to encode\n                         * @param {$protobuf.Writer} [writer] Writer to encode to\n                         * @returns {$protobuf.Writer} Writer\n                         */\n                        Event.encodeDelimited = function encodeDelimited(message, writer) {\n                            return this.encode(message, writer).ldelim();\n                        };\n                        /**\n                         * Decodes an Event message from the specified reader or buffer.\n                         * @function decode\n                         * @memberof opentelemetry.proto.trace.v1.Span.Event\n                         * @static\n                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                         * @param {number} [length] Message length if known beforehand\n                         * @returns {opentelemetry.proto.trace.v1.Span.Event} Event\n                         * @throws {Error} If the payload is not a reader or valid buffer\n                         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                         */\n                        Event.decode = function decode(reader, length) {\n                            if (!(reader instanceof $Reader))\n                                reader = $Reader.create(reader);\n                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.opentelemetry.proto.trace.v1.Span.Event();\n                            while (reader.pos < end) {\n                                var tag = reader.uint32();\n                                switch (tag >>> 3) {\n                                    case 1: {\n                                        message.timeUnixNano = reader.fixed64();\n                                        break;\n                                    }\n                                    case 2: {\n                                        message.name = reader.string();\n                                        break;\n                                    }\n                                    case 3: {\n                                        if (!(message.attributes && message.attributes.length))\n                                            message.attributes = [];\n                                        message.attributes.push($root.opentelemetry.proto.common.v1.KeyValue.decode(reader, reader.uint32()));\n                                        break;\n                                    }\n                                    case 4: {\n                                        message.droppedAttributesCount = reader.uint32();\n                                        break;\n                                    }\n                                    default:\n                                        reader.skipType(tag & 7);\n                                        break;\n                                }\n                            }\n                            return message;\n                        };\n                        /**\n                         * Decodes an Event message from the specified reader or buffer, length delimited.\n                         * @function decodeDelimited\n                         * @memberof opentelemetry.proto.trace.v1.Span.Event\n                         * @static\n                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                         * @returns {opentelemetry.proto.trace.v1.Span.Event} Event\n                         * @throws {Error} If the payload is not a reader or valid buffer\n                         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                         */\n                        Event.decodeDelimited = function decodeDelimited(reader) {\n                            if (!(reader instanceof $Reader))\n                                reader = new $Reader(reader);\n                            return this.decode(reader, reader.uint32());\n                        };\n                        /**\n                         * Verifies an Event message.\n                         * @function verify\n                         * @memberof opentelemetry.proto.trace.v1.Span.Event\n                         * @static\n                         * @param {Object.<string,*>} message Plain object to verify\n                         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                         */\n                        Event.verify = function verify(message) {\n                            if (typeof message !== \"object\" || message === null)\n                                return \"object expected\";\n                            if (message.timeUnixNano != null && message.hasOwnProperty(\"timeUnixNano\"))\n                                if (!$util.isInteger(message.timeUnixNano) && !(message.timeUnixNano && $util.isInteger(message.timeUnixNano.low) && $util.isInteger(message.timeUnixNano.high)))\n                                    return \"timeUnixNano: integer|Long expected\";\n                            if (message.name != null && message.hasOwnProperty(\"name\"))\n                                if (!$util.isString(message.name))\n                                    return \"name: string expected\";\n                            if (message.attributes != null && message.hasOwnProperty(\"attributes\")) {\n                                if (!Array.isArray(message.attributes))\n                                    return \"attributes: array expected\";\n                                for (var i = 0; i < message.attributes.length; ++i) {\n                                    var error = $root.opentelemetry.proto.common.v1.KeyValue.verify(message.attributes[i]);\n                                    if (error)\n                                        return \"attributes.\" + error;\n                                }\n                            }\n                            if (message.droppedAttributesCount != null && message.hasOwnProperty(\"droppedAttributesCount\"))\n                                if (!$util.isInteger(message.droppedAttributesCount))\n                                    return \"droppedAttributesCount: integer expected\";\n                            return null;\n                        };\n                        /**\n                         * Creates an Event message from a plain object. Also converts values to their respective internal types.\n                         * @function fromObject\n                         * @memberof opentelemetry.proto.trace.v1.Span.Event\n                         * @static\n                         * @param {Object.<string,*>} object Plain object\n                         * @returns {opentelemetry.proto.trace.v1.Span.Event} Event\n                         */\n                        Event.fromObject = function fromObject(object) {\n                            if (object instanceof $root.opentelemetry.proto.trace.v1.Span.Event)\n                                return object;\n                            var message = new $root.opentelemetry.proto.trace.v1.Span.Event();\n                            if (object.timeUnixNano != null)\n                                if ($util.Long)\n                                    (message.timeUnixNano = $util.Long.fromValue(object.timeUnixNano)).unsigned = false;\n                                else if (typeof object.timeUnixNano === \"string\")\n                                    message.timeUnixNano = parseInt(object.timeUnixNano, 10);\n                                else if (typeof object.timeUnixNano === \"number\")\n                                    message.timeUnixNano = object.timeUnixNano;\n                                else if (typeof object.timeUnixNano === \"object\")\n                                    message.timeUnixNano = new $util.LongBits(object.timeUnixNano.low >>> 0, object.timeUnixNano.high >>> 0).toNumber();\n                            if (object.name != null)\n                                message.name = String(object.name);\n                            if (object.attributes) {\n                                if (!Array.isArray(object.attributes))\n                                    throw TypeError(\".opentelemetry.proto.trace.v1.Span.Event.attributes: array expected\");\n                                message.attributes = [];\n                                for (var i = 0; i < object.attributes.length; ++i) {\n                                    if (typeof object.attributes[i] !== \"object\")\n                                        throw TypeError(\".opentelemetry.proto.trace.v1.Span.Event.attributes: object expected\");\n                                    message.attributes[i] = $root.opentelemetry.proto.common.v1.KeyValue.fromObject(object.attributes[i]);\n                                }\n                            }\n                            if (object.droppedAttributesCount != null)\n                                message.droppedAttributesCount = object.droppedAttributesCount >>> 0;\n                            return message;\n                        };\n                        /**\n                         * Creates a plain object from an Event message. Also converts values to other types if specified.\n                         * @function toObject\n                         * @memberof opentelemetry.proto.trace.v1.Span.Event\n                         * @static\n                         * @param {opentelemetry.proto.trace.v1.Span.Event} message Event\n                         * @param {$protobuf.IConversionOptions} [options] Conversion options\n                         * @returns {Object.<string,*>} Plain object\n                         */\n                        Event.toObject = function toObject(message, options) {\n                            if (!options)\n                                options = {};\n                            var object = {};\n                            if (options.arrays || options.defaults)\n                                object.attributes = [];\n                            if (options.defaults) {\n                                if ($util.Long) {\n                                    var long = new $util.Long(0, 0, false);\n                                    object.timeUnixNano = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                                }\n                                else\n                                    object.timeUnixNano = options.longs === String ? \"0\" : 0;\n                                object.name = \"\";\n                                object.droppedAttributesCount = 0;\n                            }\n                            if (message.timeUnixNano != null && message.hasOwnProperty(\"timeUnixNano\"))\n                                if (typeof message.timeUnixNano === \"number\")\n                                    object.timeUnixNano = options.longs === String ? String(message.timeUnixNano) : message.timeUnixNano;\n                                else\n                                    object.timeUnixNano = options.longs === String ? $util.Long.prototype.toString.call(message.timeUnixNano) : options.longs === Number ? new $util.LongBits(message.timeUnixNano.low >>> 0, message.timeUnixNano.high >>> 0).toNumber() : message.timeUnixNano;\n                            if (message.name != null && message.hasOwnProperty(\"name\"))\n                                object.name = message.name;\n                            if (message.attributes && message.attributes.length) {\n                                object.attributes = [];\n                                for (var j = 0; j < message.attributes.length; ++j)\n                                    object.attributes[j] = $root.opentelemetry.proto.common.v1.KeyValue.toObject(message.attributes[j], options);\n                            }\n                            if (message.droppedAttributesCount != null && message.hasOwnProperty(\"droppedAttributesCount\"))\n                                object.droppedAttributesCount = message.droppedAttributesCount;\n                            return object;\n                        };\n                        /**\n                         * Converts this Event to JSON.\n                         * @function toJSON\n                         * @memberof opentelemetry.proto.trace.v1.Span.Event\n                         * @instance\n                         * @returns {Object.<string,*>} JSON object\n                         */\n                        Event.prototype.toJSON = function toJSON() {\n                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                        };\n                        /**\n                         * Gets the default type url for Event\n                         * @function getTypeUrl\n                         * @memberof opentelemetry.proto.trace.v1.Span.Event\n                         * @static\n                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n                         * @returns {string} The default type url\n                         */\n                        Event.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                            if (typeUrlPrefix === undefined) {\n                                typeUrlPrefix = \"type.googleapis.com\";\n                            }\n                            return typeUrlPrefix + \"/opentelemetry.proto.trace.v1.Span.Event\";\n                        };\n                        return Event;\n                    })();\n                    Span.Link = (function () {\n                        /**\n                         * Properties of a Link.\n                         * @memberof opentelemetry.proto.trace.v1.Span\n                         * @interface ILink\n                         * @property {Uint8Array|null} [traceId] Link traceId\n                         * @property {Uint8Array|null} [spanId] Link spanId\n                         * @property {string|null} [traceState] Link traceState\n                         * @property {Array.<opentelemetry.proto.common.v1.IKeyValue>|null} [attributes] Link attributes\n                         * @property {number|null} [droppedAttributesCount] Link droppedAttributesCount\n                         */\n                        /**\n                         * Constructs a new Link.\n                         * @memberof opentelemetry.proto.trace.v1.Span\n                         * @classdesc Represents a Link.\n                         * @implements ILink\n                         * @constructor\n                         * @param {opentelemetry.proto.trace.v1.Span.ILink=} [properties] Properties to set\n                         */\n                        function Link(properties) {\n                            this.attributes = [];\n                            if (properties)\n                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                                    if (properties[keys[i]] != null)\n                                        this[keys[i]] = properties[keys[i]];\n                        }\n                        /**\n                         * Link traceId.\n                         * @member {Uint8Array|null|undefined} traceId\n                         * @memberof opentelemetry.proto.trace.v1.Span.Link\n                         * @instance\n                         */\n                        Link.prototype.traceId = null;\n                        /**\n                         * Link spanId.\n                         * @member {Uint8Array|null|undefined} spanId\n                         * @memberof opentelemetry.proto.trace.v1.Span.Link\n                         * @instance\n                         */\n                        Link.prototype.spanId = null;\n                        /**\n                         * Link traceState.\n                         * @member {string|null|undefined} traceState\n                         * @memberof opentelemetry.proto.trace.v1.Span.Link\n                         * @instance\n                         */\n                        Link.prototype.traceState = null;\n                        /**\n                         * Link attributes.\n                         * @member {Array.<opentelemetry.proto.common.v1.IKeyValue>} attributes\n                         * @memberof opentelemetry.proto.trace.v1.Span.Link\n                         * @instance\n                         */\n                        Link.prototype.attributes = $util.emptyArray;\n                        /**\n                         * Link droppedAttributesCount.\n                         * @member {number|null|undefined} droppedAttributesCount\n                         * @memberof opentelemetry.proto.trace.v1.Span.Link\n                         * @instance\n                         */\n                        Link.prototype.droppedAttributesCount = null;\n                        /**\n                         * Creates a new Link instance using the specified properties.\n                         * @function create\n                         * @memberof opentelemetry.proto.trace.v1.Span.Link\n                         * @static\n                         * @param {opentelemetry.proto.trace.v1.Span.ILink=} [properties] Properties to set\n                         * @returns {opentelemetry.proto.trace.v1.Span.Link} Link instance\n                         */\n                        Link.create = function create(properties) {\n                            return new Link(properties);\n                        };\n                        /**\n                         * Encodes the specified Link message. Does not implicitly {@link opentelemetry.proto.trace.v1.Span.Link.verify|verify} messages.\n                         * @function encode\n                         * @memberof opentelemetry.proto.trace.v1.Span.Link\n                         * @static\n                         * @param {opentelemetry.proto.trace.v1.Span.ILink} message Link message or plain object to encode\n                         * @param {$protobuf.Writer} [writer] Writer to encode to\n                         * @returns {$protobuf.Writer} Writer\n                         */\n                        Link.encode = function encode(message, writer) {\n                            if (!writer)\n                                writer = $Writer.create();\n                            if (message.traceId != null && Object.hasOwnProperty.call(message, \"traceId\"))\n                                writer.uint32(/* id 1, wireType 2 =*/ 10).bytes(message.traceId);\n                            if (message.spanId != null && Object.hasOwnProperty.call(message, \"spanId\"))\n                                writer.uint32(/* id 2, wireType 2 =*/ 18).bytes(message.spanId);\n                            if (message.traceState != null && Object.hasOwnProperty.call(message, \"traceState\"))\n                                writer.uint32(/* id 3, wireType 2 =*/ 26).string(message.traceState);\n                            if (message.attributes != null && message.attributes.length)\n                                for (var i = 0; i < message.attributes.length; ++i)\n                                    $root.opentelemetry.proto.common.v1.KeyValue.encode(message.attributes[i], writer.uint32(/* id 4, wireType 2 =*/ 34).fork()).ldelim();\n                            if (message.droppedAttributesCount != null && Object.hasOwnProperty.call(message, \"droppedAttributesCount\"))\n                                writer.uint32(/* id 5, wireType 0 =*/ 40).uint32(message.droppedAttributesCount);\n                            return writer;\n                        };\n                        /**\n                         * Encodes the specified Link message, length delimited. Does not implicitly {@link opentelemetry.proto.trace.v1.Span.Link.verify|verify} messages.\n                         * @function encodeDelimited\n                         * @memberof opentelemetry.proto.trace.v1.Span.Link\n                         * @static\n                         * @param {opentelemetry.proto.trace.v1.Span.ILink} message Link message or plain object to encode\n                         * @param {$protobuf.Writer} [writer] Writer to encode to\n                         * @returns {$protobuf.Writer} Writer\n                         */\n                        Link.encodeDelimited = function encodeDelimited(message, writer) {\n                            return this.encode(message, writer).ldelim();\n                        };\n                        /**\n                         * Decodes a Link message from the specified reader or buffer.\n                         * @function decode\n                         * @memberof opentelemetry.proto.trace.v1.Span.Link\n                         * @static\n                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                         * @param {number} [length] Message length if known beforehand\n                         * @returns {opentelemetry.proto.trace.v1.Span.Link} Link\n                         * @throws {Error} If the payload is not a reader or valid buffer\n                         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                         */\n                        Link.decode = function decode(reader, length) {\n                            if (!(reader instanceof $Reader))\n                                reader = $Reader.create(reader);\n                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.opentelemetry.proto.trace.v1.Span.Link();\n                            while (reader.pos < end) {\n                                var tag = reader.uint32();\n                                switch (tag >>> 3) {\n                                    case 1: {\n                                        message.traceId = reader.bytes();\n                                        break;\n                                    }\n                                    case 2: {\n                                        message.spanId = reader.bytes();\n                                        break;\n                                    }\n                                    case 3: {\n                                        message.traceState = reader.string();\n                                        break;\n                                    }\n                                    case 4: {\n                                        if (!(message.attributes && message.attributes.length))\n                                            message.attributes = [];\n                                        message.attributes.push($root.opentelemetry.proto.common.v1.KeyValue.decode(reader, reader.uint32()));\n                                        break;\n                                    }\n                                    case 5: {\n                                        message.droppedAttributesCount = reader.uint32();\n                                        break;\n                                    }\n                                    default:\n                                        reader.skipType(tag & 7);\n                                        break;\n                                }\n                            }\n                            return message;\n                        };\n                        /**\n                         * Decodes a Link message from the specified reader or buffer, length delimited.\n                         * @function decodeDelimited\n                         * @memberof opentelemetry.proto.trace.v1.Span.Link\n                         * @static\n                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                         * @returns {opentelemetry.proto.trace.v1.Span.Link} Link\n                         * @throws {Error} If the payload is not a reader or valid buffer\n                         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                         */\n                        Link.decodeDelimited = function decodeDelimited(reader) {\n                            if (!(reader instanceof $Reader))\n                                reader = new $Reader(reader);\n                            return this.decode(reader, reader.uint32());\n                        };\n                        /**\n                         * Verifies a Link message.\n                         * @function verify\n                         * @memberof opentelemetry.proto.trace.v1.Span.Link\n                         * @static\n                         * @param {Object.<string,*>} message Plain object to verify\n                         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                         */\n                        Link.verify = function verify(message) {\n                            if (typeof message !== \"object\" || message === null)\n                                return \"object expected\";\n                            if (message.traceId != null && message.hasOwnProperty(\"traceId\"))\n                                if (!(message.traceId && typeof message.traceId.length === \"number\" || $util.isString(message.traceId)))\n                                    return \"traceId: buffer expected\";\n                            if (message.spanId != null && message.hasOwnProperty(\"spanId\"))\n                                if (!(message.spanId && typeof message.spanId.length === \"number\" || $util.isString(message.spanId)))\n                                    return \"spanId: buffer expected\";\n                            if (message.traceState != null && message.hasOwnProperty(\"traceState\"))\n                                if (!$util.isString(message.traceState))\n                                    return \"traceState: string expected\";\n                            if (message.attributes != null && message.hasOwnProperty(\"attributes\")) {\n                                if (!Array.isArray(message.attributes))\n                                    return \"attributes: array expected\";\n                                for (var i = 0; i < message.attributes.length; ++i) {\n                                    var error = $root.opentelemetry.proto.common.v1.KeyValue.verify(message.attributes[i]);\n                                    if (error)\n                                        return \"attributes.\" + error;\n                                }\n                            }\n                            if (message.droppedAttributesCount != null && message.hasOwnProperty(\"droppedAttributesCount\"))\n                                if (!$util.isInteger(message.droppedAttributesCount))\n                                    return \"droppedAttributesCount: integer expected\";\n                            return null;\n                        };\n                        /**\n                         * Creates a Link message from a plain object. Also converts values to their respective internal types.\n                         * @function fromObject\n                         * @memberof opentelemetry.proto.trace.v1.Span.Link\n                         * @static\n                         * @param {Object.<string,*>} object Plain object\n                         * @returns {opentelemetry.proto.trace.v1.Span.Link} Link\n                         */\n                        Link.fromObject = function fromObject(object) {\n                            if (object instanceof $root.opentelemetry.proto.trace.v1.Span.Link)\n                                return object;\n                            var message = new $root.opentelemetry.proto.trace.v1.Span.Link();\n                            if (object.traceId != null)\n                                if (typeof object.traceId === \"string\")\n                                    $util.base64.decode(object.traceId, message.traceId = $util.newBuffer($util.base64.length(object.traceId)), 0);\n                                else if (object.traceId.length >= 0)\n                                    message.traceId = object.traceId;\n                            if (object.spanId != null)\n                                if (typeof object.spanId === \"string\")\n                                    $util.base64.decode(object.spanId, message.spanId = $util.newBuffer($util.base64.length(object.spanId)), 0);\n                                else if (object.spanId.length >= 0)\n                                    message.spanId = object.spanId;\n                            if (object.traceState != null)\n                                message.traceState = String(object.traceState);\n                            if (object.attributes) {\n                                if (!Array.isArray(object.attributes))\n                                    throw TypeError(\".opentelemetry.proto.trace.v1.Span.Link.attributes: array expected\");\n                                message.attributes = [];\n                                for (var i = 0; i < object.attributes.length; ++i) {\n                                    if (typeof object.attributes[i] !== \"object\")\n                                        throw TypeError(\".opentelemetry.proto.trace.v1.Span.Link.attributes: object expected\");\n                                    message.attributes[i] = $root.opentelemetry.proto.common.v1.KeyValue.fromObject(object.attributes[i]);\n                                }\n                            }\n                            if (object.droppedAttributesCount != null)\n                                message.droppedAttributesCount = object.droppedAttributesCount >>> 0;\n                            return message;\n                        };\n                        /**\n                         * Creates a plain object from a Link message. Also converts values to other types if specified.\n                         * @function toObject\n                         * @memberof opentelemetry.proto.trace.v1.Span.Link\n                         * @static\n                         * @param {opentelemetry.proto.trace.v1.Span.Link} message Link\n                         * @param {$protobuf.IConversionOptions} [options] Conversion options\n                         * @returns {Object.<string,*>} Plain object\n                         */\n                        Link.toObject = function toObject(message, options) {\n                            if (!options)\n                                options = {};\n                            var object = {};\n                            if (options.arrays || options.defaults)\n                                object.attributes = [];\n                            if (options.defaults) {\n                                if (options.bytes === String)\n                                    object.traceId = \"\";\n                                else {\n                                    object.traceId = [];\n                                    if (options.bytes !== Array)\n                                        object.traceId = $util.newBuffer(object.traceId);\n                                }\n                                if (options.bytes === String)\n                                    object.spanId = \"\";\n                                else {\n                                    object.spanId = [];\n                                    if (options.bytes !== Array)\n                                        object.spanId = $util.newBuffer(object.spanId);\n                                }\n                                object.traceState = \"\";\n                                object.droppedAttributesCount = 0;\n                            }\n                            if (message.traceId != null && message.hasOwnProperty(\"traceId\"))\n                                object.traceId = options.bytes === String ? $util.base64.encode(message.traceId, 0, message.traceId.length) : options.bytes === Array ? Array.prototype.slice.call(message.traceId) : message.traceId;\n                            if (message.spanId != null && message.hasOwnProperty(\"spanId\"))\n                                object.spanId = options.bytes === String ? $util.base64.encode(message.spanId, 0, message.spanId.length) : options.bytes === Array ? Array.prototype.slice.call(message.spanId) : message.spanId;\n                            if (message.traceState != null && message.hasOwnProperty(\"traceState\"))\n                                object.traceState = message.traceState;\n                            if (message.attributes && message.attributes.length) {\n                                object.attributes = [];\n                                for (var j = 0; j < message.attributes.length; ++j)\n                                    object.attributes[j] = $root.opentelemetry.proto.common.v1.KeyValue.toObject(message.attributes[j], options);\n                            }\n                            if (message.droppedAttributesCount != null && message.hasOwnProperty(\"droppedAttributesCount\"))\n                                object.droppedAttributesCount = message.droppedAttributesCount;\n                            return object;\n                        };\n                        /**\n                         * Converts this Link to JSON.\n                         * @function toJSON\n                         * @memberof opentelemetry.proto.trace.v1.Span.Link\n                         * @instance\n                         * @returns {Object.<string,*>} JSON object\n                         */\n                        Link.prototype.toJSON = function toJSON() {\n                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                        };\n                        /**\n                         * Gets the default type url for Link\n                         * @function getTypeUrl\n                         * @memberof opentelemetry.proto.trace.v1.Span.Link\n                         * @static\n                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n                         * @returns {string} The default type url\n                         */\n                        Link.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                            if (typeUrlPrefix === undefined) {\n                                typeUrlPrefix = \"type.googleapis.com\";\n                            }\n                            return typeUrlPrefix + \"/opentelemetry.proto.trace.v1.Span.Link\";\n                        };\n                        return Link;\n                    })();\n                    return Span;\n                })();\n                v1.Status = (function () {\n                    /**\n                     * Properties of a Status.\n                     * @memberof opentelemetry.proto.trace.v1\n                     * @interface IStatus\n                     * @property {string|null} [message] Status message\n                     * @property {opentelemetry.proto.trace.v1.Status.StatusCode|null} [code] Status code\n                     */\n                    /**\n                     * Constructs a new Status.\n                     * @memberof opentelemetry.proto.trace.v1\n                     * @classdesc Represents a Status.\n                     * @implements IStatus\n                     * @constructor\n                     * @param {opentelemetry.proto.trace.v1.IStatus=} [properties] Properties to set\n                     */\n                    function Status(properties) {\n                        if (properties)\n                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                                if (properties[keys[i]] != null)\n                                    this[keys[i]] = properties[keys[i]];\n                    }\n                    /**\n                     * Status message.\n                     * @member {string|null|undefined} message\n                     * @memberof opentelemetry.proto.trace.v1.Status\n                     * @instance\n                     */\n                    Status.prototype.message = null;\n                    /**\n                     * Status code.\n                     * @member {opentelemetry.proto.trace.v1.Status.StatusCode|null|undefined} code\n                     * @memberof opentelemetry.proto.trace.v1.Status\n                     * @instance\n                     */\n                    Status.prototype.code = null;\n                    /**\n                     * Creates a new Status instance using the specified properties.\n                     * @function create\n                     * @memberof opentelemetry.proto.trace.v1.Status\n                     * @static\n                     * @param {opentelemetry.proto.trace.v1.IStatus=} [properties] Properties to set\n                     * @returns {opentelemetry.proto.trace.v1.Status} Status instance\n                     */\n                    Status.create = function create(properties) {\n                        return new Status(properties);\n                    };\n                    /**\n                     * Encodes the specified Status message. Does not implicitly {@link opentelemetry.proto.trace.v1.Status.verify|verify} messages.\n                     * @function encode\n                     * @memberof opentelemetry.proto.trace.v1.Status\n                     * @static\n                     * @param {opentelemetry.proto.trace.v1.IStatus} message Status message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    Status.encode = function encode(message, writer) {\n                        if (!writer)\n                            writer = $Writer.create();\n                        if (message.message != null && Object.hasOwnProperty.call(message, \"message\"))\n                            writer.uint32(/* id 2, wireType 2 =*/ 18).string(message.message);\n                        if (message.code != null && Object.hasOwnProperty.call(message, \"code\"))\n                            writer.uint32(/* id 3, wireType 0 =*/ 24).int32(message.code);\n                        return writer;\n                    };\n                    /**\n                     * Encodes the specified Status message, length delimited. Does not implicitly {@link opentelemetry.proto.trace.v1.Status.verify|verify} messages.\n                     * @function encodeDelimited\n                     * @memberof opentelemetry.proto.trace.v1.Status\n                     * @static\n                     * @param {opentelemetry.proto.trace.v1.IStatus} message Status message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    Status.encodeDelimited = function encodeDelimited(message, writer) {\n                        return this.encode(message, writer).ldelim();\n                    };\n                    /**\n                     * Decodes a Status message from the specified reader or buffer.\n                     * @function decode\n                     * @memberof opentelemetry.proto.trace.v1.Status\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @param {number} [length] Message length if known beforehand\n                     * @returns {opentelemetry.proto.trace.v1.Status} Status\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    Status.decode = function decode(reader, length) {\n                        if (!(reader instanceof $Reader))\n                            reader = $Reader.create(reader);\n                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.opentelemetry.proto.trace.v1.Status();\n                        while (reader.pos < end) {\n                            var tag = reader.uint32();\n                            switch (tag >>> 3) {\n                                case 2: {\n                                    message.message = reader.string();\n                                    break;\n                                }\n                                case 3: {\n                                    message.code = reader.int32();\n                                    break;\n                                }\n                                default:\n                                    reader.skipType(tag & 7);\n                                    break;\n                            }\n                        }\n                        return message;\n                    };\n                    /**\n                     * Decodes a Status message from the specified reader or buffer, length delimited.\n                     * @function decodeDelimited\n                     * @memberof opentelemetry.proto.trace.v1.Status\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @returns {opentelemetry.proto.trace.v1.Status} Status\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    Status.decodeDelimited = function decodeDelimited(reader) {\n                        if (!(reader instanceof $Reader))\n                            reader = new $Reader(reader);\n                        return this.decode(reader, reader.uint32());\n                    };\n                    /**\n                     * Verifies a Status message.\n                     * @function verify\n                     * @memberof opentelemetry.proto.trace.v1.Status\n                     * @static\n                     * @param {Object.<string,*>} message Plain object to verify\n                     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                     */\n                    Status.verify = function verify(message) {\n                        if (typeof message !== \"object\" || message === null)\n                            return \"object expected\";\n                        if (message.message != null && message.hasOwnProperty(\"message\"))\n                            if (!$util.isString(message.message))\n                                return \"message: string expected\";\n                        if (message.code != null && message.hasOwnProperty(\"code\"))\n                            switch (message.code) {\n                                default:\n                                    return \"code: enum value expected\";\n                                case 0:\n                                case 1:\n                                case 2:\n                                    break;\n                            }\n                        return null;\n                    };\n                    /**\n                     * Creates a Status message from a plain object. Also converts values to their respective internal types.\n                     * @function fromObject\n                     * @memberof opentelemetry.proto.trace.v1.Status\n                     * @static\n                     * @param {Object.<string,*>} object Plain object\n                     * @returns {opentelemetry.proto.trace.v1.Status} Status\n                     */\n                    Status.fromObject = function fromObject(object) {\n                        if (object instanceof $root.opentelemetry.proto.trace.v1.Status)\n                            return object;\n                        var message = new $root.opentelemetry.proto.trace.v1.Status();\n                        if (object.message != null)\n                            message.message = String(object.message);\n                        switch (object.code) {\n                            default:\n                                if (typeof object.code === \"number\") {\n                                    message.code = object.code;\n                                    break;\n                                }\n                                break;\n                            case \"STATUS_CODE_UNSET\":\n                            case 0:\n                                message.code = 0;\n                                break;\n                            case \"STATUS_CODE_OK\":\n                            case 1:\n                                message.code = 1;\n                                break;\n                            case \"STATUS_CODE_ERROR\":\n                            case 2:\n                                message.code = 2;\n                                break;\n                        }\n                        return message;\n                    };\n                    /**\n                     * Creates a plain object from a Status message. Also converts values to other types if specified.\n                     * @function toObject\n                     * @memberof opentelemetry.proto.trace.v1.Status\n                     * @static\n                     * @param {opentelemetry.proto.trace.v1.Status} message Status\n                     * @param {$protobuf.IConversionOptions} [options] Conversion options\n                     * @returns {Object.<string,*>} Plain object\n                     */\n                    Status.toObject = function toObject(message, options) {\n                        if (!options)\n                            options = {};\n                        var object = {};\n                        if (options.defaults) {\n                            object.message = \"\";\n                            object.code = options.enums === String ? \"STATUS_CODE_UNSET\" : 0;\n                        }\n                        if (message.message != null && message.hasOwnProperty(\"message\"))\n                            object.message = message.message;\n                        if (message.code != null && message.hasOwnProperty(\"code\"))\n                            object.code = options.enums === String ? $root.opentelemetry.proto.trace.v1.Status.StatusCode[message.code] === undefined ? message.code : $root.opentelemetry.proto.trace.v1.Status.StatusCode[message.code] : message.code;\n                        return object;\n                    };\n                    /**\n                     * Converts this Status to JSON.\n                     * @function toJSON\n                     * @memberof opentelemetry.proto.trace.v1.Status\n                     * @instance\n                     * @returns {Object.<string,*>} JSON object\n                     */\n                    Status.prototype.toJSON = function toJSON() {\n                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                    };\n                    /**\n                     * Gets the default type url for Status\n                     * @function getTypeUrl\n                     * @memberof opentelemetry.proto.trace.v1.Status\n                     * @static\n                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n                     * @returns {string} The default type url\n                     */\n                    Status.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                        if (typeUrlPrefix === undefined) {\n                            typeUrlPrefix = \"type.googleapis.com\";\n                        }\n                        return typeUrlPrefix + \"/opentelemetry.proto.trace.v1.Status\";\n                    };\n                    /**\n                     * StatusCode enum.\n                     * @name opentelemetry.proto.trace.v1.Status.StatusCode\n                     * @enum {number}\n                     * @property {number} STATUS_CODE_UNSET=0 STATUS_CODE_UNSET value\n                     * @property {number} STATUS_CODE_OK=1 STATUS_CODE_OK value\n                     * @property {number} STATUS_CODE_ERROR=2 STATUS_CODE_ERROR value\n                     */\n                    Status.StatusCode = (function () {\n                        var valuesById = {}, values = Object.create(valuesById);\n                        values[valuesById[0] = \"STATUS_CODE_UNSET\"] = 0;\n                        values[valuesById[1] = \"STATUS_CODE_OK\"] = 1;\n                        values[valuesById[2] = \"STATUS_CODE_ERROR\"] = 2;\n                        return values;\n                    })();\n                    return Status;\n                })();\n                return v1;\n            })();\n            return trace;\n        })();\n        proto.collector = (function () {\n            /**\n             * Namespace collector.\n             * @memberof opentelemetry.proto\n             * @namespace\n             */\n            var collector = {};\n            collector.trace = (function () {\n                /**\n                 * Namespace trace.\n                 * @memberof opentelemetry.proto.collector\n                 * @namespace\n                 */\n                var trace = {};\n                trace.v1 = (function () {\n                    /**\n                     * Namespace v1.\n                     * @memberof opentelemetry.proto.collector.trace\n                     * @namespace\n                     */\n                    var v1 = {};\n                    v1.TraceService = (function () {\n                        /**\n                         * Constructs a new TraceService service.\n                         * @memberof opentelemetry.proto.collector.trace.v1\n                         * @classdesc Represents a TraceService\n                         * @extends $protobuf.rpc.Service\n                         * @constructor\n                         * @param {$protobuf.RPCImpl} rpcImpl RPC implementation\n                         * @param {boolean} [requestDelimited=false] Whether requests are length-delimited\n                         * @param {boolean} [responseDelimited=false] Whether responses are length-delimited\n                         */\n                        function TraceService(rpcImpl, requestDelimited, responseDelimited) {\n                            $protobuf.rpc.Service.call(this, rpcImpl, requestDelimited, responseDelimited);\n                        }\n                        (TraceService.prototype = Object.create($protobuf.rpc.Service.prototype)).constructor = TraceService;\n                        /**\n                         * Creates new TraceService service using the specified rpc implementation.\n                         * @function create\n                         * @memberof opentelemetry.proto.collector.trace.v1.TraceService\n                         * @static\n                         * @param {$protobuf.RPCImpl} rpcImpl RPC implementation\n                         * @param {boolean} [requestDelimited=false] Whether requests are length-delimited\n                         * @param {boolean} [responseDelimited=false] Whether responses are length-delimited\n                         * @returns {TraceService} RPC service. Useful where requests and/or responses are streamed.\n                         */\n                        TraceService.create = function create(rpcImpl, requestDelimited, responseDelimited) {\n                            return new this(rpcImpl, requestDelimited, responseDelimited);\n                        };\n                        /**\n                         * Callback as used by {@link opentelemetry.proto.collector.trace.v1.TraceService#export_}.\n                         * @memberof opentelemetry.proto.collector.trace.v1.TraceService\n                         * @typedef ExportCallback\n                         * @type {function}\n                         * @param {Error|null} error Error, if any\n                         * @param {opentelemetry.proto.collector.trace.v1.ExportTraceServiceResponse} [response] ExportTraceServiceResponse\n                         */\n                        /**\n                         * Calls Export.\n                         * @function export\n                         * @memberof opentelemetry.proto.collector.trace.v1.TraceService\n                         * @instance\n                         * @param {opentelemetry.proto.collector.trace.v1.IExportTraceServiceRequest} request ExportTraceServiceRequest message or plain object\n                         * @param {opentelemetry.proto.collector.trace.v1.TraceService.ExportCallback} callback Node-style callback called with the error, if any, and ExportTraceServiceResponse\n                         * @returns {undefined}\n                         * @variation 1\n                         */\n                        Object.defineProperty(TraceService.prototype[\"export\"] = function export_(request, callback) {\n                            return this.rpcCall(export_, $root.opentelemetry.proto.collector.trace.v1.ExportTraceServiceRequest, $root.opentelemetry.proto.collector.trace.v1.ExportTraceServiceResponse, request, callback);\n                        }, \"name\", { value: \"Export\" });\n                        /**\n                         * Calls Export.\n                         * @function export\n                         * @memberof opentelemetry.proto.collector.trace.v1.TraceService\n                         * @instance\n                         * @param {opentelemetry.proto.collector.trace.v1.IExportTraceServiceRequest} request ExportTraceServiceRequest message or plain object\n                         * @returns {Promise<opentelemetry.proto.collector.trace.v1.ExportTraceServiceResponse>} Promise\n                         * @variation 2\n                         */\n                        return TraceService;\n                    })();\n                    v1.ExportTraceServiceRequest = (function () {\n                        /**\n                         * Properties of an ExportTraceServiceRequest.\n                         * @memberof opentelemetry.proto.collector.trace.v1\n                         * @interface IExportTraceServiceRequest\n                         * @property {Array.<opentelemetry.proto.trace.v1.IResourceSpans>|null} [resourceSpans] ExportTraceServiceRequest resourceSpans\n                         */\n                        /**\n                         * Constructs a new ExportTraceServiceRequest.\n                         * @memberof opentelemetry.proto.collector.trace.v1\n                         * @classdesc Represents an ExportTraceServiceRequest.\n                         * @implements IExportTraceServiceRequest\n                         * @constructor\n                         * @param {opentelemetry.proto.collector.trace.v1.IExportTraceServiceRequest=} [properties] Properties to set\n                         */\n                        function ExportTraceServiceRequest(properties) {\n                            this.resourceSpans = [];\n                            if (properties)\n                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                                    if (properties[keys[i]] != null)\n                                        this[keys[i]] = properties[keys[i]];\n                        }\n                        /**\n                         * ExportTraceServiceRequest resourceSpans.\n                         * @member {Array.<opentelemetry.proto.trace.v1.IResourceSpans>} resourceSpans\n                         * @memberof opentelemetry.proto.collector.trace.v1.ExportTraceServiceRequest\n                         * @instance\n                         */\n                        ExportTraceServiceRequest.prototype.resourceSpans = $util.emptyArray;\n                        /**\n                         * Creates a new ExportTraceServiceRequest instance using the specified properties.\n                         * @function create\n                         * @memberof opentelemetry.proto.collector.trace.v1.ExportTraceServiceRequest\n                         * @static\n                         * @param {opentelemetry.proto.collector.trace.v1.IExportTraceServiceRequest=} [properties] Properties to set\n                         * @returns {opentelemetry.proto.collector.trace.v1.ExportTraceServiceRequest} ExportTraceServiceRequest instance\n                         */\n                        ExportTraceServiceRequest.create = function create(properties) {\n                            return new ExportTraceServiceRequest(properties);\n                        };\n                        /**\n                         * Encodes the specified ExportTraceServiceRequest message. Does not implicitly {@link opentelemetry.proto.collector.trace.v1.ExportTraceServiceRequest.verify|verify} messages.\n                         * @function encode\n                         * @memberof opentelemetry.proto.collector.trace.v1.ExportTraceServiceRequest\n                         * @static\n                         * @param {opentelemetry.proto.collector.trace.v1.IExportTraceServiceRequest} message ExportTraceServiceRequest message or plain object to encode\n                         * @param {$protobuf.Writer} [writer] Writer to encode to\n                         * @returns {$protobuf.Writer} Writer\n                         */\n                        ExportTraceServiceRequest.encode = function encode(message, writer) {\n                            if (!writer)\n                                writer = $Writer.create();\n                            if (message.resourceSpans != null && message.resourceSpans.length)\n                                for (var i = 0; i < message.resourceSpans.length; ++i)\n                                    $root.opentelemetry.proto.trace.v1.ResourceSpans.encode(message.resourceSpans[i], writer.uint32(/* id 1, wireType 2 =*/ 10).fork()).ldelim();\n                            return writer;\n                        };\n                        /**\n                         * Encodes the specified ExportTraceServiceRequest message, length delimited. Does not implicitly {@link opentelemetry.proto.collector.trace.v1.ExportTraceServiceRequest.verify|verify} messages.\n                         * @function encodeDelimited\n                         * @memberof opentelemetry.proto.collector.trace.v1.ExportTraceServiceRequest\n                         * @static\n                         * @param {opentelemetry.proto.collector.trace.v1.IExportTraceServiceRequest} message ExportTraceServiceRequest message or plain object to encode\n                         * @param {$protobuf.Writer} [writer] Writer to encode to\n                         * @returns {$protobuf.Writer} Writer\n                         */\n                        ExportTraceServiceRequest.encodeDelimited = function encodeDelimited(message, writer) {\n                            return this.encode(message, writer).ldelim();\n                        };\n                        /**\n                         * Decodes an ExportTraceServiceRequest message from the specified reader or buffer.\n                         * @function decode\n                         * @memberof opentelemetry.proto.collector.trace.v1.ExportTraceServiceRequest\n                         * @static\n                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                         * @param {number} [length] Message length if known beforehand\n                         * @returns {opentelemetry.proto.collector.trace.v1.ExportTraceServiceRequest} ExportTraceServiceRequest\n                         * @throws {Error} If the payload is not a reader or valid buffer\n                         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                         */\n                        ExportTraceServiceRequest.decode = function decode(reader, length) {\n                            if (!(reader instanceof $Reader))\n                                reader = $Reader.create(reader);\n                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.opentelemetry.proto.collector.trace.v1.ExportTraceServiceRequest();\n                            while (reader.pos < end) {\n                                var tag = reader.uint32();\n                                switch (tag >>> 3) {\n                                    case 1: {\n                                        if (!(message.resourceSpans && message.resourceSpans.length))\n                                            message.resourceSpans = [];\n                                        message.resourceSpans.push($root.opentelemetry.proto.trace.v1.ResourceSpans.decode(reader, reader.uint32()));\n                                        break;\n                                    }\n                                    default:\n                                        reader.skipType(tag & 7);\n                                        break;\n                                }\n                            }\n                            return message;\n                        };\n                        /**\n                         * Decodes an ExportTraceServiceRequest message from the specified reader or buffer, length delimited.\n                         * @function decodeDelimited\n                         * @memberof opentelemetry.proto.collector.trace.v1.ExportTraceServiceRequest\n                         * @static\n                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                         * @returns {opentelemetry.proto.collector.trace.v1.ExportTraceServiceRequest} ExportTraceServiceRequest\n                         * @throws {Error} If the payload is not a reader or valid buffer\n                         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                         */\n                        ExportTraceServiceRequest.decodeDelimited = function decodeDelimited(reader) {\n                            if (!(reader instanceof $Reader))\n                                reader = new $Reader(reader);\n                            return this.decode(reader, reader.uint32());\n                        };\n                        /**\n                         * Verifies an ExportTraceServiceRequest message.\n                         * @function verify\n                         * @memberof opentelemetry.proto.collector.trace.v1.ExportTraceServiceRequest\n                         * @static\n                         * @param {Object.<string,*>} message Plain object to verify\n                         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                         */\n                        ExportTraceServiceRequest.verify = function verify(message) {\n                            if (typeof message !== \"object\" || message === null)\n                                return \"object expected\";\n                            if (message.resourceSpans != null && message.hasOwnProperty(\"resourceSpans\")) {\n                                if (!Array.isArray(message.resourceSpans))\n                                    return \"resourceSpans: array expected\";\n                                for (var i = 0; i < message.resourceSpans.length; ++i) {\n                                    var error = $root.opentelemetry.proto.trace.v1.ResourceSpans.verify(message.resourceSpans[i]);\n                                    if (error)\n                                        return \"resourceSpans.\" + error;\n                                }\n                            }\n                            return null;\n                        };\n                        /**\n                         * Creates an ExportTraceServiceRequest message from a plain object. Also converts values to their respective internal types.\n                         * @function fromObject\n                         * @memberof opentelemetry.proto.collector.trace.v1.ExportTraceServiceRequest\n                         * @static\n                         * @param {Object.<string,*>} object Plain object\n                         * @returns {opentelemetry.proto.collector.trace.v1.ExportTraceServiceRequest} ExportTraceServiceRequest\n                         */\n                        ExportTraceServiceRequest.fromObject = function fromObject(object) {\n                            if (object instanceof $root.opentelemetry.proto.collector.trace.v1.ExportTraceServiceRequest)\n                                return object;\n                            var message = new $root.opentelemetry.proto.collector.trace.v1.ExportTraceServiceRequest();\n                            if (object.resourceSpans) {\n                                if (!Array.isArray(object.resourceSpans))\n                                    throw TypeError(\".opentelemetry.proto.collector.trace.v1.ExportTraceServiceRequest.resourceSpans: array expected\");\n                                message.resourceSpans = [];\n                                for (var i = 0; i < object.resourceSpans.length; ++i) {\n                                    if (typeof object.resourceSpans[i] !== \"object\")\n                                        throw TypeError(\".opentelemetry.proto.collector.trace.v1.ExportTraceServiceRequest.resourceSpans: object expected\");\n                                    message.resourceSpans[i] = $root.opentelemetry.proto.trace.v1.ResourceSpans.fromObject(object.resourceSpans[i]);\n                                }\n                            }\n                            return message;\n                        };\n                        /**\n                         * Creates a plain object from an ExportTraceServiceRequest message. Also converts values to other types if specified.\n                         * @function toObject\n                         * @memberof opentelemetry.proto.collector.trace.v1.ExportTraceServiceRequest\n                         * @static\n                         * @param {opentelemetry.proto.collector.trace.v1.ExportTraceServiceRequest} message ExportTraceServiceRequest\n                         * @param {$protobuf.IConversionOptions} [options] Conversion options\n                         * @returns {Object.<string,*>} Plain object\n                         */\n                        ExportTraceServiceRequest.toObject = function toObject(message, options) {\n                            if (!options)\n                                options = {};\n                            var object = {};\n                            if (options.arrays || options.defaults)\n                                object.resourceSpans = [];\n                            if (message.resourceSpans && message.resourceSpans.length) {\n                                object.resourceSpans = [];\n                                for (var j = 0; j < message.resourceSpans.length; ++j)\n                                    object.resourceSpans[j] = $root.opentelemetry.proto.trace.v1.ResourceSpans.toObject(message.resourceSpans[j], options);\n                            }\n                            return object;\n                        };\n                        /**\n                         * Converts this ExportTraceServiceRequest to JSON.\n                         * @function toJSON\n                         * @memberof opentelemetry.proto.collector.trace.v1.ExportTraceServiceRequest\n                         * @instance\n                         * @returns {Object.<string,*>} JSON object\n                         */\n                        ExportTraceServiceRequest.prototype.toJSON = function toJSON() {\n                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                        };\n                        /**\n                         * Gets the default type url for ExportTraceServiceRequest\n                         * @function getTypeUrl\n                         * @memberof opentelemetry.proto.collector.trace.v1.ExportTraceServiceRequest\n                         * @static\n                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n                         * @returns {string} The default type url\n                         */\n                        ExportTraceServiceRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                            if (typeUrlPrefix === undefined) {\n                                typeUrlPrefix = \"type.googleapis.com\";\n                            }\n                            return typeUrlPrefix + \"/opentelemetry.proto.collector.trace.v1.ExportTraceServiceRequest\";\n                        };\n                        return ExportTraceServiceRequest;\n                    })();\n                    v1.ExportTraceServiceResponse = (function () {\n                        /**\n                         * Properties of an ExportTraceServiceResponse.\n                         * @memberof opentelemetry.proto.collector.trace.v1\n                         * @interface IExportTraceServiceResponse\n                         * @property {opentelemetry.proto.collector.trace.v1.IExportTracePartialSuccess|null} [partialSuccess] ExportTraceServiceResponse partialSuccess\n                         */\n                        /**\n                         * Constructs a new ExportTraceServiceResponse.\n                         * @memberof opentelemetry.proto.collector.trace.v1\n                         * @classdesc Represents an ExportTraceServiceResponse.\n                         * @implements IExportTraceServiceResponse\n                         * @constructor\n                         * @param {opentelemetry.proto.collector.trace.v1.IExportTraceServiceResponse=} [properties] Properties to set\n                         */\n                        function ExportTraceServiceResponse(properties) {\n                            if (properties)\n                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                                    if (properties[keys[i]] != null)\n                                        this[keys[i]] = properties[keys[i]];\n                        }\n                        /**\n                         * ExportTraceServiceResponse partialSuccess.\n                         * @member {opentelemetry.proto.collector.trace.v1.IExportTracePartialSuccess|null|undefined} partialSuccess\n                         * @memberof opentelemetry.proto.collector.trace.v1.ExportTraceServiceResponse\n                         * @instance\n                         */\n                        ExportTraceServiceResponse.prototype.partialSuccess = null;\n                        /**\n                         * Creates a new ExportTraceServiceResponse instance using the specified properties.\n                         * @function create\n                         * @memberof opentelemetry.proto.collector.trace.v1.ExportTraceServiceResponse\n                         * @static\n                         * @param {opentelemetry.proto.collector.trace.v1.IExportTraceServiceResponse=} [properties] Properties to set\n                         * @returns {opentelemetry.proto.collector.trace.v1.ExportTraceServiceResponse} ExportTraceServiceResponse instance\n                         */\n                        ExportTraceServiceResponse.create = function create(properties) {\n                            return new ExportTraceServiceResponse(properties);\n                        };\n                        /**\n                         * Encodes the specified ExportTraceServiceResponse message. Does not implicitly {@link opentelemetry.proto.collector.trace.v1.ExportTraceServiceResponse.verify|verify} messages.\n                         * @function encode\n                         * @memberof opentelemetry.proto.collector.trace.v1.ExportTraceServiceResponse\n                         * @static\n                         * @param {opentelemetry.proto.collector.trace.v1.IExportTraceServiceResponse} message ExportTraceServiceResponse message or plain object to encode\n                         * @param {$protobuf.Writer} [writer] Writer to encode to\n                         * @returns {$protobuf.Writer} Writer\n                         */\n                        ExportTraceServiceResponse.encode = function encode(message, writer) {\n                            if (!writer)\n                                writer = $Writer.create();\n                            if (message.partialSuccess != null && Object.hasOwnProperty.call(message, \"partialSuccess\"))\n                                $root.opentelemetry.proto.collector.trace.v1.ExportTracePartialSuccess.encode(message.partialSuccess, writer.uint32(/* id 1, wireType 2 =*/ 10).fork()).ldelim();\n                            return writer;\n                        };\n                        /**\n                         * Encodes the specified ExportTraceServiceResponse message, length delimited. Does not implicitly {@link opentelemetry.proto.collector.trace.v1.ExportTraceServiceResponse.verify|verify} messages.\n                         * @function encodeDelimited\n                         * @memberof opentelemetry.proto.collector.trace.v1.ExportTraceServiceResponse\n                         * @static\n                         * @param {opentelemetry.proto.collector.trace.v1.IExportTraceServiceResponse} message ExportTraceServiceResponse message or plain object to encode\n                         * @param {$protobuf.Writer} [writer] Writer to encode to\n                         * @returns {$protobuf.Writer} Writer\n                         */\n                        ExportTraceServiceResponse.encodeDelimited = function encodeDelimited(message, writer) {\n                            return this.encode(message, writer).ldelim();\n                        };\n                        /**\n                         * Decodes an ExportTraceServiceResponse message from the specified reader or buffer.\n                         * @function decode\n                         * @memberof opentelemetry.proto.collector.trace.v1.ExportTraceServiceResponse\n                         * @static\n                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                         * @param {number} [length] Message length if known beforehand\n                         * @returns {opentelemetry.proto.collector.trace.v1.ExportTraceServiceResponse} ExportTraceServiceResponse\n                         * @throws {Error} If the payload is not a reader or valid buffer\n                         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                         */\n                        ExportTraceServiceResponse.decode = function decode(reader, length) {\n                            if (!(reader instanceof $Reader))\n                                reader = $Reader.create(reader);\n                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.opentelemetry.proto.collector.trace.v1.ExportTraceServiceResponse();\n                            while (reader.pos < end) {\n                                var tag = reader.uint32();\n                                switch (tag >>> 3) {\n                                    case 1: {\n                                        message.partialSuccess = $root.opentelemetry.proto.collector.trace.v1.ExportTracePartialSuccess.decode(reader, reader.uint32());\n                                        break;\n                                    }\n                                    default:\n                                        reader.skipType(tag & 7);\n                                        break;\n                                }\n                            }\n                            return message;\n                        };\n                        /**\n                         * Decodes an ExportTraceServiceResponse message from the specified reader or buffer, length delimited.\n                         * @function decodeDelimited\n                         * @memberof opentelemetry.proto.collector.trace.v1.ExportTraceServiceResponse\n                         * @static\n                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                         * @returns {opentelemetry.proto.collector.trace.v1.ExportTraceServiceResponse} ExportTraceServiceResponse\n                         * @throws {Error} If the payload is not a reader or valid buffer\n                         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                         */\n                        ExportTraceServiceResponse.decodeDelimited = function decodeDelimited(reader) {\n                            if (!(reader instanceof $Reader))\n                                reader = new $Reader(reader);\n                            return this.decode(reader, reader.uint32());\n                        };\n                        /**\n                         * Verifies an ExportTraceServiceResponse message.\n                         * @function verify\n                         * @memberof opentelemetry.proto.collector.trace.v1.ExportTraceServiceResponse\n                         * @static\n                         * @param {Object.<string,*>} message Plain object to verify\n                         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                         */\n                        ExportTraceServiceResponse.verify = function verify(message) {\n                            if (typeof message !== \"object\" || message === null)\n                                return \"object expected\";\n                            if (message.partialSuccess != null && message.hasOwnProperty(\"partialSuccess\")) {\n                                var error = $root.opentelemetry.proto.collector.trace.v1.ExportTracePartialSuccess.verify(message.partialSuccess);\n                                if (error)\n                                    return \"partialSuccess.\" + error;\n                            }\n                            return null;\n                        };\n                        /**\n                         * Creates an ExportTraceServiceResponse message from a plain object. Also converts values to their respective internal types.\n                         * @function fromObject\n                         * @memberof opentelemetry.proto.collector.trace.v1.ExportTraceServiceResponse\n                         * @static\n                         * @param {Object.<string,*>} object Plain object\n                         * @returns {opentelemetry.proto.collector.trace.v1.ExportTraceServiceResponse} ExportTraceServiceResponse\n                         */\n                        ExportTraceServiceResponse.fromObject = function fromObject(object) {\n                            if (object instanceof $root.opentelemetry.proto.collector.trace.v1.ExportTraceServiceResponse)\n                                return object;\n                            var message = new $root.opentelemetry.proto.collector.trace.v1.ExportTraceServiceResponse();\n                            if (object.partialSuccess != null) {\n                                if (typeof object.partialSuccess !== \"object\")\n                                    throw TypeError(\".opentelemetry.proto.collector.trace.v1.ExportTraceServiceResponse.partialSuccess: object expected\");\n                                message.partialSuccess = $root.opentelemetry.proto.collector.trace.v1.ExportTracePartialSuccess.fromObject(object.partialSuccess);\n                            }\n                            return message;\n                        };\n                        /**\n                         * Creates a plain object from an ExportTraceServiceResponse message. Also converts values to other types if specified.\n                         * @function toObject\n                         * @memberof opentelemetry.proto.collector.trace.v1.ExportTraceServiceResponse\n                         * @static\n                         * @param {opentelemetry.proto.collector.trace.v1.ExportTraceServiceResponse} message ExportTraceServiceResponse\n                         * @param {$protobuf.IConversionOptions} [options] Conversion options\n                         * @returns {Object.<string,*>} Plain object\n                         */\n                        ExportTraceServiceResponse.toObject = function toObject(message, options) {\n                            if (!options)\n                                options = {};\n                            var object = {};\n                            if (options.defaults)\n                                object.partialSuccess = null;\n                            if (message.partialSuccess != null && message.hasOwnProperty(\"partialSuccess\"))\n                                object.partialSuccess = $root.opentelemetry.proto.collector.trace.v1.ExportTracePartialSuccess.toObject(message.partialSuccess, options);\n                            return object;\n                        };\n                        /**\n                         * Converts this ExportTraceServiceResponse to JSON.\n                         * @function toJSON\n                         * @memberof opentelemetry.proto.collector.trace.v1.ExportTraceServiceResponse\n                         * @instance\n                         * @returns {Object.<string,*>} JSON object\n                         */\n                        ExportTraceServiceResponse.prototype.toJSON = function toJSON() {\n                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                        };\n                        /**\n                         * Gets the default type url for ExportTraceServiceResponse\n                         * @function getTypeUrl\n                         * @memberof opentelemetry.proto.collector.trace.v1.ExportTraceServiceResponse\n                         * @static\n                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n                         * @returns {string} The default type url\n                         */\n                        ExportTraceServiceResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                            if (typeUrlPrefix === undefined) {\n                                typeUrlPrefix = \"type.googleapis.com\";\n                            }\n                            return typeUrlPrefix + \"/opentelemetry.proto.collector.trace.v1.ExportTraceServiceResponse\";\n                        };\n                        return ExportTraceServiceResponse;\n                    })();\n                    v1.ExportTracePartialSuccess = (function () {\n                        /**\n                         * Properties of an ExportTracePartialSuccess.\n                         * @memberof opentelemetry.proto.collector.trace.v1\n                         * @interface IExportTracePartialSuccess\n                         * @property {number|Long|null} [rejectedSpans] ExportTracePartialSuccess rejectedSpans\n                         * @property {string|null} [errorMessage] ExportTracePartialSuccess errorMessage\n                         */\n                        /**\n                         * Constructs a new ExportTracePartialSuccess.\n                         * @memberof opentelemetry.proto.collector.trace.v1\n                         * @classdesc Represents an ExportTracePartialSuccess.\n                         * @implements IExportTracePartialSuccess\n                         * @constructor\n                         * @param {opentelemetry.proto.collector.trace.v1.IExportTracePartialSuccess=} [properties] Properties to set\n                         */\n                        function ExportTracePartialSuccess(properties) {\n                            if (properties)\n                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                                    if (properties[keys[i]] != null)\n                                        this[keys[i]] = properties[keys[i]];\n                        }\n                        /**\n                         * ExportTracePartialSuccess rejectedSpans.\n                         * @member {number|Long|null|undefined} rejectedSpans\n                         * @memberof opentelemetry.proto.collector.trace.v1.ExportTracePartialSuccess\n                         * @instance\n                         */\n                        ExportTracePartialSuccess.prototype.rejectedSpans = null;\n                        /**\n                         * ExportTracePartialSuccess errorMessage.\n                         * @member {string|null|undefined} errorMessage\n                         * @memberof opentelemetry.proto.collector.trace.v1.ExportTracePartialSuccess\n                         * @instance\n                         */\n                        ExportTracePartialSuccess.prototype.errorMessage = null;\n                        /**\n                         * Creates a new ExportTracePartialSuccess instance using the specified properties.\n                         * @function create\n                         * @memberof opentelemetry.proto.collector.trace.v1.ExportTracePartialSuccess\n                         * @static\n                         * @param {opentelemetry.proto.collector.trace.v1.IExportTracePartialSuccess=} [properties] Properties to set\n                         * @returns {opentelemetry.proto.collector.trace.v1.ExportTracePartialSuccess} ExportTracePartialSuccess instance\n                         */\n                        ExportTracePartialSuccess.create = function create(properties) {\n                            return new ExportTracePartialSuccess(properties);\n                        };\n                        /**\n                         * Encodes the specified ExportTracePartialSuccess message. Does not implicitly {@link opentelemetry.proto.collector.trace.v1.ExportTracePartialSuccess.verify|verify} messages.\n                         * @function encode\n                         * @memberof opentelemetry.proto.collector.trace.v1.ExportTracePartialSuccess\n                         * @static\n                         * @param {opentelemetry.proto.collector.trace.v1.IExportTracePartialSuccess} message ExportTracePartialSuccess message or plain object to encode\n                         * @param {$protobuf.Writer} [writer] Writer to encode to\n                         * @returns {$protobuf.Writer} Writer\n                         */\n                        ExportTracePartialSuccess.encode = function encode(message, writer) {\n                            if (!writer)\n                                writer = $Writer.create();\n                            if (message.rejectedSpans != null && Object.hasOwnProperty.call(message, \"rejectedSpans\"))\n                                writer.uint32(/* id 1, wireType 0 =*/ 8).int64(message.rejectedSpans);\n                            if (message.errorMessage != null && Object.hasOwnProperty.call(message, \"errorMessage\"))\n                                writer.uint32(/* id 2, wireType 2 =*/ 18).string(message.errorMessage);\n                            return writer;\n                        };\n                        /**\n                         * Encodes the specified ExportTracePartialSuccess message, length delimited. Does not implicitly {@link opentelemetry.proto.collector.trace.v1.ExportTracePartialSuccess.verify|verify} messages.\n                         * @function encodeDelimited\n                         * @memberof opentelemetry.proto.collector.trace.v1.ExportTracePartialSuccess\n                         * @static\n                         * @param {opentelemetry.proto.collector.trace.v1.IExportTracePartialSuccess} message ExportTracePartialSuccess message or plain object to encode\n                         * @param {$protobuf.Writer} [writer] Writer to encode to\n                         * @returns {$protobuf.Writer} Writer\n                         */\n                        ExportTracePartialSuccess.encodeDelimited = function encodeDelimited(message, writer) {\n                            return this.encode(message, writer).ldelim();\n                        };\n                        /**\n                         * Decodes an ExportTracePartialSuccess message from the specified reader or buffer.\n                         * @function decode\n                         * @memberof opentelemetry.proto.collector.trace.v1.ExportTracePartialSuccess\n                         * @static\n                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                         * @param {number} [length] Message length if known beforehand\n                         * @returns {opentelemetry.proto.collector.trace.v1.ExportTracePartialSuccess} ExportTracePartialSuccess\n                         * @throws {Error} If the payload is not a reader or valid buffer\n                         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                         */\n                        ExportTracePartialSuccess.decode = function decode(reader, length) {\n                            if (!(reader instanceof $Reader))\n                                reader = $Reader.create(reader);\n                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.opentelemetry.proto.collector.trace.v1.ExportTracePartialSuccess();\n                            while (reader.pos < end) {\n                                var tag = reader.uint32();\n                                switch (tag >>> 3) {\n                                    case 1: {\n                                        message.rejectedSpans = reader.int64();\n                                        break;\n                                    }\n                                    case 2: {\n                                        message.errorMessage = reader.string();\n                                        break;\n                                    }\n                                    default:\n                                        reader.skipType(tag & 7);\n                                        break;\n                                }\n                            }\n                            return message;\n                        };\n                        /**\n                         * Decodes an ExportTracePartialSuccess message from the specified reader or buffer, length delimited.\n                         * @function decodeDelimited\n                         * @memberof opentelemetry.proto.collector.trace.v1.ExportTracePartialSuccess\n                         * @static\n                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                         * @returns {opentelemetry.proto.collector.trace.v1.ExportTracePartialSuccess} ExportTracePartialSuccess\n                         * @throws {Error} If the payload is not a reader or valid buffer\n                         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                         */\n                        ExportTracePartialSuccess.decodeDelimited = function decodeDelimited(reader) {\n                            if (!(reader instanceof $Reader))\n                                reader = new $Reader(reader);\n                            return this.decode(reader, reader.uint32());\n                        };\n                        /**\n                         * Verifies an ExportTracePartialSuccess message.\n                         * @function verify\n                         * @memberof opentelemetry.proto.collector.trace.v1.ExportTracePartialSuccess\n                         * @static\n                         * @param {Object.<string,*>} message Plain object to verify\n                         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                         */\n                        ExportTracePartialSuccess.verify = function verify(message) {\n                            if (typeof message !== \"object\" || message === null)\n                                return \"object expected\";\n                            if (message.rejectedSpans != null && message.hasOwnProperty(\"rejectedSpans\"))\n                                if (!$util.isInteger(message.rejectedSpans) && !(message.rejectedSpans && $util.isInteger(message.rejectedSpans.low) && $util.isInteger(message.rejectedSpans.high)))\n                                    return \"rejectedSpans: integer|Long expected\";\n                            if (message.errorMessage != null && message.hasOwnProperty(\"errorMessage\"))\n                                if (!$util.isString(message.errorMessage))\n                                    return \"errorMessage: string expected\";\n                            return null;\n                        };\n                        /**\n                         * Creates an ExportTracePartialSuccess message from a plain object. Also converts values to their respective internal types.\n                         * @function fromObject\n                         * @memberof opentelemetry.proto.collector.trace.v1.ExportTracePartialSuccess\n                         * @static\n                         * @param {Object.<string,*>} object Plain object\n                         * @returns {opentelemetry.proto.collector.trace.v1.ExportTracePartialSuccess} ExportTracePartialSuccess\n                         */\n                        ExportTracePartialSuccess.fromObject = function fromObject(object) {\n                            if (object instanceof $root.opentelemetry.proto.collector.trace.v1.ExportTracePartialSuccess)\n                                return object;\n                            var message = new $root.opentelemetry.proto.collector.trace.v1.ExportTracePartialSuccess();\n                            if (object.rejectedSpans != null)\n                                if ($util.Long)\n                                    (message.rejectedSpans = $util.Long.fromValue(object.rejectedSpans)).unsigned = false;\n                                else if (typeof object.rejectedSpans === \"string\")\n                                    message.rejectedSpans = parseInt(object.rejectedSpans, 10);\n                                else if (typeof object.rejectedSpans === \"number\")\n                                    message.rejectedSpans = object.rejectedSpans;\n                                else if (typeof object.rejectedSpans === \"object\")\n                                    message.rejectedSpans = new $util.LongBits(object.rejectedSpans.low >>> 0, object.rejectedSpans.high >>> 0).toNumber();\n                            if (object.errorMessage != null)\n                                message.errorMessage = String(object.errorMessage);\n                            return message;\n                        };\n                        /**\n                         * Creates a plain object from an ExportTracePartialSuccess message. Also converts values to other types if specified.\n                         * @function toObject\n                         * @memberof opentelemetry.proto.collector.trace.v1.ExportTracePartialSuccess\n                         * @static\n                         * @param {opentelemetry.proto.collector.trace.v1.ExportTracePartialSuccess} message ExportTracePartialSuccess\n                         * @param {$protobuf.IConversionOptions} [options] Conversion options\n                         * @returns {Object.<string,*>} Plain object\n                         */\n                        ExportTracePartialSuccess.toObject = function toObject(message, options) {\n                            if (!options)\n                                options = {};\n                            var object = {};\n                            if (options.defaults) {\n                                if ($util.Long) {\n                                    var long = new $util.Long(0, 0, false);\n                                    object.rejectedSpans = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                                }\n                                else\n                                    object.rejectedSpans = options.longs === String ? \"0\" : 0;\n                                object.errorMessage = \"\";\n                            }\n                            if (message.rejectedSpans != null && message.hasOwnProperty(\"rejectedSpans\"))\n                                if (typeof message.rejectedSpans === \"number\")\n                                    object.rejectedSpans = options.longs === String ? String(message.rejectedSpans) : message.rejectedSpans;\n                                else\n                                    object.rejectedSpans = options.longs === String ? $util.Long.prototype.toString.call(message.rejectedSpans) : options.longs === Number ? new $util.LongBits(message.rejectedSpans.low >>> 0, message.rejectedSpans.high >>> 0).toNumber() : message.rejectedSpans;\n                            if (message.errorMessage != null && message.hasOwnProperty(\"errorMessage\"))\n                                object.errorMessage = message.errorMessage;\n                            return object;\n                        };\n                        /**\n                         * Converts this ExportTracePartialSuccess to JSON.\n                         * @function toJSON\n                         * @memberof opentelemetry.proto.collector.trace.v1.ExportTracePartialSuccess\n                         * @instance\n                         * @returns {Object.<string,*>} JSON object\n                         */\n                        ExportTracePartialSuccess.prototype.toJSON = function toJSON() {\n                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                        };\n                        /**\n                         * Gets the default type url for ExportTracePartialSuccess\n                         * @function getTypeUrl\n                         * @memberof opentelemetry.proto.collector.trace.v1.ExportTracePartialSuccess\n                         * @static\n                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n                         * @returns {string} The default type url\n                         */\n                        ExportTracePartialSuccess.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                            if (typeUrlPrefix === undefined) {\n                                typeUrlPrefix = \"type.googleapis.com\";\n                            }\n                            return typeUrlPrefix + \"/opentelemetry.proto.collector.trace.v1.ExportTracePartialSuccess\";\n                        };\n                        return ExportTracePartialSuccess;\n                    })();\n                    return v1;\n                })();\n                return trace;\n            })();\n            collector.metrics = (function () {\n                /**\n                 * Namespace metrics.\n                 * @memberof opentelemetry.proto.collector\n                 * @namespace\n                 */\n                var metrics = {};\n                metrics.v1 = (function () {\n                    /**\n                     * Namespace v1.\n                     * @memberof opentelemetry.proto.collector.metrics\n                     * @namespace\n                     */\n                    var v1 = {};\n                    v1.MetricsService = (function () {\n                        /**\n                         * Constructs a new MetricsService service.\n                         * @memberof opentelemetry.proto.collector.metrics.v1\n                         * @classdesc Represents a MetricsService\n                         * @extends $protobuf.rpc.Service\n                         * @constructor\n                         * @param {$protobuf.RPCImpl} rpcImpl RPC implementation\n                         * @param {boolean} [requestDelimited=false] Whether requests are length-delimited\n                         * @param {boolean} [responseDelimited=false] Whether responses are length-delimited\n                         */\n                        function MetricsService(rpcImpl, requestDelimited, responseDelimited) {\n                            $protobuf.rpc.Service.call(this, rpcImpl, requestDelimited, responseDelimited);\n                        }\n                        (MetricsService.prototype = Object.create($protobuf.rpc.Service.prototype)).constructor = MetricsService;\n                        /**\n                         * Creates new MetricsService service using the specified rpc implementation.\n                         * @function create\n                         * @memberof opentelemetry.proto.collector.metrics.v1.MetricsService\n                         * @static\n                         * @param {$protobuf.RPCImpl} rpcImpl RPC implementation\n                         * @param {boolean} [requestDelimited=false] Whether requests are length-delimited\n                         * @param {boolean} [responseDelimited=false] Whether responses are length-delimited\n                         * @returns {MetricsService} RPC service. Useful where requests and/or responses are streamed.\n                         */\n                        MetricsService.create = function create(rpcImpl, requestDelimited, responseDelimited) {\n                            return new this(rpcImpl, requestDelimited, responseDelimited);\n                        };\n                        /**\n                         * Callback as used by {@link opentelemetry.proto.collector.metrics.v1.MetricsService#export_}.\n                         * @memberof opentelemetry.proto.collector.metrics.v1.MetricsService\n                         * @typedef ExportCallback\n                         * @type {function}\n                         * @param {Error|null} error Error, if any\n                         * @param {opentelemetry.proto.collector.metrics.v1.ExportMetricsServiceResponse} [response] ExportMetricsServiceResponse\n                         */\n                        /**\n                         * Calls Export.\n                         * @function export\n                         * @memberof opentelemetry.proto.collector.metrics.v1.MetricsService\n                         * @instance\n                         * @param {opentelemetry.proto.collector.metrics.v1.IExportMetricsServiceRequest} request ExportMetricsServiceRequest message or plain object\n                         * @param {opentelemetry.proto.collector.metrics.v1.MetricsService.ExportCallback} callback Node-style callback called with the error, if any, and ExportMetricsServiceResponse\n                         * @returns {undefined}\n                         * @variation 1\n                         */\n                        Object.defineProperty(MetricsService.prototype[\"export\"] = function export_(request, callback) {\n                            return this.rpcCall(export_, $root.opentelemetry.proto.collector.metrics.v1.ExportMetricsServiceRequest, $root.opentelemetry.proto.collector.metrics.v1.ExportMetricsServiceResponse, request, callback);\n                        }, \"name\", { value: \"Export\" });\n                        /**\n                         * Calls Export.\n                         * @function export\n                         * @memberof opentelemetry.proto.collector.metrics.v1.MetricsService\n                         * @instance\n                         * @param {opentelemetry.proto.collector.metrics.v1.IExportMetricsServiceRequest} request ExportMetricsServiceRequest message or plain object\n                         * @returns {Promise<opentelemetry.proto.collector.metrics.v1.ExportMetricsServiceResponse>} Promise\n                         * @variation 2\n                         */\n                        return MetricsService;\n                    })();\n                    v1.ExportMetricsServiceRequest = (function () {\n                        /**\n                         * Properties of an ExportMetricsServiceRequest.\n                         * @memberof opentelemetry.proto.collector.metrics.v1\n                         * @interface IExportMetricsServiceRequest\n                         * @property {Array.<opentelemetry.proto.metrics.v1.IResourceMetrics>|null} [resourceMetrics] ExportMetricsServiceRequest resourceMetrics\n                         */\n                        /**\n                         * Constructs a new ExportMetricsServiceRequest.\n                         * @memberof opentelemetry.proto.collector.metrics.v1\n                         * @classdesc Represents an ExportMetricsServiceRequest.\n                         * @implements IExportMetricsServiceRequest\n                         * @constructor\n                         * @param {opentelemetry.proto.collector.metrics.v1.IExportMetricsServiceRequest=} [properties] Properties to set\n                         */\n                        function ExportMetricsServiceRequest(properties) {\n                            this.resourceMetrics = [];\n                            if (properties)\n                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                                    if (properties[keys[i]] != null)\n                                        this[keys[i]] = properties[keys[i]];\n                        }\n                        /**\n                         * ExportMetricsServiceRequest resourceMetrics.\n                         * @member {Array.<opentelemetry.proto.metrics.v1.IResourceMetrics>} resourceMetrics\n                         * @memberof opentelemetry.proto.collector.metrics.v1.ExportMetricsServiceRequest\n                         * @instance\n                         */\n                        ExportMetricsServiceRequest.prototype.resourceMetrics = $util.emptyArray;\n                        /**\n                         * Creates a new ExportMetricsServiceRequest instance using the specified properties.\n                         * @function create\n                         * @memberof opentelemetry.proto.collector.metrics.v1.ExportMetricsServiceRequest\n                         * @static\n                         * @param {opentelemetry.proto.collector.metrics.v1.IExportMetricsServiceRequest=} [properties] Properties to set\n                         * @returns {opentelemetry.proto.collector.metrics.v1.ExportMetricsServiceRequest} ExportMetricsServiceRequest instance\n                         */\n                        ExportMetricsServiceRequest.create = function create(properties) {\n                            return new ExportMetricsServiceRequest(properties);\n                        };\n                        /**\n                         * Encodes the specified ExportMetricsServiceRequest message. Does not implicitly {@link opentelemetry.proto.collector.metrics.v1.ExportMetricsServiceRequest.verify|verify} messages.\n                         * @function encode\n                         * @memberof opentelemetry.proto.collector.metrics.v1.ExportMetricsServiceRequest\n                         * @static\n                         * @param {opentelemetry.proto.collector.metrics.v1.IExportMetricsServiceRequest} message ExportMetricsServiceRequest message or plain object to encode\n                         * @param {$protobuf.Writer} [writer] Writer to encode to\n                         * @returns {$protobuf.Writer} Writer\n                         */\n                        ExportMetricsServiceRequest.encode = function encode(message, writer) {\n                            if (!writer)\n                                writer = $Writer.create();\n                            if (message.resourceMetrics != null && message.resourceMetrics.length)\n                                for (var i = 0; i < message.resourceMetrics.length; ++i)\n                                    $root.opentelemetry.proto.metrics.v1.ResourceMetrics.encode(message.resourceMetrics[i], writer.uint32(/* id 1, wireType 2 =*/ 10).fork()).ldelim();\n                            return writer;\n                        };\n                        /**\n                         * Encodes the specified ExportMetricsServiceRequest message, length delimited. Does not implicitly {@link opentelemetry.proto.collector.metrics.v1.ExportMetricsServiceRequest.verify|verify} messages.\n                         * @function encodeDelimited\n                         * @memberof opentelemetry.proto.collector.metrics.v1.ExportMetricsServiceRequest\n                         * @static\n                         * @param {opentelemetry.proto.collector.metrics.v1.IExportMetricsServiceRequest} message ExportMetricsServiceRequest message or plain object to encode\n                         * @param {$protobuf.Writer} [writer] Writer to encode to\n                         * @returns {$protobuf.Writer} Writer\n                         */\n                        ExportMetricsServiceRequest.encodeDelimited = function encodeDelimited(message, writer) {\n                            return this.encode(message, writer).ldelim();\n                        };\n                        /**\n                         * Decodes an ExportMetricsServiceRequest message from the specified reader or buffer.\n                         * @function decode\n                         * @memberof opentelemetry.proto.collector.metrics.v1.ExportMetricsServiceRequest\n                         * @static\n                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                         * @param {number} [length] Message length if known beforehand\n                         * @returns {opentelemetry.proto.collector.metrics.v1.ExportMetricsServiceRequest} ExportMetricsServiceRequest\n                         * @throws {Error} If the payload is not a reader or valid buffer\n                         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                         */\n                        ExportMetricsServiceRequest.decode = function decode(reader, length) {\n                            if (!(reader instanceof $Reader))\n                                reader = $Reader.create(reader);\n                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.opentelemetry.proto.collector.metrics.v1.ExportMetricsServiceRequest();\n                            while (reader.pos < end) {\n                                var tag = reader.uint32();\n                                switch (tag >>> 3) {\n                                    case 1: {\n                                        if (!(message.resourceMetrics && message.resourceMetrics.length))\n                                            message.resourceMetrics = [];\n                                        message.resourceMetrics.push($root.opentelemetry.proto.metrics.v1.ResourceMetrics.decode(reader, reader.uint32()));\n                                        break;\n                                    }\n                                    default:\n                                        reader.skipType(tag & 7);\n                                        break;\n                                }\n                            }\n                            return message;\n                        };\n                        /**\n                         * Decodes an ExportMetricsServiceRequest message from the specified reader or buffer, length delimited.\n                         * @function decodeDelimited\n                         * @memberof opentelemetry.proto.collector.metrics.v1.ExportMetricsServiceRequest\n                         * @static\n                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                         * @returns {opentelemetry.proto.collector.metrics.v1.ExportMetricsServiceRequest} ExportMetricsServiceRequest\n                         * @throws {Error} If the payload is not a reader or valid buffer\n                         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                         */\n                        ExportMetricsServiceRequest.decodeDelimited = function decodeDelimited(reader) {\n                            if (!(reader instanceof $Reader))\n                                reader = new $Reader(reader);\n                            return this.decode(reader, reader.uint32());\n                        };\n                        /**\n                         * Verifies an ExportMetricsServiceRequest message.\n                         * @function verify\n                         * @memberof opentelemetry.proto.collector.metrics.v1.ExportMetricsServiceRequest\n                         * @static\n                         * @param {Object.<string,*>} message Plain object to verify\n                         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                         */\n                        ExportMetricsServiceRequest.verify = function verify(message) {\n                            if (typeof message !== \"object\" || message === null)\n                                return \"object expected\";\n                            if (message.resourceMetrics != null && message.hasOwnProperty(\"resourceMetrics\")) {\n                                if (!Array.isArray(message.resourceMetrics))\n                                    return \"resourceMetrics: array expected\";\n                                for (var i = 0; i < message.resourceMetrics.length; ++i) {\n                                    var error = $root.opentelemetry.proto.metrics.v1.ResourceMetrics.verify(message.resourceMetrics[i]);\n                                    if (error)\n                                        return \"resourceMetrics.\" + error;\n                                }\n                            }\n                            return null;\n                        };\n                        /**\n                         * Creates an ExportMetricsServiceRequest message from a plain object. Also converts values to their respective internal types.\n                         * @function fromObject\n                         * @memberof opentelemetry.proto.collector.metrics.v1.ExportMetricsServiceRequest\n                         * @static\n                         * @param {Object.<string,*>} object Plain object\n                         * @returns {opentelemetry.proto.collector.metrics.v1.ExportMetricsServiceRequest} ExportMetricsServiceRequest\n                         */\n                        ExportMetricsServiceRequest.fromObject = function fromObject(object) {\n                            if (object instanceof $root.opentelemetry.proto.collector.metrics.v1.ExportMetricsServiceRequest)\n                                return object;\n                            var message = new $root.opentelemetry.proto.collector.metrics.v1.ExportMetricsServiceRequest();\n                            if (object.resourceMetrics) {\n                                if (!Array.isArray(object.resourceMetrics))\n                                    throw TypeError(\".opentelemetry.proto.collector.metrics.v1.ExportMetricsServiceRequest.resourceMetrics: array expected\");\n                                message.resourceMetrics = [];\n                                for (var i = 0; i < object.resourceMetrics.length; ++i) {\n                                    if (typeof object.resourceMetrics[i] !== \"object\")\n                                        throw TypeError(\".opentelemetry.proto.collector.metrics.v1.ExportMetricsServiceRequest.resourceMetrics: object expected\");\n                                    message.resourceMetrics[i] = $root.opentelemetry.proto.metrics.v1.ResourceMetrics.fromObject(object.resourceMetrics[i]);\n                                }\n                            }\n                            return message;\n                        };\n                        /**\n                         * Creates a plain object from an ExportMetricsServiceRequest message. Also converts values to other types if specified.\n                         * @function toObject\n                         * @memberof opentelemetry.proto.collector.metrics.v1.ExportMetricsServiceRequest\n                         * @static\n                         * @param {opentelemetry.proto.collector.metrics.v1.ExportMetricsServiceRequest} message ExportMetricsServiceRequest\n                         * @param {$protobuf.IConversionOptions} [options] Conversion options\n                         * @returns {Object.<string,*>} Plain object\n                         */\n                        ExportMetricsServiceRequest.toObject = function toObject(message, options) {\n                            if (!options)\n                                options = {};\n                            var object = {};\n                            if (options.arrays || options.defaults)\n                                object.resourceMetrics = [];\n                            if (message.resourceMetrics && message.resourceMetrics.length) {\n                                object.resourceMetrics = [];\n                                for (var j = 0; j < message.resourceMetrics.length; ++j)\n                                    object.resourceMetrics[j] = $root.opentelemetry.proto.metrics.v1.ResourceMetrics.toObject(message.resourceMetrics[j], options);\n                            }\n                            return object;\n                        };\n                        /**\n                         * Converts this ExportMetricsServiceRequest to JSON.\n                         * @function toJSON\n                         * @memberof opentelemetry.proto.collector.metrics.v1.ExportMetricsServiceRequest\n                         * @instance\n                         * @returns {Object.<string,*>} JSON object\n                         */\n                        ExportMetricsServiceRequest.prototype.toJSON = function toJSON() {\n                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                        };\n                        /**\n                         * Gets the default type url for ExportMetricsServiceRequest\n                         * @function getTypeUrl\n                         * @memberof opentelemetry.proto.collector.metrics.v1.ExportMetricsServiceRequest\n                         * @static\n                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n                         * @returns {string} The default type url\n                         */\n                        ExportMetricsServiceRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                            if (typeUrlPrefix === undefined) {\n                                typeUrlPrefix = \"type.googleapis.com\";\n                            }\n                            return typeUrlPrefix + \"/opentelemetry.proto.collector.metrics.v1.ExportMetricsServiceRequest\";\n                        };\n                        return ExportMetricsServiceRequest;\n                    })();\n                    v1.ExportMetricsServiceResponse = (function () {\n                        /**\n                         * Properties of an ExportMetricsServiceResponse.\n                         * @memberof opentelemetry.proto.collector.metrics.v1\n                         * @interface IExportMetricsServiceResponse\n                         * @property {opentelemetry.proto.collector.metrics.v1.IExportMetricsPartialSuccess|null} [partialSuccess] ExportMetricsServiceResponse partialSuccess\n                         */\n                        /**\n                         * Constructs a new ExportMetricsServiceResponse.\n                         * @memberof opentelemetry.proto.collector.metrics.v1\n                         * @classdesc Represents an ExportMetricsServiceResponse.\n                         * @implements IExportMetricsServiceResponse\n                         * @constructor\n                         * @param {opentelemetry.proto.collector.metrics.v1.IExportMetricsServiceResponse=} [properties] Properties to set\n                         */\n                        function ExportMetricsServiceResponse(properties) {\n                            if (properties)\n                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                                    if (properties[keys[i]] != null)\n                                        this[keys[i]] = properties[keys[i]];\n                        }\n                        /**\n                         * ExportMetricsServiceResponse partialSuccess.\n                         * @member {opentelemetry.proto.collector.metrics.v1.IExportMetricsPartialSuccess|null|undefined} partialSuccess\n                         * @memberof opentelemetry.proto.collector.metrics.v1.ExportMetricsServiceResponse\n                         * @instance\n                         */\n                        ExportMetricsServiceResponse.prototype.partialSuccess = null;\n                        /**\n                         * Creates a new ExportMetricsServiceResponse instance using the specified properties.\n                         * @function create\n                         * @memberof opentelemetry.proto.collector.metrics.v1.ExportMetricsServiceResponse\n                         * @static\n                         * @param {opentelemetry.proto.collector.metrics.v1.IExportMetricsServiceResponse=} [properties] Properties to set\n                         * @returns {opentelemetry.proto.collector.metrics.v1.ExportMetricsServiceResponse} ExportMetricsServiceResponse instance\n                         */\n                        ExportMetricsServiceResponse.create = function create(properties) {\n                            return new ExportMetricsServiceResponse(properties);\n                        };\n                        /**\n                         * Encodes the specified ExportMetricsServiceResponse message. Does not implicitly {@link opentelemetry.proto.collector.metrics.v1.ExportMetricsServiceResponse.verify|verify} messages.\n                         * @function encode\n                         * @memberof opentelemetry.proto.collector.metrics.v1.ExportMetricsServiceResponse\n                         * @static\n                         * @param {opentelemetry.proto.collector.metrics.v1.IExportMetricsServiceResponse} message ExportMetricsServiceResponse message or plain object to encode\n                         * @param {$protobuf.Writer} [writer] Writer to encode to\n                         * @returns {$protobuf.Writer} Writer\n                         */\n                        ExportMetricsServiceResponse.encode = function encode(message, writer) {\n                            if (!writer)\n                                writer = $Writer.create();\n                            if (message.partialSuccess != null && Object.hasOwnProperty.call(message, \"partialSuccess\"))\n                                $root.opentelemetry.proto.collector.metrics.v1.ExportMetricsPartialSuccess.encode(message.partialSuccess, writer.uint32(/* id 1, wireType 2 =*/ 10).fork()).ldelim();\n                            return writer;\n                        };\n                        /**\n                         * Encodes the specified ExportMetricsServiceResponse message, length delimited. Does not implicitly {@link opentelemetry.proto.collector.metrics.v1.ExportMetricsServiceResponse.verify|verify} messages.\n                         * @function encodeDelimited\n                         * @memberof opentelemetry.proto.collector.metrics.v1.ExportMetricsServiceResponse\n                         * @static\n                         * @param {opentelemetry.proto.collector.metrics.v1.IExportMetricsServiceResponse} message ExportMetricsServiceResponse message or plain object to encode\n                         * @param {$protobuf.Writer} [writer] Writer to encode to\n                         * @returns {$protobuf.Writer} Writer\n                         */\n                        ExportMetricsServiceResponse.encodeDelimited = function encodeDelimited(message, writer) {\n                            return this.encode(message, writer).ldelim();\n                        };\n                        /**\n                         * Decodes an ExportMetricsServiceResponse message from the specified reader or buffer.\n                         * @function decode\n                         * @memberof opentelemetry.proto.collector.metrics.v1.ExportMetricsServiceResponse\n                         * @static\n                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                         * @param {number} [length] Message length if known beforehand\n                         * @returns {opentelemetry.proto.collector.metrics.v1.ExportMetricsServiceResponse} ExportMetricsServiceResponse\n                         * @throws {Error} If the payload is not a reader or valid buffer\n                         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                         */\n                        ExportMetricsServiceResponse.decode = function decode(reader, length) {\n                            if (!(reader instanceof $Reader))\n                                reader = $Reader.create(reader);\n                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.opentelemetry.proto.collector.metrics.v1.ExportMetricsServiceResponse();\n                            while (reader.pos < end) {\n                                var tag = reader.uint32();\n                                switch (tag >>> 3) {\n                                    case 1: {\n                                        message.partialSuccess = $root.opentelemetry.proto.collector.metrics.v1.ExportMetricsPartialSuccess.decode(reader, reader.uint32());\n                                        break;\n                                    }\n                                    default:\n                                        reader.skipType(tag & 7);\n                                        break;\n                                }\n                            }\n                            return message;\n                        };\n                        /**\n                         * Decodes an ExportMetricsServiceResponse message from the specified reader or buffer, length delimited.\n                         * @function decodeDelimited\n                         * @memberof opentelemetry.proto.collector.metrics.v1.ExportMetricsServiceResponse\n                         * @static\n                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                         * @returns {opentelemetry.proto.collector.metrics.v1.ExportMetricsServiceResponse} ExportMetricsServiceResponse\n                         * @throws {Error} If the payload is not a reader or valid buffer\n                         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                         */\n                        ExportMetricsServiceResponse.decodeDelimited = function decodeDelimited(reader) {\n                            if (!(reader instanceof $Reader))\n                                reader = new $Reader(reader);\n                            return this.decode(reader, reader.uint32());\n                        };\n                        /**\n                         * Verifies an ExportMetricsServiceResponse message.\n                         * @function verify\n                         * @memberof opentelemetry.proto.collector.metrics.v1.ExportMetricsServiceResponse\n                         * @static\n                         * @param {Object.<string,*>} message Plain object to verify\n                         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                         */\n                        ExportMetricsServiceResponse.verify = function verify(message) {\n                            if (typeof message !== \"object\" || message === null)\n                                return \"object expected\";\n                            if (message.partialSuccess != null && message.hasOwnProperty(\"partialSuccess\")) {\n                                var error = $root.opentelemetry.proto.collector.metrics.v1.ExportMetricsPartialSuccess.verify(message.partialSuccess);\n                                if (error)\n                                    return \"partialSuccess.\" + error;\n                            }\n                            return null;\n                        };\n                        /**\n                         * Creates an ExportMetricsServiceResponse message from a plain object. Also converts values to their respective internal types.\n                         * @function fromObject\n                         * @memberof opentelemetry.proto.collector.metrics.v1.ExportMetricsServiceResponse\n                         * @static\n                         * @param {Object.<string,*>} object Plain object\n                         * @returns {opentelemetry.proto.collector.metrics.v1.ExportMetricsServiceResponse} ExportMetricsServiceResponse\n                         */\n                        ExportMetricsServiceResponse.fromObject = function fromObject(object) {\n                            if (object instanceof $root.opentelemetry.proto.collector.metrics.v1.ExportMetricsServiceResponse)\n                                return object;\n                            var message = new $root.opentelemetry.proto.collector.metrics.v1.ExportMetricsServiceResponse();\n                            if (object.partialSuccess != null) {\n                                if (typeof object.partialSuccess !== \"object\")\n                                    throw TypeError(\".opentelemetry.proto.collector.metrics.v1.ExportMetricsServiceResponse.partialSuccess: object expected\");\n                                message.partialSuccess = $root.opentelemetry.proto.collector.metrics.v1.ExportMetricsPartialSuccess.fromObject(object.partialSuccess);\n                            }\n                            return message;\n                        };\n                        /**\n                         * Creates a plain object from an ExportMetricsServiceResponse message. Also converts values to other types if specified.\n                         * @function toObject\n                         * @memberof opentelemetry.proto.collector.metrics.v1.ExportMetricsServiceResponse\n                         * @static\n                         * @param {opentelemetry.proto.collector.metrics.v1.ExportMetricsServiceResponse} message ExportMetricsServiceResponse\n                         * @param {$protobuf.IConversionOptions} [options] Conversion options\n                         * @returns {Object.<string,*>} Plain object\n                         */\n                        ExportMetricsServiceResponse.toObject = function toObject(message, options) {\n                            if (!options)\n                                options = {};\n                            var object = {};\n                            if (options.defaults)\n                                object.partialSuccess = null;\n                            if (message.partialSuccess != null && message.hasOwnProperty(\"partialSuccess\"))\n                                object.partialSuccess = $root.opentelemetry.proto.collector.metrics.v1.ExportMetricsPartialSuccess.toObject(message.partialSuccess, options);\n                            return object;\n                        };\n                        /**\n                         * Converts this ExportMetricsServiceResponse to JSON.\n                         * @function toJSON\n                         * @memberof opentelemetry.proto.collector.metrics.v1.ExportMetricsServiceResponse\n                         * @instance\n                         * @returns {Object.<string,*>} JSON object\n                         */\n                        ExportMetricsServiceResponse.prototype.toJSON = function toJSON() {\n                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                        };\n                        /**\n                         * Gets the default type url for ExportMetricsServiceResponse\n                         * @function getTypeUrl\n                         * @memberof opentelemetry.proto.collector.metrics.v1.ExportMetricsServiceResponse\n                         * @static\n                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n                         * @returns {string} The default type url\n                         */\n                        ExportMetricsServiceResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                            if (typeUrlPrefix === undefined) {\n                                typeUrlPrefix = \"type.googleapis.com\";\n                            }\n                            return typeUrlPrefix + \"/opentelemetry.proto.collector.metrics.v1.ExportMetricsServiceResponse\";\n                        };\n                        return ExportMetricsServiceResponse;\n                    })();\n                    v1.ExportMetricsPartialSuccess = (function () {\n                        /**\n                         * Properties of an ExportMetricsPartialSuccess.\n                         * @memberof opentelemetry.proto.collector.metrics.v1\n                         * @interface IExportMetricsPartialSuccess\n                         * @property {number|Long|null} [rejectedDataPoints] ExportMetricsPartialSuccess rejectedDataPoints\n                         * @property {string|null} [errorMessage] ExportMetricsPartialSuccess errorMessage\n                         */\n                        /**\n                         * Constructs a new ExportMetricsPartialSuccess.\n                         * @memberof opentelemetry.proto.collector.metrics.v1\n                         * @classdesc Represents an ExportMetricsPartialSuccess.\n                         * @implements IExportMetricsPartialSuccess\n                         * @constructor\n                         * @param {opentelemetry.proto.collector.metrics.v1.IExportMetricsPartialSuccess=} [properties] Properties to set\n                         */\n                        function ExportMetricsPartialSuccess(properties) {\n                            if (properties)\n                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                                    if (properties[keys[i]] != null)\n                                        this[keys[i]] = properties[keys[i]];\n                        }\n                        /**\n                         * ExportMetricsPartialSuccess rejectedDataPoints.\n                         * @member {number|Long|null|undefined} rejectedDataPoints\n                         * @memberof opentelemetry.proto.collector.metrics.v1.ExportMetricsPartialSuccess\n                         * @instance\n                         */\n                        ExportMetricsPartialSuccess.prototype.rejectedDataPoints = null;\n                        /**\n                         * ExportMetricsPartialSuccess errorMessage.\n                         * @member {string|null|undefined} errorMessage\n                         * @memberof opentelemetry.proto.collector.metrics.v1.ExportMetricsPartialSuccess\n                         * @instance\n                         */\n                        ExportMetricsPartialSuccess.prototype.errorMessage = null;\n                        /**\n                         * Creates a new ExportMetricsPartialSuccess instance using the specified properties.\n                         * @function create\n                         * @memberof opentelemetry.proto.collector.metrics.v1.ExportMetricsPartialSuccess\n                         * @static\n                         * @param {opentelemetry.proto.collector.metrics.v1.IExportMetricsPartialSuccess=} [properties] Properties to set\n                         * @returns {opentelemetry.proto.collector.metrics.v1.ExportMetricsPartialSuccess} ExportMetricsPartialSuccess instance\n                         */\n                        ExportMetricsPartialSuccess.create = function create(properties) {\n                            return new ExportMetricsPartialSuccess(properties);\n                        };\n                        /**\n                         * Encodes the specified ExportMetricsPartialSuccess message. Does not implicitly {@link opentelemetry.proto.collector.metrics.v1.ExportMetricsPartialSuccess.verify|verify} messages.\n                         * @function encode\n                         * @memberof opentelemetry.proto.collector.metrics.v1.ExportMetricsPartialSuccess\n                         * @static\n                         * @param {opentelemetry.proto.collector.metrics.v1.IExportMetricsPartialSuccess} message ExportMetricsPartialSuccess message or plain object to encode\n                         * @param {$protobuf.Writer} [writer] Writer to encode to\n                         * @returns {$protobuf.Writer} Writer\n                         */\n                        ExportMetricsPartialSuccess.encode = function encode(message, writer) {\n                            if (!writer)\n                                writer = $Writer.create();\n                            if (message.rejectedDataPoints != null && Object.hasOwnProperty.call(message, \"rejectedDataPoints\"))\n                                writer.uint32(/* id 1, wireType 0 =*/ 8).int64(message.rejectedDataPoints);\n                            if (message.errorMessage != null && Object.hasOwnProperty.call(message, \"errorMessage\"))\n                                writer.uint32(/* id 2, wireType 2 =*/ 18).string(message.errorMessage);\n                            return writer;\n                        };\n                        /**\n                         * Encodes the specified ExportMetricsPartialSuccess message, length delimited. Does not implicitly {@link opentelemetry.proto.collector.metrics.v1.ExportMetricsPartialSuccess.verify|verify} messages.\n                         * @function encodeDelimited\n                         * @memberof opentelemetry.proto.collector.metrics.v1.ExportMetricsPartialSuccess\n                         * @static\n                         * @param {opentelemetry.proto.collector.metrics.v1.IExportMetricsPartialSuccess} message ExportMetricsPartialSuccess message or plain object to encode\n                         * @param {$protobuf.Writer} [writer] Writer to encode to\n                         * @returns {$protobuf.Writer} Writer\n                         */\n                        ExportMetricsPartialSuccess.encodeDelimited = function encodeDelimited(message, writer) {\n                            return this.encode(message, writer).ldelim();\n                        };\n                        /**\n                         * Decodes an ExportMetricsPartialSuccess message from the specified reader or buffer.\n                         * @function decode\n                         * @memberof opentelemetry.proto.collector.metrics.v1.ExportMetricsPartialSuccess\n                         * @static\n                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                         * @param {number} [length] Message length if known beforehand\n                         * @returns {opentelemetry.proto.collector.metrics.v1.ExportMetricsPartialSuccess} ExportMetricsPartialSuccess\n                         * @throws {Error} If the payload is not a reader or valid buffer\n                         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                         */\n                        ExportMetricsPartialSuccess.decode = function decode(reader, length) {\n                            if (!(reader instanceof $Reader))\n                                reader = $Reader.create(reader);\n                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.opentelemetry.proto.collector.metrics.v1.ExportMetricsPartialSuccess();\n                            while (reader.pos < end) {\n                                var tag = reader.uint32();\n                                switch (tag >>> 3) {\n                                    case 1: {\n                                        message.rejectedDataPoints = reader.int64();\n                                        break;\n                                    }\n                                    case 2: {\n                                        message.errorMessage = reader.string();\n                                        break;\n                                    }\n                                    default:\n                                        reader.skipType(tag & 7);\n                                        break;\n                                }\n                            }\n                            return message;\n                        };\n                        /**\n                         * Decodes an ExportMetricsPartialSuccess message from the specified reader or buffer, length delimited.\n                         * @function decodeDelimited\n                         * @memberof opentelemetry.proto.collector.metrics.v1.ExportMetricsPartialSuccess\n                         * @static\n                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                         * @returns {opentelemetry.proto.collector.metrics.v1.ExportMetricsPartialSuccess} ExportMetricsPartialSuccess\n                         * @throws {Error} If the payload is not a reader or valid buffer\n                         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                         */\n                        ExportMetricsPartialSuccess.decodeDelimited = function decodeDelimited(reader) {\n                            if (!(reader instanceof $Reader))\n                                reader = new $Reader(reader);\n                            return this.decode(reader, reader.uint32());\n                        };\n                        /**\n                         * Verifies an ExportMetricsPartialSuccess message.\n                         * @function verify\n                         * @memberof opentelemetry.proto.collector.metrics.v1.ExportMetricsPartialSuccess\n                         * @static\n                         * @param {Object.<string,*>} message Plain object to verify\n                         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                         */\n                        ExportMetricsPartialSuccess.verify = function verify(message) {\n                            if (typeof message !== \"object\" || message === null)\n                                return \"object expected\";\n                            if (message.rejectedDataPoints != null && message.hasOwnProperty(\"rejectedDataPoints\"))\n                                if (!$util.isInteger(message.rejectedDataPoints) && !(message.rejectedDataPoints && $util.isInteger(message.rejectedDataPoints.low) && $util.isInteger(message.rejectedDataPoints.high)))\n                                    return \"rejectedDataPoints: integer|Long expected\";\n                            if (message.errorMessage != null && message.hasOwnProperty(\"errorMessage\"))\n                                if (!$util.isString(message.errorMessage))\n                                    return \"errorMessage: string expected\";\n                            return null;\n                        };\n                        /**\n                         * Creates an ExportMetricsPartialSuccess message from a plain object. Also converts values to their respective internal types.\n                         * @function fromObject\n                         * @memberof opentelemetry.proto.collector.metrics.v1.ExportMetricsPartialSuccess\n                         * @static\n                         * @param {Object.<string,*>} object Plain object\n                         * @returns {opentelemetry.proto.collector.metrics.v1.ExportMetricsPartialSuccess} ExportMetricsPartialSuccess\n                         */\n                        ExportMetricsPartialSuccess.fromObject = function fromObject(object) {\n                            if (object instanceof $root.opentelemetry.proto.collector.metrics.v1.ExportMetricsPartialSuccess)\n                                return object;\n                            var message = new $root.opentelemetry.proto.collector.metrics.v1.ExportMetricsPartialSuccess();\n                            if (object.rejectedDataPoints != null)\n                                if ($util.Long)\n                                    (message.rejectedDataPoints = $util.Long.fromValue(object.rejectedDataPoints)).unsigned = false;\n                                else if (typeof object.rejectedDataPoints === \"string\")\n                                    message.rejectedDataPoints = parseInt(object.rejectedDataPoints, 10);\n                                else if (typeof object.rejectedDataPoints === \"number\")\n                                    message.rejectedDataPoints = object.rejectedDataPoints;\n                                else if (typeof object.rejectedDataPoints === \"object\")\n                                    message.rejectedDataPoints = new $util.LongBits(object.rejectedDataPoints.low >>> 0, object.rejectedDataPoints.high >>> 0).toNumber();\n                            if (object.errorMessage != null)\n                                message.errorMessage = String(object.errorMessage);\n                            return message;\n                        };\n                        /**\n                         * Creates a plain object from an ExportMetricsPartialSuccess message. Also converts values to other types if specified.\n                         * @function toObject\n                         * @memberof opentelemetry.proto.collector.metrics.v1.ExportMetricsPartialSuccess\n                         * @static\n                         * @param {opentelemetry.proto.collector.metrics.v1.ExportMetricsPartialSuccess} message ExportMetricsPartialSuccess\n                         * @param {$protobuf.IConversionOptions} [options] Conversion options\n                         * @returns {Object.<string,*>} Plain object\n                         */\n                        ExportMetricsPartialSuccess.toObject = function toObject(message, options) {\n                            if (!options)\n                                options = {};\n                            var object = {};\n                            if (options.defaults) {\n                                if ($util.Long) {\n                                    var long = new $util.Long(0, 0, false);\n                                    object.rejectedDataPoints = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                                }\n                                else\n                                    object.rejectedDataPoints = options.longs === String ? \"0\" : 0;\n                                object.errorMessage = \"\";\n                            }\n                            if (message.rejectedDataPoints != null && message.hasOwnProperty(\"rejectedDataPoints\"))\n                                if (typeof message.rejectedDataPoints === \"number\")\n                                    object.rejectedDataPoints = options.longs === String ? String(message.rejectedDataPoints) : message.rejectedDataPoints;\n                                else\n                                    object.rejectedDataPoints = options.longs === String ? $util.Long.prototype.toString.call(message.rejectedDataPoints) : options.longs === Number ? new $util.LongBits(message.rejectedDataPoints.low >>> 0, message.rejectedDataPoints.high >>> 0).toNumber() : message.rejectedDataPoints;\n                            if (message.errorMessage != null && message.hasOwnProperty(\"errorMessage\"))\n                                object.errorMessage = message.errorMessage;\n                            return object;\n                        };\n                        /**\n                         * Converts this ExportMetricsPartialSuccess to JSON.\n                         * @function toJSON\n                         * @memberof opentelemetry.proto.collector.metrics.v1.ExportMetricsPartialSuccess\n                         * @instance\n                         * @returns {Object.<string,*>} JSON object\n                         */\n                        ExportMetricsPartialSuccess.prototype.toJSON = function toJSON() {\n                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                        };\n                        /**\n                         * Gets the default type url for ExportMetricsPartialSuccess\n                         * @function getTypeUrl\n                         * @memberof opentelemetry.proto.collector.metrics.v1.ExportMetricsPartialSuccess\n                         * @static\n                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n                         * @returns {string} The default type url\n                         */\n                        ExportMetricsPartialSuccess.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                            if (typeUrlPrefix === undefined) {\n                                typeUrlPrefix = \"type.googleapis.com\";\n                            }\n                            return typeUrlPrefix + \"/opentelemetry.proto.collector.metrics.v1.ExportMetricsPartialSuccess\";\n                        };\n                        return ExportMetricsPartialSuccess;\n                    })();\n                    return v1;\n                })();\n                return metrics;\n            })();\n            collector.logs = (function () {\n                /**\n                 * Namespace logs.\n                 * @memberof opentelemetry.proto.collector\n                 * @namespace\n                 */\n                var logs = {};\n                logs.v1 = (function () {\n                    /**\n                     * Namespace v1.\n                     * @memberof opentelemetry.proto.collector.logs\n                     * @namespace\n                     */\n                    var v1 = {};\n                    v1.LogsService = (function () {\n                        /**\n                         * Constructs a new LogsService service.\n                         * @memberof opentelemetry.proto.collector.logs.v1\n                         * @classdesc Represents a LogsService\n                         * @extends $protobuf.rpc.Service\n                         * @constructor\n                         * @param {$protobuf.RPCImpl} rpcImpl RPC implementation\n                         * @param {boolean} [requestDelimited=false] Whether requests are length-delimited\n                         * @param {boolean} [responseDelimited=false] Whether responses are length-delimited\n                         */\n                        function LogsService(rpcImpl, requestDelimited, responseDelimited) {\n                            $protobuf.rpc.Service.call(this, rpcImpl, requestDelimited, responseDelimited);\n                        }\n                        (LogsService.prototype = Object.create($protobuf.rpc.Service.prototype)).constructor = LogsService;\n                        /**\n                         * Creates new LogsService service using the specified rpc implementation.\n                         * @function create\n                         * @memberof opentelemetry.proto.collector.logs.v1.LogsService\n                         * @static\n                         * @param {$protobuf.RPCImpl} rpcImpl RPC implementation\n                         * @param {boolean} [requestDelimited=false] Whether requests are length-delimited\n                         * @param {boolean} [responseDelimited=false] Whether responses are length-delimited\n                         * @returns {LogsService} RPC service. Useful where requests and/or responses are streamed.\n                         */\n                        LogsService.create = function create(rpcImpl, requestDelimited, responseDelimited) {\n                            return new this(rpcImpl, requestDelimited, responseDelimited);\n                        };\n                        /**\n                         * Callback as used by {@link opentelemetry.proto.collector.logs.v1.LogsService#export_}.\n                         * @memberof opentelemetry.proto.collector.logs.v1.LogsService\n                         * @typedef ExportCallback\n                         * @type {function}\n                         * @param {Error|null} error Error, if any\n                         * @param {opentelemetry.proto.collector.logs.v1.ExportLogsServiceResponse} [response] ExportLogsServiceResponse\n                         */\n                        /**\n                         * Calls Export.\n                         * @function export\n                         * @memberof opentelemetry.proto.collector.logs.v1.LogsService\n                         * @instance\n                         * @param {opentelemetry.proto.collector.logs.v1.IExportLogsServiceRequest} request ExportLogsServiceRequest message or plain object\n                         * @param {opentelemetry.proto.collector.logs.v1.LogsService.ExportCallback} callback Node-style callback called with the error, if any, and ExportLogsServiceResponse\n                         * @returns {undefined}\n                         * @variation 1\n                         */\n                        Object.defineProperty(LogsService.prototype[\"export\"] = function export_(request, callback) {\n                            return this.rpcCall(export_, $root.opentelemetry.proto.collector.logs.v1.ExportLogsServiceRequest, $root.opentelemetry.proto.collector.logs.v1.ExportLogsServiceResponse, request, callback);\n                        }, \"name\", { value: \"Export\" });\n                        /**\n                         * Calls Export.\n                         * @function export\n                         * @memberof opentelemetry.proto.collector.logs.v1.LogsService\n                         * @instance\n                         * @param {opentelemetry.proto.collector.logs.v1.IExportLogsServiceRequest} request ExportLogsServiceRequest message or plain object\n                         * @returns {Promise<opentelemetry.proto.collector.logs.v1.ExportLogsServiceResponse>} Promise\n                         * @variation 2\n                         */\n                        return LogsService;\n                    })();\n                    v1.ExportLogsServiceRequest = (function () {\n                        /**\n                         * Properties of an ExportLogsServiceRequest.\n                         * @memberof opentelemetry.proto.collector.logs.v1\n                         * @interface IExportLogsServiceRequest\n                         * @property {Array.<opentelemetry.proto.logs.v1.IResourceLogs>|null} [resourceLogs] ExportLogsServiceRequest resourceLogs\n                         */\n                        /**\n                         * Constructs a new ExportLogsServiceRequest.\n                         * @memberof opentelemetry.proto.collector.logs.v1\n                         * @classdesc Represents an ExportLogsServiceRequest.\n                         * @implements IExportLogsServiceRequest\n                         * @constructor\n                         * @param {opentelemetry.proto.collector.logs.v1.IExportLogsServiceRequest=} [properties] Properties to set\n                         */\n                        function ExportLogsServiceRequest(properties) {\n                            this.resourceLogs = [];\n                            if (properties)\n                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                                    if (properties[keys[i]] != null)\n                                        this[keys[i]] = properties[keys[i]];\n                        }\n                        /**\n                         * ExportLogsServiceRequest resourceLogs.\n                         * @member {Array.<opentelemetry.proto.logs.v1.IResourceLogs>} resourceLogs\n                         * @memberof opentelemetry.proto.collector.logs.v1.ExportLogsServiceRequest\n                         * @instance\n                         */\n                        ExportLogsServiceRequest.prototype.resourceLogs = $util.emptyArray;\n                        /**\n                         * Creates a new ExportLogsServiceRequest instance using the specified properties.\n                         * @function create\n                         * @memberof opentelemetry.proto.collector.logs.v1.ExportLogsServiceRequest\n                         * @static\n                         * @param {opentelemetry.proto.collector.logs.v1.IExportLogsServiceRequest=} [properties] Properties to set\n                         * @returns {opentelemetry.proto.collector.logs.v1.ExportLogsServiceRequest} ExportLogsServiceRequest instance\n                         */\n                        ExportLogsServiceRequest.create = function create(properties) {\n                            return new ExportLogsServiceRequest(properties);\n                        };\n                        /**\n                         * Encodes the specified ExportLogsServiceRequest message. Does not implicitly {@link opentelemetry.proto.collector.logs.v1.ExportLogsServiceRequest.verify|verify} messages.\n                         * @function encode\n                         * @memberof opentelemetry.proto.collector.logs.v1.ExportLogsServiceRequest\n                         * @static\n                         * @param {opentelemetry.proto.collector.logs.v1.IExportLogsServiceRequest} message ExportLogsServiceRequest message or plain object to encode\n                         * @param {$protobuf.Writer} [writer] Writer to encode to\n                         * @returns {$protobuf.Writer} Writer\n                         */\n                        ExportLogsServiceRequest.encode = function encode(message, writer) {\n                            if (!writer)\n                                writer = $Writer.create();\n                            if (message.resourceLogs != null && message.resourceLogs.length)\n                                for (var i = 0; i < message.resourceLogs.length; ++i)\n                                    $root.opentelemetry.proto.logs.v1.ResourceLogs.encode(message.resourceLogs[i], writer.uint32(/* id 1, wireType 2 =*/ 10).fork()).ldelim();\n                            return writer;\n                        };\n                        /**\n                         * Encodes the specified ExportLogsServiceRequest message, length delimited. Does not implicitly {@link opentelemetry.proto.collector.logs.v1.ExportLogsServiceRequest.verify|verify} messages.\n                         * @function encodeDelimited\n                         * @memberof opentelemetry.proto.collector.logs.v1.ExportLogsServiceRequest\n                         * @static\n                         * @param {opentelemetry.proto.collector.logs.v1.IExportLogsServiceRequest} message ExportLogsServiceRequest message or plain object to encode\n                         * @param {$protobuf.Writer} [writer] Writer to encode to\n                         * @returns {$protobuf.Writer} Writer\n                         */\n                        ExportLogsServiceRequest.encodeDelimited = function encodeDelimited(message, writer) {\n                            return this.encode(message, writer).ldelim();\n                        };\n                        /**\n                         * Decodes an ExportLogsServiceRequest message from the specified reader or buffer.\n                         * @function decode\n                         * @memberof opentelemetry.proto.collector.logs.v1.ExportLogsServiceRequest\n                         * @static\n                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                         * @param {number} [length] Message length if known beforehand\n                         * @returns {opentelemetry.proto.collector.logs.v1.ExportLogsServiceRequest} ExportLogsServiceRequest\n                         * @throws {Error} If the payload is not a reader or valid buffer\n                         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                         */\n                        ExportLogsServiceRequest.decode = function decode(reader, length) {\n                            if (!(reader instanceof $Reader))\n                                reader = $Reader.create(reader);\n                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.opentelemetry.proto.collector.logs.v1.ExportLogsServiceRequest();\n                            while (reader.pos < end) {\n                                var tag = reader.uint32();\n                                switch (tag >>> 3) {\n                                    case 1: {\n                                        if (!(message.resourceLogs && message.resourceLogs.length))\n                                            message.resourceLogs = [];\n                                        message.resourceLogs.push($root.opentelemetry.proto.logs.v1.ResourceLogs.decode(reader, reader.uint32()));\n                                        break;\n                                    }\n                                    default:\n                                        reader.skipType(tag & 7);\n                                        break;\n                                }\n                            }\n                            return message;\n                        };\n                        /**\n                         * Decodes an ExportLogsServiceRequest message from the specified reader or buffer, length delimited.\n                         * @function decodeDelimited\n                         * @memberof opentelemetry.proto.collector.logs.v1.ExportLogsServiceRequest\n                         * @static\n                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                         * @returns {opentelemetry.proto.collector.logs.v1.ExportLogsServiceRequest} ExportLogsServiceRequest\n                         * @throws {Error} If the payload is not a reader or valid buffer\n                         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                         */\n                        ExportLogsServiceRequest.decodeDelimited = function decodeDelimited(reader) {\n                            if (!(reader instanceof $Reader))\n                                reader = new $Reader(reader);\n                            return this.decode(reader, reader.uint32());\n                        };\n                        /**\n                         * Verifies an ExportLogsServiceRequest message.\n                         * @function verify\n                         * @memberof opentelemetry.proto.collector.logs.v1.ExportLogsServiceRequest\n                         * @static\n                         * @param {Object.<string,*>} message Plain object to verify\n                         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                         */\n                        ExportLogsServiceRequest.verify = function verify(message) {\n                            if (typeof message !== \"object\" || message === null)\n                                return \"object expected\";\n                            if (message.resourceLogs != null && message.hasOwnProperty(\"resourceLogs\")) {\n                                if (!Array.isArray(message.resourceLogs))\n                                    return \"resourceLogs: array expected\";\n                                for (var i = 0; i < message.resourceLogs.length; ++i) {\n                                    var error = $root.opentelemetry.proto.logs.v1.ResourceLogs.verify(message.resourceLogs[i]);\n                                    if (error)\n                                        return \"resourceLogs.\" + error;\n                                }\n                            }\n                            return null;\n                        };\n                        /**\n                         * Creates an ExportLogsServiceRequest message from a plain object. Also converts values to their respective internal types.\n                         * @function fromObject\n                         * @memberof opentelemetry.proto.collector.logs.v1.ExportLogsServiceRequest\n                         * @static\n                         * @param {Object.<string,*>} object Plain object\n                         * @returns {opentelemetry.proto.collector.logs.v1.ExportLogsServiceRequest} ExportLogsServiceRequest\n                         */\n                        ExportLogsServiceRequest.fromObject = function fromObject(object) {\n                            if (object instanceof $root.opentelemetry.proto.collector.logs.v1.ExportLogsServiceRequest)\n                                return object;\n                            var message = new $root.opentelemetry.proto.collector.logs.v1.ExportLogsServiceRequest();\n                            if (object.resourceLogs) {\n                                if (!Array.isArray(object.resourceLogs))\n                                    throw TypeError(\".opentelemetry.proto.collector.logs.v1.ExportLogsServiceRequest.resourceLogs: array expected\");\n                                message.resourceLogs = [];\n                                for (var i = 0; i < object.resourceLogs.length; ++i) {\n                                    if (typeof object.resourceLogs[i] !== \"object\")\n                                        throw TypeError(\".opentelemetry.proto.collector.logs.v1.ExportLogsServiceRequest.resourceLogs: object expected\");\n                                    message.resourceLogs[i] = $root.opentelemetry.proto.logs.v1.ResourceLogs.fromObject(object.resourceLogs[i]);\n                                }\n                            }\n                            return message;\n                        };\n                        /**\n                         * Creates a plain object from an ExportLogsServiceRequest message. Also converts values to other types if specified.\n                         * @function toObject\n                         * @memberof opentelemetry.proto.collector.logs.v1.ExportLogsServiceRequest\n                         * @static\n                         * @param {opentelemetry.proto.collector.logs.v1.ExportLogsServiceRequest} message ExportLogsServiceRequest\n                         * @param {$protobuf.IConversionOptions} [options] Conversion options\n                         * @returns {Object.<string,*>} Plain object\n                         */\n                        ExportLogsServiceRequest.toObject = function toObject(message, options) {\n                            if (!options)\n                                options = {};\n                            var object = {};\n                            if (options.arrays || options.defaults)\n                                object.resourceLogs = [];\n                            if (message.resourceLogs && message.resourceLogs.length) {\n                                object.resourceLogs = [];\n                                for (var j = 0; j < message.resourceLogs.length; ++j)\n                                    object.resourceLogs[j] = $root.opentelemetry.proto.logs.v1.ResourceLogs.toObject(message.resourceLogs[j], options);\n                            }\n                            return object;\n                        };\n                        /**\n                         * Converts this ExportLogsServiceRequest to JSON.\n                         * @function toJSON\n                         * @memberof opentelemetry.proto.collector.logs.v1.ExportLogsServiceRequest\n                         * @instance\n                         * @returns {Object.<string,*>} JSON object\n                         */\n                        ExportLogsServiceRequest.prototype.toJSON = function toJSON() {\n                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                        };\n                        /**\n                         * Gets the default type url for ExportLogsServiceRequest\n                         * @function getTypeUrl\n                         * @memberof opentelemetry.proto.collector.logs.v1.ExportLogsServiceRequest\n                         * @static\n                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n                         * @returns {string} The default type url\n                         */\n                        ExportLogsServiceRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                            if (typeUrlPrefix === undefined) {\n                                typeUrlPrefix = \"type.googleapis.com\";\n                            }\n                            return typeUrlPrefix + \"/opentelemetry.proto.collector.logs.v1.ExportLogsServiceRequest\";\n                        };\n                        return ExportLogsServiceRequest;\n                    })();\n                    v1.ExportLogsServiceResponse = (function () {\n                        /**\n                         * Properties of an ExportLogsServiceResponse.\n                         * @memberof opentelemetry.proto.collector.logs.v1\n                         * @interface IExportLogsServiceResponse\n                         * @property {opentelemetry.proto.collector.logs.v1.IExportLogsPartialSuccess|null} [partialSuccess] ExportLogsServiceResponse partialSuccess\n                         */\n                        /**\n                         * Constructs a new ExportLogsServiceResponse.\n                         * @memberof opentelemetry.proto.collector.logs.v1\n                         * @classdesc Represents an ExportLogsServiceResponse.\n                         * @implements IExportLogsServiceResponse\n                         * @constructor\n                         * @param {opentelemetry.proto.collector.logs.v1.IExportLogsServiceResponse=} [properties] Properties to set\n                         */\n                        function ExportLogsServiceResponse(properties) {\n                            if (properties)\n                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                                    if (properties[keys[i]] != null)\n                                        this[keys[i]] = properties[keys[i]];\n                        }\n                        /**\n                         * ExportLogsServiceResponse partialSuccess.\n                         * @member {opentelemetry.proto.collector.logs.v1.IExportLogsPartialSuccess|null|undefined} partialSuccess\n                         * @memberof opentelemetry.proto.collector.logs.v1.ExportLogsServiceResponse\n                         * @instance\n                         */\n                        ExportLogsServiceResponse.prototype.partialSuccess = null;\n                        /**\n                         * Creates a new ExportLogsServiceResponse instance using the specified properties.\n                         * @function create\n                         * @memberof opentelemetry.proto.collector.logs.v1.ExportLogsServiceResponse\n                         * @static\n                         * @param {opentelemetry.proto.collector.logs.v1.IExportLogsServiceResponse=} [properties] Properties to set\n                         * @returns {opentelemetry.proto.collector.logs.v1.ExportLogsServiceResponse} ExportLogsServiceResponse instance\n                         */\n                        ExportLogsServiceResponse.create = function create(properties) {\n                            return new ExportLogsServiceResponse(properties);\n                        };\n                        /**\n                         * Encodes the specified ExportLogsServiceResponse message. Does not implicitly {@link opentelemetry.proto.collector.logs.v1.ExportLogsServiceResponse.verify|verify} messages.\n                         * @function encode\n                         * @memberof opentelemetry.proto.collector.logs.v1.ExportLogsServiceResponse\n                         * @static\n                         * @param {opentelemetry.proto.collector.logs.v1.IExportLogsServiceResponse} message ExportLogsServiceResponse message or plain object to encode\n                         * @param {$protobuf.Writer} [writer] Writer to encode to\n                         * @returns {$protobuf.Writer} Writer\n                         */\n                        ExportLogsServiceResponse.encode = function encode(message, writer) {\n                            if (!writer)\n                                writer = $Writer.create();\n                            if (message.partialSuccess != null && Object.hasOwnProperty.call(message, \"partialSuccess\"))\n                                $root.opentelemetry.proto.collector.logs.v1.ExportLogsPartialSuccess.encode(message.partialSuccess, writer.uint32(/* id 1, wireType 2 =*/ 10).fork()).ldelim();\n                            return writer;\n                        };\n                        /**\n                         * Encodes the specified ExportLogsServiceResponse message, length delimited. Does not implicitly {@link opentelemetry.proto.collector.logs.v1.ExportLogsServiceResponse.verify|verify} messages.\n                         * @function encodeDelimited\n                         * @memberof opentelemetry.proto.collector.logs.v1.ExportLogsServiceResponse\n                         * @static\n                         * @param {opentelemetry.proto.collector.logs.v1.IExportLogsServiceResponse} message ExportLogsServiceResponse message or plain object to encode\n                         * @param {$protobuf.Writer} [writer] Writer to encode to\n                         * @returns {$protobuf.Writer} Writer\n                         */\n                        ExportLogsServiceResponse.encodeDelimited = function encodeDelimited(message, writer) {\n                            return this.encode(message, writer).ldelim();\n                        };\n                        /**\n                         * Decodes an ExportLogsServiceResponse message from the specified reader or buffer.\n                         * @function decode\n                         * @memberof opentelemetry.proto.collector.logs.v1.ExportLogsServiceResponse\n                         * @static\n                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                         * @param {number} [length] Message length if known beforehand\n                         * @returns {opentelemetry.proto.collector.logs.v1.ExportLogsServiceResponse} ExportLogsServiceResponse\n                         * @throws {Error} If the payload is not a reader or valid buffer\n                         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                         */\n                        ExportLogsServiceResponse.decode = function decode(reader, length) {\n                            if (!(reader instanceof $Reader))\n                                reader = $Reader.create(reader);\n                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.opentelemetry.proto.collector.logs.v1.ExportLogsServiceResponse();\n                            while (reader.pos < end) {\n                                var tag = reader.uint32();\n                                switch (tag >>> 3) {\n                                    case 1: {\n                                        message.partialSuccess = $root.opentelemetry.proto.collector.logs.v1.ExportLogsPartialSuccess.decode(reader, reader.uint32());\n                                        break;\n                                    }\n                                    default:\n                                        reader.skipType(tag & 7);\n                                        break;\n                                }\n                            }\n                            return message;\n                        };\n                        /**\n                         * Decodes an ExportLogsServiceResponse message from the specified reader or buffer, length delimited.\n                         * @function decodeDelimited\n                         * @memberof opentelemetry.proto.collector.logs.v1.ExportLogsServiceResponse\n                         * @static\n                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                         * @returns {opentelemetry.proto.collector.logs.v1.ExportLogsServiceResponse} ExportLogsServiceResponse\n                         * @throws {Error} If the payload is not a reader or valid buffer\n                         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                         */\n                        ExportLogsServiceResponse.decodeDelimited = function decodeDelimited(reader) {\n                            if (!(reader instanceof $Reader))\n                                reader = new $Reader(reader);\n                            return this.decode(reader, reader.uint32());\n                        };\n                        /**\n                         * Verifies an ExportLogsServiceResponse message.\n                         * @function verify\n                         * @memberof opentelemetry.proto.collector.logs.v1.ExportLogsServiceResponse\n                         * @static\n                         * @param {Object.<string,*>} message Plain object to verify\n                         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                         */\n                        ExportLogsServiceResponse.verify = function verify(message) {\n                            if (typeof message !== \"object\" || message === null)\n                                return \"object expected\";\n                            if (message.partialSuccess != null && message.hasOwnProperty(\"partialSuccess\")) {\n                                var error = $root.opentelemetry.proto.collector.logs.v1.ExportLogsPartialSuccess.verify(message.partialSuccess);\n                                if (error)\n                                    return \"partialSuccess.\" + error;\n                            }\n                            return null;\n                        };\n                        /**\n                         * Creates an ExportLogsServiceResponse message from a plain object. Also converts values to their respective internal types.\n                         * @function fromObject\n                         * @memberof opentelemetry.proto.collector.logs.v1.ExportLogsServiceResponse\n                         * @static\n                         * @param {Object.<string,*>} object Plain object\n                         * @returns {opentelemetry.proto.collector.logs.v1.ExportLogsServiceResponse} ExportLogsServiceResponse\n                         */\n                        ExportLogsServiceResponse.fromObject = function fromObject(object) {\n                            if (object instanceof $root.opentelemetry.proto.collector.logs.v1.ExportLogsServiceResponse)\n                                return object;\n                            var message = new $root.opentelemetry.proto.collector.logs.v1.ExportLogsServiceResponse();\n                            if (object.partialSuccess != null) {\n                                if (typeof object.partialSuccess !== \"object\")\n                                    throw TypeError(\".opentelemetry.proto.collector.logs.v1.ExportLogsServiceResponse.partialSuccess: object expected\");\n                                message.partialSuccess = $root.opentelemetry.proto.collector.logs.v1.ExportLogsPartialSuccess.fromObject(object.partialSuccess);\n                            }\n                            return message;\n                        };\n                        /**\n                         * Creates a plain object from an ExportLogsServiceResponse message. Also converts values to other types if specified.\n                         * @function toObject\n                         * @memberof opentelemetry.proto.collector.logs.v1.ExportLogsServiceResponse\n                         * @static\n                         * @param {opentelemetry.proto.collector.logs.v1.ExportLogsServiceResponse} message ExportLogsServiceResponse\n                         * @param {$protobuf.IConversionOptions} [options] Conversion options\n                         * @returns {Object.<string,*>} Plain object\n                         */\n                        ExportLogsServiceResponse.toObject = function toObject(message, options) {\n                            if (!options)\n                                options = {};\n                            var object = {};\n                            if (options.defaults)\n                                object.partialSuccess = null;\n                            if (message.partialSuccess != null && message.hasOwnProperty(\"partialSuccess\"))\n                                object.partialSuccess = $root.opentelemetry.proto.collector.logs.v1.ExportLogsPartialSuccess.toObject(message.partialSuccess, options);\n                            return object;\n                        };\n                        /**\n                         * Converts this ExportLogsServiceResponse to JSON.\n                         * @function toJSON\n                         * @memberof opentelemetry.proto.collector.logs.v1.ExportLogsServiceResponse\n                         * @instance\n                         * @returns {Object.<string,*>} JSON object\n                         */\n                        ExportLogsServiceResponse.prototype.toJSON = function toJSON() {\n                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                        };\n                        /**\n                         * Gets the default type url for ExportLogsServiceResponse\n                         * @function getTypeUrl\n                         * @memberof opentelemetry.proto.collector.logs.v1.ExportLogsServiceResponse\n                         * @static\n                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n                         * @returns {string} The default type url\n                         */\n                        ExportLogsServiceResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                            if (typeUrlPrefix === undefined) {\n                                typeUrlPrefix = \"type.googleapis.com\";\n                            }\n                            return typeUrlPrefix + \"/opentelemetry.proto.collector.logs.v1.ExportLogsServiceResponse\";\n                        };\n                        return ExportLogsServiceResponse;\n                    })();\n                    v1.ExportLogsPartialSuccess = (function () {\n                        /**\n                         * Properties of an ExportLogsPartialSuccess.\n                         * @memberof opentelemetry.proto.collector.logs.v1\n                         * @interface IExportLogsPartialSuccess\n                         * @property {number|Long|null} [rejectedLogRecords] ExportLogsPartialSuccess rejectedLogRecords\n                         * @property {string|null} [errorMessage] ExportLogsPartialSuccess errorMessage\n                         */\n                        /**\n                         * Constructs a new ExportLogsPartialSuccess.\n                         * @memberof opentelemetry.proto.collector.logs.v1\n                         * @classdesc Represents an ExportLogsPartialSuccess.\n                         * @implements IExportLogsPartialSuccess\n                         * @constructor\n                         * @param {opentelemetry.proto.collector.logs.v1.IExportLogsPartialSuccess=} [properties] Properties to set\n                         */\n                        function ExportLogsPartialSuccess(properties) {\n                            if (properties)\n                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                                    if (properties[keys[i]] != null)\n                                        this[keys[i]] = properties[keys[i]];\n                        }\n                        /**\n                         * ExportLogsPartialSuccess rejectedLogRecords.\n                         * @member {number|Long|null|undefined} rejectedLogRecords\n                         * @memberof opentelemetry.proto.collector.logs.v1.ExportLogsPartialSuccess\n                         * @instance\n                         */\n                        ExportLogsPartialSuccess.prototype.rejectedLogRecords = null;\n                        /**\n                         * ExportLogsPartialSuccess errorMessage.\n                         * @member {string|null|undefined} errorMessage\n                         * @memberof opentelemetry.proto.collector.logs.v1.ExportLogsPartialSuccess\n                         * @instance\n                         */\n                        ExportLogsPartialSuccess.prototype.errorMessage = null;\n                        /**\n                         * Creates a new ExportLogsPartialSuccess instance using the specified properties.\n                         * @function create\n                         * @memberof opentelemetry.proto.collector.logs.v1.ExportLogsPartialSuccess\n                         * @static\n                         * @param {opentelemetry.proto.collector.logs.v1.IExportLogsPartialSuccess=} [properties] Properties to set\n                         * @returns {opentelemetry.proto.collector.logs.v1.ExportLogsPartialSuccess} ExportLogsPartialSuccess instance\n                         */\n                        ExportLogsPartialSuccess.create = function create(properties) {\n                            return new ExportLogsPartialSuccess(properties);\n                        };\n                        /**\n                         * Encodes the specified ExportLogsPartialSuccess message. Does not implicitly {@link opentelemetry.proto.collector.logs.v1.ExportLogsPartialSuccess.verify|verify} messages.\n                         * @function encode\n                         * @memberof opentelemetry.proto.collector.logs.v1.ExportLogsPartialSuccess\n                         * @static\n                         * @param {opentelemetry.proto.collector.logs.v1.IExportLogsPartialSuccess} message ExportLogsPartialSuccess message or plain object to encode\n                         * @param {$protobuf.Writer} [writer] Writer to encode to\n                         * @returns {$protobuf.Writer} Writer\n                         */\n                        ExportLogsPartialSuccess.encode = function encode(message, writer) {\n                            if (!writer)\n                                writer = $Writer.create();\n                            if (message.rejectedLogRecords != null && Object.hasOwnProperty.call(message, \"rejectedLogRecords\"))\n                                writer.uint32(/* id 1, wireType 0 =*/ 8).int64(message.rejectedLogRecords);\n                            if (message.errorMessage != null && Object.hasOwnProperty.call(message, \"errorMessage\"))\n                                writer.uint32(/* id 2, wireType 2 =*/ 18).string(message.errorMessage);\n                            return writer;\n                        };\n                        /**\n                         * Encodes the specified ExportLogsPartialSuccess message, length delimited. Does not implicitly {@link opentelemetry.proto.collector.logs.v1.ExportLogsPartialSuccess.verify|verify} messages.\n                         * @function encodeDelimited\n                         * @memberof opentelemetry.proto.collector.logs.v1.ExportLogsPartialSuccess\n                         * @static\n                         * @param {opentelemetry.proto.collector.logs.v1.IExportLogsPartialSuccess} message ExportLogsPartialSuccess message or plain object to encode\n                         * @param {$protobuf.Writer} [writer] Writer to encode to\n                         * @returns {$protobuf.Writer} Writer\n                         */\n                        ExportLogsPartialSuccess.encodeDelimited = function encodeDelimited(message, writer) {\n                            return this.encode(message, writer).ldelim();\n                        };\n                        /**\n                         * Decodes an ExportLogsPartialSuccess message from the specified reader or buffer.\n                         * @function decode\n                         * @memberof opentelemetry.proto.collector.logs.v1.ExportLogsPartialSuccess\n                         * @static\n                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                         * @param {number} [length] Message length if known beforehand\n                         * @returns {opentelemetry.proto.collector.logs.v1.ExportLogsPartialSuccess} ExportLogsPartialSuccess\n                         * @throws {Error} If the payload is not a reader or valid buffer\n                         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                         */\n                        ExportLogsPartialSuccess.decode = function decode(reader, length) {\n                            if (!(reader instanceof $Reader))\n                                reader = $Reader.create(reader);\n                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.opentelemetry.proto.collector.logs.v1.ExportLogsPartialSuccess();\n                            while (reader.pos < end) {\n                                var tag = reader.uint32();\n                                switch (tag >>> 3) {\n                                    case 1: {\n                                        message.rejectedLogRecords = reader.int64();\n                                        break;\n                                    }\n                                    case 2: {\n                                        message.errorMessage = reader.string();\n                                        break;\n                                    }\n                                    default:\n                                        reader.skipType(tag & 7);\n                                        break;\n                                }\n                            }\n                            return message;\n                        };\n                        /**\n                         * Decodes an ExportLogsPartialSuccess message from the specified reader or buffer, length delimited.\n                         * @function decodeDelimited\n                         * @memberof opentelemetry.proto.collector.logs.v1.ExportLogsPartialSuccess\n                         * @static\n                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                         * @returns {opentelemetry.proto.collector.logs.v1.ExportLogsPartialSuccess} ExportLogsPartialSuccess\n                         * @throws {Error} If the payload is not a reader or valid buffer\n                         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                         */\n                        ExportLogsPartialSuccess.decodeDelimited = function decodeDelimited(reader) {\n                            if (!(reader instanceof $Reader))\n                                reader = new $Reader(reader);\n                            return this.decode(reader, reader.uint32());\n                        };\n                        /**\n                         * Verifies an ExportLogsPartialSuccess message.\n                         * @function verify\n                         * @memberof opentelemetry.proto.collector.logs.v1.ExportLogsPartialSuccess\n                         * @static\n                         * @param {Object.<string,*>} message Plain object to verify\n                         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                         */\n                        ExportLogsPartialSuccess.verify = function verify(message) {\n                            if (typeof message !== \"object\" || message === null)\n                                return \"object expected\";\n                            if (message.rejectedLogRecords != null && message.hasOwnProperty(\"rejectedLogRecords\"))\n                                if (!$util.isInteger(message.rejectedLogRecords) && !(message.rejectedLogRecords && $util.isInteger(message.rejectedLogRecords.low) && $util.isInteger(message.rejectedLogRecords.high)))\n                                    return \"rejectedLogRecords: integer|Long expected\";\n                            if (message.errorMessage != null && message.hasOwnProperty(\"errorMessage\"))\n                                if (!$util.isString(message.errorMessage))\n                                    return \"errorMessage: string expected\";\n                            return null;\n                        };\n                        /**\n                         * Creates an ExportLogsPartialSuccess message from a plain object. Also converts values to their respective internal types.\n                         * @function fromObject\n                         * @memberof opentelemetry.proto.collector.logs.v1.ExportLogsPartialSuccess\n                         * @static\n                         * @param {Object.<string,*>} object Plain object\n                         * @returns {opentelemetry.proto.collector.logs.v1.ExportLogsPartialSuccess} ExportLogsPartialSuccess\n                         */\n                        ExportLogsPartialSuccess.fromObject = function fromObject(object) {\n                            if (object instanceof $root.opentelemetry.proto.collector.logs.v1.ExportLogsPartialSuccess)\n                                return object;\n                            var message = new $root.opentelemetry.proto.collector.logs.v1.ExportLogsPartialSuccess();\n                            if (object.rejectedLogRecords != null)\n                                if ($util.Long)\n                                    (message.rejectedLogRecords = $util.Long.fromValue(object.rejectedLogRecords)).unsigned = false;\n                                else if (typeof object.rejectedLogRecords === \"string\")\n                                    message.rejectedLogRecords = parseInt(object.rejectedLogRecords, 10);\n                                else if (typeof object.rejectedLogRecords === \"number\")\n                                    message.rejectedLogRecords = object.rejectedLogRecords;\n                                else if (typeof object.rejectedLogRecords === \"object\")\n                                    message.rejectedLogRecords = new $util.LongBits(object.rejectedLogRecords.low >>> 0, object.rejectedLogRecords.high >>> 0).toNumber();\n                            if (object.errorMessage != null)\n                                message.errorMessage = String(object.errorMessage);\n                            return message;\n                        };\n                        /**\n                         * Creates a plain object from an ExportLogsPartialSuccess message. Also converts values to other types if specified.\n                         * @function toObject\n                         * @memberof opentelemetry.proto.collector.logs.v1.ExportLogsPartialSuccess\n                         * @static\n                         * @param {opentelemetry.proto.collector.logs.v1.ExportLogsPartialSuccess} message ExportLogsPartialSuccess\n                         * @param {$protobuf.IConversionOptions} [options] Conversion options\n                         * @returns {Object.<string,*>} Plain object\n                         */\n                        ExportLogsPartialSuccess.toObject = function toObject(message, options) {\n                            if (!options)\n                                options = {};\n                            var object = {};\n                            if (options.defaults) {\n                                if ($util.Long) {\n                                    var long = new $util.Long(0, 0, false);\n                                    object.rejectedLogRecords = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                                }\n                                else\n                                    object.rejectedLogRecords = options.longs === String ? \"0\" : 0;\n                                object.errorMessage = \"\";\n                            }\n                            if (message.rejectedLogRecords != null && message.hasOwnProperty(\"rejectedLogRecords\"))\n                                if (typeof message.rejectedLogRecords === \"number\")\n                                    object.rejectedLogRecords = options.longs === String ? String(message.rejectedLogRecords) : message.rejectedLogRecords;\n                                else\n                                    object.rejectedLogRecords = options.longs === String ? $util.Long.prototype.toString.call(message.rejectedLogRecords) : options.longs === Number ? new $util.LongBits(message.rejectedLogRecords.low >>> 0, message.rejectedLogRecords.high >>> 0).toNumber() : message.rejectedLogRecords;\n                            if (message.errorMessage != null && message.hasOwnProperty(\"errorMessage\"))\n                                object.errorMessage = message.errorMessage;\n                            return object;\n                        };\n                        /**\n                         * Converts this ExportLogsPartialSuccess to JSON.\n                         * @function toJSON\n                         * @memberof opentelemetry.proto.collector.logs.v1.ExportLogsPartialSuccess\n                         * @instance\n                         * @returns {Object.<string,*>} JSON object\n                         */\n                        ExportLogsPartialSuccess.prototype.toJSON = function toJSON() {\n                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                        };\n                        /**\n                         * Gets the default type url for ExportLogsPartialSuccess\n                         * @function getTypeUrl\n                         * @memberof opentelemetry.proto.collector.logs.v1.ExportLogsPartialSuccess\n                         * @static\n                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n                         * @returns {string} The default type url\n                         */\n                        ExportLogsPartialSuccess.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                            if (typeUrlPrefix === undefined) {\n                                typeUrlPrefix = \"type.googleapis.com\";\n                            }\n                            return typeUrlPrefix + \"/opentelemetry.proto.collector.logs.v1.ExportLogsPartialSuccess\";\n                        };\n                        return ExportLogsPartialSuccess;\n                    })();\n                    return v1;\n                })();\n                return logs;\n            })();\n            return collector;\n        })();\n        proto.metrics = (function () {\n            /**\n             * Namespace metrics.\n             * @memberof opentelemetry.proto\n             * @namespace\n             */\n            var metrics = {};\n            metrics.v1 = (function () {\n                /**\n                 * Namespace v1.\n                 * @memberof opentelemetry.proto.metrics\n                 * @namespace\n                 */\n                var v1 = {};\n                v1.MetricsData = (function () {\n                    /**\n                     * Properties of a MetricsData.\n                     * @memberof opentelemetry.proto.metrics.v1\n                     * @interface IMetricsData\n                     * @property {Array.<opentelemetry.proto.metrics.v1.IResourceMetrics>|null} [resourceMetrics] MetricsData resourceMetrics\n                     */\n                    /**\n                     * Constructs a new MetricsData.\n                     * @memberof opentelemetry.proto.metrics.v1\n                     * @classdesc Represents a MetricsData.\n                     * @implements IMetricsData\n                     * @constructor\n                     * @param {opentelemetry.proto.metrics.v1.IMetricsData=} [properties] Properties to set\n                     */\n                    function MetricsData(properties) {\n                        this.resourceMetrics = [];\n                        if (properties)\n                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                                if (properties[keys[i]] != null)\n                                    this[keys[i]] = properties[keys[i]];\n                    }\n                    /**\n                     * MetricsData resourceMetrics.\n                     * @member {Array.<opentelemetry.proto.metrics.v1.IResourceMetrics>} resourceMetrics\n                     * @memberof opentelemetry.proto.metrics.v1.MetricsData\n                     * @instance\n                     */\n                    MetricsData.prototype.resourceMetrics = $util.emptyArray;\n                    /**\n                     * Creates a new MetricsData instance using the specified properties.\n                     * @function create\n                     * @memberof opentelemetry.proto.metrics.v1.MetricsData\n                     * @static\n                     * @param {opentelemetry.proto.metrics.v1.IMetricsData=} [properties] Properties to set\n                     * @returns {opentelemetry.proto.metrics.v1.MetricsData} MetricsData instance\n                     */\n                    MetricsData.create = function create(properties) {\n                        return new MetricsData(properties);\n                    };\n                    /**\n                     * Encodes the specified MetricsData message. Does not implicitly {@link opentelemetry.proto.metrics.v1.MetricsData.verify|verify} messages.\n                     * @function encode\n                     * @memberof opentelemetry.proto.metrics.v1.MetricsData\n                     * @static\n                     * @param {opentelemetry.proto.metrics.v1.IMetricsData} message MetricsData message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    MetricsData.encode = function encode(message, writer) {\n                        if (!writer)\n                            writer = $Writer.create();\n                        if (message.resourceMetrics != null && message.resourceMetrics.length)\n                            for (var i = 0; i < message.resourceMetrics.length; ++i)\n                                $root.opentelemetry.proto.metrics.v1.ResourceMetrics.encode(message.resourceMetrics[i], writer.uint32(/* id 1, wireType 2 =*/ 10).fork()).ldelim();\n                        return writer;\n                    };\n                    /**\n                     * Encodes the specified MetricsData message, length delimited. Does not implicitly {@link opentelemetry.proto.metrics.v1.MetricsData.verify|verify} messages.\n                     * @function encodeDelimited\n                     * @memberof opentelemetry.proto.metrics.v1.MetricsData\n                     * @static\n                     * @param {opentelemetry.proto.metrics.v1.IMetricsData} message MetricsData message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    MetricsData.encodeDelimited = function encodeDelimited(message, writer) {\n                        return this.encode(message, writer).ldelim();\n                    };\n                    /**\n                     * Decodes a MetricsData message from the specified reader or buffer.\n                     * @function decode\n                     * @memberof opentelemetry.proto.metrics.v1.MetricsData\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @param {number} [length] Message length if known beforehand\n                     * @returns {opentelemetry.proto.metrics.v1.MetricsData} MetricsData\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    MetricsData.decode = function decode(reader, length) {\n                        if (!(reader instanceof $Reader))\n                            reader = $Reader.create(reader);\n                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.opentelemetry.proto.metrics.v1.MetricsData();\n                        while (reader.pos < end) {\n                            var tag = reader.uint32();\n                            switch (tag >>> 3) {\n                                case 1: {\n                                    if (!(message.resourceMetrics && message.resourceMetrics.length))\n                                        message.resourceMetrics = [];\n                                    message.resourceMetrics.push($root.opentelemetry.proto.metrics.v1.ResourceMetrics.decode(reader, reader.uint32()));\n                                    break;\n                                }\n                                default:\n                                    reader.skipType(tag & 7);\n                                    break;\n                            }\n                        }\n                        return message;\n                    };\n                    /**\n                     * Decodes a MetricsData message from the specified reader or buffer, length delimited.\n                     * @function decodeDelimited\n                     * @memberof opentelemetry.proto.metrics.v1.MetricsData\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @returns {opentelemetry.proto.metrics.v1.MetricsData} MetricsData\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    MetricsData.decodeDelimited = function decodeDelimited(reader) {\n                        if (!(reader instanceof $Reader))\n                            reader = new $Reader(reader);\n                        return this.decode(reader, reader.uint32());\n                    };\n                    /**\n                     * Verifies a MetricsData message.\n                     * @function verify\n                     * @memberof opentelemetry.proto.metrics.v1.MetricsData\n                     * @static\n                     * @param {Object.<string,*>} message Plain object to verify\n                     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                     */\n                    MetricsData.verify = function verify(message) {\n                        if (typeof message !== \"object\" || message === null)\n                            return \"object expected\";\n                        if (message.resourceMetrics != null && message.hasOwnProperty(\"resourceMetrics\")) {\n                            if (!Array.isArray(message.resourceMetrics))\n                                return \"resourceMetrics: array expected\";\n                            for (var i = 0; i < message.resourceMetrics.length; ++i) {\n                                var error = $root.opentelemetry.proto.metrics.v1.ResourceMetrics.verify(message.resourceMetrics[i]);\n                                if (error)\n                                    return \"resourceMetrics.\" + error;\n                            }\n                        }\n                        return null;\n                    };\n                    /**\n                     * Creates a MetricsData message from a plain object. Also converts values to their respective internal types.\n                     * @function fromObject\n                     * @memberof opentelemetry.proto.metrics.v1.MetricsData\n                     * @static\n                     * @param {Object.<string,*>} object Plain object\n                     * @returns {opentelemetry.proto.metrics.v1.MetricsData} MetricsData\n                     */\n                    MetricsData.fromObject = function fromObject(object) {\n                        if (object instanceof $root.opentelemetry.proto.metrics.v1.MetricsData)\n                            return object;\n                        var message = new $root.opentelemetry.proto.metrics.v1.MetricsData();\n                        if (object.resourceMetrics) {\n                            if (!Array.isArray(object.resourceMetrics))\n                                throw TypeError(\".opentelemetry.proto.metrics.v1.MetricsData.resourceMetrics: array expected\");\n                            message.resourceMetrics = [];\n                            for (var i = 0; i < object.resourceMetrics.length; ++i) {\n                                if (typeof object.resourceMetrics[i] !== \"object\")\n                                    throw TypeError(\".opentelemetry.proto.metrics.v1.MetricsData.resourceMetrics: object expected\");\n                                message.resourceMetrics[i] = $root.opentelemetry.proto.metrics.v1.ResourceMetrics.fromObject(object.resourceMetrics[i]);\n                            }\n                        }\n                        return message;\n                    };\n                    /**\n                     * Creates a plain object from a MetricsData message. Also converts values to other types if specified.\n                     * @function toObject\n                     * @memberof opentelemetry.proto.metrics.v1.MetricsData\n                     * @static\n                     * @param {opentelemetry.proto.metrics.v1.MetricsData} message MetricsData\n                     * @param {$protobuf.IConversionOptions} [options] Conversion options\n                     * @returns {Object.<string,*>} Plain object\n                     */\n                    MetricsData.toObject = function toObject(message, options) {\n                        if (!options)\n                            options = {};\n                        var object = {};\n                        if (options.arrays || options.defaults)\n                            object.resourceMetrics = [];\n                        if (message.resourceMetrics && message.resourceMetrics.length) {\n                            object.resourceMetrics = [];\n                            for (var j = 0; j < message.resourceMetrics.length; ++j)\n                                object.resourceMetrics[j] = $root.opentelemetry.proto.metrics.v1.ResourceMetrics.toObject(message.resourceMetrics[j], options);\n                        }\n                        return object;\n                    };\n                    /**\n                     * Converts this MetricsData to JSON.\n                     * @function toJSON\n                     * @memberof opentelemetry.proto.metrics.v1.MetricsData\n                     * @instance\n                     * @returns {Object.<string,*>} JSON object\n                     */\n                    MetricsData.prototype.toJSON = function toJSON() {\n                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                    };\n                    /**\n                     * Gets the default type url for MetricsData\n                     * @function getTypeUrl\n                     * @memberof opentelemetry.proto.metrics.v1.MetricsData\n                     * @static\n                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n                     * @returns {string} The default type url\n                     */\n                    MetricsData.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                        if (typeUrlPrefix === undefined) {\n                            typeUrlPrefix = \"type.googleapis.com\";\n                        }\n                        return typeUrlPrefix + \"/opentelemetry.proto.metrics.v1.MetricsData\";\n                    };\n                    return MetricsData;\n                })();\n                v1.ResourceMetrics = (function () {\n                    /**\n                     * Properties of a ResourceMetrics.\n                     * @memberof opentelemetry.proto.metrics.v1\n                     * @interface IResourceMetrics\n                     * @property {opentelemetry.proto.resource.v1.IResource|null} [resource] ResourceMetrics resource\n                     * @property {Array.<opentelemetry.proto.metrics.v1.IScopeMetrics>|null} [scopeMetrics] ResourceMetrics scopeMetrics\n                     * @property {string|null} [schemaUrl] ResourceMetrics schemaUrl\n                     */\n                    /**\n                     * Constructs a new ResourceMetrics.\n                     * @memberof opentelemetry.proto.metrics.v1\n                     * @classdesc Represents a ResourceMetrics.\n                     * @implements IResourceMetrics\n                     * @constructor\n                     * @param {opentelemetry.proto.metrics.v1.IResourceMetrics=} [properties] Properties to set\n                     */\n                    function ResourceMetrics(properties) {\n                        this.scopeMetrics = [];\n                        if (properties)\n                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                                if (properties[keys[i]] != null)\n                                    this[keys[i]] = properties[keys[i]];\n                    }\n                    /**\n                     * ResourceMetrics resource.\n                     * @member {opentelemetry.proto.resource.v1.IResource|null|undefined} resource\n                     * @memberof opentelemetry.proto.metrics.v1.ResourceMetrics\n                     * @instance\n                     */\n                    ResourceMetrics.prototype.resource = null;\n                    /**\n                     * ResourceMetrics scopeMetrics.\n                     * @member {Array.<opentelemetry.proto.metrics.v1.IScopeMetrics>} scopeMetrics\n                     * @memberof opentelemetry.proto.metrics.v1.ResourceMetrics\n                     * @instance\n                     */\n                    ResourceMetrics.prototype.scopeMetrics = $util.emptyArray;\n                    /**\n                     * ResourceMetrics schemaUrl.\n                     * @member {string|null|undefined} schemaUrl\n                     * @memberof opentelemetry.proto.metrics.v1.ResourceMetrics\n                     * @instance\n                     */\n                    ResourceMetrics.prototype.schemaUrl = null;\n                    /**\n                     * Creates a new ResourceMetrics instance using the specified properties.\n                     * @function create\n                     * @memberof opentelemetry.proto.metrics.v1.ResourceMetrics\n                     * @static\n                     * @param {opentelemetry.proto.metrics.v1.IResourceMetrics=} [properties] Properties to set\n                     * @returns {opentelemetry.proto.metrics.v1.ResourceMetrics} ResourceMetrics instance\n                     */\n                    ResourceMetrics.create = function create(properties) {\n                        return new ResourceMetrics(properties);\n                    };\n                    /**\n                     * Encodes the specified ResourceMetrics message. Does not implicitly {@link opentelemetry.proto.metrics.v1.ResourceMetrics.verify|verify} messages.\n                     * @function encode\n                     * @memberof opentelemetry.proto.metrics.v1.ResourceMetrics\n                     * @static\n                     * @param {opentelemetry.proto.metrics.v1.IResourceMetrics} message ResourceMetrics message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    ResourceMetrics.encode = function encode(message, writer) {\n                        if (!writer)\n                            writer = $Writer.create();\n                        if (message.resource != null && Object.hasOwnProperty.call(message, \"resource\"))\n                            $root.opentelemetry.proto.resource.v1.Resource.encode(message.resource, writer.uint32(/* id 1, wireType 2 =*/ 10).fork()).ldelim();\n                        if (message.scopeMetrics != null && message.scopeMetrics.length)\n                            for (var i = 0; i < message.scopeMetrics.length; ++i)\n                                $root.opentelemetry.proto.metrics.v1.ScopeMetrics.encode(message.scopeMetrics[i], writer.uint32(/* id 2, wireType 2 =*/ 18).fork()).ldelim();\n                        if (message.schemaUrl != null && Object.hasOwnProperty.call(message, \"schemaUrl\"))\n                            writer.uint32(/* id 3, wireType 2 =*/ 26).string(message.schemaUrl);\n                        return writer;\n                    };\n                    /**\n                     * Encodes the specified ResourceMetrics message, length delimited. Does not implicitly {@link opentelemetry.proto.metrics.v1.ResourceMetrics.verify|verify} messages.\n                     * @function encodeDelimited\n                     * @memberof opentelemetry.proto.metrics.v1.ResourceMetrics\n                     * @static\n                     * @param {opentelemetry.proto.metrics.v1.IResourceMetrics} message ResourceMetrics message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    ResourceMetrics.encodeDelimited = function encodeDelimited(message, writer) {\n                        return this.encode(message, writer).ldelim();\n                    };\n                    /**\n                     * Decodes a ResourceMetrics message from the specified reader or buffer.\n                     * @function decode\n                     * @memberof opentelemetry.proto.metrics.v1.ResourceMetrics\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @param {number} [length] Message length if known beforehand\n                     * @returns {opentelemetry.proto.metrics.v1.ResourceMetrics} ResourceMetrics\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    ResourceMetrics.decode = function decode(reader, length) {\n                        if (!(reader instanceof $Reader))\n                            reader = $Reader.create(reader);\n                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.opentelemetry.proto.metrics.v1.ResourceMetrics();\n                        while (reader.pos < end) {\n                            var tag = reader.uint32();\n                            switch (tag >>> 3) {\n                                case 1: {\n                                    message.resource = $root.opentelemetry.proto.resource.v1.Resource.decode(reader, reader.uint32());\n                                    break;\n                                }\n                                case 2: {\n                                    if (!(message.scopeMetrics && message.scopeMetrics.length))\n                                        message.scopeMetrics = [];\n                                    message.scopeMetrics.push($root.opentelemetry.proto.metrics.v1.ScopeMetrics.decode(reader, reader.uint32()));\n                                    break;\n                                }\n                                case 3: {\n                                    message.schemaUrl = reader.string();\n                                    break;\n                                }\n                                default:\n                                    reader.skipType(tag & 7);\n                                    break;\n                            }\n                        }\n                        return message;\n                    };\n                    /**\n                     * Decodes a ResourceMetrics message from the specified reader or buffer, length delimited.\n                     * @function decodeDelimited\n                     * @memberof opentelemetry.proto.metrics.v1.ResourceMetrics\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @returns {opentelemetry.proto.metrics.v1.ResourceMetrics} ResourceMetrics\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    ResourceMetrics.decodeDelimited = function decodeDelimited(reader) {\n                        if (!(reader instanceof $Reader))\n                            reader = new $Reader(reader);\n                        return this.decode(reader, reader.uint32());\n                    };\n                    /**\n                     * Verifies a ResourceMetrics message.\n                     * @function verify\n                     * @memberof opentelemetry.proto.metrics.v1.ResourceMetrics\n                     * @static\n                     * @param {Object.<string,*>} message Plain object to verify\n                     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                     */\n                    ResourceMetrics.verify = function verify(message) {\n                        if (typeof message !== \"object\" || message === null)\n                            return \"object expected\";\n                        if (message.resource != null && message.hasOwnProperty(\"resource\")) {\n                            var error = $root.opentelemetry.proto.resource.v1.Resource.verify(message.resource);\n                            if (error)\n                                return \"resource.\" + error;\n                        }\n                        if (message.scopeMetrics != null && message.hasOwnProperty(\"scopeMetrics\")) {\n                            if (!Array.isArray(message.scopeMetrics))\n                                return \"scopeMetrics: array expected\";\n                            for (var i = 0; i < message.scopeMetrics.length; ++i) {\n                                var error = $root.opentelemetry.proto.metrics.v1.ScopeMetrics.verify(message.scopeMetrics[i]);\n                                if (error)\n                                    return \"scopeMetrics.\" + error;\n                            }\n                        }\n                        if (message.schemaUrl != null && message.hasOwnProperty(\"schemaUrl\"))\n                            if (!$util.isString(message.schemaUrl))\n                                return \"schemaUrl: string expected\";\n                        return null;\n                    };\n                    /**\n                     * Creates a ResourceMetrics message from a plain object. Also converts values to their respective internal types.\n                     * @function fromObject\n                     * @memberof opentelemetry.proto.metrics.v1.ResourceMetrics\n                     * @static\n                     * @param {Object.<string,*>} object Plain object\n                     * @returns {opentelemetry.proto.metrics.v1.ResourceMetrics} ResourceMetrics\n                     */\n                    ResourceMetrics.fromObject = function fromObject(object) {\n                        if (object instanceof $root.opentelemetry.proto.metrics.v1.ResourceMetrics)\n                            return object;\n                        var message = new $root.opentelemetry.proto.metrics.v1.ResourceMetrics();\n                        if (object.resource != null) {\n                            if (typeof object.resource !== \"object\")\n                                throw TypeError(\".opentelemetry.proto.metrics.v1.ResourceMetrics.resource: object expected\");\n                            message.resource = $root.opentelemetry.proto.resource.v1.Resource.fromObject(object.resource);\n                        }\n                        if (object.scopeMetrics) {\n                            if (!Array.isArray(object.scopeMetrics))\n                                throw TypeError(\".opentelemetry.proto.metrics.v1.ResourceMetrics.scopeMetrics: array expected\");\n                            message.scopeMetrics = [];\n                            for (var i = 0; i < object.scopeMetrics.length; ++i) {\n                                if (typeof object.scopeMetrics[i] !== \"object\")\n                                    throw TypeError(\".opentelemetry.proto.metrics.v1.ResourceMetrics.scopeMetrics: object expected\");\n                                message.scopeMetrics[i] = $root.opentelemetry.proto.metrics.v1.ScopeMetrics.fromObject(object.scopeMetrics[i]);\n                            }\n                        }\n                        if (object.schemaUrl != null)\n                            message.schemaUrl = String(object.schemaUrl);\n                        return message;\n                    };\n                    /**\n                     * Creates a plain object from a ResourceMetrics message. Also converts values to other types if specified.\n                     * @function toObject\n                     * @memberof opentelemetry.proto.metrics.v1.ResourceMetrics\n                     * @static\n                     * @param {opentelemetry.proto.metrics.v1.ResourceMetrics} message ResourceMetrics\n                     * @param {$protobuf.IConversionOptions} [options] Conversion options\n                     * @returns {Object.<string,*>} Plain object\n                     */\n                    ResourceMetrics.toObject = function toObject(message, options) {\n                        if (!options)\n                            options = {};\n                        var object = {};\n                        if (options.arrays || options.defaults)\n                            object.scopeMetrics = [];\n                        if (options.defaults) {\n                            object.resource = null;\n                            object.schemaUrl = \"\";\n                        }\n                        if (message.resource != null && message.hasOwnProperty(\"resource\"))\n                            object.resource = $root.opentelemetry.proto.resource.v1.Resource.toObject(message.resource, options);\n                        if (message.scopeMetrics && message.scopeMetrics.length) {\n                            object.scopeMetrics = [];\n                            for (var j = 0; j < message.scopeMetrics.length; ++j)\n                                object.scopeMetrics[j] = $root.opentelemetry.proto.metrics.v1.ScopeMetrics.toObject(message.scopeMetrics[j], options);\n                        }\n                        if (message.schemaUrl != null && message.hasOwnProperty(\"schemaUrl\"))\n                            object.schemaUrl = message.schemaUrl;\n                        return object;\n                    };\n                    /**\n                     * Converts this ResourceMetrics to JSON.\n                     * @function toJSON\n                     * @memberof opentelemetry.proto.metrics.v1.ResourceMetrics\n                     * @instance\n                     * @returns {Object.<string,*>} JSON object\n                     */\n                    ResourceMetrics.prototype.toJSON = function toJSON() {\n                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                    };\n                    /**\n                     * Gets the default type url for ResourceMetrics\n                     * @function getTypeUrl\n                     * @memberof opentelemetry.proto.metrics.v1.ResourceMetrics\n                     * @static\n                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n                     * @returns {string} The default type url\n                     */\n                    ResourceMetrics.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                        if (typeUrlPrefix === undefined) {\n                            typeUrlPrefix = \"type.googleapis.com\";\n                        }\n                        return typeUrlPrefix + \"/opentelemetry.proto.metrics.v1.ResourceMetrics\";\n                    };\n                    return ResourceMetrics;\n                })();\n                v1.ScopeMetrics = (function () {\n                    /**\n                     * Properties of a ScopeMetrics.\n                     * @memberof opentelemetry.proto.metrics.v1\n                     * @interface IScopeMetrics\n                     * @property {opentelemetry.proto.common.v1.IInstrumentationScope|null} [scope] ScopeMetrics scope\n                     * @property {Array.<opentelemetry.proto.metrics.v1.IMetric>|null} [metrics] ScopeMetrics metrics\n                     * @property {string|null} [schemaUrl] ScopeMetrics schemaUrl\n                     */\n                    /**\n                     * Constructs a new ScopeMetrics.\n                     * @memberof opentelemetry.proto.metrics.v1\n                     * @classdesc Represents a ScopeMetrics.\n                     * @implements IScopeMetrics\n                     * @constructor\n                     * @param {opentelemetry.proto.metrics.v1.IScopeMetrics=} [properties] Properties to set\n                     */\n                    function ScopeMetrics(properties) {\n                        this.metrics = [];\n                        if (properties)\n                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                                if (properties[keys[i]] != null)\n                                    this[keys[i]] = properties[keys[i]];\n                    }\n                    /**\n                     * ScopeMetrics scope.\n                     * @member {opentelemetry.proto.common.v1.IInstrumentationScope|null|undefined} scope\n                     * @memberof opentelemetry.proto.metrics.v1.ScopeMetrics\n                     * @instance\n                     */\n                    ScopeMetrics.prototype.scope = null;\n                    /**\n                     * ScopeMetrics metrics.\n                     * @member {Array.<opentelemetry.proto.metrics.v1.IMetric>} metrics\n                     * @memberof opentelemetry.proto.metrics.v1.ScopeMetrics\n                     * @instance\n                     */\n                    ScopeMetrics.prototype.metrics = $util.emptyArray;\n                    /**\n                     * ScopeMetrics schemaUrl.\n                     * @member {string|null|undefined} schemaUrl\n                     * @memberof opentelemetry.proto.metrics.v1.ScopeMetrics\n                     * @instance\n                     */\n                    ScopeMetrics.prototype.schemaUrl = null;\n                    /**\n                     * Creates a new ScopeMetrics instance using the specified properties.\n                     * @function create\n                     * @memberof opentelemetry.proto.metrics.v1.ScopeMetrics\n                     * @static\n                     * @param {opentelemetry.proto.metrics.v1.IScopeMetrics=} [properties] Properties to set\n                     * @returns {opentelemetry.proto.metrics.v1.ScopeMetrics} ScopeMetrics instance\n                     */\n                    ScopeMetrics.create = function create(properties) {\n                        return new ScopeMetrics(properties);\n                    };\n                    /**\n                     * Encodes the specified ScopeMetrics message. Does not implicitly {@link opentelemetry.proto.metrics.v1.ScopeMetrics.verify|verify} messages.\n                     * @function encode\n                     * @memberof opentelemetry.proto.metrics.v1.ScopeMetrics\n                     * @static\n                     * @param {opentelemetry.proto.metrics.v1.IScopeMetrics} message ScopeMetrics message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    ScopeMetrics.encode = function encode(message, writer) {\n                        if (!writer)\n                            writer = $Writer.create();\n                        if (message.scope != null && Object.hasOwnProperty.call(message, \"scope\"))\n                            $root.opentelemetry.proto.common.v1.InstrumentationScope.encode(message.scope, writer.uint32(/* id 1, wireType 2 =*/ 10).fork()).ldelim();\n                        if (message.metrics != null && message.metrics.length)\n                            for (var i = 0; i < message.metrics.length; ++i)\n                                $root.opentelemetry.proto.metrics.v1.Metric.encode(message.metrics[i], writer.uint32(/* id 2, wireType 2 =*/ 18).fork()).ldelim();\n                        if (message.schemaUrl != null && Object.hasOwnProperty.call(message, \"schemaUrl\"))\n                            writer.uint32(/* id 3, wireType 2 =*/ 26).string(message.schemaUrl);\n                        return writer;\n                    };\n                    /**\n                     * Encodes the specified ScopeMetrics message, length delimited. Does not implicitly {@link opentelemetry.proto.metrics.v1.ScopeMetrics.verify|verify} messages.\n                     * @function encodeDelimited\n                     * @memberof opentelemetry.proto.metrics.v1.ScopeMetrics\n                     * @static\n                     * @param {opentelemetry.proto.metrics.v1.IScopeMetrics} message ScopeMetrics message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    ScopeMetrics.encodeDelimited = function encodeDelimited(message, writer) {\n                        return this.encode(message, writer).ldelim();\n                    };\n                    /**\n                     * Decodes a ScopeMetrics message from the specified reader or buffer.\n                     * @function decode\n                     * @memberof opentelemetry.proto.metrics.v1.ScopeMetrics\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @param {number} [length] Message length if known beforehand\n                     * @returns {opentelemetry.proto.metrics.v1.ScopeMetrics} ScopeMetrics\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    ScopeMetrics.decode = function decode(reader, length) {\n                        if (!(reader instanceof $Reader))\n                            reader = $Reader.create(reader);\n                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.opentelemetry.proto.metrics.v1.ScopeMetrics();\n                        while (reader.pos < end) {\n                            var tag = reader.uint32();\n                            switch (tag >>> 3) {\n                                case 1: {\n                                    message.scope = $root.opentelemetry.proto.common.v1.InstrumentationScope.decode(reader, reader.uint32());\n                                    break;\n                                }\n                                case 2: {\n                                    if (!(message.metrics && message.metrics.length))\n                                        message.metrics = [];\n                                    message.metrics.push($root.opentelemetry.proto.metrics.v1.Metric.decode(reader, reader.uint32()));\n                                    break;\n                                }\n                                case 3: {\n                                    message.schemaUrl = reader.string();\n                                    break;\n                                }\n                                default:\n                                    reader.skipType(tag & 7);\n                                    break;\n                            }\n                        }\n                        return message;\n                    };\n                    /**\n                     * Decodes a ScopeMetrics message from the specified reader or buffer, length delimited.\n                     * @function decodeDelimited\n                     * @memberof opentelemetry.proto.metrics.v1.ScopeMetrics\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @returns {opentelemetry.proto.metrics.v1.ScopeMetrics} ScopeMetrics\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    ScopeMetrics.decodeDelimited = function decodeDelimited(reader) {\n                        if (!(reader instanceof $Reader))\n                            reader = new $Reader(reader);\n                        return this.decode(reader, reader.uint32());\n                    };\n                    /**\n                     * Verifies a ScopeMetrics message.\n                     * @function verify\n                     * @memberof opentelemetry.proto.metrics.v1.ScopeMetrics\n                     * @static\n                     * @param {Object.<string,*>} message Plain object to verify\n                     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                     */\n                    ScopeMetrics.verify = function verify(message) {\n                        if (typeof message !== \"object\" || message === null)\n                            return \"object expected\";\n                        if (message.scope != null && message.hasOwnProperty(\"scope\")) {\n                            var error = $root.opentelemetry.proto.common.v1.InstrumentationScope.verify(message.scope);\n                            if (error)\n                                return \"scope.\" + error;\n                        }\n                        if (message.metrics != null && message.hasOwnProperty(\"metrics\")) {\n                            if (!Array.isArray(message.metrics))\n                                return \"metrics: array expected\";\n                            for (var i = 0; i < message.metrics.length; ++i) {\n                                var error = $root.opentelemetry.proto.metrics.v1.Metric.verify(message.metrics[i]);\n                                if (error)\n                                    return \"metrics.\" + error;\n                            }\n                        }\n                        if (message.schemaUrl != null && message.hasOwnProperty(\"schemaUrl\"))\n                            if (!$util.isString(message.schemaUrl))\n                                return \"schemaUrl: string expected\";\n                        return null;\n                    };\n                    /**\n                     * Creates a ScopeMetrics message from a plain object. Also converts values to their respective internal types.\n                     * @function fromObject\n                     * @memberof opentelemetry.proto.metrics.v1.ScopeMetrics\n                     * @static\n                     * @param {Object.<string,*>} object Plain object\n                     * @returns {opentelemetry.proto.metrics.v1.ScopeMetrics} ScopeMetrics\n                     */\n                    ScopeMetrics.fromObject = function fromObject(object) {\n                        if (object instanceof $root.opentelemetry.proto.metrics.v1.ScopeMetrics)\n                            return object;\n                        var message = new $root.opentelemetry.proto.metrics.v1.ScopeMetrics();\n                        if (object.scope != null) {\n                            if (typeof object.scope !== \"object\")\n                                throw TypeError(\".opentelemetry.proto.metrics.v1.ScopeMetrics.scope: object expected\");\n                            message.scope = $root.opentelemetry.proto.common.v1.InstrumentationScope.fromObject(object.scope);\n                        }\n                        if (object.metrics) {\n                            if (!Array.isArray(object.metrics))\n                                throw TypeError(\".opentelemetry.proto.metrics.v1.ScopeMetrics.metrics: array expected\");\n                            message.metrics = [];\n                            for (var i = 0; i < object.metrics.length; ++i) {\n                                if (typeof object.metrics[i] !== \"object\")\n                                    throw TypeError(\".opentelemetry.proto.metrics.v1.ScopeMetrics.metrics: object expected\");\n                                message.metrics[i] = $root.opentelemetry.proto.metrics.v1.Metric.fromObject(object.metrics[i]);\n                            }\n                        }\n                        if (object.schemaUrl != null)\n                            message.schemaUrl = String(object.schemaUrl);\n                        return message;\n                    };\n                    /**\n                     * Creates a plain object from a ScopeMetrics message. Also converts values to other types if specified.\n                     * @function toObject\n                     * @memberof opentelemetry.proto.metrics.v1.ScopeMetrics\n                     * @static\n                     * @param {opentelemetry.proto.metrics.v1.ScopeMetrics} message ScopeMetrics\n                     * @param {$protobuf.IConversionOptions} [options] Conversion options\n                     * @returns {Object.<string,*>} Plain object\n                     */\n                    ScopeMetrics.toObject = function toObject(message, options) {\n                        if (!options)\n                            options = {};\n                        var object = {};\n                        if (options.arrays || options.defaults)\n                            object.metrics = [];\n                        if (options.defaults) {\n                            object.scope = null;\n                            object.schemaUrl = \"\";\n                        }\n                        if (message.scope != null && message.hasOwnProperty(\"scope\"))\n                            object.scope = $root.opentelemetry.proto.common.v1.InstrumentationScope.toObject(message.scope, options);\n                        if (message.metrics && message.metrics.length) {\n                            object.metrics = [];\n                            for (var j = 0; j < message.metrics.length; ++j)\n                                object.metrics[j] = $root.opentelemetry.proto.metrics.v1.Metric.toObject(message.metrics[j], options);\n                        }\n                        if (message.schemaUrl != null && message.hasOwnProperty(\"schemaUrl\"))\n                            object.schemaUrl = message.schemaUrl;\n                        return object;\n                    };\n                    /**\n                     * Converts this ScopeMetrics to JSON.\n                     * @function toJSON\n                     * @memberof opentelemetry.proto.metrics.v1.ScopeMetrics\n                     * @instance\n                     * @returns {Object.<string,*>} JSON object\n                     */\n                    ScopeMetrics.prototype.toJSON = function toJSON() {\n                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                    };\n                    /**\n                     * Gets the default type url for ScopeMetrics\n                     * @function getTypeUrl\n                     * @memberof opentelemetry.proto.metrics.v1.ScopeMetrics\n                     * @static\n                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n                     * @returns {string} The default type url\n                     */\n                    ScopeMetrics.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                        if (typeUrlPrefix === undefined) {\n                            typeUrlPrefix = \"type.googleapis.com\";\n                        }\n                        return typeUrlPrefix + \"/opentelemetry.proto.metrics.v1.ScopeMetrics\";\n                    };\n                    return ScopeMetrics;\n                })();\n                v1.Metric = (function () {\n                    /**\n                     * Properties of a Metric.\n                     * @memberof opentelemetry.proto.metrics.v1\n                     * @interface IMetric\n                     * @property {string|null} [name] Metric name\n                     * @property {string|null} [description] Metric description\n                     * @property {string|null} [unit] Metric unit\n                     * @property {opentelemetry.proto.metrics.v1.IGauge|null} [gauge] Metric gauge\n                     * @property {opentelemetry.proto.metrics.v1.ISum|null} [sum] Metric sum\n                     * @property {opentelemetry.proto.metrics.v1.IHistogram|null} [histogram] Metric histogram\n                     * @property {opentelemetry.proto.metrics.v1.IExponentialHistogram|null} [exponentialHistogram] Metric exponentialHistogram\n                     * @property {opentelemetry.proto.metrics.v1.ISummary|null} [summary] Metric summary\n                     */\n                    /**\n                     * Constructs a new Metric.\n                     * @memberof opentelemetry.proto.metrics.v1\n                     * @classdesc Represents a Metric.\n                     * @implements IMetric\n                     * @constructor\n                     * @param {opentelemetry.proto.metrics.v1.IMetric=} [properties] Properties to set\n                     */\n                    function Metric(properties) {\n                        if (properties)\n                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                                if (properties[keys[i]] != null)\n                                    this[keys[i]] = properties[keys[i]];\n                    }\n                    /**\n                     * Metric name.\n                     * @member {string|null|undefined} name\n                     * @memberof opentelemetry.proto.metrics.v1.Metric\n                     * @instance\n                     */\n                    Metric.prototype.name = null;\n                    /**\n                     * Metric description.\n                     * @member {string|null|undefined} description\n                     * @memberof opentelemetry.proto.metrics.v1.Metric\n                     * @instance\n                     */\n                    Metric.prototype.description = null;\n                    /**\n                     * Metric unit.\n                     * @member {string|null|undefined} unit\n                     * @memberof opentelemetry.proto.metrics.v1.Metric\n                     * @instance\n                     */\n                    Metric.prototype.unit = null;\n                    /**\n                     * Metric gauge.\n                     * @member {opentelemetry.proto.metrics.v1.IGauge|null|undefined} gauge\n                     * @memberof opentelemetry.proto.metrics.v1.Metric\n                     * @instance\n                     */\n                    Metric.prototype.gauge = null;\n                    /**\n                     * Metric sum.\n                     * @member {opentelemetry.proto.metrics.v1.ISum|null|undefined} sum\n                     * @memberof opentelemetry.proto.metrics.v1.Metric\n                     * @instance\n                     */\n                    Metric.prototype.sum = null;\n                    /**\n                     * Metric histogram.\n                     * @member {opentelemetry.proto.metrics.v1.IHistogram|null|undefined} histogram\n                     * @memberof opentelemetry.proto.metrics.v1.Metric\n                     * @instance\n                     */\n                    Metric.prototype.histogram = null;\n                    /**\n                     * Metric exponentialHistogram.\n                     * @member {opentelemetry.proto.metrics.v1.IExponentialHistogram|null|undefined} exponentialHistogram\n                     * @memberof opentelemetry.proto.metrics.v1.Metric\n                     * @instance\n                     */\n                    Metric.prototype.exponentialHistogram = null;\n                    /**\n                     * Metric summary.\n                     * @member {opentelemetry.proto.metrics.v1.ISummary|null|undefined} summary\n                     * @memberof opentelemetry.proto.metrics.v1.Metric\n                     * @instance\n                     */\n                    Metric.prototype.summary = null;\n                    // OneOf field names bound to virtual getters and setters\n                    var $oneOfFields;\n                    /**\n                     * Metric data.\n                     * @member {\"gauge\"|\"sum\"|\"histogram\"|\"exponentialHistogram\"|\"summary\"|undefined} data\n                     * @memberof opentelemetry.proto.metrics.v1.Metric\n                     * @instance\n                     */\n                    Object.defineProperty(Metric.prototype, \"data\", {\n                        get: $util.oneOfGetter($oneOfFields = [\"gauge\", \"sum\", \"histogram\", \"exponentialHistogram\", \"summary\"]),\n                        set: $util.oneOfSetter($oneOfFields)\n                    });\n                    /**\n                     * Creates a new Metric instance using the specified properties.\n                     * @function create\n                     * @memberof opentelemetry.proto.metrics.v1.Metric\n                     * @static\n                     * @param {opentelemetry.proto.metrics.v1.IMetric=} [properties] Properties to set\n                     * @returns {opentelemetry.proto.metrics.v1.Metric} Metric instance\n                     */\n                    Metric.create = function create(properties) {\n                        return new Metric(properties);\n                    };\n                    /**\n                     * Encodes the specified Metric message. Does not implicitly {@link opentelemetry.proto.metrics.v1.Metric.verify|verify} messages.\n                     * @function encode\n                     * @memberof opentelemetry.proto.metrics.v1.Metric\n                     * @static\n                     * @param {opentelemetry.proto.metrics.v1.IMetric} message Metric message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    Metric.encode = function encode(message, writer) {\n                        if (!writer)\n                            writer = $Writer.create();\n                        if (message.name != null && Object.hasOwnProperty.call(message, \"name\"))\n                            writer.uint32(/* id 1, wireType 2 =*/ 10).string(message.name);\n                        if (message.description != null && Object.hasOwnProperty.call(message, \"description\"))\n                            writer.uint32(/* id 2, wireType 2 =*/ 18).string(message.description);\n                        if (message.unit != null && Object.hasOwnProperty.call(message, \"unit\"))\n                            writer.uint32(/* id 3, wireType 2 =*/ 26).string(message.unit);\n                        if (message.gauge != null && Object.hasOwnProperty.call(message, \"gauge\"))\n                            $root.opentelemetry.proto.metrics.v1.Gauge.encode(message.gauge, writer.uint32(/* id 5, wireType 2 =*/ 42).fork()).ldelim();\n                        if (message.sum != null && Object.hasOwnProperty.call(message, \"sum\"))\n                            $root.opentelemetry.proto.metrics.v1.Sum.encode(message.sum, writer.uint32(/* id 7, wireType 2 =*/ 58).fork()).ldelim();\n                        if (message.histogram != null && Object.hasOwnProperty.call(message, \"histogram\"))\n                            $root.opentelemetry.proto.metrics.v1.Histogram.encode(message.histogram, writer.uint32(/* id 9, wireType 2 =*/ 74).fork()).ldelim();\n                        if (message.exponentialHistogram != null && Object.hasOwnProperty.call(message, \"exponentialHistogram\"))\n                            $root.opentelemetry.proto.metrics.v1.ExponentialHistogram.encode(message.exponentialHistogram, writer.uint32(/* id 10, wireType 2 =*/ 82).fork()).ldelim();\n                        if (message.summary != null && Object.hasOwnProperty.call(message, \"summary\"))\n                            $root.opentelemetry.proto.metrics.v1.Summary.encode(message.summary, writer.uint32(/* id 11, wireType 2 =*/ 90).fork()).ldelim();\n                        return writer;\n                    };\n                    /**\n                     * Encodes the specified Metric message, length delimited. Does not implicitly {@link opentelemetry.proto.metrics.v1.Metric.verify|verify} messages.\n                     * @function encodeDelimited\n                     * @memberof opentelemetry.proto.metrics.v1.Metric\n                     * @static\n                     * @param {opentelemetry.proto.metrics.v1.IMetric} message Metric message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    Metric.encodeDelimited = function encodeDelimited(message, writer) {\n                        return this.encode(message, writer).ldelim();\n                    };\n                    /**\n                     * Decodes a Metric message from the specified reader or buffer.\n                     * @function decode\n                     * @memberof opentelemetry.proto.metrics.v1.Metric\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @param {number} [length] Message length if known beforehand\n                     * @returns {opentelemetry.proto.metrics.v1.Metric} Metric\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    Metric.decode = function decode(reader, length) {\n                        if (!(reader instanceof $Reader))\n                            reader = $Reader.create(reader);\n                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.opentelemetry.proto.metrics.v1.Metric();\n                        while (reader.pos < end) {\n                            var tag = reader.uint32();\n                            switch (tag >>> 3) {\n                                case 1: {\n                                    message.name = reader.string();\n                                    break;\n                                }\n                                case 2: {\n                                    message.description = reader.string();\n                                    break;\n                                }\n                                case 3: {\n                                    message.unit = reader.string();\n                                    break;\n                                }\n                                case 5: {\n                                    message.gauge = $root.opentelemetry.proto.metrics.v1.Gauge.decode(reader, reader.uint32());\n                                    break;\n                                }\n                                case 7: {\n                                    message.sum = $root.opentelemetry.proto.metrics.v1.Sum.decode(reader, reader.uint32());\n                                    break;\n                                }\n                                case 9: {\n                                    message.histogram = $root.opentelemetry.proto.metrics.v1.Histogram.decode(reader, reader.uint32());\n                                    break;\n                                }\n                                case 10: {\n                                    message.exponentialHistogram = $root.opentelemetry.proto.metrics.v1.ExponentialHistogram.decode(reader, reader.uint32());\n                                    break;\n                                }\n                                case 11: {\n                                    message.summary = $root.opentelemetry.proto.metrics.v1.Summary.decode(reader, reader.uint32());\n                                    break;\n                                }\n                                default:\n                                    reader.skipType(tag & 7);\n                                    break;\n                            }\n                        }\n                        return message;\n                    };\n                    /**\n                     * Decodes a Metric message from the specified reader or buffer, length delimited.\n                     * @function decodeDelimited\n                     * @memberof opentelemetry.proto.metrics.v1.Metric\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @returns {opentelemetry.proto.metrics.v1.Metric} Metric\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    Metric.decodeDelimited = function decodeDelimited(reader) {\n                        if (!(reader instanceof $Reader))\n                            reader = new $Reader(reader);\n                        return this.decode(reader, reader.uint32());\n                    };\n                    /**\n                     * Verifies a Metric message.\n                     * @function verify\n                     * @memberof opentelemetry.proto.metrics.v1.Metric\n                     * @static\n                     * @param {Object.<string,*>} message Plain object to verify\n                     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                     */\n                    Metric.verify = function verify(message) {\n                        if (typeof message !== \"object\" || message === null)\n                            return \"object expected\";\n                        var properties = {};\n                        if (message.name != null && message.hasOwnProperty(\"name\"))\n                            if (!$util.isString(message.name))\n                                return \"name: string expected\";\n                        if (message.description != null && message.hasOwnProperty(\"description\"))\n                            if (!$util.isString(message.description))\n                                return \"description: string expected\";\n                        if (message.unit != null && message.hasOwnProperty(\"unit\"))\n                            if (!$util.isString(message.unit))\n                                return \"unit: string expected\";\n                        if (message.gauge != null && message.hasOwnProperty(\"gauge\")) {\n                            properties.data = 1;\n                            {\n                                var error = $root.opentelemetry.proto.metrics.v1.Gauge.verify(message.gauge);\n                                if (error)\n                                    return \"gauge.\" + error;\n                            }\n                        }\n                        if (message.sum != null && message.hasOwnProperty(\"sum\")) {\n                            if (properties.data === 1)\n                                return \"data: multiple values\";\n                            properties.data = 1;\n                            {\n                                var error = $root.opentelemetry.proto.metrics.v1.Sum.verify(message.sum);\n                                if (error)\n                                    return \"sum.\" + error;\n                            }\n                        }\n                        if (message.histogram != null && message.hasOwnProperty(\"histogram\")) {\n                            if (properties.data === 1)\n                                return \"data: multiple values\";\n                            properties.data = 1;\n                            {\n                                var error = $root.opentelemetry.proto.metrics.v1.Histogram.verify(message.histogram);\n                                if (error)\n                                    return \"histogram.\" + error;\n                            }\n                        }\n                        if (message.exponentialHistogram != null && message.hasOwnProperty(\"exponentialHistogram\")) {\n                            if (properties.data === 1)\n                                return \"data: multiple values\";\n                            properties.data = 1;\n                            {\n                                var error = $root.opentelemetry.proto.metrics.v1.ExponentialHistogram.verify(message.exponentialHistogram);\n                                if (error)\n                                    return \"exponentialHistogram.\" + error;\n                            }\n                        }\n                        if (message.summary != null && message.hasOwnProperty(\"summary\")) {\n                            if (properties.data === 1)\n                                return \"data: multiple values\";\n                            properties.data = 1;\n                            {\n                                var error = $root.opentelemetry.proto.metrics.v1.Summary.verify(message.summary);\n                                if (error)\n                                    return \"summary.\" + error;\n                            }\n                        }\n                        return null;\n                    };\n                    /**\n                     * Creates a Metric message from a plain object. Also converts values to their respective internal types.\n                     * @function fromObject\n                     * @memberof opentelemetry.proto.metrics.v1.Metric\n                     * @static\n                     * @param {Object.<string,*>} object Plain object\n                     * @returns {opentelemetry.proto.metrics.v1.Metric} Metric\n                     */\n                    Metric.fromObject = function fromObject(object) {\n                        if (object instanceof $root.opentelemetry.proto.metrics.v1.Metric)\n                            return object;\n                        var message = new $root.opentelemetry.proto.metrics.v1.Metric();\n                        if (object.name != null)\n                            message.name = String(object.name);\n                        if (object.description != null)\n                            message.description = String(object.description);\n                        if (object.unit != null)\n                            message.unit = String(object.unit);\n                        if (object.gauge != null) {\n                            if (typeof object.gauge !== \"object\")\n                                throw TypeError(\".opentelemetry.proto.metrics.v1.Metric.gauge: object expected\");\n                            message.gauge = $root.opentelemetry.proto.metrics.v1.Gauge.fromObject(object.gauge);\n                        }\n                        if (object.sum != null) {\n                            if (typeof object.sum !== \"object\")\n                                throw TypeError(\".opentelemetry.proto.metrics.v1.Metric.sum: object expected\");\n                            message.sum = $root.opentelemetry.proto.metrics.v1.Sum.fromObject(object.sum);\n                        }\n                        if (object.histogram != null) {\n                            if (typeof object.histogram !== \"object\")\n                                throw TypeError(\".opentelemetry.proto.metrics.v1.Metric.histogram: object expected\");\n                            message.histogram = $root.opentelemetry.proto.metrics.v1.Histogram.fromObject(object.histogram);\n                        }\n                        if (object.exponentialHistogram != null) {\n                            if (typeof object.exponentialHistogram !== \"object\")\n                                throw TypeError(\".opentelemetry.proto.metrics.v1.Metric.exponentialHistogram: object expected\");\n                            message.exponentialHistogram = $root.opentelemetry.proto.metrics.v1.ExponentialHistogram.fromObject(object.exponentialHistogram);\n                        }\n                        if (object.summary != null) {\n                            if (typeof object.summary !== \"object\")\n                                throw TypeError(\".opentelemetry.proto.metrics.v1.Metric.summary: object expected\");\n                            message.summary = $root.opentelemetry.proto.metrics.v1.Summary.fromObject(object.summary);\n                        }\n                        return message;\n                    };\n                    /**\n                     * Creates a plain object from a Metric message. Also converts values to other types if specified.\n                     * @function toObject\n                     * @memberof opentelemetry.proto.metrics.v1.Metric\n                     * @static\n                     * @param {opentelemetry.proto.metrics.v1.Metric} message Metric\n                     * @param {$protobuf.IConversionOptions} [options] Conversion options\n                     * @returns {Object.<string,*>} Plain object\n                     */\n                    Metric.toObject = function toObject(message, options) {\n                        if (!options)\n                            options = {};\n                        var object = {};\n                        if (options.defaults) {\n                            object.name = \"\";\n                            object.description = \"\";\n                            object.unit = \"\";\n                        }\n                        if (message.name != null && message.hasOwnProperty(\"name\"))\n                            object.name = message.name;\n                        if (message.description != null && message.hasOwnProperty(\"description\"))\n                            object.description = message.description;\n                        if (message.unit != null && message.hasOwnProperty(\"unit\"))\n                            object.unit = message.unit;\n                        if (message.gauge != null && message.hasOwnProperty(\"gauge\")) {\n                            object.gauge = $root.opentelemetry.proto.metrics.v1.Gauge.toObject(message.gauge, options);\n                            if (options.oneofs)\n                                object.data = \"gauge\";\n                        }\n                        if (message.sum != null && message.hasOwnProperty(\"sum\")) {\n                            object.sum = $root.opentelemetry.proto.metrics.v1.Sum.toObject(message.sum, options);\n                            if (options.oneofs)\n                                object.data = \"sum\";\n                        }\n                        if (message.histogram != null && message.hasOwnProperty(\"histogram\")) {\n                            object.histogram = $root.opentelemetry.proto.metrics.v1.Histogram.toObject(message.histogram, options);\n                            if (options.oneofs)\n                                object.data = \"histogram\";\n                        }\n                        if (message.exponentialHistogram != null && message.hasOwnProperty(\"exponentialHistogram\")) {\n                            object.exponentialHistogram = $root.opentelemetry.proto.metrics.v1.ExponentialHistogram.toObject(message.exponentialHistogram, options);\n                            if (options.oneofs)\n                                object.data = \"exponentialHistogram\";\n                        }\n                        if (message.summary != null && message.hasOwnProperty(\"summary\")) {\n                            object.summary = $root.opentelemetry.proto.metrics.v1.Summary.toObject(message.summary, options);\n                            if (options.oneofs)\n                                object.data = \"summary\";\n                        }\n                        return object;\n                    };\n                    /**\n                     * Converts this Metric to JSON.\n                     * @function toJSON\n                     * @memberof opentelemetry.proto.metrics.v1.Metric\n                     * @instance\n                     * @returns {Object.<string,*>} JSON object\n                     */\n                    Metric.prototype.toJSON = function toJSON() {\n                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                    };\n                    /**\n                     * Gets the default type url for Metric\n                     * @function getTypeUrl\n                     * @memberof opentelemetry.proto.metrics.v1.Metric\n                     * @static\n                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n                     * @returns {string} The default type url\n                     */\n                    Metric.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                        if (typeUrlPrefix === undefined) {\n                            typeUrlPrefix = \"type.googleapis.com\";\n                        }\n                        return typeUrlPrefix + \"/opentelemetry.proto.metrics.v1.Metric\";\n                    };\n                    return Metric;\n                })();\n                v1.Gauge = (function () {\n                    /**\n                     * Properties of a Gauge.\n                     * @memberof opentelemetry.proto.metrics.v1\n                     * @interface IGauge\n                     * @property {Array.<opentelemetry.proto.metrics.v1.INumberDataPoint>|null} [dataPoints] Gauge dataPoints\n                     */\n                    /**\n                     * Constructs a new Gauge.\n                     * @memberof opentelemetry.proto.metrics.v1\n                     * @classdesc Represents a Gauge.\n                     * @implements IGauge\n                     * @constructor\n                     * @param {opentelemetry.proto.metrics.v1.IGauge=} [properties] Properties to set\n                     */\n                    function Gauge(properties) {\n                        this.dataPoints = [];\n                        if (properties)\n                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                                if (properties[keys[i]] != null)\n                                    this[keys[i]] = properties[keys[i]];\n                    }\n                    /**\n                     * Gauge dataPoints.\n                     * @member {Array.<opentelemetry.proto.metrics.v1.INumberDataPoint>} dataPoints\n                     * @memberof opentelemetry.proto.metrics.v1.Gauge\n                     * @instance\n                     */\n                    Gauge.prototype.dataPoints = $util.emptyArray;\n                    /**\n                     * Creates a new Gauge instance using the specified properties.\n                     * @function create\n                     * @memberof opentelemetry.proto.metrics.v1.Gauge\n                     * @static\n                     * @param {opentelemetry.proto.metrics.v1.IGauge=} [properties] Properties to set\n                     * @returns {opentelemetry.proto.metrics.v1.Gauge} Gauge instance\n                     */\n                    Gauge.create = function create(properties) {\n                        return new Gauge(properties);\n                    };\n                    /**\n                     * Encodes the specified Gauge message. Does not implicitly {@link opentelemetry.proto.metrics.v1.Gauge.verify|verify} messages.\n                     * @function encode\n                     * @memberof opentelemetry.proto.metrics.v1.Gauge\n                     * @static\n                     * @param {opentelemetry.proto.metrics.v1.IGauge} message Gauge message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    Gauge.encode = function encode(message, writer) {\n                        if (!writer)\n                            writer = $Writer.create();\n                        if (message.dataPoints != null && message.dataPoints.length)\n                            for (var i = 0; i < message.dataPoints.length; ++i)\n                                $root.opentelemetry.proto.metrics.v1.NumberDataPoint.encode(message.dataPoints[i], writer.uint32(/* id 1, wireType 2 =*/ 10).fork()).ldelim();\n                        return writer;\n                    };\n                    /**\n                     * Encodes the specified Gauge message, length delimited. Does not implicitly {@link opentelemetry.proto.metrics.v1.Gauge.verify|verify} messages.\n                     * @function encodeDelimited\n                     * @memberof opentelemetry.proto.metrics.v1.Gauge\n                     * @static\n                     * @param {opentelemetry.proto.metrics.v1.IGauge} message Gauge message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    Gauge.encodeDelimited = function encodeDelimited(message, writer) {\n                        return this.encode(message, writer).ldelim();\n                    };\n                    /**\n                     * Decodes a Gauge message from the specified reader or buffer.\n                     * @function decode\n                     * @memberof opentelemetry.proto.metrics.v1.Gauge\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @param {number} [length] Message length if known beforehand\n                     * @returns {opentelemetry.proto.metrics.v1.Gauge} Gauge\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    Gauge.decode = function decode(reader, length) {\n                        if (!(reader instanceof $Reader))\n                            reader = $Reader.create(reader);\n                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.opentelemetry.proto.metrics.v1.Gauge();\n                        while (reader.pos < end) {\n                            var tag = reader.uint32();\n                            switch (tag >>> 3) {\n                                case 1: {\n                                    if (!(message.dataPoints && message.dataPoints.length))\n                                        message.dataPoints = [];\n                                    message.dataPoints.push($root.opentelemetry.proto.metrics.v1.NumberDataPoint.decode(reader, reader.uint32()));\n                                    break;\n                                }\n                                default:\n                                    reader.skipType(tag & 7);\n                                    break;\n                            }\n                        }\n                        return message;\n                    };\n                    /**\n                     * Decodes a Gauge message from the specified reader or buffer, length delimited.\n                     * @function decodeDelimited\n                     * @memberof opentelemetry.proto.metrics.v1.Gauge\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @returns {opentelemetry.proto.metrics.v1.Gauge} Gauge\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    Gauge.decodeDelimited = function decodeDelimited(reader) {\n                        if (!(reader instanceof $Reader))\n                            reader = new $Reader(reader);\n                        return this.decode(reader, reader.uint32());\n                    };\n                    /**\n                     * Verifies a Gauge message.\n                     * @function verify\n                     * @memberof opentelemetry.proto.metrics.v1.Gauge\n                     * @static\n                     * @param {Object.<string,*>} message Plain object to verify\n                     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                     */\n                    Gauge.verify = function verify(message) {\n                        if (typeof message !== \"object\" || message === null)\n                            return \"object expected\";\n                        if (message.dataPoints != null && message.hasOwnProperty(\"dataPoints\")) {\n                            if (!Array.isArray(message.dataPoints))\n                                return \"dataPoints: array expected\";\n                            for (var i = 0; i < message.dataPoints.length; ++i) {\n                                var error = $root.opentelemetry.proto.metrics.v1.NumberDataPoint.verify(message.dataPoints[i]);\n                                if (error)\n                                    return \"dataPoints.\" + error;\n                            }\n                        }\n                        return null;\n                    };\n                    /**\n                     * Creates a Gauge message from a plain object. Also converts values to their respective internal types.\n                     * @function fromObject\n                     * @memberof opentelemetry.proto.metrics.v1.Gauge\n                     * @static\n                     * @param {Object.<string,*>} object Plain object\n                     * @returns {opentelemetry.proto.metrics.v1.Gauge} Gauge\n                     */\n                    Gauge.fromObject = function fromObject(object) {\n                        if (object instanceof $root.opentelemetry.proto.metrics.v1.Gauge)\n                            return object;\n                        var message = new $root.opentelemetry.proto.metrics.v1.Gauge();\n                        if (object.dataPoints) {\n                            if (!Array.isArray(object.dataPoints))\n                                throw TypeError(\".opentelemetry.proto.metrics.v1.Gauge.dataPoints: array expected\");\n                            message.dataPoints = [];\n                            for (var i = 0; i < object.dataPoints.length; ++i) {\n                                if (typeof object.dataPoints[i] !== \"object\")\n                                    throw TypeError(\".opentelemetry.proto.metrics.v1.Gauge.dataPoints: object expected\");\n                                message.dataPoints[i] = $root.opentelemetry.proto.metrics.v1.NumberDataPoint.fromObject(object.dataPoints[i]);\n                            }\n                        }\n                        return message;\n                    };\n                    /**\n                     * Creates a plain object from a Gauge message. Also converts values to other types if specified.\n                     * @function toObject\n                     * @memberof opentelemetry.proto.metrics.v1.Gauge\n                     * @static\n                     * @param {opentelemetry.proto.metrics.v1.Gauge} message Gauge\n                     * @param {$protobuf.IConversionOptions} [options] Conversion options\n                     * @returns {Object.<string,*>} Plain object\n                     */\n                    Gauge.toObject = function toObject(message, options) {\n                        if (!options)\n                            options = {};\n                        var object = {};\n                        if (options.arrays || options.defaults)\n                            object.dataPoints = [];\n                        if (message.dataPoints && message.dataPoints.length) {\n                            object.dataPoints = [];\n                            for (var j = 0; j < message.dataPoints.length; ++j)\n                                object.dataPoints[j] = $root.opentelemetry.proto.metrics.v1.NumberDataPoint.toObject(message.dataPoints[j], options);\n                        }\n                        return object;\n                    };\n                    /**\n                     * Converts this Gauge to JSON.\n                     * @function toJSON\n                     * @memberof opentelemetry.proto.metrics.v1.Gauge\n                     * @instance\n                     * @returns {Object.<string,*>} JSON object\n                     */\n                    Gauge.prototype.toJSON = function toJSON() {\n                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                    };\n                    /**\n                     * Gets the default type url for Gauge\n                     * @function getTypeUrl\n                     * @memberof opentelemetry.proto.metrics.v1.Gauge\n                     * @static\n                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n                     * @returns {string} The default type url\n                     */\n                    Gauge.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                        if (typeUrlPrefix === undefined) {\n                            typeUrlPrefix = \"type.googleapis.com\";\n                        }\n                        return typeUrlPrefix + \"/opentelemetry.proto.metrics.v1.Gauge\";\n                    };\n                    return Gauge;\n                })();\n                v1.Sum = (function () {\n                    /**\n                     * Properties of a Sum.\n                     * @memberof opentelemetry.proto.metrics.v1\n                     * @interface ISum\n                     * @property {Array.<opentelemetry.proto.metrics.v1.INumberDataPoint>|null} [dataPoints] Sum dataPoints\n                     * @property {opentelemetry.proto.metrics.v1.AggregationTemporality|null} [aggregationTemporality] Sum aggregationTemporality\n                     * @property {boolean|null} [isMonotonic] Sum isMonotonic\n                     */\n                    /**\n                     * Constructs a new Sum.\n                     * @memberof opentelemetry.proto.metrics.v1\n                     * @classdesc Represents a Sum.\n                     * @implements ISum\n                     * @constructor\n                     * @param {opentelemetry.proto.metrics.v1.ISum=} [properties] Properties to set\n                     */\n                    function Sum(properties) {\n                        this.dataPoints = [];\n                        if (properties)\n                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                                if (properties[keys[i]] != null)\n                                    this[keys[i]] = properties[keys[i]];\n                    }\n                    /**\n                     * Sum dataPoints.\n                     * @member {Array.<opentelemetry.proto.metrics.v1.INumberDataPoint>} dataPoints\n                     * @memberof opentelemetry.proto.metrics.v1.Sum\n                     * @instance\n                     */\n                    Sum.prototype.dataPoints = $util.emptyArray;\n                    /**\n                     * Sum aggregationTemporality.\n                     * @member {opentelemetry.proto.metrics.v1.AggregationTemporality|null|undefined} aggregationTemporality\n                     * @memberof opentelemetry.proto.metrics.v1.Sum\n                     * @instance\n                     */\n                    Sum.prototype.aggregationTemporality = null;\n                    /**\n                     * Sum isMonotonic.\n                     * @member {boolean|null|undefined} isMonotonic\n                     * @memberof opentelemetry.proto.metrics.v1.Sum\n                     * @instance\n                     */\n                    Sum.prototype.isMonotonic = null;\n                    /**\n                     * Creates a new Sum instance using the specified properties.\n                     * @function create\n                     * @memberof opentelemetry.proto.metrics.v1.Sum\n                     * @static\n                     * @param {opentelemetry.proto.metrics.v1.ISum=} [properties] Properties to set\n                     * @returns {opentelemetry.proto.metrics.v1.Sum} Sum instance\n                     */\n                    Sum.create = function create(properties) {\n                        return new Sum(properties);\n                    };\n                    /**\n                     * Encodes the specified Sum message. Does not implicitly {@link opentelemetry.proto.metrics.v1.Sum.verify|verify} messages.\n                     * @function encode\n                     * @memberof opentelemetry.proto.metrics.v1.Sum\n                     * @static\n                     * @param {opentelemetry.proto.metrics.v1.ISum} message Sum message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    Sum.encode = function encode(message, writer) {\n                        if (!writer)\n                            writer = $Writer.create();\n                        if (message.dataPoints != null && message.dataPoints.length)\n                            for (var i = 0; i < message.dataPoints.length; ++i)\n                                $root.opentelemetry.proto.metrics.v1.NumberDataPoint.encode(message.dataPoints[i], writer.uint32(/* id 1, wireType 2 =*/ 10).fork()).ldelim();\n                        if (message.aggregationTemporality != null && Object.hasOwnProperty.call(message, \"aggregationTemporality\"))\n                            writer.uint32(/* id 2, wireType 0 =*/ 16).int32(message.aggregationTemporality);\n                        if (message.isMonotonic != null && Object.hasOwnProperty.call(message, \"isMonotonic\"))\n                            writer.uint32(/* id 3, wireType 0 =*/ 24).bool(message.isMonotonic);\n                        return writer;\n                    };\n                    /**\n                     * Encodes the specified Sum message, length delimited. Does not implicitly {@link opentelemetry.proto.metrics.v1.Sum.verify|verify} messages.\n                     * @function encodeDelimited\n                     * @memberof opentelemetry.proto.metrics.v1.Sum\n                     * @static\n                     * @param {opentelemetry.proto.metrics.v1.ISum} message Sum message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    Sum.encodeDelimited = function encodeDelimited(message, writer) {\n                        return this.encode(message, writer).ldelim();\n                    };\n                    /**\n                     * Decodes a Sum message from the specified reader or buffer.\n                     * @function decode\n                     * @memberof opentelemetry.proto.metrics.v1.Sum\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @param {number} [length] Message length if known beforehand\n                     * @returns {opentelemetry.proto.metrics.v1.Sum} Sum\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    Sum.decode = function decode(reader, length) {\n                        if (!(reader instanceof $Reader))\n                            reader = $Reader.create(reader);\n                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.opentelemetry.proto.metrics.v1.Sum();\n                        while (reader.pos < end) {\n                            var tag = reader.uint32();\n                            switch (tag >>> 3) {\n                                case 1: {\n                                    if (!(message.dataPoints && message.dataPoints.length))\n                                        message.dataPoints = [];\n                                    message.dataPoints.push($root.opentelemetry.proto.metrics.v1.NumberDataPoint.decode(reader, reader.uint32()));\n                                    break;\n                                }\n                                case 2: {\n                                    message.aggregationTemporality = reader.int32();\n                                    break;\n                                }\n                                case 3: {\n                                    message.isMonotonic = reader.bool();\n                                    break;\n                                }\n                                default:\n                                    reader.skipType(tag & 7);\n                                    break;\n                            }\n                        }\n                        return message;\n                    };\n                    /**\n                     * Decodes a Sum message from the specified reader or buffer, length delimited.\n                     * @function decodeDelimited\n                     * @memberof opentelemetry.proto.metrics.v1.Sum\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @returns {opentelemetry.proto.metrics.v1.Sum} Sum\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    Sum.decodeDelimited = function decodeDelimited(reader) {\n                        if (!(reader instanceof $Reader))\n                            reader = new $Reader(reader);\n                        return this.decode(reader, reader.uint32());\n                    };\n                    /**\n                     * Verifies a Sum message.\n                     * @function verify\n                     * @memberof opentelemetry.proto.metrics.v1.Sum\n                     * @static\n                     * @param {Object.<string,*>} message Plain object to verify\n                     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                     */\n                    Sum.verify = function verify(message) {\n                        if (typeof message !== \"object\" || message === null)\n                            return \"object expected\";\n                        if (message.dataPoints != null && message.hasOwnProperty(\"dataPoints\")) {\n                            if (!Array.isArray(message.dataPoints))\n                                return \"dataPoints: array expected\";\n                            for (var i = 0; i < message.dataPoints.length; ++i) {\n                                var error = $root.opentelemetry.proto.metrics.v1.NumberDataPoint.verify(message.dataPoints[i]);\n                                if (error)\n                                    return \"dataPoints.\" + error;\n                            }\n                        }\n                        if (message.aggregationTemporality != null && message.hasOwnProperty(\"aggregationTemporality\"))\n                            switch (message.aggregationTemporality) {\n                                default:\n                                    return \"aggregationTemporality: enum value expected\";\n                                case 0:\n                                case 1:\n                                case 2:\n                                    break;\n                            }\n                        if (message.isMonotonic != null && message.hasOwnProperty(\"isMonotonic\"))\n                            if (typeof message.isMonotonic !== \"boolean\")\n                                return \"isMonotonic: boolean expected\";\n                        return null;\n                    };\n                    /**\n                     * Creates a Sum message from a plain object. Also converts values to their respective internal types.\n                     * @function fromObject\n                     * @memberof opentelemetry.proto.metrics.v1.Sum\n                     * @static\n                     * @param {Object.<string,*>} object Plain object\n                     * @returns {opentelemetry.proto.metrics.v1.Sum} Sum\n                     */\n                    Sum.fromObject = function fromObject(object) {\n                        if (object instanceof $root.opentelemetry.proto.metrics.v1.Sum)\n                            return object;\n                        var message = new $root.opentelemetry.proto.metrics.v1.Sum();\n                        if (object.dataPoints) {\n                            if (!Array.isArray(object.dataPoints))\n                                throw TypeError(\".opentelemetry.proto.metrics.v1.Sum.dataPoints: array expected\");\n                            message.dataPoints = [];\n                            for (var i = 0; i < object.dataPoints.length; ++i) {\n                                if (typeof object.dataPoints[i] !== \"object\")\n                                    throw TypeError(\".opentelemetry.proto.metrics.v1.Sum.dataPoints: object expected\");\n                                message.dataPoints[i] = $root.opentelemetry.proto.metrics.v1.NumberDataPoint.fromObject(object.dataPoints[i]);\n                            }\n                        }\n                        switch (object.aggregationTemporality) {\n                            default:\n                                if (typeof object.aggregationTemporality === \"number\") {\n                                    message.aggregationTemporality = object.aggregationTemporality;\n                                    break;\n                                }\n                                break;\n                            case \"AGGREGATION_TEMPORALITY_UNSPECIFIED\":\n                            case 0:\n                                message.aggregationTemporality = 0;\n                                break;\n                            case \"AGGREGATION_TEMPORALITY_DELTA\":\n                            case 1:\n                                message.aggregationTemporality = 1;\n                                break;\n                            case \"AGGREGATION_TEMPORALITY_CUMULATIVE\":\n                            case 2:\n                                message.aggregationTemporality = 2;\n                                break;\n                        }\n                        if (object.isMonotonic != null)\n                            message.isMonotonic = Boolean(object.isMonotonic);\n                        return message;\n                    };\n                    /**\n                     * Creates a plain object from a Sum message. Also converts values to other types if specified.\n                     * @function toObject\n                     * @memberof opentelemetry.proto.metrics.v1.Sum\n                     * @static\n                     * @param {opentelemetry.proto.metrics.v1.Sum} message Sum\n                     * @param {$protobuf.IConversionOptions} [options] Conversion options\n                     * @returns {Object.<string,*>} Plain object\n                     */\n                    Sum.toObject = function toObject(message, options) {\n                        if (!options)\n                            options = {};\n                        var object = {};\n                        if (options.arrays || options.defaults)\n                            object.dataPoints = [];\n                        if (options.defaults) {\n                            object.aggregationTemporality = options.enums === String ? \"AGGREGATION_TEMPORALITY_UNSPECIFIED\" : 0;\n                            object.isMonotonic = false;\n                        }\n                        if (message.dataPoints && message.dataPoints.length) {\n                            object.dataPoints = [];\n                            for (var j = 0; j < message.dataPoints.length; ++j)\n                                object.dataPoints[j] = $root.opentelemetry.proto.metrics.v1.NumberDataPoint.toObject(message.dataPoints[j], options);\n                        }\n                        if (message.aggregationTemporality != null && message.hasOwnProperty(\"aggregationTemporality\"))\n                            object.aggregationTemporality = options.enums === String ? $root.opentelemetry.proto.metrics.v1.AggregationTemporality[message.aggregationTemporality] === undefined ? message.aggregationTemporality : $root.opentelemetry.proto.metrics.v1.AggregationTemporality[message.aggregationTemporality] : message.aggregationTemporality;\n                        if (message.isMonotonic != null && message.hasOwnProperty(\"isMonotonic\"))\n                            object.isMonotonic = message.isMonotonic;\n                        return object;\n                    };\n                    /**\n                     * Converts this Sum to JSON.\n                     * @function toJSON\n                     * @memberof opentelemetry.proto.metrics.v1.Sum\n                     * @instance\n                     * @returns {Object.<string,*>} JSON object\n                     */\n                    Sum.prototype.toJSON = function toJSON() {\n                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                    };\n                    /**\n                     * Gets the default type url for Sum\n                     * @function getTypeUrl\n                     * @memberof opentelemetry.proto.metrics.v1.Sum\n                     * @static\n                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n                     * @returns {string} The default type url\n                     */\n                    Sum.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                        if (typeUrlPrefix === undefined) {\n                            typeUrlPrefix = \"type.googleapis.com\";\n                        }\n                        return typeUrlPrefix + \"/opentelemetry.proto.metrics.v1.Sum\";\n                    };\n                    return Sum;\n                })();\n                v1.Histogram = (function () {\n                    /**\n                     * Properties of a Histogram.\n                     * @memberof opentelemetry.proto.metrics.v1\n                     * @interface IHistogram\n                     * @property {Array.<opentelemetry.proto.metrics.v1.IHistogramDataPoint>|null} [dataPoints] Histogram dataPoints\n                     * @property {opentelemetry.proto.metrics.v1.AggregationTemporality|null} [aggregationTemporality] Histogram aggregationTemporality\n                     */\n                    /**\n                     * Constructs a new Histogram.\n                     * @memberof opentelemetry.proto.metrics.v1\n                     * @classdesc Represents a Histogram.\n                     * @implements IHistogram\n                     * @constructor\n                     * @param {opentelemetry.proto.metrics.v1.IHistogram=} [properties] Properties to set\n                     */\n                    function Histogram(properties) {\n                        this.dataPoints = [];\n                        if (properties)\n                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                                if (properties[keys[i]] != null)\n                                    this[keys[i]] = properties[keys[i]];\n                    }\n                    /**\n                     * Histogram dataPoints.\n                     * @member {Array.<opentelemetry.proto.metrics.v1.IHistogramDataPoint>} dataPoints\n                     * @memberof opentelemetry.proto.metrics.v1.Histogram\n                     * @instance\n                     */\n                    Histogram.prototype.dataPoints = $util.emptyArray;\n                    /**\n                     * Histogram aggregationTemporality.\n                     * @member {opentelemetry.proto.metrics.v1.AggregationTemporality|null|undefined} aggregationTemporality\n                     * @memberof opentelemetry.proto.metrics.v1.Histogram\n                     * @instance\n                     */\n                    Histogram.prototype.aggregationTemporality = null;\n                    /**\n                     * Creates a new Histogram instance using the specified properties.\n                     * @function create\n                     * @memberof opentelemetry.proto.metrics.v1.Histogram\n                     * @static\n                     * @param {opentelemetry.proto.metrics.v1.IHistogram=} [properties] Properties to set\n                     * @returns {opentelemetry.proto.metrics.v1.Histogram} Histogram instance\n                     */\n                    Histogram.create = function create(properties) {\n                        return new Histogram(properties);\n                    };\n                    /**\n                     * Encodes the specified Histogram message. Does not implicitly {@link opentelemetry.proto.metrics.v1.Histogram.verify|verify} messages.\n                     * @function encode\n                     * @memberof opentelemetry.proto.metrics.v1.Histogram\n                     * @static\n                     * @param {opentelemetry.proto.metrics.v1.IHistogram} message Histogram message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    Histogram.encode = function encode(message, writer) {\n                        if (!writer)\n                            writer = $Writer.create();\n                        if (message.dataPoints != null && message.dataPoints.length)\n                            for (var i = 0; i < message.dataPoints.length; ++i)\n                                $root.opentelemetry.proto.metrics.v1.HistogramDataPoint.encode(message.dataPoints[i], writer.uint32(/* id 1, wireType 2 =*/ 10).fork()).ldelim();\n                        if (message.aggregationTemporality != null && Object.hasOwnProperty.call(message, \"aggregationTemporality\"))\n                            writer.uint32(/* id 2, wireType 0 =*/ 16).int32(message.aggregationTemporality);\n                        return writer;\n                    };\n                    /**\n                     * Encodes the specified Histogram message, length delimited. Does not implicitly {@link opentelemetry.proto.metrics.v1.Histogram.verify|verify} messages.\n                     * @function encodeDelimited\n                     * @memberof opentelemetry.proto.metrics.v1.Histogram\n                     * @static\n                     * @param {opentelemetry.proto.metrics.v1.IHistogram} message Histogram message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    Histogram.encodeDelimited = function encodeDelimited(message, writer) {\n                        return this.encode(message, writer).ldelim();\n                    };\n                    /**\n                     * Decodes a Histogram message from the specified reader or buffer.\n                     * @function decode\n                     * @memberof opentelemetry.proto.metrics.v1.Histogram\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @param {number} [length] Message length if known beforehand\n                     * @returns {opentelemetry.proto.metrics.v1.Histogram} Histogram\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    Histogram.decode = function decode(reader, length) {\n                        if (!(reader instanceof $Reader))\n                            reader = $Reader.create(reader);\n                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.opentelemetry.proto.metrics.v1.Histogram();\n                        while (reader.pos < end) {\n                            var tag = reader.uint32();\n                            switch (tag >>> 3) {\n                                case 1: {\n                                    if (!(message.dataPoints && message.dataPoints.length))\n                                        message.dataPoints = [];\n                                    message.dataPoints.push($root.opentelemetry.proto.metrics.v1.HistogramDataPoint.decode(reader, reader.uint32()));\n                                    break;\n                                }\n                                case 2: {\n                                    message.aggregationTemporality = reader.int32();\n                                    break;\n                                }\n                                default:\n                                    reader.skipType(tag & 7);\n                                    break;\n                            }\n                        }\n                        return message;\n                    };\n                    /**\n                     * Decodes a Histogram message from the specified reader or buffer, length delimited.\n                     * @function decodeDelimited\n                     * @memberof opentelemetry.proto.metrics.v1.Histogram\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @returns {opentelemetry.proto.metrics.v1.Histogram} Histogram\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    Histogram.decodeDelimited = function decodeDelimited(reader) {\n                        if (!(reader instanceof $Reader))\n                            reader = new $Reader(reader);\n                        return this.decode(reader, reader.uint32());\n                    };\n                    /**\n                     * Verifies a Histogram message.\n                     * @function verify\n                     * @memberof opentelemetry.proto.metrics.v1.Histogram\n                     * @static\n                     * @param {Object.<string,*>} message Plain object to verify\n                     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                     */\n                    Histogram.verify = function verify(message) {\n                        if (typeof message !== \"object\" || message === null)\n                            return \"object expected\";\n                        if (message.dataPoints != null && message.hasOwnProperty(\"dataPoints\")) {\n                            if (!Array.isArray(message.dataPoints))\n                                return \"dataPoints: array expected\";\n                            for (var i = 0; i < message.dataPoints.length; ++i) {\n                                var error = $root.opentelemetry.proto.metrics.v1.HistogramDataPoint.verify(message.dataPoints[i]);\n                                if (error)\n                                    return \"dataPoints.\" + error;\n                            }\n                        }\n                        if (message.aggregationTemporality != null && message.hasOwnProperty(\"aggregationTemporality\"))\n                            switch (message.aggregationTemporality) {\n                                default:\n                                    return \"aggregationTemporality: enum value expected\";\n                                case 0:\n                                case 1:\n                                case 2:\n                                    break;\n                            }\n                        return null;\n                    };\n                    /**\n                     * Creates a Histogram message from a plain object. Also converts values to their respective internal types.\n                     * @function fromObject\n                     * @memberof opentelemetry.proto.metrics.v1.Histogram\n                     * @static\n                     * @param {Object.<string,*>} object Plain object\n                     * @returns {opentelemetry.proto.metrics.v1.Histogram} Histogram\n                     */\n                    Histogram.fromObject = function fromObject(object) {\n                        if (object instanceof $root.opentelemetry.proto.metrics.v1.Histogram)\n                            return object;\n                        var message = new $root.opentelemetry.proto.metrics.v1.Histogram();\n                        if (object.dataPoints) {\n                            if (!Array.isArray(object.dataPoints))\n                                throw TypeError(\".opentelemetry.proto.metrics.v1.Histogram.dataPoints: array expected\");\n                            message.dataPoints = [];\n                            for (var i = 0; i < object.dataPoints.length; ++i) {\n                                if (typeof object.dataPoints[i] !== \"object\")\n                                    throw TypeError(\".opentelemetry.proto.metrics.v1.Histogram.dataPoints: object expected\");\n                                message.dataPoints[i] = $root.opentelemetry.proto.metrics.v1.HistogramDataPoint.fromObject(object.dataPoints[i]);\n                            }\n                        }\n                        switch (object.aggregationTemporality) {\n                            default:\n                                if (typeof object.aggregationTemporality === \"number\") {\n                                    message.aggregationTemporality = object.aggregationTemporality;\n                                    break;\n                                }\n                                break;\n                            case \"AGGREGATION_TEMPORALITY_UNSPECIFIED\":\n                            case 0:\n                                message.aggregationTemporality = 0;\n                                break;\n                            case \"AGGREGATION_TEMPORALITY_DELTA\":\n                            case 1:\n                                message.aggregationTemporality = 1;\n                                break;\n                            case \"AGGREGATION_TEMPORALITY_CUMULATIVE\":\n                            case 2:\n                                message.aggregationTemporality = 2;\n                                break;\n                        }\n                        return message;\n                    };\n                    /**\n                     * Creates a plain object from a Histogram message. Also converts values to other types if specified.\n                     * @function toObject\n                     * @memberof opentelemetry.proto.metrics.v1.Histogram\n                     * @static\n                     * @param {opentelemetry.proto.metrics.v1.Histogram} message Histogram\n                     * @param {$protobuf.IConversionOptions} [options] Conversion options\n                     * @returns {Object.<string,*>} Plain object\n                     */\n                    Histogram.toObject = function toObject(message, options) {\n                        if (!options)\n                            options = {};\n                        var object = {};\n                        if (options.arrays || options.defaults)\n                            object.dataPoints = [];\n                        if (options.defaults)\n                            object.aggregationTemporality = options.enums === String ? \"AGGREGATION_TEMPORALITY_UNSPECIFIED\" : 0;\n                        if (message.dataPoints && message.dataPoints.length) {\n                            object.dataPoints = [];\n                            for (var j = 0; j < message.dataPoints.length; ++j)\n                                object.dataPoints[j] = $root.opentelemetry.proto.metrics.v1.HistogramDataPoint.toObject(message.dataPoints[j], options);\n                        }\n                        if (message.aggregationTemporality != null && message.hasOwnProperty(\"aggregationTemporality\"))\n                            object.aggregationTemporality = options.enums === String ? $root.opentelemetry.proto.metrics.v1.AggregationTemporality[message.aggregationTemporality] === undefined ? message.aggregationTemporality : $root.opentelemetry.proto.metrics.v1.AggregationTemporality[message.aggregationTemporality] : message.aggregationTemporality;\n                        return object;\n                    };\n                    /**\n                     * Converts this Histogram to JSON.\n                     * @function toJSON\n                     * @memberof opentelemetry.proto.metrics.v1.Histogram\n                     * @instance\n                     * @returns {Object.<string,*>} JSON object\n                     */\n                    Histogram.prototype.toJSON = function toJSON() {\n                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                    };\n                    /**\n                     * Gets the default type url for Histogram\n                     * @function getTypeUrl\n                     * @memberof opentelemetry.proto.metrics.v1.Histogram\n                     * @static\n                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n                     * @returns {string} The default type url\n                     */\n                    Histogram.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                        if (typeUrlPrefix === undefined) {\n                            typeUrlPrefix = \"type.googleapis.com\";\n                        }\n                        return typeUrlPrefix + \"/opentelemetry.proto.metrics.v1.Histogram\";\n                    };\n                    return Histogram;\n                })();\n                v1.ExponentialHistogram = (function () {\n                    /**\n                     * Properties of an ExponentialHistogram.\n                     * @memberof opentelemetry.proto.metrics.v1\n                     * @interface IExponentialHistogram\n                     * @property {Array.<opentelemetry.proto.metrics.v1.IExponentialHistogramDataPoint>|null} [dataPoints] ExponentialHistogram dataPoints\n                     * @property {opentelemetry.proto.metrics.v1.AggregationTemporality|null} [aggregationTemporality] ExponentialHistogram aggregationTemporality\n                     */\n                    /**\n                     * Constructs a new ExponentialHistogram.\n                     * @memberof opentelemetry.proto.metrics.v1\n                     * @classdesc Represents an ExponentialHistogram.\n                     * @implements IExponentialHistogram\n                     * @constructor\n                     * @param {opentelemetry.proto.metrics.v1.IExponentialHistogram=} [properties] Properties to set\n                     */\n                    function ExponentialHistogram(properties) {\n                        this.dataPoints = [];\n                        if (properties)\n                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                                if (properties[keys[i]] != null)\n                                    this[keys[i]] = properties[keys[i]];\n                    }\n                    /**\n                     * ExponentialHistogram dataPoints.\n                     * @member {Array.<opentelemetry.proto.metrics.v1.IExponentialHistogramDataPoint>} dataPoints\n                     * @memberof opentelemetry.proto.metrics.v1.ExponentialHistogram\n                     * @instance\n                     */\n                    ExponentialHistogram.prototype.dataPoints = $util.emptyArray;\n                    /**\n                     * ExponentialHistogram aggregationTemporality.\n                     * @member {opentelemetry.proto.metrics.v1.AggregationTemporality|null|undefined} aggregationTemporality\n                     * @memberof opentelemetry.proto.metrics.v1.ExponentialHistogram\n                     * @instance\n                     */\n                    ExponentialHistogram.prototype.aggregationTemporality = null;\n                    /**\n                     * Creates a new ExponentialHistogram instance using the specified properties.\n                     * @function create\n                     * @memberof opentelemetry.proto.metrics.v1.ExponentialHistogram\n                     * @static\n                     * @param {opentelemetry.proto.metrics.v1.IExponentialHistogram=} [properties] Properties to set\n                     * @returns {opentelemetry.proto.metrics.v1.ExponentialHistogram} ExponentialHistogram instance\n                     */\n                    ExponentialHistogram.create = function create(properties) {\n                        return new ExponentialHistogram(properties);\n                    };\n                    /**\n                     * Encodes the specified ExponentialHistogram message. Does not implicitly {@link opentelemetry.proto.metrics.v1.ExponentialHistogram.verify|verify} messages.\n                     * @function encode\n                     * @memberof opentelemetry.proto.metrics.v1.ExponentialHistogram\n                     * @static\n                     * @param {opentelemetry.proto.metrics.v1.IExponentialHistogram} message ExponentialHistogram message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    ExponentialHistogram.encode = function encode(message, writer) {\n                        if (!writer)\n                            writer = $Writer.create();\n                        if (message.dataPoints != null && message.dataPoints.length)\n                            for (var i = 0; i < message.dataPoints.length; ++i)\n                                $root.opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.encode(message.dataPoints[i], writer.uint32(/* id 1, wireType 2 =*/ 10).fork()).ldelim();\n                        if (message.aggregationTemporality != null && Object.hasOwnProperty.call(message, \"aggregationTemporality\"))\n                            writer.uint32(/* id 2, wireType 0 =*/ 16).int32(message.aggregationTemporality);\n                        return writer;\n                    };\n                    /**\n                     * Encodes the specified ExponentialHistogram message, length delimited. Does not implicitly {@link opentelemetry.proto.metrics.v1.ExponentialHistogram.verify|verify} messages.\n                     * @function encodeDelimited\n                     * @memberof opentelemetry.proto.metrics.v1.ExponentialHistogram\n                     * @static\n                     * @param {opentelemetry.proto.metrics.v1.IExponentialHistogram} message ExponentialHistogram message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    ExponentialHistogram.encodeDelimited = function encodeDelimited(message, writer) {\n                        return this.encode(message, writer).ldelim();\n                    };\n                    /**\n                     * Decodes an ExponentialHistogram message from the specified reader or buffer.\n                     * @function decode\n                     * @memberof opentelemetry.proto.metrics.v1.ExponentialHistogram\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @param {number} [length] Message length if known beforehand\n                     * @returns {opentelemetry.proto.metrics.v1.ExponentialHistogram} ExponentialHistogram\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    ExponentialHistogram.decode = function decode(reader, length) {\n                        if (!(reader instanceof $Reader))\n                            reader = $Reader.create(reader);\n                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.opentelemetry.proto.metrics.v1.ExponentialHistogram();\n                        while (reader.pos < end) {\n                            var tag = reader.uint32();\n                            switch (tag >>> 3) {\n                                case 1: {\n                                    if (!(message.dataPoints && message.dataPoints.length))\n                                        message.dataPoints = [];\n                                    message.dataPoints.push($root.opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.decode(reader, reader.uint32()));\n                                    break;\n                                }\n                                case 2: {\n                                    message.aggregationTemporality = reader.int32();\n                                    break;\n                                }\n                                default:\n                                    reader.skipType(tag & 7);\n                                    break;\n                            }\n                        }\n                        return message;\n                    };\n                    /**\n                     * Decodes an ExponentialHistogram message from the specified reader or buffer, length delimited.\n                     * @function decodeDelimited\n                     * @memberof opentelemetry.proto.metrics.v1.ExponentialHistogram\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @returns {opentelemetry.proto.metrics.v1.ExponentialHistogram} ExponentialHistogram\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    ExponentialHistogram.decodeDelimited = function decodeDelimited(reader) {\n                        if (!(reader instanceof $Reader))\n                            reader = new $Reader(reader);\n                        return this.decode(reader, reader.uint32());\n                    };\n                    /**\n                     * Verifies an ExponentialHistogram message.\n                     * @function verify\n                     * @memberof opentelemetry.proto.metrics.v1.ExponentialHistogram\n                     * @static\n                     * @param {Object.<string,*>} message Plain object to verify\n                     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                     */\n                    ExponentialHistogram.verify = function verify(message) {\n                        if (typeof message !== \"object\" || message === null)\n                            return \"object expected\";\n                        if (message.dataPoints != null && message.hasOwnProperty(\"dataPoints\")) {\n                            if (!Array.isArray(message.dataPoints))\n                                return \"dataPoints: array expected\";\n                            for (var i = 0; i < message.dataPoints.length; ++i) {\n                                var error = $root.opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.verify(message.dataPoints[i]);\n                                if (error)\n                                    return \"dataPoints.\" + error;\n                            }\n                        }\n                        if (message.aggregationTemporality != null && message.hasOwnProperty(\"aggregationTemporality\"))\n                            switch (message.aggregationTemporality) {\n                                default:\n                                    return \"aggregationTemporality: enum value expected\";\n                                case 0:\n                                case 1:\n                                case 2:\n                                    break;\n                            }\n                        return null;\n                    };\n                    /**\n                     * Creates an ExponentialHistogram message from a plain object. Also converts values to their respective internal types.\n                     * @function fromObject\n                     * @memberof opentelemetry.proto.metrics.v1.ExponentialHistogram\n                     * @static\n                     * @param {Object.<string,*>} object Plain object\n                     * @returns {opentelemetry.proto.metrics.v1.ExponentialHistogram} ExponentialHistogram\n                     */\n                    ExponentialHistogram.fromObject = function fromObject(object) {\n                        if (object instanceof $root.opentelemetry.proto.metrics.v1.ExponentialHistogram)\n                            return object;\n                        var message = new $root.opentelemetry.proto.metrics.v1.ExponentialHistogram();\n                        if (object.dataPoints) {\n                            if (!Array.isArray(object.dataPoints))\n                                throw TypeError(\".opentelemetry.proto.metrics.v1.ExponentialHistogram.dataPoints: array expected\");\n                            message.dataPoints = [];\n                            for (var i = 0; i < object.dataPoints.length; ++i) {\n                                if (typeof object.dataPoints[i] !== \"object\")\n                                    throw TypeError(\".opentelemetry.proto.metrics.v1.ExponentialHistogram.dataPoints: object expected\");\n                                message.dataPoints[i] = $root.opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.fromObject(object.dataPoints[i]);\n                            }\n                        }\n                        switch (object.aggregationTemporality) {\n                            default:\n                                if (typeof object.aggregationTemporality === \"number\") {\n                                    message.aggregationTemporality = object.aggregationTemporality;\n                                    break;\n                                }\n                                break;\n                            case \"AGGREGATION_TEMPORALITY_UNSPECIFIED\":\n                            case 0:\n                                message.aggregationTemporality = 0;\n                                break;\n                            case \"AGGREGATION_TEMPORALITY_DELTA\":\n                            case 1:\n                                message.aggregationTemporality = 1;\n                                break;\n                            case \"AGGREGATION_TEMPORALITY_CUMULATIVE\":\n                            case 2:\n                                message.aggregationTemporality = 2;\n                                break;\n                        }\n                        return message;\n                    };\n                    /**\n                     * Creates a plain object from an ExponentialHistogram message. Also converts values to other types if specified.\n                     * @function toObject\n                     * @memberof opentelemetry.proto.metrics.v1.ExponentialHistogram\n                     * @static\n                     * @param {opentelemetry.proto.metrics.v1.ExponentialHistogram} message ExponentialHistogram\n                     * @param {$protobuf.IConversionOptions} [options] Conversion options\n                     * @returns {Object.<string,*>} Plain object\n                     */\n                    ExponentialHistogram.toObject = function toObject(message, options) {\n                        if (!options)\n                            options = {};\n                        var object = {};\n                        if (options.arrays || options.defaults)\n                            object.dataPoints = [];\n                        if (options.defaults)\n                            object.aggregationTemporality = options.enums === String ? \"AGGREGATION_TEMPORALITY_UNSPECIFIED\" : 0;\n                        if (message.dataPoints && message.dataPoints.length) {\n                            object.dataPoints = [];\n                            for (var j = 0; j < message.dataPoints.length; ++j)\n                                object.dataPoints[j] = $root.opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.toObject(message.dataPoints[j], options);\n                        }\n                        if (message.aggregationTemporality != null && message.hasOwnProperty(\"aggregationTemporality\"))\n                            object.aggregationTemporality = options.enums === String ? $root.opentelemetry.proto.metrics.v1.AggregationTemporality[message.aggregationTemporality] === undefined ? message.aggregationTemporality : $root.opentelemetry.proto.metrics.v1.AggregationTemporality[message.aggregationTemporality] : message.aggregationTemporality;\n                        return object;\n                    };\n                    /**\n                     * Converts this ExponentialHistogram to JSON.\n                     * @function toJSON\n                     * @memberof opentelemetry.proto.metrics.v1.ExponentialHistogram\n                     * @instance\n                     * @returns {Object.<string,*>} JSON object\n                     */\n                    ExponentialHistogram.prototype.toJSON = function toJSON() {\n                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                    };\n                    /**\n                     * Gets the default type url for ExponentialHistogram\n                     * @function getTypeUrl\n                     * @memberof opentelemetry.proto.metrics.v1.ExponentialHistogram\n                     * @static\n                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n                     * @returns {string} The default type url\n                     */\n                    ExponentialHistogram.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                        if (typeUrlPrefix === undefined) {\n                            typeUrlPrefix = \"type.googleapis.com\";\n                        }\n                        return typeUrlPrefix + \"/opentelemetry.proto.metrics.v1.ExponentialHistogram\";\n                    };\n                    return ExponentialHistogram;\n                })();\n                v1.Summary = (function () {\n                    /**\n                     * Properties of a Summary.\n                     * @memberof opentelemetry.proto.metrics.v1\n                     * @interface ISummary\n                     * @property {Array.<opentelemetry.proto.metrics.v1.ISummaryDataPoint>|null} [dataPoints] Summary dataPoints\n                     */\n                    /**\n                     * Constructs a new Summary.\n                     * @memberof opentelemetry.proto.metrics.v1\n                     * @classdesc Represents a Summary.\n                     * @implements ISummary\n                     * @constructor\n                     * @param {opentelemetry.proto.metrics.v1.ISummary=} [properties] Properties to set\n                     */\n                    function Summary(properties) {\n                        this.dataPoints = [];\n                        if (properties)\n                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                                if (properties[keys[i]] != null)\n                                    this[keys[i]] = properties[keys[i]];\n                    }\n                    /**\n                     * Summary dataPoints.\n                     * @member {Array.<opentelemetry.proto.metrics.v1.ISummaryDataPoint>} dataPoints\n                     * @memberof opentelemetry.proto.metrics.v1.Summary\n                     * @instance\n                     */\n                    Summary.prototype.dataPoints = $util.emptyArray;\n                    /**\n                     * Creates a new Summary instance using the specified properties.\n                     * @function create\n                     * @memberof opentelemetry.proto.metrics.v1.Summary\n                     * @static\n                     * @param {opentelemetry.proto.metrics.v1.ISummary=} [properties] Properties to set\n                     * @returns {opentelemetry.proto.metrics.v1.Summary} Summary instance\n                     */\n                    Summary.create = function create(properties) {\n                        return new Summary(properties);\n                    };\n                    /**\n                     * Encodes the specified Summary message. Does not implicitly {@link opentelemetry.proto.metrics.v1.Summary.verify|verify} messages.\n                     * @function encode\n                     * @memberof opentelemetry.proto.metrics.v1.Summary\n                     * @static\n                     * @param {opentelemetry.proto.metrics.v1.ISummary} message Summary message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    Summary.encode = function encode(message, writer) {\n                        if (!writer)\n                            writer = $Writer.create();\n                        if (message.dataPoints != null && message.dataPoints.length)\n                            for (var i = 0; i < message.dataPoints.length; ++i)\n                                $root.opentelemetry.proto.metrics.v1.SummaryDataPoint.encode(message.dataPoints[i], writer.uint32(/* id 1, wireType 2 =*/ 10).fork()).ldelim();\n                        return writer;\n                    };\n                    /**\n                     * Encodes the specified Summary message, length delimited. Does not implicitly {@link opentelemetry.proto.metrics.v1.Summary.verify|verify} messages.\n                     * @function encodeDelimited\n                     * @memberof opentelemetry.proto.metrics.v1.Summary\n                     * @static\n                     * @param {opentelemetry.proto.metrics.v1.ISummary} message Summary message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    Summary.encodeDelimited = function encodeDelimited(message, writer) {\n                        return this.encode(message, writer).ldelim();\n                    };\n                    /**\n                     * Decodes a Summary message from the specified reader or buffer.\n                     * @function decode\n                     * @memberof opentelemetry.proto.metrics.v1.Summary\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @param {number} [length] Message length if known beforehand\n                     * @returns {opentelemetry.proto.metrics.v1.Summary} Summary\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    Summary.decode = function decode(reader, length) {\n                        if (!(reader instanceof $Reader))\n                            reader = $Reader.create(reader);\n                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.opentelemetry.proto.metrics.v1.Summary();\n                        while (reader.pos < end) {\n                            var tag = reader.uint32();\n                            switch (tag >>> 3) {\n                                case 1: {\n                                    if (!(message.dataPoints && message.dataPoints.length))\n                                        message.dataPoints = [];\n                                    message.dataPoints.push($root.opentelemetry.proto.metrics.v1.SummaryDataPoint.decode(reader, reader.uint32()));\n                                    break;\n                                }\n                                default:\n                                    reader.skipType(tag & 7);\n                                    break;\n                            }\n                        }\n                        return message;\n                    };\n                    /**\n                     * Decodes a Summary message from the specified reader or buffer, length delimited.\n                     * @function decodeDelimited\n                     * @memberof opentelemetry.proto.metrics.v1.Summary\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @returns {opentelemetry.proto.metrics.v1.Summary} Summary\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    Summary.decodeDelimited = function decodeDelimited(reader) {\n                        if (!(reader instanceof $Reader))\n                            reader = new $Reader(reader);\n                        return this.decode(reader, reader.uint32());\n                    };\n                    /**\n                     * Verifies a Summary message.\n                     * @function verify\n                     * @memberof opentelemetry.proto.metrics.v1.Summary\n                     * @static\n                     * @param {Object.<string,*>} message Plain object to verify\n                     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                     */\n                    Summary.verify = function verify(message) {\n                        if (typeof message !== \"object\" || message === null)\n                            return \"object expected\";\n                        if (message.dataPoints != null && message.hasOwnProperty(\"dataPoints\")) {\n                            if (!Array.isArray(message.dataPoints))\n                                return \"dataPoints: array expected\";\n                            for (var i = 0; i < message.dataPoints.length; ++i) {\n                                var error = $root.opentelemetry.proto.metrics.v1.SummaryDataPoint.verify(message.dataPoints[i]);\n                                if (error)\n                                    return \"dataPoints.\" + error;\n                            }\n                        }\n                        return null;\n                    };\n                    /**\n                     * Creates a Summary message from a plain object. Also converts values to their respective internal types.\n                     * @function fromObject\n                     * @memberof opentelemetry.proto.metrics.v1.Summary\n                     * @static\n                     * @param {Object.<string,*>} object Plain object\n                     * @returns {opentelemetry.proto.metrics.v1.Summary} Summary\n                     */\n                    Summary.fromObject = function fromObject(object) {\n                        if (object instanceof $root.opentelemetry.proto.metrics.v1.Summary)\n                            return object;\n                        var message = new $root.opentelemetry.proto.metrics.v1.Summary();\n                        if (object.dataPoints) {\n                            if (!Array.isArray(object.dataPoints))\n                                throw TypeError(\".opentelemetry.proto.metrics.v1.Summary.dataPoints: array expected\");\n                            message.dataPoints = [];\n                            for (var i = 0; i < object.dataPoints.length; ++i) {\n                                if (typeof object.dataPoints[i] !== \"object\")\n                                    throw TypeError(\".opentelemetry.proto.metrics.v1.Summary.dataPoints: object expected\");\n                                message.dataPoints[i] = $root.opentelemetry.proto.metrics.v1.SummaryDataPoint.fromObject(object.dataPoints[i]);\n                            }\n                        }\n                        return message;\n                    };\n                    /**\n                     * Creates a plain object from a Summary message. Also converts values to other types if specified.\n                     * @function toObject\n                     * @memberof opentelemetry.proto.metrics.v1.Summary\n                     * @static\n                     * @param {opentelemetry.proto.metrics.v1.Summary} message Summary\n                     * @param {$protobuf.IConversionOptions} [options] Conversion options\n                     * @returns {Object.<string,*>} Plain object\n                     */\n                    Summary.toObject = function toObject(message, options) {\n                        if (!options)\n                            options = {};\n                        var object = {};\n                        if (options.arrays || options.defaults)\n                            object.dataPoints = [];\n                        if (message.dataPoints && message.dataPoints.length) {\n                            object.dataPoints = [];\n                            for (var j = 0; j < message.dataPoints.length; ++j)\n                                object.dataPoints[j] = $root.opentelemetry.proto.metrics.v1.SummaryDataPoint.toObject(message.dataPoints[j], options);\n                        }\n                        return object;\n                    };\n                    /**\n                     * Converts this Summary to JSON.\n                     * @function toJSON\n                     * @memberof opentelemetry.proto.metrics.v1.Summary\n                     * @instance\n                     * @returns {Object.<string,*>} JSON object\n                     */\n                    Summary.prototype.toJSON = function toJSON() {\n                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                    };\n                    /**\n                     * Gets the default type url for Summary\n                     * @function getTypeUrl\n                     * @memberof opentelemetry.proto.metrics.v1.Summary\n                     * @static\n                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n                     * @returns {string} The default type url\n                     */\n                    Summary.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                        if (typeUrlPrefix === undefined) {\n                            typeUrlPrefix = \"type.googleapis.com\";\n                        }\n                        return typeUrlPrefix + \"/opentelemetry.proto.metrics.v1.Summary\";\n                    };\n                    return Summary;\n                })();\n                /**\n                 * AggregationTemporality enum.\n                 * @name opentelemetry.proto.metrics.v1.AggregationTemporality\n                 * @enum {number}\n                 * @property {number} AGGREGATION_TEMPORALITY_UNSPECIFIED=0 AGGREGATION_TEMPORALITY_UNSPECIFIED value\n                 * @property {number} AGGREGATION_TEMPORALITY_DELTA=1 AGGREGATION_TEMPORALITY_DELTA value\n                 * @property {number} AGGREGATION_TEMPORALITY_CUMULATIVE=2 AGGREGATION_TEMPORALITY_CUMULATIVE value\n                 */\n                v1.AggregationTemporality = (function () {\n                    var valuesById = {}, values = Object.create(valuesById);\n                    values[valuesById[0] = \"AGGREGATION_TEMPORALITY_UNSPECIFIED\"] = 0;\n                    values[valuesById[1] = \"AGGREGATION_TEMPORALITY_DELTA\"] = 1;\n                    values[valuesById[2] = \"AGGREGATION_TEMPORALITY_CUMULATIVE\"] = 2;\n                    return values;\n                })();\n                /**\n                 * DataPointFlags enum.\n                 * @name opentelemetry.proto.metrics.v1.DataPointFlags\n                 * @enum {number}\n                 * @property {number} DATA_POINT_FLAGS_DO_NOT_USE=0 DATA_POINT_FLAGS_DO_NOT_USE value\n                 * @property {number} DATA_POINT_FLAGS_NO_RECORDED_VALUE_MASK=1 DATA_POINT_FLAGS_NO_RECORDED_VALUE_MASK value\n                 */\n                v1.DataPointFlags = (function () {\n                    var valuesById = {}, values = Object.create(valuesById);\n                    values[valuesById[0] = \"DATA_POINT_FLAGS_DO_NOT_USE\"] = 0;\n                    values[valuesById[1] = \"DATA_POINT_FLAGS_NO_RECORDED_VALUE_MASK\"] = 1;\n                    return values;\n                })();\n                v1.NumberDataPoint = (function () {\n                    /**\n                     * Properties of a NumberDataPoint.\n                     * @memberof opentelemetry.proto.metrics.v1\n                     * @interface INumberDataPoint\n                     * @property {Array.<opentelemetry.proto.common.v1.IKeyValue>|null} [attributes] NumberDataPoint attributes\n                     * @property {number|Long|null} [startTimeUnixNano] NumberDataPoint startTimeUnixNano\n                     * @property {number|Long|null} [timeUnixNano] NumberDataPoint timeUnixNano\n                     * @property {number|null} [asDouble] NumberDataPoint asDouble\n                     * @property {number|Long|null} [asInt] NumberDataPoint asInt\n                     * @property {Array.<opentelemetry.proto.metrics.v1.IExemplar>|null} [exemplars] NumberDataPoint exemplars\n                     * @property {number|null} [flags] NumberDataPoint flags\n                     */\n                    /**\n                     * Constructs a new NumberDataPoint.\n                     * @memberof opentelemetry.proto.metrics.v1\n                     * @classdesc Represents a NumberDataPoint.\n                     * @implements INumberDataPoint\n                     * @constructor\n                     * @param {opentelemetry.proto.metrics.v1.INumberDataPoint=} [properties] Properties to set\n                     */\n                    function NumberDataPoint(properties) {\n                        this.attributes = [];\n                        this.exemplars = [];\n                        if (properties)\n                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                                if (properties[keys[i]] != null)\n                                    this[keys[i]] = properties[keys[i]];\n                    }\n                    /**\n                     * NumberDataPoint attributes.\n                     * @member {Array.<opentelemetry.proto.common.v1.IKeyValue>} attributes\n                     * @memberof opentelemetry.proto.metrics.v1.NumberDataPoint\n                     * @instance\n                     */\n                    NumberDataPoint.prototype.attributes = $util.emptyArray;\n                    /**\n                     * NumberDataPoint startTimeUnixNano.\n                     * @member {number|Long|null|undefined} startTimeUnixNano\n                     * @memberof opentelemetry.proto.metrics.v1.NumberDataPoint\n                     * @instance\n                     */\n                    NumberDataPoint.prototype.startTimeUnixNano = null;\n                    /**\n                     * NumberDataPoint timeUnixNano.\n                     * @member {number|Long|null|undefined} timeUnixNano\n                     * @memberof opentelemetry.proto.metrics.v1.NumberDataPoint\n                     * @instance\n                     */\n                    NumberDataPoint.prototype.timeUnixNano = null;\n                    /**\n                     * NumberDataPoint asDouble.\n                     * @member {number|null|undefined} asDouble\n                     * @memberof opentelemetry.proto.metrics.v1.NumberDataPoint\n                     * @instance\n                     */\n                    NumberDataPoint.prototype.asDouble = null;\n                    /**\n                     * NumberDataPoint asInt.\n                     * @member {number|Long|null|undefined} asInt\n                     * @memberof opentelemetry.proto.metrics.v1.NumberDataPoint\n                     * @instance\n                     */\n                    NumberDataPoint.prototype.asInt = null;\n                    /**\n                     * NumberDataPoint exemplars.\n                     * @member {Array.<opentelemetry.proto.metrics.v1.IExemplar>} exemplars\n                     * @memberof opentelemetry.proto.metrics.v1.NumberDataPoint\n                     * @instance\n                     */\n                    NumberDataPoint.prototype.exemplars = $util.emptyArray;\n                    /**\n                     * NumberDataPoint flags.\n                     * @member {number|null|undefined} flags\n                     * @memberof opentelemetry.proto.metrics.v1.NumberDataPoint\n                     * @instance\n                     */\n                    NumberDataPoint.prototype.flags = null;\n                    // OneOf field names bound to virtual getters and setters\n                    var $oneOfFields;\n                    /**\n                     * NumberDataPoint value.\n                     * @member {\"asDouble\"|\"asInt\"|undefined} value\n                     * @memberof opentelemetry.proto.metrics.v1.NumberDataPoint\n                     * @instance\n                     */\n                    Object.defineProperty(NumberDataPoint.prototype, \"value\", {\n                        get: $util.oneOfGetter($oneOfFields = [\"asDouble\", \"asInt\"]),\n                        set: $util.oneOfSetter($oneOfFields)\n                    });\n                    /**\n                     * Creates a new NumberDataPoint instance using the specified properties.\n                     * @function create\n                     * @memberof opentelemetry.proto.metrics.v1.NumberDataPoint\n                     * @static\n                     * @param {opentelemetry.proto.metrics.v1.INumberDataPoint=} [properties] Properties to set\n                     * @returns {opentelemetry.proto.metrics.v1.NumberDataPoint} NumberDataPoint instance\n                     */\n                    NumberDataPoint.create = function create(properties) {\n                        return new NumberDataPoint(properties);\n                    };\n                    /**\n                     * Encodes the specified NumberDataPoint message. Does not implicitly {@link opentelemetry.proto.metrics.v1.NumberDataPoint.verify|verify} messages.\n                     * @function encode\n                     * @memberof opentelemetry.proto.metrics.v1.NumberDataPoint\n                     * @static\n                     * @param {opentelemetry.proto.metrics.v1.INumberDataPoint} message NumberDataPoint message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    NumberDataPoint.encode = function encode(message, writer) {\n                        if (!writer)\n                            writer = $Writer.create();\n                        if (message.startTimeUnixNano != null && Object.hasOwnProperty.call(message, \"startTimeUnixNano\"))\n                            writer.uint32(/* id 2, wireType 1 =*/ 17).fixed64(message.startTimeUnixNano);\n                        if (message.timeUnixNano != null && Object.hasOwnProperty.call(message, \"timeUnixNano\"))\n                            writer.uint32(/* id 3, wireType 1 =*/ 25).fixed64(message.timeUnixNano);\n                        if (message.asDouble != null && Object.hasOwnProperty.call(message, \"asDouble\"))\n                            writer.uint32(/* id 4, wireType 1 =*/ 33).double(message.asDouble);\n                        if (message.exemplars != null && message.exemplars.length)\n                            for (var i = 0; i < message.exemplars.length; ++i)\n                                $root.opentelemetry.proto.metrics.v1.Exemplar.encode(message.exemplars[i], writer.uint32(/* id 5, wireType 2 =*/ 42).fork()).ldelim();\n                        if (message.asInt != null && Object.hasOwnProperty.call(message, \"asInt\"))\n                            writer.uint32(/* id 6, wireType 1 =*/ 49).sfixed64(message.asInt);\n                        if (message.attributes != null && message.attributes.length)\n                            for (var i = 0; i < message.attributes.length; ++i)\n                                $root.opentelemetry.proto.common.v1.KeyValue.encode(message.attributes[i], writer.uint32(/* id 7, wireType 2 =*/ 58).fork()).ldelim();\n                        if (message.flags != null && Object.hasOwnProperty.call(message, \"flags\"))\n                            writer.uint32(/* id 8, wireType 0 =*/ 64).uint32(message.flags);\n                        return writer;\n                    };\n                    /**\n                     * Encodes the specified NumberDataPoint message, length delimited. Does not implicitly {@link opentelemetry.proto.metrics.v1.NumberDataPoint.verify|verify} messages.\n                     * @function encodeDelimited\n                     * @memberof opentelemetry.proto.metrics.v1.NumberDataPoint\n                     * @static\n                     * @param {opentelemetry.proto.metrics.v1.INumberDataPoint} message NumberDataPoint message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    NumberDataPoint.encodeDelimited = function encodeDelimited(message, writer) {\n                        return this.encode(message, writer).ldelim();\n                    };\n                    /**\n                     * Decodes a NumberDataPoint message from the specified reader or buffer.\n                     * @function decode\n                     * @memberof opentelemetry.proto.metrics.v1.NumberDataPoint\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @param {number} [length] Message length if known beforehand\n                     * @returns {opentelemetry.proto.metrics.v1.NumberDataPoint} NumberDataPoint\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    NumberDataPoint.decode = function decode(reader, length) {\n                        if (!(reader instanceof $Reader))\n                            reader = $Reader.create(reader);\n                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.opentelemetry.proto.metrics.v1.NumberDataPoint();\n                        while (reader.pos < end) {\n                            var tag = reader.uint32();\n                            switch (tag >>> 3) {\n                                case 7: {\n                                    if (!(message.attributes && message.attributes.length))\n                                        message.attributes = [];\n                                    message.attributes.push($root.opentelemetry.proto.common.v1.KeyValue.decode(reader, reader.uint32()));\n                                    break;\n                                }\n                                case 2: {\n                                    message.startTimeUnixNano = reader.fixed64();\n                                    break;\n                                }\n                                case 3: {\n                                    message.timeUnixNano = reader.fixed64();\n                                    break;\n                                }\n                                case 4: {\n                                    message.asDouble = reader.double();\n                                    break;\n                                }\n                                case 6: {\n                                    message.asInt = reader.sfixed64();\n                                    break;\n                                }\n                                case 5: {\n                                    if (!(message.exemplars && message.exemplars.length))\n                                        message.exemplars = [];\n                                    message.exemplars.push($root.opentelemetry.proto.metrics.v1.Exemplar.decode(reader, reader.uint32()));\n                                    break;\n                                }\n                                case 8: {\n                                    message.flags = reader.uint32();\n                                    break;\n                                }\n                                default:\n                                    reader.skipType(tag & 7);\n                                    break;\n                            }\n                        }\n                        return message;\n                    };\n                    /**\n                     * Decodes a NumberDataPoint message from the specified reader or buffer, length delimited.\n                     * @function decodeDelimited\n                     * @memberof opentelemetry.proto.metrics.v1.NumberDataPoint\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @returns {opentelemetry.proto.metrics.v1.NumberDataPoint} NumberDataPoint\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    NumberDataPoint.decodeDelimited = function decodeDelimited(reader) {\n                        if (!(reader instanceof $Reader))\n                            reader = new $Reader(reader);\n                        return this.decode(reader, reader.uint32());\n                    };\n                    /**\n                     * Verifies a NumberDataPoint message.\n                     * @function verify\n                     * @memberof opentelemetry.proto.metrics.v1.NumberDataPoint\n                     * @static\n                     * @param {Object.<string,*>} message Plain object to verify\n                     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                     */\n                    NumberDataPoint.verify = function verify(message) {\n                        if (typeof message !== \"object\" || message === null)\n                            return \"object expected\";\n                        var properties = {};\n                        if (message.attributes != null && message.hasOwnProperty(\"attributes\")) {\n                            if (!Array.isArray(message.attributes))\n                                return \"attributes: array expected\";\n                            for (var i = 0; i < message.attributes.length; ++i) {\n                                var error = $root.opentelemetry.proto.common.v1.KeyValue.verify(message.attributes[i]);\n                                if (error)\n                                    return \"attributes.\" + error;\n                            }\n                        }\n                        if (message.startTimeUnixNano != null && message.hasOwnProperty(\"startTimeUnixNano\"))\n                            if (!$util.isInteger(message.startTimeUnixNano) && !(message.startTimeUnixNano && $util.isInteger(message.startTimeUnixNano.low) && $util.isInteger(message.startTimeUnixNano.high)))\n                                return \"startTimeUnixNano: integer|Long expected\";\n                        if (message.timeUnixNano != null && message.hasOwnProperty(\"timeUnixNano\"))\n                            if (!$util.isInteger(message.timeUnixNano) && !(message.timeUnixNano && $util.isInteger(message.timeUnixNano.low) && $util.isInteger(message.timeUnixNano.high)))\n                                return \"timeUnixNano: integer|Long expected\";\n                        if (message.asDouble != null && message.hasOwnProperty(\"asDouble\")) {\n                            properties.value = 1;\n                            if (typeof message.asDouble !== \"number\")\n                                return \"asDouble: number expected\";\n                        }\n                        if (message.asInt != null && message.hasOwnProperty(\"asInt\")) {\n                            if (properties.value === 1)\n                                return \"value: multiple values\";\n                            properties.value = 1;\n                            if (!$util.isInteger(message.asInt) && !(message.asInt && $util.isInteger(message.asInt.low) && $util.isInteger(message.asInt.high)))\n                                return \"asInt: integer|Long expected\";\n                        }\n                        if (message.exemplars != null && message.hasOwnProperty(\"exemplars\")) {\n                            if (!Array.isArray(message.exemplars))\n                                return \"exemplars: array expected\";\n                            for (var i = 0; i < message.exemplars.length; ++i) {\n                                var error = $root.opentelemetry.proto.metrics.v1.Exemplar.verify(message.exemplars[i]);\n                                if (error)\n                                    return \"exemplars.\" + error;\n                            }\n                        }\n                        if (message.flags != null && message.hasOwnProperty(\"flags\"))\n                            if (!$util.isInteger(message.flags))\n                                return \"flags: integer expected\";\n                        return null;\n                    };\n                    /**\n                     * Creates a NumberDataPoint message from a plain object. Also converts values to their respective internal types.\n                     * @function fromObject\n                     * @memberof opentelemetry.proto.metrics.v1.NumberDataPoint\n                     * @static\n                     * @param {Object.<string,*>} object Plain object\n                     * @returns {opentelemetry.proto.metrics.v1.NumberDataPoint} NumberDataPoint\n                     */\n                    NumberDataPoint.fromObject = function fromObject(object) {\n                        if (object instanceof $root.opentelemetry.proto.metrics.v1.NumberDataPoint)\n                            return object;\n                        var message = new $root.opentelemetry.proto.metrics.v1.NumberDataPoint();\n                        if (object.attributes) {\n                            if (!Array.isArray(object.attributes))\n                                throw TypeError(\".opentelemetry.proto.metrics.v1.NumberDataPoint.attributes: array expected\");\n                            message.attributes = [];\n                            for (var i = 0; i < object.attributes.length; ++i) {\n                                if (typeof object.attributes[i] !== \"object\")\n                                    throw TypeError(\".opentelemetry.proto.metrics.v1.NumberDataPoint.attributes: object expected\");\n                                message.attributes[i] = $root.opentelemetry.proto.common.v1.KeyValue.fromObject(object.attributes[i]);\n                            }\n                        }\n                        if (object.startTimeUnixNano != null)\n                            if ($util.Long)\n                                (message.startTimeUnixNano = $util.Long.fromValue(object.startTimeUnixNano)).unsigned = false;\n                            else if (typeof object.startTimeUnixNano === \"string\")\n                                message.startTimeUnixNano = parseInt(object.startTimeUnixNano, 10);\n                            else if (typeof object.startTimeUnixNano === \"number\")\n                                message.startTimeUnixNano = object.startTimeUnixNano;\n                            else if (typeof object.startTimeUnixNano === \"object\")\n                                message.startTimeUnixNano = new $util.LongBits(object.startTimeUnixNano.low >>> 0, object.startTimeUnixNano.high >>> 0).toNumber();\n                        if (object.timeUnixNano != null)\n                            if ($util.Long)\n                                (message.timeUnixNano = $util.Long.fromValue(object.timeUnixNano)).unsigned = false;\n                            else if (typeof object.timeUnixNano === \"string\")\n                                message.timeUnixNano = parseInt(object.timeUnixNano, 10);\n                            else if (typeof object.timeUnixNano === \"number\")\n                                message.timeUnixNano = object.timeUnixNano;\n                            else if (typeof object.timeUnixNano === \"object\")\n                                message.timeUnixNano = new $util.LongBits(object.timeUnixNano.low >>> 0, object.timeUnixNano.high >>> 0).toNumber();\n                        if (object.asDouble != null)\n                            message.asDouble = Number(object.asDouble);\n                        if (object.asInt != null)\n                            if ($util.Long)\n                                (message.asInt = $util.Long.fromValue(object.asInt)).unsigned = false;\n                            else if (typeof object.asInt === \"string\")\n                                message.asInt = parseInt(object.asInt, 10);\n                            else if (typeof object.asInt === \"number\")\n                                message.asInt = object.asInt;\n                            else if (typeof object.asInt === \"object\")\n                                message.asInt = new $util.LongBits(object.asInt.low >>> 0, object.asInt.high >>> 0).toNumber();\n                        if (object.exemplars) {\n                            if (!Array.isArray(object.exemplars))\n                                throw TypeError(\".opentelemetry.proto.metrics.v1.NumberDataPoint.exemplars: array expected\");\n                            message.exemplars = [];\n                            for (var i = 0; i < object.exemplars.length; ++i) {\n                                if (typeof object.exemplars[i] !== \"object\")\n                                    throw TypeError(\".opentelemetry.proto.metrics.v1.NumberDataPoint.exemplars: object expected\");\n                                message.exemplars[i] = $root.opentelemetry.proto.metrics.v1.Exemplar.fromObject(object.exemplars[i]);\n                            }\n                        }\n                        if (object.flags != null)\n                            message.flags = object.flags >>> 0;\n                        return message;\n                    };\n                    /**\n                     * Creates a plain object from a NumberDataPoint message. Also converts values to other types if specified.\n                     * @function toObject\n                     * @memberof opentelemetry.proto.metrics.v1.NumberDataPoint\n                     * @static\n                     * @param {opentelemetry.proto.metrics.v1.NumberDataPoint} message NumberDataPoint\n                     * @param {$protobuf.IConversionOptions} [options] Conversion options\n                     * @returns {Object.<string,*>} Plain object\n                     */\n                    NumberDataPoint.toObject = function toObject(message, options) {\n                        if (!options)\n                            options = {};\n                        var object = {};\n                        if (options.arrays || options.defaults) {\n                            object.exemplars = [];\n                            object.attributes = [];\n                        }\n                        if (options.defaults) {\n                            if ($util.Long) {\n                                var long = new $util.Long(0, 0, false);\n                                object.startTimeUnixNano = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                            }\n                            else\n                                object.startTimeUnixNano = options.longs === String ? \"0\" : 0;\n                            if ($util.Long) {\n                                var long = new $util.Long(0, 0, false);\n                                object.timeUnixNano = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                            }\n                            else\n                                object.timeUnixNano = options.longs === String ? \"0\" : 0;\n                            object.flags = 0;\n                        }\n                        if (message.startTimeUnixNano != null && message.hasOwnProperty(\"startTimeUnixNano\"))\n                            if (typeof message.startTimeUnixNano === \"number\")\n                                object.startTimeUnixNano = options.longs === String ? String(message.startTimeUnixNano) : message.startTimeUnixNano;\n                            else\n                                object.startTimeUnixNano = options.longs === String ? $util.Long.prototype.toString.call(message.startTimeUnixNano) : options.longs === Number ? new $util.LongBits(message.startTimeUnixNano.low >>> 0, message.startTimeUnixNano.high >>> 0).toNumber() : message.startTimeUnixNano;\n                        if (message.timeUnixNano != null && message.hasOwnProperty(\"timeUnixNano\"))\n                            if (typeof message.timeUnixNano === \"number\")\n                                object.timeUnixNano = options.longs === String ? String(message.timeUnixNano) : message.timeUnixNano;\n                            else\n                                object.timeUnixNano = options.longs === String ? $util.Long.prototype.toString.call(message.timeUnixNano) : options.longs === Number ? new $util.LongBits(message.timeUnixNano.low >>> 0, message.timeUnixNano.high >>> 0).toNumber() : message.timeUnixNano;\n                        if (message.asDouble != null && message.hasOwnProperty(\"asDouble\")) {\n                            object.asDouble = options.json && !isFinite(message.asDouble) ? String(message.asDouble) : message.asDouble;\n                            if (options.oneofs)\n                                object.value = \"asDouble\";\n                        }\n                        if (message.exemplars && message.exemplars.length) {\n                            object.exemplars = [];\n                            for (var j = 0; j < message.exemplars.length; ++j)\n                                object.exemplars[j] = $root.opentelemetry.proto.metrics.v1.Exemplar.toObject(message.exemplars[j], options);\n                        }\n                        if (message.asInt != null && message.hasOwnProperty(\"asInt\")) {\n                            if (typeof message.asInt === \"number\")\n                                object.asInt = options.longs === String ? String(message.asInt) : message.asInt;\n                            else\n                                object.asInt = options.longs === String ? $util.Long.prototype.toString.call(message.asInt) : options.longs === Number ? new $util.LongBits(message.asInt.low >>> 0, message.asInt.high >>> 0).toNumber() : message.asInt;\n                            if (options.oneofs)\n                                object.value = \"asInt\";\n                        }\n                        if (message.attributes && message.attributes.length) {\n                            object.attributes = [];\n                            for (var j = 0; j < message.attributes.length; ++j)\n                                object.attributes[j] = $root.opentelemetry.proto.common.v1.KeyValue.toObject(message.attributes[j], options);\n                        }\n                        if (message.flags != null && message.hasOwnProperty(\"flags\"))\n                            object.flags = message.flags;\n                        return object;\n                    };\n                    /**\n                     * Converts this NumberDataPoint to JSON.\n                     * @function toJSON\n                     * @memberof opentelemetry.proto.metrics.v1.NumberDataPoint\n                     * @instance\n                     * @returns {Object.<string,*>} JSON object\n                     */\n                    NumberDataPoint.prototype.toJSON = function toJSON() {\n                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                    };\n                    /**\n                     * Gets the default type url for NumberDataPoint\n                     * @function getTypeUrl\n                     * @memberof opentelemetry.proto.metrics.v1.NumberDataPoint\n                     * @static\n                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n                     * @returns {string} The default type url\n                     */\n                    NumberDataPoint.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                        if (typeUrlPrefix === undefined) {\n                            typeUrlPrefix = \"type.googleapis.com\";\n                        }\n                        return typeUrlPrefix + \"/opentelemetry.proto.metrics.v1.NumberDataPoint\";\n                    };\n                    return NumberDataPoint;\n                })();\n                v1.HistogramDataPoint = (function () {\n                    /**\n                     * Properties of a HistogramDataPoint.\n                     * @memberof opentelemetry.proto.metrics.v1\n                     * @interface IHistogramDataPoint\n                     * @property {Array.<opentelemetry.proto.common.v1.IKeyValue>|null} [attributes] HistogramDataPoint attributes\n                     * @property {number|Long|null} [startTimeUnixNano] HistogramDataPoint startTimeUnixNano\n                     * @property {number|Long|null} [timeUnixNano] HistogramDataPoint timeUnixNano\n                     * @property {number|Long|null} [count] HistogramDataPoint count\n                     * @property {number|null} [sum] HistogramDataPoint sum\n                     * @property {Array.<number|Long>|null} [bucketCounts] HistogramDataPoint bucketCounts\n                     * @property {Array.<number>|null} [explicitBounds] HistogramDataPoint explicitBounds\n                     * @property {Array.<opentelemetry.proto.metrics.v1.IExemplar>|null} [exemplars] HistogramDataPoint exemplars\n                     * @property {number|null} [flags] HistogramDataPoint flags\n                     * @property {number|null} [min] HistogramDataPoint min\n                     * @property {number|null} [max] HistogramDataPoint max\n                     */\n                    /**\n                     * Constructs a new HistogramDataPoint.\n                     * @memberof opentelemetry.proto.metrics.v1\n                     * @classdesc Represents a HistogramDataPoint.\n                     * @implements IHistogramDataPoint\n                     * @constructor\n                     * @param {opentelemetry.proto.metrics.v1.IHistogramDataPoint=} [properties] Properties to set\n                     */\n                    function HistogramDataPoint(properties) {\n                        this.attributes = [];\n                        this.bucketCounts = [];\n                        this.explicitBounds = [];\n                        this.exemplars = [];\n                        if (properties)\n                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                                if (properties[keys[i]] != null)\n                                    this[keys[i]] = properties[keys[i]];\n                    }\n                    /**\n                     * HistogramDataPoint attributes.\n                     * @member {Array.<opentelemetry.proto.common.v1.IKeyValue>} attributes\n                     * @memberof opentelemetry.proto.metrics.v1.HistogramDataPoint\n                     * @instance\n                     */\n                    HistogramDataPoint.prototype.attributes = $util.emptyArray;\n                    /**\n                     * HistogramDataPoint startTimeUnixNano.\n                     * @member {number|Long|null|undefined} startTimeUnixNano\n                     * @memberof opentelemetry.proto.metrics.v1.HistogramDataPoint\n                     * @instance\n                     */\n                    HistogramDataPoint.prototype.startTimeUnixNano = null;\n                    /**\n                     * HistogramDataPoint timeUnixNano.\n                     * @member {number|Long|null|undefined} timeUnixNano\n                     * @memberof opentelemetry.proto.metrics.v1.HistogramDataPoint\n                     * @instance\n                     */\n                    HistogramDataPoint.prototype.timeUnixNano = null;\n                    /**\n                     * HistogramDataPoint count.\n                     * @member {number|Long|null|undefined} count\n                     * @memberof opentelemetry.proto.metrics.v1.HistogramDataPoint\n                     * @instance\n                     */\n                    HistogramDataPoint.prototype.count = null;\n                    /**\n                     * HistogramDataPoint sum.\n                     * @member {number|null|undefined} sum\n                     * @memberof opentelemetry.proto.metrics.v1.HistogramDataPoint\n                     * @instance\n                     */\n                    HistogramDataPoint.prototype.sum = null;\n                    /**\n                     * HistogramDataPoint bucketCounts.\n                     * @member {Array.<number|Long>} bucketCounts\n                     * @memberof opentelemetry.proto.metrics.v1.HistogramDataPoint\n                     * @instance\n                     */\n                    HistogramDataPoint.prototype.bucketCounts = $util.emptyArray;\n                    /**\n                     * HistogramDataPoint explicitBounds.\n                     * @member {Array.<number>} explicitBounds\n                     * @memberof opentelemetry.proto.metrics.v1.HistogramDataPoint\n                     * @instance\n                     */\n                    HistogramDataPoint.prototype.explicitBounds = $util.emptyArray;\n                    /**\n                     * HistogramDataPoint exemplars.\n                     * @member {Array.<opentelemetry.proto.metrics.v1.IExemplar>} exemplars\n                     * @memberof opentelemetry.proto.metrics.v1.HistogramDataPoint\n                     * @instance\n                     */\n                    HistogramDataPoint.prototype.exemplars = $util.emptyArray;\n                    /**\n                     * HistogramDataPoint flags.\n                     * @member {number|null|undefined} flags\n                     * @memberof opentelemetry.proto.metrics.v1.HistogramDataPoint\n                     * @instance\n                     */\n                    HistogramDataPoint.prototype.flags = null;\n                    /**\n                     * HistogramDataPoint min.\n                     * @member {number|null|undefined} min\n                     * @memberof opentelemetry.proto.metrics.v1.HistogramDataPoint\n                     * @instance\n                     */\n                    HistogramDataPoint.prototype.min = null;\n                    /**\n                     * HistogramDataPoint max.\n                     * @member {number|null|undefined} max\n                     * @memberof opentelemetry.proto.metrics.v1.HistogramDataPoint\n                     * @instance\n                     */\n                    HistogramDataPoint.prototype.max = null;\n                    // OneOf field names bound to virtual getters and setters\n                    var $oneOfFields;\n                    /**\n                     * HistogramDataPoint _sum.\n                     * @member {\"sum\"|undefined} _sum\n                     * @memberof opentelemetry.proto.metrics.v1.HistogramDataPoint\n                     * @instance\n                     */\n                    Object.defineProperty(HistogramDataPoint.prototype, \"_sum\", {\n                        get: $util.oneOfGetter($oneOfFields = [\"sum\"]),\n                        set: $util.oneOfSetter($oneOfFields)\n                    });\n                    /**\n                     * HistogramDataPoint _min.\n                     * @member {\"min\"|undefined} _min\n                     * @memberof opentelemetry.proto.metrics.v1.HistogramDataPoint\n                     * @instance\n                     */\n                    Object.defineProperty(HistogramDataPoint.prototype, \"_min\", {\n                        get: $util.oneOfGetter($oneOfFields = [\"min\"]),\n                        set: $util.oneOfSetter($oneOfFields)\n                    });\n                    /**\n                     * HistogramDataPoint _max.\n                     * @member {\"max\"|undefined} _max\n                     * @memberof opentelemetry.proto.metrics.v1.HistogramDataPoint\n                     * @instance\n                     */\n                    Object.defineProperty(HistogramDataPoint.prototype, \"_max\", {\n                        get: $util.oneOfGetter($oneOfFields = [\"max\"]),\n                        set: $util.oneOfSetter($oneOfFields)\n                    });\n                    /**\n                     * Creates a new HistogramDataPoint instance using the specified properties.\n                     * @function create\n                     * @memberof opentelemetry.proto.metrics.v1.HistogramDataPoint\n                     * @static\n                     * @param {opentelemetry.proto.metrics.v1.IHistogramDataPoint=} [properties] Properties to set\n                     * @returns {opentelemetry.proto.metrics.v1.HistogramDataPoint} HistogramDataPoint instance\n                     */\n                    HistogramDataPoint.create = function create(properties) {\n                        return new HistogramDataPoint(properties);\n                    };\n                    /**\n                     * Encodes the specified HistogramDataPoint message. Does not implicitly {@link opentelemetry.proto.metrics.v1.HistogramDataPoint.verify|verify} messages.\n                     * @function encode\n                     * @memberof opentelemetry.proto.metrics.v1.HistogramDataPoint\n                     * @static\n                     * @param {opentelemetry.proto.metrics.v1.IHistogramDataPoint} message HistogramDataPoint message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    HistogramDataPoint.encode = function encode(message, writer) {\n                        if (!writer)\n                            writer = $Writer.create();\n                        if (message.startTimeUnixNano != null && Object.hasOwnProperty.call(message, \"startTimeUnixNano\"))\n                            writer.uint32(/* id 2, wireType 1 =*/ 17).fixed64(message.startTimeUnixNano);\n                        if (message.timeUnixNano != null && Object.hasOwnProperty.call(message, \"timeUnixNano\"))\n                            writer.uint32(/* id 3, wireType 1 =*/ 25).fixed64(message.timeUnixNano);\n                        if (message.count != null && Object.hasOwnProperty.call(message, \"count\"))\n                            writer.uint32(/* id 4, wireType 1 =*/ 33).fixed64(message.count);\n                        if (message.sum != null && Object.hasOwnProperty.call(message, \"sum\"))\n                            writer.uint32(/* id 5, wireType 1 =*/ 41).double(message.sum);\n                        if (message.bucketCounts != null && message.bucketCounts.length) {\n                            writer.uint32(/* id 6, wireType 2 =*/ 50).fork();\n                            for (var i = 0; i < message.bucketCounts.length; ++i)\n                                writer.fixed64(message.bucketCounts[i]);\n                            writer.ldelim();\n                        }\n                        if (message.explicitBounds != null && message.explicitBounds.length) {\n                            writer.uint32(/* id 7, wireType 2 =*/ 58).fork();\n                            for (var i = 0; i < message.explicitBounds.length; ++i)\n                                writer.double(message.explicitBounds[i]);\n                            writer.ldelim();\n                        }\n                        if (message.exemplars != null && message.exemplars.length)\n                            for (var i = 0; i < message.exemplars.length; ++i)\n                                $root.opentelemetry.proto.metrics.v1.Exemplar.encode(message.exemplars[i], writer.uint32(/* id 8, wireType 2 =*/ 66).fork()).ldelim();\n                        if (message.attributes != null && message.attributes.length)\n                            for (var i = 0; i < message.attributes.length; ++i)\n                                $root.opentelemetry.proto.common.v1.KeyValue.encode(message.attributes[i], writer.uint32(/* id 9, wireType 2 =*/ 74).fork()).ldelim();\n                        if (message.flags != null && Object.hasOwnProperty.call(message, \"flags\"))\n                            writer.uint32(/* id 10, wireType 0 =*/ 80).uint32(message.flags);\n                        if (message.min != null && Object.hasOwnProperty.call(message, \"min\"))\n                            writer.uint32(/* id 11, wireType 1 =*/ 89).double(message.min);\n                        if (message.max != null && Object.hasOwnProperty.call(message, \"max\"))\n                            writer.uint32(/* id 12, wireType 1 =*/ 97).double(message.max);\n                        return writer;\n                    };\n                    /**\n                     * Encodes the specified HistogramDataPoint message, length delimited. Does not implicitly {@link opentelemetry.proto.metrics.v1.HistogramDataPoint.verify|verify} messages.\n                     * @function encodeDelimited\n                     * @memberof opentelemetry.proto.metrics.v1.HistogramDataPoint\n                     * @static\n                     * @param {opentelemetry.proto.metrics.v1.IHistogramDataPoint} message HistogramDataPoint message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    HistogramDataPoint.encodeDelimited = function encodeDelimited(message, writer) {\n                        return this.encode(message, writer).ldelim();\n                    };\n                    /**\n                     * Decodes a HistogramDataPoint message from the specified reader or buffer.\n                     * @function decode\n                     * @memberof opentelemetry.proto.metrics.v1.HistogramDataPoint\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @param {number} [length] Message length if known beforehand\n                     * @returns {opentelemetry.proto.metrics.v1.HistogramDataPoint} HistogramDataPoint\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    HistogramDataPoint.decode = function decode(reader, length) {\n                        if (!(reader instanceof $Reader))\n                            reader = $Reader.create(reader);\n                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.opentelemetry.proto.metrics.v1.HistogramDataPoint();\n                        while (reader.pos < end) {\n                            var tag = reader.uint32();\n                            switch (tag >>> 3) {\n                                case 9: {\n                                    if (!(message.attributes && message.attributes.length))\n                                        message.attributes = [];\n                                    message.attributes.push($root.opentelemetry.proto.common.v1.KeyValue.decode(reader, reader.uint32()));\n                                    break;\n                                }\n                                case 2: {\n                                    message.startTimeUnixNano = reader.fixed64();\n                                    break;\n                                }\n                                case 3: {\n                                    message.timeUnixNano = reader.fixed64();\n                                    break;\n                                }\n                                case 4: {\n                                    message.count = reader.fixed64();\n                                    break;\n                                }\n                                case 5: {\n                                    message.sum = reader.double();\n                                    break;\n                                }\n                                case 6: {\n                                    if (!(message.bucketCounts && message.bucketCounts.length))\n                                        message.bucketCounts = [];\n                                    if ((tag & 7) === 2) {\n                                        var end2 = reader.uint32() + reader.pos;\n                                        while (reader.pos < end2)\n                                            message.bucketCounts.push(reader.fixed64());\n                                    }\n                                    else\n                                        message.bucketCounts.push(reader.fixed64());\n                                    break;\n                                }\n                                case 7: {\n                                    if (!(message.explicitBounds && message.explicitBounds.length))\n                                        message.explicitBounds = [];\n                                    if ((tag & 7) === 2) {\n                                        var end2 = reader.uint32() + reader.pos;\n                                        while (reader.pos < end2)\n                                            message.explicitBounds.push(reader.double());\n                                    }\n                                    else\n                                        message.explicitBounds.push(reader.double());\n                                    break;\n                                }\n                                case 8: {\n                                    if (!(message.exemplars && message.exemplars.length))\n                                        message.exemplars = [];\n                                    message.exemplars.push($root.opentelemetry.proto.metrics.v1.Exemplar.decode(reader, reader.uint32()));\n                                    break;\n                                }\n                                case 10: {\n                                    message.flags = reader.uint32();\n                                    break;\n                                }\n                                case 11: {\n                                    message.min = reader.double();\n                                    break;\n                                }\n                                case 12: {\n                                    message.max = reader.double();\n                                    break;\n                                }\n                                default:\n                                    reader.skipType(tag & 7);\n                                    break;\n                            }\n                        }\n                        return message;\n                    };\n                    /**\n                     * Decodes a HistogramDataPoint message from the specified reader or buffer, length delimited.\n                     * @function decodeDelimited\n                     * @memberof opentelemetry.proto.metrics.v1.HistogramDataPoint\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @returns {opentelemetry.proto.metrics.v1.HistogramDataPoint} HistogramDataPoint\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    HistogramDataPoint.decodeDelimited = function decodeDelimited(reader) {\n                        if (!(reader instanceof $Reader))\n                            reader = new $Reader(reader);\n                        return this.decode(reader, reader.uint32());\n                    };\n                    /**\n                     * Verifies a HistogramDataPoint message.\n                     * @function verify\n                     * @memberof opentelemetry.proto.metrics.v1.HistogramDataPoint\n                     * @static\n                     * @param {Object.<string,*>} message Plain object to verify\n                     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                     */\n                    HistogramDataPoint.verify = function verify(message) {\n                        if (typeof message !== \"object\" || message === null)\n                            return \"object expected\";\n                        var properties = {};\n                        if (message.attributes != null && message.hasOwnProperty(\"attributes\")) {\n                            if (!Array.isArray(message.attributes))\n                                return \"attributes: array expected\";\n                            for (var i = 0; i < message.attributes.length; ++i) {\n                                var error = $root.opentelemetry.proto.common.v1.KeyValue.verify(message.attributes[i]);\n                                if (error)\n                                    return \"attributes.\" + error;\n                            }\n                        }\n                        if (message.startTimeUnixNano != null && message.hasOwnProperty(\"startTimeUnixNano\"))\n                            if (!$util.isInteger(message.startTimeUnixNano) && !(message.startTimeUnixNano && $util.isInteger(message.startTimeUnixNano.low) && $util.isInteger(message.startTimeUnixNano.high)))\n                                return \"startTimeUnixNano: integer|Long expected\";\n                        if (message.timeUnixNano != null && message.hasOwnProperty(\"timeUnixNano\"))\n                            if (!$util.isInteger(message.timeUnixNano) && !(message.timeUnixNano && $util.isInteger(message.timeUnixNano.low) && $util.isInteger(message.timeUnixNano.high)))\n                                return \"timeUnixNano: integer|Long expected\";\n                        if (message.count != null && message.hasOwnProperty(\"count\"))\n                            if (!$util.isInteger(message.count) && !(message.count && $util.isInteger(message.count.low) && $util.isInteger(message.count.high)))\n                                return \"count: integer|Long expected\";\n                        if (message.sum != null && message.hasOwnProperty(\"sum\")) {\n                            properties._sum = 1;\n                            if (typeof message.sum !== \"number\")\n                                return \"sum: number expected\";\n                        }\n                        if (message.bucketCounts != null && message.hasOwnProperty(\"bucketCounts\")) {\n                            if (!Array.isArray(message.bucketCounts))\n                                return \"bucketCounts: array expected\";\n                            for (var i = 0; i < message.bucketCounts.length; ++i)\n                                if (!$util.isInteger(message.bucketCounts[i]) && !(message.bucketCounts[i] && $util.isInteger(message.bucketCounts[i].low) && $util.isInteger(message.bucketCounts[i].high)))\n                                    return \"bucketCounts: integer|Long[] expected\";\n                        }\n                        if (message.explicitBounds != null && message.hasOwnProperty(\"explicitBounds\")) {\n                            if (!Array.isArray(message.explicitBounds))\n                                return \"explicitBounds: array expected\";\n                            for (var i = 0; i < message.explicitBounds.length; ++i)\n                                if (typeof message.explicitBounds[i] !== \"number\")\n                                    return \"explicitBounds: number[] expected\";\n                        }\n                        if (message.exemplars != null && message.hasOwnProperty(\"exemplars\")) {\n                            if (!Array.isArray(message.exemplars))\n                                return \"exemplars: array expected\";\n                            for (var i = 0; i < message.exemplars.length; ++i) {\n                                var error = $root.opentelemetry.proto.metrics.v1.Exemplar.verify(message.exemplars[i]);\n                                if (error)\n                                    return \"exemplars.\" + error;\n                            }\n                        }\n                        if (message.flags != null && message.hasOwnProperty(\"flags\"))\n                            if (!$util.isInteger(message.flags))\n                                return \"flags: integer expected\";\n                        if (message.min != null && message.hasOwnProperty(\"min\")) {\n                            properties._min = 1;\n                            if (typeof message.min !== \"number\")\n                                return \"min: number expected\";\n                        }\n                        if (message.max != null && message.hasOwnProperty(\"max\")) {\n                            properties._max = 1;\n                            if (typeof message.max !== \"number\")\n                                return \"max: number expected\";\n                        }\n                        return null;\n                    };\n                    /**\n                     * Creates a HistogramDataPoint message from a plain object. Also converts values to their respective internal types.\n                     * @function fromObject\n                     * @memberof opentelemetry.proto.metrics.v1.HistogramDataPoint\n                     * @static\n                     * @param {Object.<string,*>} object Plain object\n                     * @returns {opentelemetry.proto.metrics.v1.HistogramDataPoint} HistogramDataPoint\n                     */\n                    HistogramDataPoint.fromObject = function fromObject(object) {\n                        if (object instanceof $root.opentelemetry.proto.metrics.v1.HistogramDataPoint)\n                            return object;\n                        var message = new $root.opentelemetry.proto.metrics.v1.HistogramDataPoint();\n                        if (object.attributes) {\n                            if (!Array.isArray(object.attributes))\n                                throw TypeError(\".opentelemetry.proto.metrics.v1.HistogramDataPoint.attributes: array expected\");\n                            message.attributes = [];\n                            for (var i = 0; i < object.attributes.length; ++i) {\n                                if (typeof object.attributes[i] !== \"object\")\n                                    throw TypeError(\".opentelemetry.proto.metrics.v1.HistogramDataPoint.attributes: object expected\");\n                                message.attributes[i] = $root.opentelemetry.proto.common.v1.KeyValue.fromObject(object.attributes[i]);\n                            }\n                        }\n                        if (object.startTimeUnixNano != null)\n                            if ($util.Long)\n                                (message.startTimeUnixNano = $util.Long.fromValue(object.startTimeUnixNano)).unsigned = false;\n                            else if (typeof object.startTimeUnixNano === \"string\")\n                                message.startTimeUnixNano = parseInt(object.startTimeUnixNano, 10);\n                            else if (typeof object.startTimeUnixNano === \"number\")\n                                message.startTimeUnixNano = object.startTimeUnixNano;\n                            else if (typeof object.startTimeUnixNano === \"object\")\n                                message.startTimeUnixNano = new $util.LongBits(object.startTimeUnixNano.low >>> 0, object.startTimeUnixNano.high >>> 0).toNumber();\n                        if (object.timeUnixNano != null)\n                            if ($util.Long)\n                                (message.timeUnixNano = $util.Long.fromValue(object.timeUnixNano)).unsigned = false;\n                            else if (typeof object.timeUnixNano === \"string\")\n                                message.timeUnixNano = parseInt(object.timeUnixNano, 10);\n                            else if (typeof object.timeUnixNano === \"number\")\n                                message.timeUnixNano = object.timeUnixNano;\n                            else if (typeof object.timeUnixNano === \"object\")\n                                message.timeUnixNano = new $util.LongBits(object.timeUnixNano.low >>> 0, object.timeUnixNano.high >>> 0).toNumber();\n                        if (object.count != null)\n                            if ($util.Long)\n                                (message.count = $util.Long.fromValue(object.count)).unsigned = false;\n                            else if (typeof object.count === \"string\")\n                                message.count = parseInt(object.count, 10);\n                            else if (typeof object.count === \"number\")\n                                message.count = object.count;\n                            else if (typeof object.count === \"object\")\n                                message.count = new $util.LongBits(object.count.low >>> 0, object.count.high >>> 0).toNumber();\n                        if (object.sum != null)\n                            message.sum = Number(object.sum);\n                        if (object.bucketCounts) {\n                            if (!Array.isArray(object.bucketCounts))\n                                throw TypeError(\".opentelemetry.proto.metrics.v1.HistogramDataPoint.bucketCounts: array expected\");\n                            message.bucketCounts = [];\n                            for (var i = 0; i < object.bucketCounts.length; ++i)\n                                if ($util.Long)\n                                    (message.bucketCounts[i] = $util.Long.fromValue(object.bucketCounts[i])).unsigned = false;\n                                else if (typeof object.bucketCounts[i] === \"string\")\n                                    message.bucketCounts[i] = parseInt(object.bucketCounts[i], 10);\n                                else if (typeof object.bucketCounts[i] === \"number\")\n                                    message.bucketCounts[i] = object.bucketCounts[i];\n                                else if (typeof object.bucketCounts[i] === \"object\")\n                                    message.bucketCounts[i] = new $util.LongBits(object.bucketCounts[i].low >>> 0, object.bucketCounts[i].high >>> 0).toNumber();\n                        }\n                        if (object.explicitBounds) {\n                            if (!Array.isArray(object.explicitBounds))\n                                throw TypeError(\".opentelemetry.proto.metrics.v1.HistogramDataPoint.explicitBounds: array expected\");\n                            message.explicitBounds = [];\n                            for (var i = 0; i < object.explicitBounds.length; ++i)\n                                message.explicitBounds[i] = Number(object.explicitBounds[i]);\n                        }\n                        if (object.exemplars) {\n                            if (!Array.isArray(object.exemplars))\n                                throw TypeError(\".opentelemetry.proto.metrics.v1.HistogramDataPoint.exemplars: array expected\");\n                            message.exemplars = [];\n                            for (var i = 0; i < object.exemplars.length; ++i) {\n                                if (typeof object.exemplars[i] !== \"object\")\n                                    throw TypeError(\".opentelemetry.proto.metrics.v1.HistogramDataPoint.exemplars: object expected\");\n                                message.exemplars[i] = $root.opentelemetry.proto.metrics.v1.Exemplar.fromObject(object.exemplars[i]);\n                            }\n                        }\n                        if (object.flags != null)\n                            message.flags = object.flags >>> 0;\n                        if (object.min != null)\n                            message.min = Number(object.min);\n                        if (object.max != null)\n                            message.max = Number(object.max);\n                        return message;\n                    };\n                    /**\n                     * Creates a plain object from a HistogramDataPoint message. Also converts values to other types if specified.\n                     * @function toObject\n                     * @memberof opentelemetry.proto.metrics.v1.HistogramDataPoint\n                     * @static\n                     * @param {opentelemetry.proto.metrics.v1.HistogramDataPoint} message HistogramDataPoint\n                     * @param {$protobuf.IConversionOptions} [options] Conversion options\n                     * @returns {Object.<string,*>} Plain object\n                     */\n                    HistogramDataPoint.toObject = function toObject(message, options) {\n                        if (!options)\n                            options = {};\n                        var object = {};\n                        if (options.arrays || options.defaults) {\n                            object.bucketCounts = [];\n                            object.explicitBounds = [];\n                            object.exemplars = [];\n                            object.attributes = [];\n                        }\n                        if (options.defaults) {\n                            if ($util.Long) {\n                                var long = new $util.Long(0, 0, false);\n                                object.startTimeUnixNano = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                            }\n                            else\n                                object.startTimeUnixNano = options.longs === String ? \"0\" : 0;\n                            if ($util.Long) {\n                                var long = new $util.Long(0, 0, false);\n                                object.timeUnixNano = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                            }\n                            else\n                                object.timeUnixNano = options.longs === String ? \"0\" : 0;\n                            if ($util.Long) {\n                                var long = new $util.Long(0, 0, false);\n                                object.count = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                            }\n                            else\n                                object.count = options.longs === String ? \"0\" : 0;\n                            object.flags = 0;\n                        }\n                        if (message.startTimeUnixNano != null && message.hasOwnProperty(\"startTimeUnixNano\"))\n                            if (typeof message.startTimeUnixNano === \"number\")\n                                object.startTimeUnixNano = options.longs === String ? String(message.startTimeUnixNano) : message.startTimeUnixNano;\n                            else\n                                object.startTimeUnixNano = options.longs === String ? $util.Long.prototype.toString.call(message.startTimeUnixNano) : options.longs === Number ? new $util.LongBits(message.startTimeUnixNano.low >>> 0, message.startTimeUnixNano.high >>> 0).toNumber() : message.startTimeUnixNano;\n                        if (message.timeUnixNano != null && message.hasOwnProperty(\"timeUnixNano\"))\n                            if (typeof message.timeUnixNano === \"number\")\n                                object.timeUnixNano = options.longs === String ? String(message.timeUnixNano) : message.timeUnixNano;\n                            else\n                                object.timeUnixNano = options.longs === String ? $util.Long.prototype.toString.call(message.timeUnixNano) : options.longs === Number ? new $util.LongBits(message.timeUnixNano.low >>> 0, message.timeUnixNano.high >>> 0).toNumber() : message.timeUnixNano;\n                        if (message.count != null && message.hasOwnProperty(\"count\"))\n                            if (typeof message.count === \"number\")\n                                object.count = options.longs === String ? String(message.count) : message.count;\n                            else\n                                object.count = options.longs === String ? $util.Long.prototype.toString.call(message.count) : options.longs === Number ? new $util.LongBits(message.count.low >>> 0, message.count.high >>> 0).toNumber() : message.count;\n                        if (message.sum != null && message.hasOwnProperty(\"sum\")) {\n                            object.sum = options.json && !isFinite(message.sum) ? String(message.sum) : message.sum;\n                            if (options.oneofs)\n                                object._sum = \"sum\";\n                        }\n                        if (message.bucketCounts && message.bucketCounts.length) {\n                            object.bucketCounts = [];\n                            for (var j = 0; j < message.bucketCounts.length; ++j)\n                                if (typeof message.bucketCounts[j] === \"number\")\n                                    object.bucketCounts[j] = options.longs === String ? String(message.bucketCounts[j]) : message.bucketCounts[j];\n                                else\n                                    object.bucketCounts[j] = options.longs === String ? $util.Long.prototype.toString.call(message.bucketCounts[j]) : options.longs === Number ? new $util.LongBits(message.bucketCounts[j].low >>> 0, message.bucketCounts[j].high >>> 0).toNumber() : message.bucketCounts[j];\n                        }\n                        if (message.explicitBounds && message.explicitBounds.length) {\n                            object.explicitBounds = [];\n                            for (var j = 0; j < message.explicitBounds.length; ++j)\n                                object.explicitBounds[j] = options.json && !isFinite(message.explicitBounds[j]) ? String(message.explicitBounds[j]) : message.explicitBounds[j];\n                        }\n                        if (message.exemplars && message.exemplars.length) {\n                            object.exemplars = [];\n                            for (var j = 0; j < message.exemplars.length; ++j)\n                                object.exemplars[j] = $root.opentelemetry.proto.metrics.v1.Exemplar.toObject(message.exemplars[j], options);\n                        }\n                        if (message.attributes && message.attributes.length) {\n                            object.attributes = [];\n                            for (var j = 0; j < message.attributes.length; ++j)\n                                object.attributes[j] = $root.opentelemetry.proto.common.v1.KeyValue.toObject(message.attributes[j], options);\n                        }\n                        if (message.flags != null && message.hasOwnProperty(\"flags\"))\n                            object.flags = message.flags;\n                        if (message.min != null && message.hasOwnProperty(\"min\")) {\n                            object.min = options.json && !isFinite(message.min) ? String(message.min) : message.min;\n                            if (options.oneofs)\n                                object._min = \"min\";\n                        }\n                        if (message.max != null && message.hasOwnProperty(\"max\")) {\n                            object.max = options.json && !isFinite(message.max) ? String(message.max) : message.max;\n                            if (options.oneofs)\n                                object._max = \"max\";\n                        }\n                        return object;\n                    };\n                    /**\n                     * Converts this HistogramDataPoint to JSON.\n                     * @function toJSON\n                     * @memberof opentelemetry.proto.metrics.v1.HistogramDataPoint\n                     * @instance\n                     * @returns {Object.<string,*>} JSON object\n                     */\n                    HistogramDataPoint.prototype.toJSON = function toJSON() {\n                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                    };\n                    /**\n                     * Gets the default type url for HistogramDataPoint\n                     * @function getTypeUrl\n                     * @memberof opentelemetry.proto.metrics.v1.HistogramDataPoint\n                     * @static\n                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n                     * @returns {string} The default type url\n                     */\n                    HistogramDataPoint.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                        if (typeUrlPrefix === undefined) {\n                            typeUrlPrefix = \"type.googleapis.com\";\n                        }\n                        return typeUrlPrefix + \"/opentelemetry.proto.metrics.v1.HistogramDataPoint\";\n                    };\n                    return HistogramDataPoint;\n                })();\n                v1.ExponentialHistogramDataPoint = (function () {\n                    /**\n                     * Properties of an ExponentialHistogramDataPoint.\n                     * @memberof opentelemetry.proto.metrics.v1\n                     * @interface IExponentialHistogramDataPoint\n                     * @property {Array.<opentelemetry.proto.common.v1.IKeyValue>|null} [attributes] ExponentialHistogramDataPoint attributes\n                     * @property {number|Long|null} [startTimeUnixNano] ExponentialHistogramDataPoint startTimeUnixNano\n                     * @property {number|Long|null} [timeUnixNano] ExponentialHistogramDataPoint timeUnixNano\n                     * @property {number|Long|null} [count] ExponentialHistogramDataPoint count\n                     * @property {number|null} [sum] ExponentialHistogramDataPoint sum\n                     * @property {number|null} [scale] ExponentialHistogramDataPoint scale\n                     * @property {number|Long|null} [zeroCount] ExponentialHistogramDataPoint zeroCount\n                     * @property {opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.IBuckets|null} [positive] ExponentialHistogramDataPoint positive\n                     * @property {opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.IBuckets|null} [negative] ExponentialHistogramDataPoint negative\n                     * @property {number|null} [flags] ExponentialHistogramDataPoint flags\n                     * @property {Array.<opentelemetry.proto.metrics.v1.IExemplar>|null} [exemplars] ExponentialHistogramDataPoint exemplars\n                     * @property {number|null} [min] ExponentialHistogramDataPoint min\n                     * @property {number|null} [max] ExponentialHistogramDataPoint max\n                     * @property {number|null} [zeroThreshold] ExponentialHistogramDataPoint zeroThreshold\n                     */\n                    /**\n                     * Constructs a new ExponentialHistogramDataPoint.\n                     * @memberof opentelemetry.proto.metrics.v1\n                     * @classdesc Represents an ExponentialHistogramDataPoint.\n                     * @implements IExponentialHistogramDataPoint\n                     * @constructor\n                     * @param {opentelemetry.proto.metrics.v1.IExponentialHistogramDataPoint=} [properties] Properties to set\n                     */\n                    function ExponentialHistogramDataPoint(properties) {\n                        this.attributes = [];\n                        this.exemplars = [];\n                        if (properties)\n                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                                if (properties[keys[i]] != null)\n                                    this[keys[i]] = properties[keys[i]];\n                    }\n                    /**\n                     * ExponentialHistogramDataPoint attributes.\n                     * @member {Array.<opentelemetry.proto.common.v1.IKeyValue>} attributes\n                     * @memberof opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint\n                     * @instance\n                     */\n                    ExponentialHistogramDataPoint.prototype.attributes = $util.emptyArray;\n                    /**\n                     * ExponentialHistogramDataPoint startTimeUnixNano.\n                     * @member {number|Long|null|undefined} startTimeUnixNano\n                     * @memberof opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint\n                     * @instance\n                     */\n                    ExponentialHistogramDataPoint.prototype.startTimeUnixNano = null;\n                    /**\n                     * ExponentialHistogramDataPoint timeUnixNano.\n                     * @member {number|Long|null|undefined} timeUnixNano\n                     * @memberof opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint\n                     * @instance\n                     */\n                    ExponentialHistogramDataPoint.prototype.timeUnixNano = null;\n                    /**\n                     * ExponentialHistogramDataPoint count.\n                     * @member {number|Long|null|undefined} count\n                     * @memberof opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint\n                     * @instance\n                     */\n                    ExponentialHistogramDataPoint.prototype.count = null;\n                    /**\n                     * ExponentialHistogramDataPoint sum.\n                     * @member {number|null|undefined} sum\n                     * @memberof opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint\n                     * @instance\n                     */\n                    ExponentialHistogramDataPoint.prototype.sum = null;\n                    /**\n                     * ExponentialHistogramDataPoint scale.\n                     * @member {number|null|undefined} scale\n                     * @memberof opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint\n                     * @instance\n                     */\n                    ExponentialHistogramDataPoint.prototype.scale = null;\n                    /**\n                     * ExponentialHistogramDataPoint zeroCount.\n                     * @member {number|Long|null|undefined} zeroCount\n                     * @memberof opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint\n                     * @instance\n                     */\n                    ExponentialHistogramDataPoint.prototype.zeroCount = null;\n                    /**\n                     * ExponentialHistogramDataPoint positive.\n                     * @member {opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.IBuckets|null|undefined} positive\n                     * @memberof opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint\n                     * @instance\n                     */\n                    ExponentialHistogramDataPoint.prototype.positive = null;\n                    /**\n                     * ExponentialHistogramDataPoint negative.\n                     * @member {opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.IBuckets|null|undefined} negative\n                     * @memberof opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint\n                     * @instance\n                     */\n                    ExponentialHistogramDataPoint.prototype.negative = null;\n                    /**\n                     * ExponentialHistogramDataPoint flags.\n                     * @member {number|null|undefined} flags\n                     * @memberof opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint\n                     * @instance\n                     */\n                    ExponentialHistogramDataPoint.prototype.flags = null;\n                    /**\n                     * ExponentialHistogramDataPoint exemplars.\n                     * @member {Array.<opentelemetry.proto.metrics.v1.IExemplar>} exemplars\n                     * @memberof opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint\n                     * @instance\n                     */\n                    ExponentialHistogramDataPoint.prototype.exemplars = $util.emptyArray;\n                    /**\n                     * ExponentialHistogramDataPoint min.\n                     * @member {number|null|undefined} min\n                     * @memberof opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint\n                     * @instance\n                     */\n                    ExponentialHistogramDataPoint.prototype.min = null;\n                    /**\n                     * ExponentialHistogramDataPoint max.\n                     * @member {number|null|undefined} max\n                     * @memberof opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint\n                     * @instance\n                     */\n                    ExponentialHistogramDataPoint.prototype.max = null;\n                    /**\n                     * ExponentialHistogramDataPoint zeroThreshold.\n                     * @member {number|null|undefined} zeroThreshold\n                     * @memberof opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint\n                     * @instance\n                     */\n                    ExponentialHistogramDataPoint.prototype.zeroThreshold = null;\n                    // OneOf field names bound to virtual getters and setters\n                    var $oneOfFields;\n                    /**\n                     * ExponentialHistogramDataPoint _sum.\n                     * @member {\"sum\"|undefined} _sum\n                     * @memberof opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint\n                     * @instance\n                     */\n                    Object.defineProperty(ExponentialHistogramDataPoint.prototype, \"_sum\", {\n                        get: $util.oneOfGetter($oneOfFields = [\"sum\"]),\n                        set: $util.oneOfSetter($oneOfFields)\n                    });\n                    /**\n                     * ExponentialHistogramDataPoint _min.\n                     * @member {\"min\"|undefined} _min\n                     * @memberof opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint\n                     * @instance\n                     */\n                    Object.defineProperty(ExponentialHistogramDataPoint.prototype, \"_min\", {\n                        get: $util.oneOfGetter($oneOfFields = [\"min\"]),\n                        set: $util.oneOfSetter($oneOfFields)\n                    });\n                    /**\n                     * ExponentialHistogramDataPoint _max.\n                     * @member {\"max\"|undefined} _max\n                     * @memberof opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint\n                     * @instance\n                     */\n                    Object.defineProperty(ExponentialHistogramDataPoint.prototype, \"_max\", {\n                        get: $util.oneOfGetter($oneOfFields = [\"max\"]),\n                        set: $util.oneOfSetter($oneOfFields)\n                    });\n                    /**\n                     * Creates a new ExponentialHistogramDataPoint instance using the specified properties.\n                     * @function create\n                     * @memberof opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint\n                     * @static\n                     * @param {opentelemetry.proto.metrics.v1.IExponentialHistogramDataPoint=} [properties] Properties to set\n                     * @returns {opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint} ExponentialHistogramDataPoint instance\n                     */\n                    ExponentialHistogramDataPoint.create = function create(properties) {\n                        return new ExponentialHistogramDataPoint(properties);\n                    };\n                    /**\n                     * Encodes the specified ExponentialHistogramDataPoint message. Does not implicitly {@link opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.verify|verify} messages.\n                     * @function encode\n                     * @memberof opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint\n                     * @static\n                     * @param {opentelemetry.proto.metrics.v1.IExponentialHistogramDataPoint} message ExponentialHistogramDataPoint message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    ExponentialHistogramDataPoint.encode = function encode(message, writer) {\n                        if (!writer)\n                            writer = $Writer.create();\n                        if (message.attributes != null && message.attributes.length)\n                            for (var i = 0; i < message.attributes.length; ++i)\n                                $root.opentelemetry.proto.common.v1.KeyValue.encode(message.attributes[i], writer.uint32(/* id 1, wireType 2 =*/ 10).fork()).ldelim();\n                        if (message.startTimeUnixNano != null && Object.hasOwnProperty.call(message, \"startTimeUnixNano\"))\n                            writer.uint32(/* id 2, wireType 1 =*/ 17).fixed64(message.startTimeUnixNano);\n                        if (message.timeUnixNano != null && Object.hasOwnProperty.call(message, \"timeUnixNano\"))\n                            writer.uint32(/* id 3, wireType 1 =*/ 25).fixed64(message.timeUnixNano);\n                        if (message.count != null && Object.hasOwnProperty.call(message, \"count\"))\n                            writer.uint32(/* id 4, wireType 1 =*/ 33).fixed64(message.count);\n                        if (message.sum != null && Object.hasOwnProperty.call(message, \"sum\"))\n                            writer.uint32(/* id 5, wireType 1 =*/ 41).double(message.sum);\n                        if (message.scale != null && Object.hasOwnProperty.call(message, \"scale\"))\n                            writer.uint32(/* id 6, wireType 0 =*/ 48).sint32(message.scale);\n                        if (message.zeroCount != null && Object.hasOwnProperty.call(message, \"zeroCount\"))\n                            writer.uint32(/* id 7, wireType 1 =*/ 57).fixed64(message.zeroCount);\n                        if (message.positive != null && Object.hasOwnProperty.call(message, \"positive\"))\n                            $root.opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets.encode(message.positive, writer.uint32(/* id 8, wireType 2 =*/ 66).fork()).ldelim();\n                        if (message.negative != null && Object.hasOwnProperty.call(message, \"negative\"))\n                            $root.opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets.encode(message.negative, writer.uint32(/* id 9, wireType 2 =*/ 74).fork()).ldelim();\n                        if (message.flags != null && Object.hasOwnProperty.call(message, \"flags\"))\n                            writer.uint32(/* id 10, wireType 0 =*/ 80).uint32(message.flags);\n                        if (message.exemplars != null && message.exemplars.length)\n                            for (var i = 0; i < message.exemplars.length; ++i)\n                                $root.opentelemetry.proto.metrics.v1.Exemplar.encode(message.exemplars[i], writer.uint32(/* id 11, wireType 2 =*/ 90).fork()).ldelim();\n                        if (message.min != null && Object.hasOwnProperty.call(message, \"min\"))\n                            writer.uint32(/* id 12, wireType 1 =*/ 97).double(message.min);\n                        if (message.max != null && Object.hasOwnProperty.call(message, \"max\"))\n                            writer.uint32(/* id 13, wireType 1 =*/ 105).double(message.max);\n                        if (message.zeroThreshold != null && Object.hasOwnProperty.call(message, \"zeroThreshold\"))\n                            writer.uint32(/* id 14, wireType 1 =*/ 113).double(message.zeroThreshold);\n                        return writer;\n                    };\n                    /**\n                     * Encodes the specified ExponentialHistogramDataPoint message, length delimited. Does not implicitly {@link opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.verify|verify} messages.\n                     * @function encodeDelimited\n                     * @memberof opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint\n                     * @static\n                     * @param {opentelemetry.proto.metrics.v1.IExponentialHistogramDataPoint} message ExponentialHistogramDataPoint message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    ExponentialHistogramDataPoint.encodeDelimited = function encodeDelimited(message, writer) {\n                        return this.encode(message, writer).ldelim();\n                    };\n                    /**\n                     * Decodes an ExponentialHistogramDataPoint message from the specified reader or buffer.\n                     * @function decode\n                     * @memberof opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @param {number} [length] Message length if known beforehand\n                     * @returns {opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint} ExponentialHistogramDataPoint\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    ExponentialHistogramDataPoint.decode = function decode(reader, length) {\n                        if (!(reader instanceof $Reader))\n                            reader = $Reader.create(reader);\n                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint();\n                        while (reader.pos < end) {\n                            var tag = reader.uint32();\n                            switch (tag >>> 3) {\n                                case 1: {\n                                    if (!(message.attributes && message.attributes.length))\n                                        message.attributes = [];\n                                    message.attributes.push($root.opentelemetry.proto.common.v1.KeyValue.decode(reader, reader.uint32()));\n                                    break;\n                                }\n                                case 2: {\n                                    message.startTimeUnixNano = reader.fixed64();\n                                    break;\n                                }\n                                case 3: {\n                                    message.timeUnixNano = reader.fixed64();\n                                    break;\n                                }\n                                case 4: {\n                                    message.count = reader.fixed64();\n                                    break;\n                                }\n                                case 5: {\n                                    message.sum = reader.double();\n                                    break;\n                                }\n                                case 6: {\n                                    message.scale = reader.sint32();\n                                    break;\n                                }\n                                case 7: {\n                                    message.zeroCount = reader.fixed64();\n                                    break;\n                                }\n                                case 8: {\n                                    message.positive = $root.opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets.decode(reader, reader.uint32());\n                                    break;\n                                }\n                                case 9: {\n                                    message.negative = $root.opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets.decode(reader, reader.uint32());\n                                    break;\n                                }\n                                case 10: {\n                                    message.flags = reader.uint32();\n                                    break;\n                                }\n                                case 11: {\n                                    if (!(message.exemplars && message.exemplars.length))\n                                        message.exemplars = [];\n                                    message.exemplars.push($root.opentelemetry.proto.metrics.v1.Exemplar.decode(reader, reader.uint32()));\n                                    break;\n                                }\n                                case 12: {\n                                    message.min = reader.double();\n                                    break;\n                                }\n                                case 13: {\n                                    message.max = reader.double();\n                                    break;\n                                }\n                                case 14: {\n                                    message.zeroThreshold = reader.double();\n                                    break;\n                                }\n                                default:\n                                    reader.skipType(tag & 7);\n                                    break;\n                            }\n                        }\n                        return message;\n                    };\n                    /**\n                     * Decodes an ExponentialHistogramDataPoint message from the specified reader or buffer, length delimited.\n                     * @function decodeDelimited\n                     * @memberof opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @returns {opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint} ExponentialHistogramDataPoint\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    ExponentialHistogramDataPoint.decodeDelimited = function decodeDelimited(reader) {\n                        if (!(reader instanceof $Reader))\n                            reader = new $Reader(reader);\n                        return this.decode(reader, reader.uint32());\n                    };\n                    /**\n                     * Verifies an ExponentialHistogramDataPoint message.\n                     * @function verify\n                     * @memberof opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint\n                     * @static\n                     * @param {Object.<string,*>} message Plain object to verify\n                     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                     */\n                    ExponentialHistogramDataPoint.verify = function verify(message) {\n                        if (typeof message !== \"object\" || message === null)\n                            return \"object expected\";\n                        var properties = {};\n                        if (message.attributes != null && message.hasOwnProperty(\"attributes\")) {\n                            if (!Array.isArray(message.attributes))\n                                return \"attributes: array expected\";\n                            for (var i = 0; i < message.attributes.length; ++i) {\n                                var error = $root.opentelemetry.proto.common.v1.KeyValue.verify(message.attributes[i]);\n                                if (error)\n                                    return \"attributes.\" + error;\n                            }\n                        }\n                        if (message.startTimeUnixNano != null && message.hasOwnProperty(\"startTimeUnixNano\"))\n                            if (!$util.isInteger(message.startTimeUnixNano) && !(message.startTimeUnixNano && $util.isInteger(message.startTimeUnixNano.low) && $util.isInteger(message.startTimeUnixNano.high)))\n                                return \"startTimeUnixNano: integer|Long expected\";\n                        if (message.timeUnixNano != null && message.hasOwnProperty(\"timeUnixNano\"))\n                            if (!$util.isInteger(message.timeUnixNano) && !(message.timeUnixNano && $util.isInteger(message.timeUnixNano.low) && $util.isInteger(message.timeUnixNano.high)))\n                                return \"timeUnixNano: integer|Long expected\";\n                        if (message.count != null && message.hasOwnProperty(\"count\"))\n                            if (!$util.isInteger(message.count) && !(message.count && $util.isInteger(message.count.low) && $util.isInteger(message.count.high)))\n                                return \"count: integer|Long expected\";\n                        if (message.sum != null && message.hasOwnProperty(\"sum\")) {\n                            properties._sum = 1;\n                            if (typeof message.sum !== \"number\")\n                                return \"sum: number expected\";\n                        }\n                        if (message.scale != null && message.hasOwnProperty(\"scale\"))\n                            if (!$util.isInteger(message.scale))\n                                return \"scale: integer expected\";\n                        if (message.zeroCount != null && message.hasOwnProperty(\"zeroCount\"))\n                            if (!$util.isInteger(message.zeroCount) && !(message.zeroCount && $util.isInteger(message.zeroCount.low) && $util.isInteger(message.zeroCount.high)))\n                                return \"zeroCount: integer|Long expected\";\n                        if (message.positive != null && message.hasOwnProperty(\"positive\")) {\n                            var error = $root.opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets.verify(message.positive);\n                            if (error)\n                                return \"positive.\" + error;\n                        }\n                        if (message.negative != null && message.hasOwnProperty(\"negative\")) {\n                            var error = $root.opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets.verify(message.negative);\n                            if (error)\n                                return \"negative.\" + error;\n                        }\n                        if (message.flags != null && message.hasOwnProperty(\"flags\"))\n                            if (!$util.isInteger(message.flags))\n                                return \"flags: integer expected\";\n                        if (message.exemplars != null && message.hasOwnProperty(\"exemplars\")) {\n                            if (!Array.isArray(message.exemplars))\n                                return \"exemplars: array expected\";\n                            for (var i = 0; i < message.exemplars.length; ++i) {\n                                var error = $root.opentelemetry.proto.metrics.v1.Exemplar.verify(message.exemplars[i]);\n                                if (error)\n                                    return \"exemplars.\" + error;\n                            }\n                        }\n                        if (message.min != null && message.hasOwnProperty(\"min\")) {\n                            properties._min = 1;\n                            if (typeof message.min !== \"number\")\n                                return \"min: number expected\";\n                        }\n                        if (message.max != null && message.hasOwnProperty(\"max\")) {\n                            properties._max = 1;\n                            if (typeof message.max !== \"number\")\n                                return \"max: number expected\";\n                        }\n                        if (message.zeroThreshold != null && message.hasOwnProperty(\"zeroThreshold\"))\n                            if (typeof message.zeroThreshold !== \"number\")\n                                return \"zeroThreshold: number expected\";\n                        return null;\n                    };\n                    /**\n                     * Creates an ExponentialHistogramDataPoint message from a plain object. Also converts values to their respective internal types.\n                     * @function fromObject\n                     * @memberof opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint\n                     * @static\n                     * @param {Object.<string,*>} object Plain object\n                     * @returns {opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint} ExponentialHistogramDataPoint\n                     */\n                    ExponentialHistogramDataPoint.fromObject = function fromObject(object) {\n                        if (object instanceof $root.opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint)\n                            return object;\n                        var message = new $root.opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint();\n                        if (object.attributes) {\n                            if (!Array.isArray(object.attributes))\n                                throw TypeError(\".opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.attributes: array expected\");\n                            message.attributes = [];\n                            for (var i = 0; i < object.attributes.length; ++i) {\n                                if (typeof object.attributes[i] !== \"object\")\n                                    throw TypeError(\".opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.attributes: object expected\");\n                                message.attributes[i] = $root.opentelemetry.proto.common.v1.KeyValue.fromObject(object.attributes[i]);\n                            }\n                        }\n                        if (object.startTimeUnixNano != null)\n                            if ($util.Long)\n                                (message.startTimeUnixNano = $util.Long.fromValue(object.startTimeUnixNano)).unsigned = false;\n                            else if (typeof object.startTimeUnixNano === \"string\")\n                                message.startTimeUnixNano = parseInt(object.startTimeUnixNano, 10);\n                            else if (typeof object.startTimeUnixNano === \"number\")\n                                message.startTimeUnixNano = object.startTimeUnixNano;\n                            else if (typeof object.startTimeUnixNano === \"object\")\n                                message.startTimeUnixNano = new $util.LongBits(object.startTimeUnixNano.low >>> 0, object.startTimeUnixNano.high >>> 0).toNumber();\n                        if (object.timeUnixNano != null)\n                            if ($util.Long)\n                                (message.timeUnixNano = $util.Long.fromValue(object.timeUnixNano)).unsigned = false;\n                            else if (typeof object.timeUnixNano === \"string\")\n                                message.timeUnixNano = parseInt(object.timeUnixNano, 10);\n                            else if (typeof object.timeUnixNano === \"number\")\n                                message.timeUnixNano = object.timeUnixNano;\n                            else if (typeof object.timeUnixNano === \"object\")\n                                message.timeUnixNano = new $util.LongBits(object.timeUnixNano.low >>> 0, object.timeUnixNano.high >>> 0).toNumber();\n                        if (object.count != null)\n                            if ($util.Long)\n                                (message.count = $util.Long.fromValue(object.count)).unsigned = false;\n                            else if (typeof object.count === \"string\")\n                                message.count = parseInt(object.count, 10);\n                            else if (typeof object.count === \"number\")\n                                message.count = object.count;\n                            else if (typeof object.count === \"object\")\n                                message.count = new $util.LongBits(object.count.low >>> 0, object.count.high >>> 0).toNumber();\n                        if (object.sum != null)\n                            message.sum = Number(object.sum);\n                        if (object.scale != null)\n                            message.scale = object.scale | 0;\n                        if (object.zeroCount != null)\n                            if ($util.Long)\n                                (message.zeroCount = $util.Long.fromValue(object.zeroCount)).unsigned = false;\n                            else if (typeof object.zeroCount === \"string\")\n                                message.zeroCount = parseInt(object.zeroCount, 10);\n                            else if (typeof object.zeroCount === \"number\")\n                                message.zeroCount = object.zeroCount;\n                            else if (typeof object.zeroCount === \"object\")\n                                message.zeroCount = new $util.LongBits(object.zeroCount.low >>> 0, object.zeroCount.high >>> 0).toNumber();\n                        if (object.positive != null) {\n                            if (typeof object.positive !== \"object\")\n                                throw TypeError(\".opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.positive: object expected\");\n                            message.positive = $root.opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets.fromObject(object.positive);\n                        }\n                        if (object.negative != null) {\n                            if (typeof object.negative !== \"object\")\n                                throw TypeError(\".opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.negative: object expected\");\n                            message.negative = $root.opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets.fromObject(object.negative);\n                        }\n                        if (object.flags != null)\n                            message.flags = object.flags >>> 0;\n                        if (object.exemplars) {\n                            if (!Array.isArray(object.exemplars))\n                                throw TypeError(\".opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.exemplars: array expected\");\n                            message.exemplars = [];\n                            for (var i = 0; i < object.exemplars.length; ++i) {\n                                if (typeof object.exemplars[i] !== \"object\")\n                                    throw TypeError(\".opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.exemplars: object expected\");\n                                message.exemplars[i] = $root.opentelemetry.proto.metrics.v1.Exemplar.fromObject(object.exemplars[i]);\n                            }\n                        }\n                        if (object.min != null)\n                            message.min = Number(object.min);\n                        if (object.max != null)\n                            message.max = Number(object.max);\n                        if (object.zeroThreshold != null)\n                            message.zeroThreshold = Number(object.zeroThreshold);\n                        return message;\n                    };\n                    /**\n                     * Creates a plain object from an ExponentialHistogramDataPoint message. Also converts values to other types if specified.\n                     * @function toObject\n                     * @memberof opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint\n                     * @static\n                     * @param {opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint} message ExponentialHistogramDataPoint\n                     * @param {$protobuf.IConversionOptions} [options] Conversion options\n                     * @returns {Object.<string,*>} Plain object\n                     */\n                    ExponentialHistogramDataPoint.toObject = function toObject(message, options) {\n                        if (!options)\n                            options = {};\n                        var object = {};\n                        if (options.arrays || options.defaults) {\n                            object.attributes = [];\n                            object.exemplars = [];\n                        }\n                        if (options.defaults) {\n                            if ($util.Long) {\n                                var long = new $util.Long(0, 0, false);\n                                object.startTimeUnixNano = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                            }\n                            else\n                                object.startTimeUnixNano = options.longs === String ? \"0\" : 0;\n                            if ($util.Long) {\n                                var long = new $util.Long(0, 0, false);\n                                object.timeUnixNano = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                            }\n                            else\n                                object.timeUnixNano = options.longs === String ? \"0\" : 0;\n                            if ($util.Long) {\n                                var long = new $util.Long(0, 0, false);\n                                object.count = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                            }\n                            else\n                                object.count = options.longs === String ? \"0\" : 0;\n                            object.scale = 0;\n                            if ($util.Long) {\n                                var long = new $util.Long(0, 0, false);\n                                object.zeroCount = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                            }\n                            else\n                                object.zeroCount = options.longs === String ? \"0\" : 0;\n                            object.positive = null;\n                            object.negative = null;\n                            object.flags = 0;\n                            object.zeroThreshold = 0;\n                        }\n                        if (message.attributes && message.attributes.length) {\n                            object.attributes = [];\n                            for (var j = 0; j < message.attributes.length; ++j)\n                                object.attributes[j] = $root.opentelemetry.proto.common.v1.KeyValue.toObject(message.attributes[j], options);\n                        }\n                        if (message.startTimeUnixNano != null && message.hasOwnProperty(\"startTimeUnixNano\"))\n                            if (typeof message.startTimeUnixNano === \"number\")\n                                object.startTimeUnixNano = options.longs === String ? String(message.startTimeUnixNano) : message.startTimeUnixNano;\n                            else\n                                object.startTimeUnixNano = options.longs === String ? $util.Long.prototype.toString.call(message.startTimeUnixNano) : options.longs === Number ? new $util.LongBits(message.startTimeUnixNano.low >>> 0, message.startTimeUnixNano.high >>> 0).toNumber() : message.startTimeUnixNano;\n                        if (message.timeUnixNano != null && message.hasOwnProperty(\"timeUnixNano\"))\n                            if (typeof message.timeUnixNano === \"number\")\n                                object.timeUnixNano = options.longs === String ? String(message.timeUnixNano) : message.timeUnixNano;\n                            else\n                                object.timeUnixNano = options.longs === String ? $util.Long.prototype.toString.call(message.timeUnixNano) : options.longs === Number ? new $util.LongBits(message.timeUnixNano.low >>> 0, message.timeUnixNano.high >>> 0).toNumber() : message.timeUnixNano;\n                        if (message.count != null && message.hasOwnProperty(\"count\"))\n                            if (typeof message.count === \"number\")\n                                object.count = options.longs === String ? String(message.count) : message.count;\n                            else\n                                object.count = options.longs === String ? $util.Long.prototype.toString.call(message.count) : options.longs === Number ? new $util.LongBits(message.count.low >>> 0, message.count.high >>> 0).toNumber() : message.count;\n                        if (message.sum != null && message.hasOwnProperty(\"sum\")) {\n                            object.sum = options.json && !isFinite(message.sum) ? String(message.sum) : message.sum;\n                            if (options.oneofs)\n                                object._sum = \"sum\";\n                        }\n                        if (message.scale != null && message.hasOwnProperty(\"scale\"))\n                            object.scale = message.scale;\n                        if (message.zeroCount != null && message.hasOwnProperty(\"zeroCount\"))\n                            if (typeof message.zeroCount === \"number\")\n                                object.zeroCount = options.longs === String ? String(message.zeroCount) : message.zeroCount;\n                            else\n                                object.zeroCount = options.longs === String ? $util.Long.prototype.toString.call(message.zeroCount) : options.longs === Number ? new $util.LongBits(message.zeroCount.low >>> 0, message.zeroCount.high >>> 0).toNumber() : message.zeroCount;\n                        if (message.positive != null && message.hasOwnProperty(\"positive\"))\n                            object.positive = $root.opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets.toObject(message.positive, options);\n                        if (message.negative != null && message.hasOwnProperty(\"negative\"))\n                            object.negative = $root.opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets.toObject(message.negative, options);\n                        if (message.flags != null && message.hasOwnProperty(\"flags\"))\n                            object.flags = message.flags;\n                        if (message.exemplars && message.exemplars.length) {\n                            object.exemplars = [];\n                            for (var j = 0; j < message.exemplars.length; ++j)\n                                object.exemplars[j] = $root.opentelemetry.proto.metrics.v1.Exemplar.toObject(message.exemplars[j], options);\n                        }\n                        if (message.min != null && message.hasOwnProperty(\"min\")) {\n                            object.min = options.json && !isFinite(message.min) ? String(message.min) : message.min;\n                            if (options.oneofs)\n                                object._min = \"min\";\n                        }\n                        if (message.max != null && message.hasOwnProperty(\"max\")) {\n                            object.max = options.json && !isFinite(message.max) ? String(message.max) : message.max;\n                            if (options.oneofs)\n                                object._max = \"max\";\n                        }\n                        if (message.zeroThreshold != null && message.hasOwnProperty(\"zeroThreshold\"))\n                            object.zeroThreshold = options.json && !isFinite(message.zeroThreshold) ? String(message.zeroThreshold) : message.zeroThreshold;\n                        return object;\n                    };\n                    /**\n                     * Converts this ExponentialHistogramDataPoint to JSON.\n                     * @function toJSON\n                     * @memberof opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint\n                     * @instance\n                     * @returns {Object.<string,*>} JSON object\n                     */\n                    ExponentialHistogramDataPoint.prototype.toJSON = function toJSON() {\n                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                    };\n                    /**\n                     * Gets the default type url for ExponentialHistogramDataPoint\n                     * @function getTypeUrl\n                     * @memberof opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint\n                     * @static\n                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n                     * @returns {string} The default type url\n                     */\n                    ExponentialHistogramDataPoint.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                        if (typeUrlPrefix === undefined) {\n                            typeUrlPrefix = \"type.googleapis.com\";\n                        }\n                        return typeUrlPrefix + \"/opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint\";\n                    };\n                    ExponentialHistogramDataPoint.Buckets = (function () {\n                        /**\n                         * Properties of a Buckets.\n                         * @memberof opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint\n                         * @interface IBuckets\n                         * @property {number|null} [offset] Buckets offset\n                         * @property {Array.<number|Long>|null} [bucketCounts] Buckets bucketCounts\n                         */\n                        /**\n                         * Constructs a new Buckets.\n                         * @memberof opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint\n                         * @classdesc Represents a Buckets.\n                         * @implements IBuckets\n                         * @constructor\n                         * @param {opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.IBuckets=} [properties] Properties to set\n                         */\n                        function Buckets(properties) {\n                            this.bucketCounts = [];\n                            if (properties)\n                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                                    if (properties[keys[i]] != null)\n                                        this[keys[i]] = properties[keys[i]];\n                        }\n                        /**\n                         * Buckets offset.\n                         * @member {number|null|undefined} offset\n                         * @memberof opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets\n                         * @instance\n                         */\n                        Buckets.prototype.offset = null;\n                        /**\n                         * Buckets bucketCounts.\n                         * @member {Array.<number|Long>} bucketCounts\n                         * @memberof opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets\n                         * @instance\n                         */\n                        Buckets.prototype.bucketCounts = $util.emptyArray;\n                        /**\n                         * Creates a new Buckets instance using the specified properties.\n                         * @function create\n                         * @memberof opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets\n                         * @static\n                         * @param {opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.IBuckets=} [properties] Properties to set\n                         * @returns {opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets} Buckets instance\n                         */\n                        Buckets.create = function create(properties) {\n                            return new Buckets(properties);\n                        };\n                        /**\n                         * Encodes the specified Buckets message. Does not implicitly {@link opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets.verify|verify} messages.\n                         * @function encode\n                         * @memberof opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets\n                         * @static\n                         * @param {opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.IBuckets} message Buckets message or plain object to encode\n                         * @param {$protobuf.Writer} [writer] Writer to encode to\n                         * @returns {$protobuf.Writer} Writer\n                         */\n                        Buckets.encode = function encode(message, writer) {\n                            if (!writer)\n                                writer = $Writer.create();\n                            if (message.offset != null && Object.hasOwnProperty.call(message, \"offset\"))\n                                writer.uint32(/* id 1, wireType 0 =*/ 8).sint32(message.offset);\n                            if (message.bucketCounts != null && message.bucketCounts.length) {\n                                writer.uint32(/* id 2, wireType 2 =*/ 18).fork();\n                                for (var i = 0; i < message.bucketCounts.length; ++i)\n                                    writer.uint64(message.bucketCounts[i]);\n                                writer.ldelim();\n                            }\n                            return writer;\n                        };\n                        /**\n                         * Encodes the specified Buckets message, length delimited. Does not implicitly {@link opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets.verify|verify} messages.\n                         * @function encodeDelimited\n                         * @memberof opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets\n                         * @static\n                         * @param {opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.IBuckets} message Buckets message or plain object to encode\n                         * @param {$protobuf.Writer} [writer] Writer to encode to\n                         * @returns {$protobuf.Writer} Writer\n                         */\n                        Buckets.encodeDelimited = function encodeDelimited(message, writer) {\n                            return this.encode(message, writer).ldelim();\n                        };\n                        /**\n                         * Decodes a Buckets message from the specified reader or buffer.\n                         * @function decode\n                         * @memberof opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets\n                         * @static\n                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                         * @param {number} [length] Message length if known beforehand\n                         * @returns {opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets} Buckets\n                         * @throws {Error} If the payload is not a reader or valid buffer\n                         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                         */\n                        Buckets.decode = function decode(reader, length) {\n                            if (!(reader instanceof $Reader))\n                                reader = $Reader.create(reader);\n                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets();\n                            while (reader.pos < end) {\n                                var tag = reader.uint32();\n                                switch (tag >>> 3) {\n                                    case 1: {\n                                        message.offset = reader.sint32();\n                                        break;\n                                    }\n                                    case 2: {\n                                        if (!(message.bucketCounts && message.bucketCounts.length))\n                                            message.bucketCounts = [];\n                                        if ((tag & 7) === 2) {\n                                            var end2 = reader.uint32() + reader.pos;\n                                            while (reader.pos < end2)\n                                                message.bucketCounts.push(reader.uint64());\n                                        }\n                                        else\n                                            message.bucketCounts.push(reader.uint64());\n                                        break;\n                                    }\n                                    default:\n                                        reader.skipType(tag & 7);\n                                        break;\n                                }\n                            }\n                            return message;\n                        };\n                        /**\n                         * Decodes a Buckets message from the specified reader or buffer, length delimited.\n                         * @function decodeDelimited\n                         * @memberof opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets\n                         * @static\n                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                         * @returns {opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets} Buckets\n                         * @throws {Error} If the payload is not a reader or valid buffer\n                         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                         */\n                        Buckets.decodeDelimited = function decodeDelimited(reader) {\n                            if (!(reader instanceof $Reader))\n                                reader = new $Reader(reader);\n                            return this.decode(reader, reader.uint32());\n                        };\n                        /**\n                         * Verifies a Buckets message.\n                         * @function verify\n                         * @memberof opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets\n                         * @static\n                         * @param {Object.<string,*>} message Plain object to verify\n                         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                         */\n                        Buckets.verify = function verify(message) {\n                            if (typeof message !== \"object\" || message === null)\n                                return \"object expected\";\n                            if (message.offset != null && message.hasOwnProperty(\"offset\"))\n                                if (!$util.isInteger(message.offset))\n                                    return \"offset: integer expected\";\n                            if (message.bucketCounts != null && message.hasOwnProperty(\"bucketCounts\")) {\n                                if (!Array.isArray(message.bucketCounts))\n                                    return \"bucketCounts: array expected\";\n                                for (var i = 0; i < message.bucketCounts.length; ++i)\n                                    if (!$util.isInteger(message.bucketCounts[i]) && !(message.bucketCounts[i] && $util.isInteger(message.bucketCounts[i].low) && $util.isInteger(message.bucketCounts[i].high)))\n                                        return \"bucketCounts: integer|Long[] expected\";\n                            }\n                            return null;\n                        };\n                        /**\n                         * Creates a Buckets message from a plain object. Also converts values to their respective internal types.\n                         * @function fromObject\n                         * @memberof opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets\n                         * @static\n                         * @param {Object.<string,*>} object Plain object\n                         * @returns {opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets} Buckets\n                         */\n                        Buckets.fromObject = function fromObject(object) {\n                            if (object instanceof $root.opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets)\n                                return object;\n                            var message = new $root.opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets();\n                            if (object.offset != null)\n                                message.offset = object.offset | 0;\n                            if (object.bucketCounts) {\n                                if (!Array.isArray(object.bucketCounts))\n                                    throw TypeError(\".opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets.bucketCounts: array expected\");\n                                message.bucketCounts = [];\n                                for (var i = 0; i < object.bucketCounts.length; ++i)\n                                    if ($util.Long)\n                                        (message.bucketCounts[i] = $util.Long.fromValue(object.bucketCounts[i])).unsigned = true;\n                                    else if (typeof object.bucketCounts[i] === \"string\")\n                                        message.bucketCounts[i] = parseInt(object.bucketCounts[i], 10);\n                                    else if (typeof object.bucketCounts[i] === \"number\")\n                                        message.bucketCounts[i] = object.bucketCounts[i];\n                                    else if (typeof object.bucketCounts[i] === \"object\")\n                                        message.bucketCounts[i] = new $util.LongBits(object.bucketCounts[i].low >>> 0, object.bucketCounts[i].high >>> 0).toNumber(true);\n                            }\n                            return message;\n                        };\n                        /**\n                         * Creates a plain object from a Buckets message. Also converts values to other types if specified.\n                         * @function toObject\n                         * @memberof opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets\n                         * @static\n                         * @param {opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets} message Buckets\n                         * @param {$protobuf.IConversionOptions} [options] Conversion options\n                         * @returns {Object.<string,*>} Plain object\n                         */\n                        Buckets.toObject = function toObject(message, options) {\n                            if (!options)\n                                options = {};\n                            var object = {};\n                            if (options.arrays || options.defaults)\n                                object.bucketCounts = [];\n                            if (options.defaults)\n                                object.offset = 0;\n                            if (message.offset != null && message.hasOwnProperty(\"offset\"))\n                                object.offset = message.offset;\n                            if (message.bucketCounts && message.bucketCounts.length) {\n                                object.bucketCounts = [];\n                                for (var j = 0; j < message.bucketCounts.length; ++j)\n                                    if (typeof message.bucketCounts[j] === \"number\")\n                                        object.bucketCounts[j] = options.longs === String ? String(message.bucketCounts[j]) : message.bucketCounts[j];\n                                    else\n                                        object.bucketCounts[j] = options.longs === String ? $util.Long.prototype.toString.call(message.bucketCounts[j]) : options.longs === Number ? new $util.LongBits(message.bucketCounts[j].low >>> 0, message.bucketCounts[j].high >>> 0).toNumber(true) : message.bucketCounts[j];\n                            }\n                            return object;\n                        };\n                        /**\n                         * Converts this Buckets to JSON.\n                         * @function toJSON\n                         * @memberof opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets\n                         * @instance\n                         * @returns {Object.<string,*>} JSON object\n                         */\n                        Buckets.prototype.toJSON = function toJSON() {\n                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                        };\n                        /**\n                         * Gets the default type url for Buckets\n                         * @function getTypeUrl\n                         * @memberof opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets\n                         * @static\n                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n                         * @returns {string} The default type url\n                         */\n                        Buckets.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                            if (typeUrlPrefix === undefined) {\n                                typeUrlPrefix = \"type.googleapis.com\";\n                            }\n                            return typeUrlPrefix + \"/opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets\";\n                        };\n                        return Buckets;\n                    })();\n                    return ExponentialHistogramDataPoint;\n                })();\n                v1.SummaryDataPoint = (function () {\n                    /**\n                     * Properties of a SummaryDataPoint.\n                     * @memberof opentelemetry.proto.metrics.v1\n                     * @interface ISummaryDataPoint\n                     * @property {Array.<opentelemetry.proto.common.v1.IKeyValue>|null} [attributes] SummaryDataPoint attributes\n                     * @property {number|Long|null} [startTimeUnixNano] SummaryDataPoint startTimeUnixNano\n                     * @property {number|Long|null} [timeUnixNano] SummaryDataPoint timeUnixNano\n                     * @property {number|Long|null} [count] SummaryDataPoint count\n                     * @property {number|null} [sum] SummaryDataPoint sum\n                     * @property {Array.<opentelemetry.proto.metrics.v1.SummaryDataPoint.IValueAtQuantile>|null} [quantileValues] SummaryDataPoint quantileValues\n                     * @property {number|null} [flags] SummaryDataPoint flags\n                     */\n                    /**\n                     * Constructs a new SummaryDataPoint.\n                     * @memberof opentelemetry.proto.metrics.v1\n                     * @classdesc Represents a SummaryDataPoint.\n                     * @implements ISummaryDataPoint\n                     * @constructor\n                     * @param {opentelemetry.proto.metrics.v1.ISummaryDataPoint=} [properties] Properties to set\n                     */\n                    function SummaryDataPoint(properties) {\n                        this.attributes = [];\n                        this.quantileValues = [];\n                        if (properties)\n                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                                if (properties[keys[i]] != null)\n                                    this[keys[i]] = properties[keys[i]];\n                    }\n                    /**\n                     * SummaryDataPoint attributes.\n                     * @member {Array.<opentelemetry.proto.common.v1.IKeyValue>} attributes\n                     * @memberof opentelemetry.proto.metrics.v1.SummaryDataPoint\n                     * @instance\n                     */\n                    SummaryDataPoint.prototype.attributes = $util.emptyArray;\n                    /**\n                     * SummaryDataPoint startTimeUnixNano.\n                     * @member {number|Long|null|undefined} startTimeUnixNano\n                     * @memberof opentelemetry.proto.metrics.v1.SummaryDataPoint\n                     * @instance\n                     */\n                    SummaryDataPoint.prototype.startTimeUnixNano = null;\n                    /**\n                     * SummaryDataPoint timeUnixNano.\n                     * @member {number|Long|null|undefined} timeUnixNano\n                     * @memberof opentelemetry.proto.metrics.v1.SummaryDataPoint\n                     * @instance\n                     */\n                    SummaryDataPoint.prototype.timeUnixNano = null;\n                    /**\n                     * SummaryDataPoint count.\n                     * @member {number|Long|null|undefined} count\n                     * @memberof opentelemetry.proto.metrics.v1.SummaryDataPoint\n                     * @instance\n                     */\n                    SummaryDataPoint.prototype.count = null;\n                    /**\n                     * SummaryDataPoint sum.\n                     * @member {number|null|undefined} sum\n                     * @memberof opentelemetry.proto.metrics.v1.SummaryDataPoint\n                     * @instance\n                     */\n                    SummaryDataPoint.prototype.sum = null;\n                    /**\n                     * SummaryDataPoint quantileValues.\n                     * @member {Array.<opentelemetry.proto.metrics.v1.SummaryDataPoint.IValueAtQuantile>} quantileValues\n                     * @memberof opentelemetry.proto.metrics.v1.SummaryDataPoint\n                     * @instance\n                     */\n                    SummaryDataPoint.prototype.quantileValues = $util.emptyArray;\n                    /**\n                     * SummaryDataPoint flags.\n                     * @member {number|null|undefined} flags\n                     * @memberof opentelemetry.proto.metrics.v1.SummaryDataPoint\n                     * @instance\n                     */\n                    SummaryDataPoint.prototype.flags = null;\n                    /**\n                     * Creates a new SummaryDataPoint instance using the specified properties.\n                     * @function create\n                     * @memberof opentelemetry.proto.metrics.v1.SummaryDataPoint\n                     * @static\n                     * @param {opentelemetry.proto.metrics.v1.ISummaryDataPoint=} [properties] Properties to set\n                     * @returns {opentelemetry.proto.metrics.v1.SummaryDataPoint} SummaryDataPoint instance\n                     */\n                    SummaryDataPoint.create = function create(properties) {\n                        return new SummaryDataPoint(properties);\n                    };\n                    /**\n                     * Encodes the specified SummaryDataPoint message. Does not implicitly {@link opentelemetry.proto.metrics.v1.SummaryDataPoint.verify|verify} messages.\n                     * @function encode\n                     * @memberof opentelemetry.proto.metrics.v1.SummaryDataPoint\n                     * @static\n                     * @param {opentelemetry.proto.metrics.v1.ISummaryDataPoint} message SummaryDataPoint message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    SummaryDataPoint.encode = function encode(message, writer) {\n                        if (!writer)\n                            writer = $Writer.create();\n                        if (message.startTimeUnixNano != null && Object.hasOwnProperty.call(message, \"startTimeUnixNano\"))\n                            writer.uint32(/* id 2, wireType 1 =*/ 17).fixed64(message.startTimeUnixNano);\n                        if (message.timeUnixNano != null && Object.hasOwnProperty.call(message, \"timeUnixNano\"))\n                            writer.uint32(/* id 3, wireType 1 =*/ 25).fixed64(message.timeUnixNano);\n                        if (message.count != null && Object.hasOwnProperty.call(message, \"count\"))\n                            writer.uint32(/* id 4, wireType 1 =*/ 33).fixed64(message.count);\n                        if (message.sum != null && Object.hasOwnProperty.call(message, \"sum\"))\n                            writer.uint32(/* id 5, wireType 1 =*/ 41).double(message.sum);\n                        if (message.quantileValues != null && message.quantileValues.length)\n                            for (var i = 0; i < message.quantileValues.length; ++i)\n                                $root.opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile.encode(message.quantileValues[i], writer.uint32(/* id 6, wireType 2 =*/ 50).fork()).ldelim();\n                        if (message.attributes != null && message.attributes.length)\n                            for (var i = 0; i < message.attributes.length; ++i)\n                                $root.opentelemetry.proto.common.v1.KeyValue.encode(message.attributes[i], writer.uint32(/* id 7, wireType 2 =*/ 58).fork()).ldelim();\n                        if (message.flags != null && Object.hasOwnProperty.call(message, \"flags\"))\n                            writer.uint32(/* id 8, wireType 0 =*/ 64).uint32(message.flags);\n                        return writer;\n                    };\n                    /**\n                     * Encodes the specified SummaryDataPoint message, length delimited. Does not implicitly {@link opentelemetry.proto.metrics.v1.SummaryDataPoint.verify|verify} messages.\n                     * @function encodeDelimited\n                     * @memberof opentelemetry.proto.metrics.v1.SummaryDataPoint\n                     * @static\n                     * @param {opentelemetry.proto.metrics.v1.ISummaryDataPoint} message SummaryDataPoint message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    SummaryDataPoint.encodeDelimited = function encodeDelimited(message, writer) {\n                        return this.encode(message, writer).ldelim();\n                    };\n                    /**\n                     * Decodes a SummaryDataPoint message from the specified reader or buffer.\n                     * @function decode\n                     * @memberof opentelemetry.proto.metrics.v1.SummaryDataPoint\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @param {number} [length] Message length if known beforehand\n                     * @returns {opentelemetry.proto.metrics.v1.SummaryDataPoint} SummaryDataPoint\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    SummaryDataPoint.decode = function decode(reader, length) {\n                        if (!(reader instanceof $Reader))\n                            reader = $Reader.create(reader);\n                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.opentelemetry.proto.metrics.v1.SummaryDataPoint();\n                        while (reader.pos < end) {\n                            var tag = reader.uint32();\n                            switch (tag >>> 3) {\n                                case 7: {\n                                    if (!(message.attributes && message.attributes.length))\n                                        message.attributes = [];\n                                    message.attributes.push($root.opentelemetry.proto.common.v1.KeyValue.decode(reader, reader.uint32()));\n                                    break;\n                                }\n                                case 2: {\n                                    message.startTimeUnixNano = reader.fixed64();\n                                    break;\n                                }\n                                case 3: {\n                                    message.timeUnixNano = reader.fixed64();\n                                    break;\n                                }\n                                case 4: {\n                                    message.count = reader.fixed64();\n                                    break;\n                                }\n                                case 5: {\n                                    message.sum = reader.double();\n                                    break;\n                                }\n                                case 6: {\n                                    if (!(message.quantileValues && message.quantileValues.length))\n                                        message.quantileValues = [];\n                                    message.quantileValues.push($root.opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile.decode(reader, reader.uint32()));\n                                    break;\n                                }\n                                case 8: {\n                                    message.flags = reader.uint32();\n                                    break;\n                                }\n                                default:\n                                    reader.skipType(tag & 7);\n                                    break;\n                            }\n                        }\n                        return message;\n                    };\n                    /**\n                     * Decodes a SummaryDataPoint message from the specified reader or buffer, length delimited.\n                     * @function decodeDelimited\n                     * @memberof opentelemetry.proto.metrics.v1.SummaryDataPoint\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @returns {opentelemetry.proto.metrics.v1.SummaryDataPoint} SummaryDataPoint\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    SummaryDataPoint.decodeDelimited = function decodeDelimited(reader) {\n                        if (!(reader instanceof $Reader))\n                            reader = new $Reader(reader);\n                        return this.decode(reader, reader.uint32());\n                    };\n                    /**\n                     * Verifies a SummaryDataPoint message.\n                     * @function verify\n                     * @memberof opentelemetry.proto.metrics.v1.SummaryDataPoint\n                     * @static\n                     * @param {Object.<string,*>} message Plain object to verify\n                     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                     */\n                    SummaryDataPoint.verify = function verify(message) {\n                        if (typeof message !== \"object\" || message === null)\n                            return \"object expected\";\n                        if (message.attributes != null && message.hasOwnProperty(\"attributes\")) {\n                            if (!Array.isArray(message.attributes))\n                                return \"attributes: array expected\";\n                            for (var i = 0; i < message.attributes.length; ++i) {\n                                var error = $root.opentelemetry.proto.common.v1.KeyValue.verify(message.attributes[i]);\n                                if (error)\n                                    return \"attributes.\" + error;\n                            }\n                        }\n                        if (message.startTimeUnixNano != null && message.hasOwnProperty(\"startTimeUnixNano\"))\n                            if (!$util.isInteger(message.startTimeUnixNano) && !(message.startTimeUnixNano && $util.isInteger(message.startTimeUnixNano.low) && $util.isInteger(message.startTimeUnixNano.high)))\n                                return \"startTimeUnixNano: integer|Long expected\";\n                        if (message.timeUnixNano != null && message.hasOwnProperty(\"timeUnixNano\"))\n                            if (!$util.isInteger(message.timeUnixNano) && !(message.timeUnixNano && $util.isInteger(message.timeUnixNano.low) && $util.isInteger(message.timeUnixNano.high)))\n                                return \"timeUnixNano: integer|Long expected\";\n                        if (message.count != null && message.hasOwnProperty(\"count\"))\n                            if (!$util.isInteger(message.count) && !(message.count && $util.isInteger(message.count.low) && $util.isInteger(message.count.high)))\n                                return \"count: integer|Long expected\";\n                        if (message.sum != null && message.hasOwnProperty(\"sum\"))\n                            if (typeof message.sum !== \"number\")\n                                return \"sum: number expected\";\n                        if (message.quantileValues != null && message.hasOwnProperty(\"quantileValues\")) {\n                            if (!Array.isArray(message.quantileValues))\n                                return \"quantileValues: array expected\";\n                            for (var i = 0; i < message.quantileValues.length; ++i) {\n                                var error = $root.opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile.verify(message.quantileValues[i]);\n                                if (error)\n                                    return \"quantileValues.\" + error;\n                            }\n                        }\n                        if (message.flags != null && message.hasOwnProperty(\"flags\"))\n                            if (!$util.isInteger(message.flags))\n                                return \"flags: integer expected\";\n                        return null;\n                    };\n                    /**\n                     * Creates a SummaryDataPoint message from a plain object. Also converts values to their respective internal types.\n                     * @function fromObject\n                     * @memberof opentelemetry.proto.metrics.v1.SummaryDataPoint\n                     * @static\n                     * @param {Object.<string,*>} object Plain object\n                     * @returns {opentelemetry.proto.metrics.v1.SummaryDataPoint} SummaryDataPoint\n                     */\n                    SummaryDataPoint.fromObject = function fromObject(object) {\n                        if (object instanceof $root.opentelemetry.proto.metrics.v1.SummaryDataPoint)\n                            return object;\n                        var message = new $root.opentelemetry.proto.metrics.v1.SummaryDataPoint();\n                        if (object.attributes) {\n                            if (!Array.isArray(object.attributes))\n                                throw TypeError(\".opentelemetry.proto.metrics.v1.SummaryDataPoint.attributes: array expected\");\n                            message.attributes = [];\n                            for (var i = 0; i < object.attributes.length; ++i) {\n                                if (typeof object.attributes[i] !== \"object\")\n                                    throw TypeError(\".opentelemetry.proto.metrics.v1.SummaryDataPoint.attributes: object expected\");\n                                message.attributes[i] = $root.opentelemetry.proto.common.v1.KeyValue.fromObject(object.attributes[i]);\n                            }\n                        }\n                        if (object.startTimeUnixNano != null)\n                            if ($util.Long)\n                                (message.startTimeUnixNano = $util.Long.fromValue(object.startTimeUnixNano)).unsigned = false;\n                            else if (typeof object.startTimeUnixNano === \"string\")\n                                message.startTimeUnixNano = parseInt(object.startTimeUnixNano, 10);\n                            else if (typeof object.startTimeUnixNano === \"number\")\n                                message.startTimeUnixNano = object.startTimeUnixNano;\n                            else if (typeof object.startTimeUnixNano === \"object\")\n                                message.startTimeUnixNano = new $util.LongBits(object.startTimeUnixNano.low >>> 0, object.startTimeUnixNano.high >>> 0).toNumber();\n                        if (object.timeUnixNano != null)\n                            if ($util.Long)\n                                (message.timeUnixNano = $util.Long.fromValue(object.timeUnixNano)).unsigned = false;\n                            else if (typeof object.timeUnixNano === \"string\")\n                                message.timeUnixNano = parseInt(object.timeUnixNano, 10);\n                            else if (typeof object.timeUnixNano === \"number\")\n                                message.timeUnixNano = object.timeUnixNano;\n                            else if (typeof object.timeUnixNano === \"object\")\n                                message.timeUnixNano = new $util.LongBits(object.timeUnixNano.low >>> 0, object.timeUnixNano.high >>> 0).toNumber();\n                        if (object.count != null)\n                            if ($util.Long)\n                                (message.count = $util.Long.fromValue(object.count)).unsigned = false;\n                            else if (typeof object.count === \"string\")\n                                message.count = parseInt(object.count, 10);\n                            else if (typeof object.count === \"number\")\n                                message.count = object.count;\n                            else if (typeof object.count === \"object\")\n                                message.count = new $util.LongBits(object.count.low >>> 0, object.count.high >>> 0).toNumber();\n                        if (object.sum != null)\n                            message.sum = Number(object.sum);\n                        if (object.quantileValues) {\n                            if (!Array.isArray(object.quantileValues))\n                                throw TypeError(\".opentelemetry.proto.metrics.v1.SummaryDataPoint.quantileValues: array expected\");\n                            message.quantileValues = [];\n                            for (var i = 0; i < object.quantileValues.length; ++i) {\n                                if (typeof object.quantileValues[i] !== \"object\")\n                                    throw TypeError(\".opentelemetry.proto.metrics.v1.SummaryDataPoint.quantileValues: object expected\");\n                                message.quantileValues[i] = $root.opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile.fromObject(object.quantileValues[i]);\n                            }\n                        }\n                        if (object.flags != null)\n                            message.flags = object.flags >>> 0;\n                        return message;\n                    };\n                    /**\n                     * Creates a plain object from a SummaryDataPoint message. Also converts values to other types if specified.\n                     * @function toObject\n                     * @memberof opentelemetry.proto.metrics.v1.SummaryDataPoint\n                     * @static\n                     * @param {opentelemetry.proto.metrics.v1.SummaryDataPoint} message SummaryDataPoint\n                     * @param {$protobuf.IConversionOptions} [options] Conversion options\n                     * @returns {Object.<string,*>} Plain object\n                     */\n                    SummaryDataPoint.toObject = function toObject(message, options) {\n                        if (!options)\n                            options = {};\n                        var object = {};\n                        if (options.arrays || options.defaults) {\n                            object.quantileValues = [];\n                            object.attributes = [];\n                        }\n                        if (options.defaults) {\n                            if ($util.Long) {\n                                var long = new $util.Long(0, 0, false);\n                                object.startTimeUnixNano = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                            }\n                            else\n                                object.startTimeUnixNano = options.longs === String ? \"0\" : 0;\n                            if ($util.Long) {\n                                var long = new $util.Long(0, 0, false);\n                                object.timeUnixNano = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                            }\n                            else\n                                object.timeUnixNano = options.longs === String ? \"0\" : 0;\n                            if ($util.Long) {\n                                var long = new $util.Long(0, 0, false);\n                                object.count = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                            }\n                            else\n                                object.count = options.longs === String ? \"0\" : 0;\n                            object.sum = 0;\n                            object.flags = 0;\n                        }\n                        if (message.startTimeUnixNano != null && message.hasOwnProperty(\"startTimeUnixNano\"))\n                            if (typeof message.startTimeUnixNano === \"number\")\n                                object.startTimeUnixNano = options.longs === String ? String(message.startTimeUnixNano) : message.startTimeUnixNano;\n                            else\n                                object.startTimeUnixNano = options.longs === String ? $util.Long.prototype.toString.call(message.startTimeUnixNano) : options.longs === Number ? new $util.LongBits(message.startTimeUnixNano.low >>> 0, message.startTimeUnixNano.high >>> 0).toNumber() : message.startTimeUnixNano;\n                        if (message.timeUnixNano != null && message.hasOwnProperty(\"timeUnixNano\"))\n                            if (typeof message.timeUnixNano === \"number\")\n                                object.timeUnixNano = options.longs === String ? String(message.timeUnixNano) : message.timeUnixNano;\n                            else\n                                object.timeUnixNano = options.longs === String ? $util.Long.prototype.toString.call(message.timeUnixNano) : options.longs === Number ? new $util.LongBits(message.timeUnixNano.low >>> 0, message.timeUnixNano.high >>> 0).toNumber() : message.timeUnixNano;\n                        if (message.count != null && message.hasOwnProperty(\"count\"))\n                            if (typeof message.count === \"number\")\n                                object.count = options.longs === String ? String(message.count) : message.count;\n                            else\n                                object.count = options.longs === String ? $util.Long.prototype.toString.call(message.count) : options.longs === Number ? new $util.LongBits(message.count.low >>> 0, message.count.high >>> 0).toNumber() : message.count;\n                        if (message.sum != null && message.hasOwnProperty(\"sum\"))\n                            object.sum = options.json && !isFinite(message.sum) ? String(message.sum) : message.sum;\n                        if (message.quantileValues && message.quantileValues.length) {\n                            object.quantileValues = [];\n                            for (var j = 0; j < message.quantileValues.length; ++j)\n                                object.quantileValues[j] = $root.opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile.toObject(message.quantileValues[j], options);\n                        }\n                        if (message.attributes && message.attributes.length) {\n                            object.attributes = [];\n                            for (var j = 0; j < message.attributes.length; ++j)\n                                object.attributes[j] = $root.opentelemetry.proto.common.v1.KeyValue.toObject(message.attributes[j], options);\n                        }\n                        if (message.flags != null && message.hasOwnProperty(\"flags\"))\n                            object.flags = message.flags;\n                        return object;\n                    };\n                    /**\n                     * Converts this SummaryDataPoint to JSON.\n                     * @function toJSON\n                     * @memberof opentelemetry.proto.metrics.v1.SummaryDataPoint\n                     * @instance\n                     * @returns {Object.<string,*>} JSON object\n                     */\n                    SummaryDataPoint.prototype.toJSON = function toJSON() {\n                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                    };\n                    /**\n                     * Gets the default type url for SummaryDataPoint\n                     * @function getTypeUrl\n                     * @memberof opentelemetry.proto.metrics.v1.SummaryDataPoint\n                     * @static\n                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n                     * @returns {string} The default type url\n                     */\n                    SummaryDataPoint.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                        if (typeUrlPrefix === undefined) {\n                            typeUrlPrefix = \"type.googleapis.com\";\n                        }\n                        return typeUrlPrefix + \"/opentelemetry.proto.metrics.v1.SummaryDataPoint\";\n                    };\n                    SummaryDataPoint.ValueAtQuantile = (function () {\n                        /**\n                         * Properties of a ValueAtQuantile.\n                         * @memberof opentelemetry.proto.metrics.v1.SummaryDataPoint\n                         * @interface IValueAtQuantile\n                         * @property {number|null} [quantile] ValueAtQuantile quantile\n                         * @property {number|null} [value] ValueAtQuantile value\n                         */\n                        /**\n                         * Constructs a new ValueAtQuantile.\n                         * @memberof opentelemetry.proto.metrics.v1.SummaryDataPoint\n                         * @classdesc Represents a ValueAtQuantile.\n                         * @implements IValueAtQuantile\n                         * @constructor\n                         * @param {opentelemetry.proto.metrics.v1.SummaryDataPoint.IValueAtQuantile=} [properties] Properties to set\n                         */\n                        function ValueAtQuantile(properties) {\n                            if (properties)\n                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                                    if (properties[keys[i]] != null)\n                                        this[keys[i]] = properties[keys[i]];\n                        }\n                        /**\n                         * ValueAtQuantile quantile.\n                         * @member {number|null|undefined} quantile\n                         * @memberof opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile\n                         * @instance\n                         */\n                        ValueAtQuantile.prototype.quantile = null;\n                        /**\n                         * ValueAtQuantile value.\n                         * @member {number|null|undefined} value\n                         * @memberof opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile\n                         * @instance\n                         */\n                        ValueAtQuantile.prototype.value = null;\n                        /**\n                         * Creates a new ValueAtQuantile instance using the specified properties.\n                         * @function create\n                         * @memberof opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile\n                         * @static\n                         * @param {opentelemetry.proto.metrics.v1.SummaryDataPoint.IValueAtQuantile=} [properties] Properties to set\n                         * @returns {opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile} ValueAtQuantile instance\n                         */\n                        ValueAtQuantile.create = function create(properties) {\n                            return new ValueAtQuantile(properties);\n                        };\n                        /**\n                         * Encodes the specified ValueAtQuantile message. Does not implicitly {@link opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile.verify|verify} messages.\n                         * @function encode\n                         * @memberof opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile\n                         * @static\n                         * @param {opentelemetry.proto.metrics.v1.SummaryDataPoint.IValueAtQuantile} message ValueAtQuantile message or plain object to encode\n                         * @param {$protobuf.Writer} [writer] Writer to encode to\n                         * @returns {$protobuf.Writer} Writer\n                         */\n                        ValueAtQuantile.encode = function encode(message, writer) {\n                            if (!writer)\n                                writer = $Writer.create();\n                            if (message.quantile != null && Object.hasOwnProperty.call(message, \"quantile\"))\n                                writer.uint32(/* id 1, wireType 1 =*/ 9).double(message.quantile);\n                            if (message.value != null && Object.hasOwnProperty.call(message, \"value\"))\n                                writer.uint32(/* id 2, wireType 1 =*/ 17).double(message.value);\n                            return writer;\n                        };\n                        /**\n                         * Encodes the specified ValueAtQuantile message, length delimited. Does not implicitly {@link opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile.verify|verify} messages.\n                         * @function encodeDelimited\n                         * @memberof opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile\n                         * @static\n                         * @param {opentelemetry.proto.metrics.v1.SummaryDataPoint.IValueAtQuantile} message ValueAtQuantile message or plain object to encode\n                         * @param {$protobuf.Writer} [writer] Writer to encode to\n                         * @returns {$protobuf.Writer} Writer\n                         */\n                        ValueAtQuantile.encodeDelimited = function encodeDelimited(message, writer) {\n                            return this.encode(message, writer).ldelim();\n                        };\n                        /**\n                         * Decodes a ValueAtQuantile message from the specified reader or buffer.\n                         * @function decode\n                         * @memberof opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile\n                         * @static\n                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                         * @param {number} [length] Message length if known beforehand\n                         * @returns {opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile} ValueAtQuantile\n                         * @throws {Error} If the payload is not a reader or valid buffer\n                         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                         */\n                        ValueAtQuantile.decode = function decode(reader, length) {\n                            if (!(reader instanceof $Reader))\n                                reader = $Reader.create(reader);\n                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile();\n                            while (reader.pos < end) {\n                                var tag = reader.uint32();\n                                switch (tag >>> 3) {\n                                    case 1: {\n                                        message.quantile = reader.double();\n                                        break;\n                                    }\n                                    case 2: {\n                                        message.value = reader.double();\n                                        break;\n                                    }\n                                    default:\n                                        reader.skipType(tag & 7);\n                                        break;\n                                }\n                            }\n                            return message;\n                        };\n                        /**\n                         * Decodes a ValueAtQuantile message from the specified reader or buffer, length delimited.\n                         * @function decodeDelimited\n                         * @memberof opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile\n                         * @static\n                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                         * @returns {opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile} ValueAtQuantile\n                         * @throws {Error} If the payload is not a reader or valid buffer\n                         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                         */\n                        ValueAtQuantile.decodeDelimited = function decodeDelimited(reader) {\n                            if (!(reader instanceof $Reader))\n                                reader = new $Reader(reader);\n                            return this.decode(reader, reader.uint32());\n                        };\n                        /**\n                         * Verifies a ValueAtQuantile message.\n                         * @function verify\n                         * @memberof opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile\n                         * @static\n                         * @param {Object.<string,*>} message Plain object to verify\n                         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                         */\n                        ValueAtQuantile.verify = function verify(message) {\n                            if (typeof message !== \"object\" || message === null)\n                                return \"object expected\";\n                            if (message.quantile != null && message.hasOwnProperty(\"quantile\"))\n                                if (typeof message.quantile !== \"number\")\n                                    return \"quantile: number expected\";\n                            if (message.value != null && message.hasOwnProperty(\"value\"))\n                                if (typeof message.value !== \"number\")\n                                    return \"value: number expected\";\n                            return null;\n                        };\n                        /**\n                         * Creates a ValueAtQuantile message from a plain object. Also converts values to their respective internal types.\n                         * @function fromObject\n                         * @memberof opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile\n                         * @static\n                         * @param {Object.<string,*>} object Plain object\n                         * @returns {opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile} ValueAtQuantile\n                         */\n                        ValueAtQuantile.fromObject = function fromObject(object) {\n                            if (object instanceof $root.opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile)\n                                return object;\n                            var message = new $root.opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile();\n                            if (object.quantile != null)\n                                message.quantile = Number(object.quantile);\n                            if (object.value != null)\n                                message.value = Number(object.value);\n                            return message;\n                        };\n                        /**\n                         * Creates a plain object from a ValueAtQuantile message. Also converts values to other types if specified.\n                         * @function toObject\n                         * @memberof opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile\n                         * @static\n                         * @param {opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile} message ValueAtQuantile\n                         * @param {$protobuf.IConversionOptions} [options] Conversion options\n                         * @returns {Object.<string,*>} Plain object\n                         */\n                        ValueAtQuantile.toObject = function toObject(message, options) {\n                            if (!options)\n                                options = {};\n                            var object = {};\n                            if (options.defaults) {\n                                object.quantile = 0;\n                                object.value = 0;\n                            }\n                            if (message.quantile != null && message.hasOwnProperty(\"quantile\"))\n                                object.quantile = options.json && !isFinite(message.quantile) ? String(message.quantile) : message.quantile;\n                            if (message.value != null && message.hasOwnProperty(\"value\"))\n                                object.value = options.json && !isFinite(message.value) ? String(message.value) : message.value;\n                            return object;\n                        };\n                        /**\n                         * Converts this ValueAtQuantile to JSON.\n                         * @function toJSON\n                         * @memberof opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile\n                         * @instance\n                         * @returns {Object.<string,*>} JSON object\n                         */\n                        ValueAtQuantile.prototype.toJSON = function toJSON() {\n                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                        };\n                        /**\n                         * Gets the default type url for ValueAtQuantile\n                         * @function getTypeUrl\n                         * @memberof opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile\n                         * @static\n                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n                         * @returns {string} The default type url\n                         */\n                        ValueAtQuantile.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                            if (typeUrlPrefix === undefined) {\n                                typeUrlPrefix = \"type.googleapis.com\";\n                            }\n                            return typeUrlPrefix + \"/opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile\";\n                        };\n                        return ValueAtQuantile;\n                    })();\n                    return SummaryDataPoint;\n                })();\n                v1.Exemplar = (function () {\n                    /**\n                     * Properties of an Exemplar.\n                     * @memberof opentelemetry.proto.metrics.v1\n                     * @interface IExemplar\n                     * @property {Array.<opentelemetry.proto.common.v1.IKeyValue>|null} [filteredAttributes] Exemplar filteredAttributes\n                     * @property {number|Long|null} [timeUnixNano] Exemplar timeUnixNano\n                     * @property {number|null} [asDouble] Exemplar asDouble\n                     * @property {number|Long|null} [asInt] Exemplar asInt\n                     * @property {Uint8Array|null} [spanId] Exemplar spanId\n                     * @property {Uint8Array|null} [traceId] Exemplar traceId\n                     */\n                    /**\n                     * Constructs a new Exemplar.\n                     * @memberof opentelemetry.proto.metrics.v1\n                     * @classdesc Represents an Exemplar.\n                     * @implements IExemplar\n                     * @constructor\n                     * @param {opentelemetry.proto.metrics.v1.IExemplar=} [properties] Properties to set\n                     */\n                    function Exemplar(properties) {\n                        this.filteredAttributes = [];\n                        if (properties)\n                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                                if (properties[keys[i]] != null)\n                                    this[keys[i]] = properties[keys[i]];\n                    }\n                    /**\n                     * Exemplar filteredAttributes.\n                     * @member {Array.<opentelemetry.proto.common.v1.IKeyValue>} filteredAttributes\n                     * @memberof opentelemetry.proto.metrics.v1.Exemplar\n                     * @instance\n                     */\n                    Exemplar.prototype.filteredAttributes = $util.emptyArray;\n                    /**\n                     * Exemplar timeUnixNano.\n                     * @member {number|Long|null|undefined} timeUnixNano\n                     * @memberof opentelemetry.proto.metrics.v1.Exemplar\n                     * @instance\n                     */\n                    Exemplar.prototype.timeUnixNano = null;\n                    /**\n                     * Exemplar asDouble.\n                     * @member {number|null|undefined} asDouble\n                     * @memberof opentelemetry.proto.metrics.v1.Exemplar\n                     * @instance\n                     */\n                    Exemplar.prototype.asDouble = null;\n                    /**\n                     * Exemplar asInt.\n                     * @member {number|Long|null|undefined} asInt\n                     * @memberof opentelemetry.proto.metrics.v1.Exemplar\n                     * @instance\n                     */\n                    Exemplar.prototype.asInt = null;\n                    /**\n                     * Exemplar spanId.\n                     * @member {Uint8Array|null|undefined} spanId\n                     * @memberof opentelemetry.proto.metrics.v1.Exemplar\n                     * @instance\n                     */\n                    Exemplar.prototype.spanId = null;\n                    /**\n                     * Exemplar traceId.\n                     * @member {Uint8Array|null|undefined} traceId\n                     * @memberof opentelemetry.proto.metrics.v1.Exemplar\n                     * @instance\n                     */\n                    Exemplar.prototype.traceId = null;\n                    // OneOf field names bound to virtual getters and setters\n                    var $oneOfFields;\n                    /**\n                     * Exemplar value.\n                     * @member {\"asDouble\"|\"asInt\"|undefined} value\n                     * @memberof opentelemetry.proto.metrics.v1.Exemplar\n                     * @instance\n                     */\n                    Object.defineProperty(Exemplar.prototype, \"value\", {\n                        get: $util.oneOfGetter($oneOfFields = [\"asDouble\", \"asInt\"]),\n                        set: $util.oneOfSetter($oneOfFields)\n                    });\n                    /**\n                     * Creates a new Exemplar instance using the specified properties.\n                     * @function create\n                     * @memberof opentelemetry.proto.metrics.v1.Exemplar\n                     * @static\n                     * @param {opentelemetry.proto.metrics.v1.IExemplar=} [properties] Properties to set\n                     * @returns {opentelemetry.proto.metrics.v1.Exemplar} Exemplar instance\n                     */\n                    Exemplar.create = function create(properties) {\n                        return new Exemplar(properties);\n                    };\n                    /**\n                     * Encodes the specified Exemplar message. Does not implicitly {@link opentelemetry.proto.metrics.v1.Exemplar.verify|verify} messages.\n                     * @function encode\n                     * @memberof opentelemetry.proto.metrics.v1.Exemplar\n                     * @static\n                     * @param {opentelemetry.proto.metrics.v1.IExemplar} message Exemplar message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    Exemplar.encode = function encode(message, writer) {\n                        if (!writer)\n                            writer = $Writer.create();\n                        if (message.timeUnixNano != null && Object.hasOwnProperty.call(message, \"timeUnixNano\"))\n                            writer.uint32(/* id 2, wireType 1 =*/ 17).fixed64(message.timeUnixNano);\n                        if (message.asDouble != null && Object.hasOwnProperty.call(message, \"asDouble\"))\n                            writer.uint32(/* id 3, wireType 1 =*/ 25).double(message.asDouble);\n                        if (message.spanId != null && Object.hasOwnProperty.call(message, \"spanId\"))\n                            writer.uint32(/* id 4, wireType 2 =*/ 34).bytes(message.spanId);\n                        if (message.traceId != null && Object.hasOwnProperty.call(message, \"traceId\"))\n                            writer.uint32(/* id 5, wireType 2 =*/ 42).bytes(message.traceId);\n                        if (message.asInt != null && Object.hasOwnProperty.call(message, \"asInt\"))\n                            writer.uint32(/* id 6, wireType 1 =*/ 49).sfixed64(message.asInt);\n                        if (message.filteredAttributes != null && message.filteredAttributes.length)\n                            for (var i = 0; i < message.filteredAttributes.length; ++i)\n                                $root.opentelemetry.proto.common.v1.KeyValue.encode(message.filteredAttributes[i], writer.uint32(/* id 7, wireType 2 =*/ 58).fork()).ldelim();\n                        return writer;\n                    };\n                    /**\n                     * Encodes the specified Exemplar message, length delimited. Does not implicitly {@link opentelemetry.proto.metrics.v1.Exemplar.verify|verify} messages.\n                     * @function encodeDelimited\n                     * @memberof opentelemetry.proto.metrics.v1.Exemplar\n                     * @static\n                     * @param {opentelemetry.proto.metrics.v1.IExemplar} message Exemplar message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    Exemplar.encodeDelimited = function encodeDelimited(message, writer) {\n                        return this.encode(message, writer).ldelim();\n                    };\n                    /**\n                     * Decodes an Exemplar message from the specified reader or buffer.\n                     * @function decode\n                     * @memberof opentelemetry.proto.metrics.v1.Exemplar\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @param {number} [length] Message length if known beforehand\n                     * @returns {opentelemetry.proto.metrics.v1.Exemplar} Exemplar\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    Exemplar.decode = function decode(reader, length) {\n                        if (!(reader instanceof $Reader))\n                            reader = $Reader.create(reader);\n                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.opentelemetry.proto.metrics.v1.Exemplar();\n                        while (reader.pos < end) {\n                            var tag = reader.uint32();\n                            switch (tag >>> 3) {\n                                case 7: {\n                                    if (!(message.filteredAttributes && message.filteredAttributes.length))\n                                        message.filteredAttributes = [];\n                                    message.filteredAttributes.push($root.opentelemetry.proto.common.v1.KeyValue.decode(reader, reader.uint32()));\n                                    break;\n                                }\n                                case 2: {\n                                    message.timeUnixNano = reader.fixed64();\n                                    break;\n                                }\n                                case 3: {\n                                    message.asDouble = reader.double();\n                                    break;\n                                }\n                                case 6: {\n                                    message.asInt = reader.sfixed64();\n                                    break;\n                                }\n                                case 4: {\n                                    message.spanId = reader.bytes();\n                                    break;\n                                }\n                                case 5: {\n                                    message.traceId = reader.bytes();\n                                    break;\n                                }\n                                default:\n                                    reader.skipType(tag & 7);\n                                    break;\n                            }\n                        }\n                        return message;\n                    };\n                    /**\n                     * Decodes an Exemplar message from the specified reader or buffer, length delimited.\n                     * @function decodeDelimited\n                     * @memberof opentelemetry.proto.metrics.v1.Exemplar\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @returns {opentelemetry.proto.metrics.v1.Exemplar} Exemplar\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    Exemplar.decodeDelimited = function decodeDelimited(reader) {\n                        if (!(reader instanceof $Reader))\n                            reader = new $Reader(reader);\n                        return this.decode(reader, reader.uint32());\n                    };\n                    /**\n                     * Verifies an Exemplar message.\n                     * @function verify\n                     * @memberof opentelemetry.proto.metrics.v1.Exemplar\n                     * @static\n                     * @param {Object.<string,*>} message Plain object to verify\n                     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                     */\n                    Exemplar.verify = function verify(message) {\n                        if (typeof message !== \"object\" || message === null)\n                            return \"object expected\";\n                        var properties = {};\n                        if (message.filteredAttributes != null && message.hasOwnProperty(\"filteredAttributes\")) {\n                            if (!Array.isArray(message.filteredAttributes))\n                                return \"filteredAttributes: array expected\";\n                            for (var i = 0; i < message.filteredAttributes.length; ++i) {\n                                var error = $root.opentelemetry.proto.common.v1.KeyValue.verify(message.filteredAttributes[i]);\n                                if (error)\n                                    return \"filteredAttributes.\" + error;\n                            }\n                        }\n                        if (message.timeUnixNano != null && message.hasOwnProperty(\"timeUnixNano\"))\n                            if (!$util.isInteger(message.timeUnixNano) && !(message.timeUnixNano && $util.isInteger(message.timeUnixNano.low) && $util.isInteger(message.timeUnixNano.high)))\n                                return \"timeUnixNano: integer|Long expected\";\n                        if (message.asDouble != null && message.hasOwnProperty(\"asDouble\")) {\n                            properties.value = 1;\n                            if (typeof message.asDouble !== \"number\")\n                                return \"asDouble: number expected\";\n                        }\n                        if (message.asInt != null && message.hasOwnProperty(\"asInt\")) {\n                            if (properties.value === 1)\n                                return \"value: multiple values\";\n                            properties.value = 1;\n                            if (!$util.isInteger(message.asInt) && !(message.asInt && $util.isInteger(message.asInt.low) && $util.isInteger(message.asInt.high)))\n                                return \"asInt: integer|Long expected\";\n                        }\n                        if (message.spanId != null && message.hasOwnProperty(\"spanId\"))\n                            if (!(message.spanId && typeof message.spanId.length === \"number\" || $util.isString(message.spanId)))\n                                return \"spanId: buffer expected\";\n                        if (message.traceId != null && message.hasOwnProperty(\"traceId\"))\n                            if (!(message.traceId && typeof message.traceId.length === \"number\" || $util.isString(message.traceId)))\n                                return \"traceId: buffer expected\";\n                        return null;\n                    };\n                    /**\n                     * Creates an Exemplar message from a plain object. Also converts values to their respective internal types.\n                     * @function fromObject\n                     * @memberof opentelemetry.proto.metrics.v1.Exemplar\n                     * @static\n                     * @param {Object.<string,*>} object Plain object\n                     * @returns {opentelemetry.proto.metrics.v1.Exemplar} Exemplar\n                     */\n                    Exemplar.fromObject = function fromObject(object) {\n                        if (object instanceof $root.opentelemetry.proto.metrics.v1.Exemplar)\n                            return object;\n                        var message = new $root.opentelemetry.proto.metrics.v1.Exemplar();\n                        if (object.filteredAttributes) {\n                            if (!Array.isArray(object.filteredAttributes))\n                                throw TypeError(\".opentelemetry.proto.metrics.v1.Exemplar.filteredAttributes: array expected\");\n                            message.filteredAttributes = [];\n                            for (var i = 0; i < object.filteredAttributes.length; ++i) {\n                                if (typeof object.filteredAttributes[i] !== \"object\")\n                                    throw TypeError(\".opentelemetry.proto.metrics.v1.Exemplar.filteredAttributes: object expected\");\n                                message.filteredAttributes[i] = $root.opentelemetry.proto.common.v1.KeyValue.fromObject(object.filteredAttributes[i]);\n                            }\n                        }\n                        if (object.timeUnixNano != null)\n                            if ($util.Long)\n                                (message.timeUnixNano = $util.Long.fromValue(object.timeUnixNano)).unsigned = false;\n                            else if (typeof object.timeUnixNano === \"string\")\n                                message.timeUnixNano = parseInt(object.timeUnixNano, 10);\n                            else if (typeof object.timeUnixNano === \"number\")\n                                message.timeUnixNano = object.timeUnixNano;\n                            else if (typeof object.timeUnixNano === \"object\")\n                                message.timeUnixNano = new $util.LongBits(object.timeUnixNano.low >>> 0, object.timeUnixNano.high >>> 0).toNumber();\n                        if (object.asDouble != null)\n                            message.asDouble = Number(object.asDouble);\n                        if (object.asInt != null)\n                            if ($util.Long)\n                                (message.asInt = $util.Long.fromValue(object.asInt)).unsigned = false;\n                            else if (typeof object.asInt === \"string\")\n                                message.asInt = parseInt(object.asInt, 10);\n                            else if (typeof object.asInt === \"number\")\n                                message.asInt = object.asInt;\n                            else if (typeof object.asInt === \"object\")\n                                message.asInt = new $util.LongBits(object.asInt.low >>> 0, object.asInt.high >>> 0).toNumber();\n                        if (object.spanId != null)\n                            if (typeof object.spanId === \"string\")\n                                $util.base64.decode(object.spanId, message.spanId = $util.newBuffer($util.base64.length(object.spanId)), 0);\n                            else if (object.spanId.length >= 0)\n                                message.spanId = object.spanId;\n                        if (object.traceId != null)\n                            if (typeof object.traceId === \"string\")\n                                $util.base64.decode(object.traceId, message.traceId = $util.newBuffer($util.base64.length(object.traceId)), 0);\n                            else if (object.traceId.length >= 0)\n                                message.traceId = object.traceId;\n                        return message;\n                    };\n                    /**\n                     * Creates a plain object from an Exemplar message. Also converts values to other types if specified.\n                     * @function toObject\n                     * @memberof opentelemetry.proto.metrics.v1.Exemplar\n                     * @static\n                     * @param {opentelemetry.proto.metrics.v1.Exemplar} message Exemplar\n                     * @param {$protobuf.IConversionOptions} [options] Conversion options\n                     * @returns {Object.<string,*>} Plain object\n                     */\n                    Exemplar.toObject = function toObject(message, options) {\n                        if (!options)\n                            options = {};\n                        var object = {};\n                        if (options.arrays || options.defaults)\n                            object.filteredAttributes = [];\n                        if (options.defaults) {\n                            if ($util.Long) {\n                                var long = new $util.Long(0, 0, false);\n                                object.timeUnixNano = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                            }\n                            else\n                                object.timeUnixNano = options.longs === String ? \"0\" : 0;\n                            if (options.bytes === String)\n                                object.spanId = \"\";\n                            else {\n                                object.spanId = [];\n                                if (options.bytes !== Array)\n                                    object.spanId = $util.newBuffer(object.spanId);\n                            }\n                            if (options.bytes === String)\n                                object.traceId = \"\";\n                            else {\n                                object.traceId = [];\n                                if (options.bytes !== Array)\n                                    object.traceId = $util.newBuffer(object.traceId);\n                            }\n                        }\n                        if (message.timeUnixNano != null && message.hasOwnProperty(\"timeUnixNano\"))\n                            if (typeof message.timeUnixNano === \"number\")\n                                object.timeUnixNano = options.longs === String ? String(message.timeUnixNano) : message.timeUnixNano;\n                            else\n                                object.timeUnixNano = options.longs === String ? $util.Long.prototype.toString.call(message.timeUnixNano) : options.longs === Number ? new $util.LongBits(message.timeUnixNano.low >>> 0, message.timeUnixNano.high >>> 0).toNumber() : message.timeUnixNano;\n                        if (message.asDouble != null && message.hasOwnProperty(\"asDouble\")) {\n                            object.asDouble = options.json && !isFinite(message.asDouble) ? String(message.asDouble) : message.asDouble;\n                            if (options.oneofs)\n                                object.value = \"asDouble\";\n                        }\n                        if (message.spanId != null && message.hasOwnProperty(\"spanId\"))\n                            object.spanId = options.bytes === String ? $util.base64.encode(message.spanId, 0, message.spanId.length) : options.bytes === Array ? Array.prototype.slice.call(message.spanId) : message.spanId;\n                        if (message.traceId != null && message.hasOwnProperty(\"traceId\"))\n                            object.traceId = options.bytes === String ? $util.base64.encode(message.traceId, 0, message.traceId.length) : options.bytes === Array ? Array.prototype.slice.call(message.traceId) : message.traceId;\n                        if (message.asInt != null && message.hasOwnProperty(\"asInt\")) {\n                            if (typeof message.asInt === \"number\")\n                                object.asInt = options.longs === String ? String(message.asInt) : message.asInt;\n                            else\n                                object.asInt = options.longs === String ? $util.Long.prototype.toString.call(message.asInt) : options.longs === Number ? new $util.LongBits(message.asInt.low >>> 0, message.asInt.high >>> 0).toNumber() : message.asInt;\n                            if (options.oneofs)\n                                object.value = \"asInt\";\n                        }\n                        if (message.filteredAttributes && message.filteredAttributes.length) {\n                            object.filteredAttributes = [];\n                            for (var j = 0; j < message.filteredAttributes.length; ++j)\n                                object.filteredAttributes[j] = $root.opentelemetry.proto.common.v1.KeyValue.toObject(message.filteredAttributes[j], options);\n                        }\n                        return object;\n                    };\n                    /**\n                     * Converts this Exemplar to JSON.\n                     * @function toJSON\n                     * @memberof opentelemetry.proto.metrics.v1.Exemplar\n                     * @instance\n                     * @returns {Object.<string,*>} JSON object\n                     */\n                    Exemplar.prototype.toJSON = function toJSON() {\n                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                    };\n                    /**\n                     * Gets the default type url for Exemplar\n                     * @function getTypeUrl\n                     * @memberof opentelemetry.proto.metrics.v1.Exemplar\n                     * @static\n                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n                     * @returns {string} The default type url\n                     */\n                    Exemplar.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                        if (typeUrlPrefix === undefined) {\n                            typeUrlPrefix = \"type.googleapis.com\";\n                        }\n                        return typeUrlPrefix + \"/opentelemetry.proto.metrics.v1.Exemplar\";\n                    };\n                    return Exemplar;\n                })();\n                return v1;\n            })();\n            return metrics;\n        })();\n        proto.logs = (function () {\n            /**\n             * Namespace logs.\n             * @memberof opentelemetry.proto\n             * @namespace\n             */\n            var logs = {};\n            logs.v1 = (function () {\n                /**\n                 * Namespace v1.\n                 * @memberof opentelemetry.proto.logs\n                 * @namespace\n                 */\n                var v1 = {};\n                v1.LogsData = (function () {\n                    /**\n                     * Properties of a LogsData.\n                     * @memberof opentelemetry.proto.logs.v1\n                     * @interface ILogsData\n                     * @property {Array.<opentelemetry.proto.logs.v1.IResourceLogs>|null} [resourceLogs] LogsData resourceLogs\n                     */\n                    /**\n                     * Constructs a new LogsData.\n                     * @memberof opentelemetry.proto.logs.v1\n                     * @classdesc Represents a LogsData.\n                     * @implements ILogsData\n                     * @constructor\n                     * @param {opentelemetry.proto.logs.v1.ILogsData=} [properties] Properties to set\n                     */\n                    function LogsData(properties) {\n                        this.resourceLogs = [];\n                        if (properties)\n                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                                if (properties[keys[i]] != null)\n                                    this[keys[i]] = properties[keys[i]];\n                    }\n                    /**\n                     * LogsData resourceLogs.\n                     * @member {Array.<opentelemetry.proto.logs.v1.IResourceLogs>} resourceLogs\n                     * @memberof opentelemetry.proto.logs.v1.LogsData\n                     * @instance\n                     */\n                    LogsData.prototype.resourceLogs = $util.emptyArray;\n                    /**\n                     * Creates a new LogsData instance using the specified properties.\n                     * @function create\n                     * @memberof opentelemetry.proto.logs.v1.LogsData\n                     * @static\n                     * @param {opentelemetry.proto.logs.v1.ILogsData=} [properties] Properties to set\n                     * @returns {opentelemetry.proto.logs.v1.LogsData} LogsData instance\n                     */\n                    LogsData.create = function create(properties) {\n                        return new LogsData(properties);\n                    };\n                    /**\n                     * Encodes the specified LogsData message. Does not implicitly {@link opentelemetry.proto.logs.v1.LogsData.verify|verify} messages.\n                     * @function encode\n                     * @memberof opentelemetry.proto.logs.v1.LogsData\n                     * @static\n                     * @param {opentelemetry.proto.logs.v1.ILogsData} message LogsData message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    LogsData.encode = function encode(message, writer) {\n                        if (!writer)\n                            writer = $Writer.create();\n                        if (message.resourceLogs != null && message.resourceLogs.length)\n                            for (var i = 0; i < message.resourceLogs.length; ++i)\n                                $root.opentelemetry.proto.logs.v1.ResourceLogs.encode(message.resourceLogs[i], writer.uint32(/* id 1, wireType 2 =*/ 10).fork()).ldelim();\n                        return writer;\n                    };\n                    /**\n                     * Encodes the specified LogsData message, length delimited. Does not implicitly {@link opentelemetry.proto.logs.v1.LogsData.verify|verify} messages.\n                     * @function encodeDelimited\n                     * @memberof opentelemetry.proto.logs.v1.LogsData\n                     * @static\n                     * @param {opentelemetry.proto.logs.v1.ILogsData} message LogsData message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    LogsData.encodeDelimited = function encodeDelimited(message, writer) {\n                        return this.encode(message, writer).ldelim();\n                    };\n                    /**\n                     * Decodes a LogsData message from the specified reader or buffer.\n                     * @function decode\n                     * @memberof opentelemetry.proto.logs.v1.LogsData\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @param {number} [length] Message length if known beforehand\n                     * @returns {opentelemetry.proto.logs.v1.LogsData} LogsData\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    LogsData.decode = function decode(reader, length) {\n                        if (!(reader instanceof $Reader))\n                            reader = $Reader.create(reader);\n                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.opentelemetry.proto.logs.v1.LogsData();\n                        while (reader.pos < end) {\n                            var tag = reader.uint32();\n                            switch (tag >>> 3) {\n                                case 1: {\n                                    if (!(message.resourceLogs && message.resourceLogs.length))\n                                        message.resourceLogs = [];\n                                    message.resourceLogs.push($root.opentelemetry.proto.logs.v1.ResourceLogs.decode(reader, reader.uint32()));\n                                    break;\n                                }\n                                default:\n                                    reader.skipType(tag & 7);\n                                    break;\n                            }\n                        }\n                        return message;\n                    };\n                    /**\n                     * Decodes a LogsData message from the specified reader or buffer, length delimited.\n                     * @function decodeDelimited\n                     * @memberof opentelemetry.proto.logs.v1.LogsData\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @returns {opentelemetry.proto.logs.v1.LogsData} LogsData\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    LogsData.decodeDelimited = function decodeDelimited(reader) {\n                        if (!(reader instanceof $Reader))\n                            reader = new $Reader(reader);\n                        return this.decode(reader, reader.uint32());\n                    };\n                    /**\n                     * Verifies a LogsData message.\n                     * @function verify\n                     * @memberof opentelemetry.proto.logs.v1.LogsData\n                     * @static\n                     * @param {Object.<string,*>} message Plain object to verify\n                     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                     */\n                    LogsData.verify = function verify(message) {\n                        if (typeof message !== \"object\" || message === null)\n                            return \"object expected\";\n                        if (message.resourceLogs != null && message.hasOwnProperty(\"resourceLogs\")) {\n                            if (!Array.isArray(message.resourceLogs))\n                                return \"resourceLogs: array expected\";\n                            for (var i = 0; i < message.resourceLogs.length; ++i) {\n                                var error = $root.opentelemetry.proto.logs.v1.ResourceLogs.verify(message.resourceLogs[i]);\n                                if (error)\n                                    return \"resourceLogs.\" + error;\n                            }\n                        }\n                        return null;\n                    };\n                    /**\n                     * Creates a LogsData message from a plain object. Also converts values to their respective internal types.\n                     * @function fromObject\n                     * @memberof opentelemetry.proto.logs.v1.LogsData\n                     * @static\n                     * @param {Object.<string,*>} object Plain object\n                     * @returns {opentelemetry.proto.logs.v1.LogsData} LogsData\n                     */\n                    LogsData.fromObject = function fromObject(object) {\n                        if (object instanceof $root.opentelemetry.proto.logs.v1.LogsData)\n                            return object;\n                        var message = new $root.opentelemetry.proto.logs.v1.LogsData();\n                        if (object.resourceLogs) {\n                            if (!Array.isArray(object.resourceLogs))\n                                throw TypeError(\".opentelemetry.proto.logs.v1.LogsData.resourceLogs: array expected\");\n                            message.resourceLogs = [];\n                            for (var i = 0; i < object.resourceLogs.length; ++i) {\n                                if (typeof object.resourceLogs[i] !== \"object\")\n                                    throw TypeError(\".opentelemetry.proto.logs.v1.LogsData.resourceLogs: object expected\");\n                                message.resourceLogs[i] = $root.opentelemetry.proto.logs.v1.ResourceLogs.fromObject(object.resourceLogs[i]);\n                            }\n                        }\n                        return message;\n                    };\n                    /**\n                     * Creates a plain object from a LogsData message. Also converts values to other types if specified.\n                     * @function toObject\n                     * @memberof opentelemetry.proto.logs.v1.LogsData\n                     * @static\n                     * @param {opentelemetry.proto.logs.v1.LogsData} message LogsData\n                     * @param {$protobuf.IConversionOptions} [options] Conversion options\n                     * @returns {Object.<string,*>} Plain object\n                     */\n                    LogsData.toObject = function toObject(message, options) {\n                        if (!options)\n                            options = {};\n                        var object = {};\n                        if (options.arrays || options.defaults)\n                            object.resourceLogs = [];\n                        if (message.resourceLogs && message.resourceLogs.length) {\n                            object.resourceLogs = [];\n                            for (var j = 0; j < message.resourceLogs.length; ++j)\n                                object.resourceLogs[j] = $root.opentelemetry.proto.logs.v1.ResourceLogs.toObject(message.resourceLogs[j], options);\n                        }\n                        return object;\n                    };\n                    /**\n                     * Converts this LogsData to JSON.\n                     * @function toJSON\n                     * @memberof opentelemetry.proto.logs.v1.LogsData\n                     * @instance\n                     * @returns {Object.<string,*>} JSON object\n                     */\n                    LogsData.prototype.toJSON = function toJSON() {\n                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                    };\n                    /**\n                     * Gets the default type url for LogsData\n                     * @function getTypeUrl\n                     * @memberof opentelemetry.proto.logs.v1.LogsData\n                     * @static\n                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n                     * @returns {string} The default type url\n                     */\n                    LogsData.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                        if (typeUrlPrefix === undefined) {\n                            typeUrlPrefix = \"type.googleapis.com\";\n                        }\n                        return typeUrlPrefix + \"/opentelemetry.proto.logs.v1.LogsData\";\n                    };\n                    return LogsData;\n                })();\n                v1.ResourceLogs = (function () {\n                    /**\n                     * Properties of a ResourceLogs.\n                     * @memberof opentelemetry.proto.logs.v1\n                     * @interface IResourceLogs\n                     * @property {opentelemetry.proto.resource.v1.IResource|null} [resource] ResourceLogs resource\n                     * @property {Array.<opentelemetry.proto.logs.v1.IScopeLogs>|null} [scopeLogs] ResourceLogs scopeLogs\n                     * @property {string|null} [schemaUrl] ResourceLogs schemaUrl\n                     */\n                    /**\n                     * Constructs a new ResourceLogs.\n                     * @memberof opentelemetry.proto.logs.v1\n                     * @classdesc Represents a ResourceLogs.\n                     * @implements IResourceLogs\n                     * @constructor\n                     * @param {opentelemetry.proto.logs.v1.IResourceLogs=} [properties] Properties to set\n                     */\n                    function ResourceLogs(properties) {\n                        this.scopeLogs = [];\n                        if (properties)\n                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                                if (properties[keys[i]] != null)\n                                    this[keys[i]] = properties[keys[i]];\n                    }\n                    /**\n                     * ResourceLogs resource.\n                     * @member {opentelemetry.proto.resource.v1.IResource|null|undefined} resource\n                     * @memberof opentelemetry.proto.logs.v1.ResourceLogs\n                     * @instance\n                     */\n                    ResourceLogs.prototype.resource = null;\n                    /**\n                     * ResourceLogs scopeLogs.\n                     * @member {Array.<opentelemetry.proto.logs.v1.IScopeLogs>} scopeLogs\n                     * @memberof opentelemetry.proto.logs.v1.ResourceLogs\n                     * @instance\n                     */\n                    ResourceLogs.prototype.scopeLogs = $util.emptyArray;\n                    /**\n                     * ResourceLogs schemaUrl.\n                     * @member {string|null|undefined} schemaUrl\n                     * @memberof opentelemetry.proto.logs.v1.ResourceLogs\n                     * @instance\n                     */\n                    ResourceLogs.prototype.schemaUrl = null;\n                    /**\n                     * Creates a new ResourceLogs instance using the specified properties.\n                     * @function create\n                     * @memberof opentelemetry.proto.logs.v1.ResourceLogs\n                     * @static\n                     * @param {opentelemetry.proto.logs.v1.IResourceLogs=} [properties] Properties to set\n                     * @returns {opentelemetry.proto.logs.v1.ResourceLogs} ResourceLogs instance\n                     */\n                    ResourceLogs.create = function create(properties) {\n                        return new ResourceLogs(properties);\n                    };\n                    /**\n                     * Encodes the specified ResourceLogs message. Does not implicitly {@link opentelemetry.proto.logs.v1.ResourceLogs.verify|verify} messages.\n                     * @function encode\n                     * @memberof opentelemetry.proto.logs.v1.ResourceLogs\n                     * @static\n                     * @param {opentelemetry.proto.logs.v1.IResourceLogs} message ResourceLogs message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    ResourceLogs.encode = function encode(message, writer) {\n                        if (!writer)\n                            writer = $Writer.create();\n                        if (message.resource != null && Object.hasOwnProperty.call(message, \"resource\"))\n                            $root.opentelemetry.proto.resource.v1.Resource.encode(message.resource, writer.uint32(/* id 1, wireType 2 =*/ 10).fork()).ldelim();\n                        if (message.scopeLogs != null && message.scopeLogs.length)\n                            for (var i = 0; i < message.scopeLogs.length; ++i)\n                                $root.opentelemetry.proto.logs.v1.ScopeLogs.encode(message.scopeLogs[i], writer.uint32(/* id 2, wireType 2 =*/ 18).fork()).ldelim();\n                        if (message.schemaUrl != null && Object.hasOwnProperty.call(message, \"schemaUrl\"))\n                            writer.uint32(/* id 3, wireType 2 =*/ 26).string(message.schemaUrl);\n                        return writer;\n                    };\n                    /**\n                     * Encodes the specified ResourceLogs message, length delimited. Does not implicitly {@link opentelemetry.proto.logs.v1.ResourceLogs.verify|verify} messages.\n                     * @function encodeDelimited\n                     * @memberof opentelemetry.proto.logs.v1.ResourceLogs\n                     * @static\n                     * @param {opentelemetry.proto.logs.v1.IResourceLogs} message ResourceLogs message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    ResourceLogs.encodeDelimited = function encodeDelimited(message, writer) {\n                        return this.encode(message, writer).ldelim();\n                    };\n                    /**\n                     * Decodes a ResourceLogs message from the specified reader or buffer.\n                     * @function decode\n                     * @memberof opentelemetry.proto.logs.v1.ResourceLogs\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @param {number} [length] Message length if known beforehand\n                     * @returns {opentelemetry.proto.logs.v1.ResourceLogs} ResourceLogs\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    ResourceLogs.decode = function decode(reader, length) {\n                        if (!(reader instanceof $Reader))\n                            reader = $Reader.create(reader);\n                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.opentelemetry.proto.logs.v1.ResourceLogs();\n                        while (reader.pos < end) {\n                            var tag = reader.uint32();\n                            switch (tag >>> 3) {\n                                case 1: {\n                                    message.resource = $root.opentelemetry.proto.resource.v1.Resource.decode(reader, reader.uint32());\n                                    break;\n                                }\n                                case 2: {\n                                    if (!(message.scopeLogs && message.scopeLogs.length))\n                                        message.scopeLogs = [];\n                                    message.scopeLogs.push($root.opentelemetry.proto.logs.v1.ScopeLogs.decode(reader, reader.uint32()));\n                                    break;\n                                }\n                                case 3: {\n                                    message.schemaUrl = reader.string();\n                                    break;\n                                }\n                                default:\n                                    reader.skipType(tag & 7);\n                                    break;\n                            }\n                        }\n                        return message;\n                    };\n                    /**\n                     * Decodes a ResourceLogs message from the specified reader or buffer, length delimited.\n                     * @function decodeDelimited\n                     * @memberof opentelemetry.proto.logs.v1.ResourceLogs\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @returns {opentelemetry.proto.logs.v1.ResourceLogs} ResourceLogs\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    ResourceLogs.decodeDelimited = function decodeDelimited(reader) {\n                        if (!(reader instanceof $Reader))\n                            reader = new $Reader(reader);\n                        return this.decode(reader, reader.uint32());\n                    };\n                    /**\n                     * Verifies a ResourceLogs message.\n                     * @function verify\n                     * @memberof opentelemetry.proto.logs.v1.ResourceLogs\n                     * @static\n                     * @param {Object.<string,*>} message Plain object to verify\n                     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                     */\n                    ResourceLogs.verify = function verify(message) {\n                        if (typeof message !== \"object\" || message === null)\n                            return \"object expected\";\n                        if (message.resource != null && message.hasOwnProperty(\"resource\")) {\n                            var error = $root.opentelemetry.proto.resource.v1.Resource.verify(message.resource);\n                            if (error)\n                                return \"resource.\" + error;\n                        }\n                        if (message.scopeLogs != null && message.hasOwnProperty(\"scopeLogs\")) {\n                            if (!Array.isArray(message.scopeLogs))\n                                return \"scopeLogs: array expected\";\n                            for (var i = 0; i < message.scopeLogs.length; ++i) {\n                                var error = $root.opentelemetry.proto.logs.v1.ScopeLogs.verify(message.scopeLogs[i]);\n                                if (error)\n                                    return \"scopeLogs.\" + error;\n                            }\n                        }\n                        if (message.schemaUrl != null && message.hasOwnProperty(\"schemaUrl\"))\n                            if (!$util.isString(message.schemaUrl))\n                                return \"schemaUrl: string expected\";\n                        return null;\n                    };\n                    /**\n                     * Creates a ResourceLogs message from a plain object. Also converts values to their respective internal types.\n                     * @function fromObject\n                     * @memberof opentelemetry.proto.logs.v1.ResourceLogs\n                     * @static\n                     * @param {Object.<string,*>} object Plain object\n                     * @returns {opentelemetry.proto.logs.v1.ResourceLogs} ResourceLogs\n                     */\n                    ResourceLogs.fromObject = function fromObject(object) {\n                        if (object instanceof $root.opentelemetry.proto.logs.v1.ResourceLogs)\n                            return object;\n                        var message = new $root.opentelemetry.proto.logs.v1.ResourceLogs();\n                        if (object.resource != null) {\n                            if (typeof object.resource !== \"object\")\n                                throw TypeError(\".opentelemetry.proto.logs.v1.ResourceLogs.resource: object expected\");\n                            message.resource = $root.opentelemetry.proto.resource.v1.Resource.fromObject(object.resource);\n                        }\n                        if (object.scopeLogs) {\n                            if (!Array.isArray(object.scopeLogs))\n                                throw TypeError(\".opentelemetry.proto.logs.v1.ResourceLogs.scopeLogs: array expected\");\n                            message.scopeLogs = [];\n                            for (var i = 0; i < object.scopeLogs.length; ++i) {\n                                if (typeof object.scopeLogs[i] !== \"object\")\n                                    throw TypeError(\".opentelemetry.proto.logs.v1.ResourceLogs.scopeLogs: object expected\");\n                                message.scopeLogs[i] = $root.opentelemetry.proto.logs.v1.ScopeLogs.fromObject(object.scopeLogs[i]);\n                            }\n                        }\n                        if (object.schemaUrl != null)\n                            message.schemaUrl = String(object.schemaUrl);\n                        return message;\n                    };\n                    /**\n                     * Creates a plain object from a ResourceLogs message. Also converts values to other types if specified.\n                     * @function toObject\n                     * @memberof opentelemetry.proto.logs.v1.ResourceLogs\n                     * @static\n                     * @param {opentelemetry.proto.logs.v1.ResourceLogs} message ResourceLogs\n                     * @param {$protobuf.IConversionOptions} [options] Conversion options\n                     * @returns {Object.<string,*>} Plain object\n                     */\n                    ResourceLogs.toObject = function toObject(message, options) {\n                        if (!options)\n                            options = {};\n                        var object = {};\n                        if (options.arrays || options.defaults)\n                            object.scopeLogs = [];\n                        if (options.defaults) {\n                            object.resource = null;\n                            object.schemaUrl = \"\";\n                        }\n                        if (message.resource != null && message.hasOwnProperty(\"resource\"))\n                            object.resource = $root.opentelemetry.proto.resource.v1.Resource.toObject(message.resource, options);\n                        if (message.scopeLogs && message.scopeLogs.length) {\n                            object.scopeLogs = [];\n                            for (var j = 0; j < message.scopeLogs.length; ++j)\n                                object.scopeLogs[j] = $root.opentelemetry.proto.logs.v1.ScopeLogs.toObject(message.scopeLogs[j], options);\n                        }\n                        if (message.schemaUrl != null && message.hasOwnProperty(\"schemaUrl\"))\n                            object.schemaUrl = message.schemaUrl;\n                        return object;\n                    };\n                    /**\n                     * Converts this ResourceLogs to JSON.\n                     * @function toJSON\n                     * @memberof opentelemetry.proto.logs.v1.ResourceLogs\n                     * @instance\n                     * @returns {Object.<string,*>} JSON object\n                     */\n                    ResourceLogs.prototype.toJSON = function toJSON() {\n                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                    };\n                    /**\n                     * Gets the default type url for ResourceLogs\n                     * @function getTypeUrl\n                     * @memberof opentelemetry.proto.logs.v1.ResourceLogs\n                     * @static\n                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n                     * @returns {string} The default type url\n                     */\n                    ResourceLogs.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                        if (typeUrlPrefix === undefined) {\n                            typeUrlPrefix = \"type.googleapis.com\";\n                        }\n                        return typeUrlPrefix + \"/opentelemetry.proto.logs.v1.ResourceLogs\";\n                    };\n                    return ResourceLogs;\n                })();\n                v1.ScopeLogs = (function () {\n                    /**\n                     * Properties of a ScopeLogs.\n                     * @memberof opentelemetry.proto.logs.v1\n                     * @interface IScopeLogs\n                     * @property {opentelemetry.proto.common.v1.IInstrumentationScope|null} [scope] ScopeLogs scope\n                     * @property {Array.<opentelemetry.proto.logs.v1.ILogRecord>|null} [logRecords] ScopeLogs logRecords\n                     * @property {string|null} [schemaUrl] ScopeLogs schemaUrl\n                     */\n                    /**\n                     * Constructs a new ScopeLogs.\n                     * @memberof opentelemetry.proto.logs.v1\n                     * @classdesc Represents a ScopeLogs.\n                     * @implements IScopeLogs\n                     * @constructor\n                     * @param {opentelemetry.proto.logs.v1.IScopeLogs=} [properties] Properties to set\n                     */\n                    function ScopeLogs(properties) {\n                        this.logRecords = [];\n                        if (properties)\n                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                                if (properties[keys[i]] != null)\n                                    this[keys[i]] = properties[keys[i]];\n                    }\n                    /**\n                     * ScopeLogs scope.\n                     * @member {opentelemetry.proto.common.v1.IInstrumentationScope|null|undefined} scope\n                     * @memberof opentelemetry.proto.logs.v1.ScopeLogs\n                     * @instance\n                     */\n                    ScopeLogs.prototype.scope = null;\n                    /**\n                     * ScopeLogs logRecords.\n                     * @member {Array.<opentelemetry.proto.logs.v1.ILogRecord>} logRecords\n                     * @memberof opentelemetry.proto.logs.v1.ScopeLogs\n                     * @instance\n                     */\n                    ScopeLogs.prototype.logRecords = $util.emptyArray;\n                    /**\n                     * ScopeLogs schemaUrl.\n                     * @member {string|null|undefined} schemaUrl\n                     * @memberof opentelemetry.proto.logs.v1.ScopeLogs\n                     * @instance\n                     */\n                    ScopeLogs.prototype.schemaUrl = null;\n                    /**\n                     * Creates a new ScopeLogs instance using the specified properties.\n                     * @function create\n                     * @memberof opentelemetry.proto.logs.v1.ScopeLogs\n                     * @static\n                     * @param {opentelemetry.proto.logs.v1.IScopeLogs=} [properties] Properties to set\n                     * @returns {opentelemetry.proto.logs.v1.ScopeLogs} ScopeLogs instance\n                     */\n                    ScopeLogs.create = function create(properties) {\n                        return new ScopeLogs(properties);\n                    };\n                    /**\n                     * Encodes the specified ScopeLogs message. Does not implicitly {@link opentelemetry.proto.logs.v1.ScopeLogs.verify|verify} messages.\n                     * @function encode\n                     * @memberof opentelemetry.proto.logs.v1.ScopeLogs\n                     * @static\n                     * @param {opentelemetry.proto.logs.v1.IScopeLogs} message ScopeLogs message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    ScopeLogs.encode = function encode(message, writer) {\n                        if (!writer)\n                            writer = $Writer.create();\n                        if (message.scope != null && Object.hasOwnProperty.call(message, \"scope\"))\n                            $root.opentelemetry.proto.common.v1.InstrumentationScope.encode(message.scope, writer.uint32(/* id 1, wireType 2 =*/ 10).fork()).ldelim();\n                        if (message.logRecords != null && message.logRecords.length)\n                            for (var i = 0; i < message.logRecords.length; ++i)\n                                $root.opentelemetry.proto.logs.v1.LogRecord.encode(message.logRecords[i], writer.uint32(/* id 2, wireType 2 =*/ 18).fork()).ldelim();\n                        if (message.schemaUrl != null && Object.hasOwnProperty.call(message, \"schemaUrl\"))\n                            writer.uint32(/* id 3, wireType 2 =*/ 26).string(message.schemaUrl);\n                        return writer;\n                    };\n                    /**\n                     * Encodes the specified ScopeLogs message, length delimited. Does not implicitly {@link opentelemetry.proto.logs.v1.ScopeLogs.verify|verify} messages.\n                     * @function encodeDelimited\n                     * @memberof opentelemetry.proto.logs.v1.ScopeLogs\n                     * @static\n                     * @param {opentelemetry.proto.logs.v1.IScopeLogs} message ScopeLogs message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    ScopeLogs.encodeDelimited = function encodeDelimited(message, writer) {\n                        return this.encode(message, writer).ldelim();\n                    };\n                    /**\n                     * Decodes a ScopeLogs message from the specified reader or buffer.\n                     * @function decode\n                     * @memberof opentelemetry.proto.logs.v1.ScopeLogs\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @param {number} [length] Message length if known beforehand\n                     * @returns {opentelemetry.proto.logs.v1.ScopeLogs} ScopeLogs\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    ScopeLogs.decode = function decode(reader, length) {\n                        if (!(reader instanceof $Reader))\n                            reader = $Reader.create(reader);\n                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.opentelemetry.proto.logs.v1.ScopeLogs();\n                        while (reader.pos < end) {\n                            var tag = reader.uint32();\n                            switch (tag >>> 3) {\n                                case 1: {\n                                    message.scope = $root.opentelemetry.proto.common.v1.InstrumentationScope.decode(reader, reader.uint32());\n                                    break;\n                                }\n                                case 2: {\n                                    if (!(message.logRecords && message.logRecords.length))\n                                        message.logRecords = [];\n                                    message.logRecords.push($root.opentelemetry.proto.logs.v1.LogRecord.decode(reader, reader.uint32()));\n                                    break;\n                                }\n                                case 3: {\n                                    message.schemaUrl = reader.string();\n                                    break;\n                                }\n                                default:\n                                    reader.skipType(tag & 7);\n                                    break;\n                            }\n                        }\n                        return message;\n                    };\n                    /**\n                     * Decodes a ScopeLogs message from the specified reader or buffer, length delimited.\n                     * @function decodeDelimited\n                     * @memberof opentelemetry.proto.logs.v1.ScopeLogs\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @returns {opentelemetry.proto.logs.v1.ScopeLogs} ScopeLogs\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    ScopeLogs.decodeDelimited = function decodeDelimited(reader) {\n                        if (!(reader instanceof $Reader))\n                            reader = new $Reader(reader);\n                        return this.decode(reader, reader.uint32());\n                    };\n                    /**\n                     * Verifies a ScopeLogs message.\n                     * @function verify\n                     * @memberof opentelemetry.proto.logs.v1.ScopeLogs\n                     * @static\n                     * @param {Object.<string,*>} message Plain object to verify\n                     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                     */\n                    ScopeLogs.verify = function verify(message) {\n                        if (typeof message !== \"object\" || message === null)\n                            return \"object expected\";\n                        if (message.scope != null && message.hasOwnProperty(\"scope\")) {\n                            var error = $root.opentelemetry.proto.common.v1.InstrumentationScope.verify(message.scope);\n                            if (error)\n                                return \"scope.\" + error;\n                        }\n                        if (message.logRecords != null && message.hasOwnProperty(\"logRecords\")) {\n                            if (!Array.isArray(message.logRecords))\n                                return \"logRecords: array expected\";\n                            for (var i = 0; i < message.logRecords.length; ++i) {\n                                var error = $root.opentelemetry.proto.logs.v1.LogRecord.verify(message.logRecords[i]);\n                                if (error)\n                                    return \"logRecords.\" + error;\n                            }\n                        }\n                        if (message.schemaUrl != null && message.hasOwnProperty(\"schemaUrl\"))\n                            if (!$util.isString(message.schemaUrl))\n                                return \"schemaUrl: string expected\";\n                        return null;\n                    };\n                    /**\n                     * Creates a ScopeLogs message from a plain object. Also converts values to their respective internal types.\n                     * @function fromObject\n                     * @memberof opentelemetry.proto.logs.v1.ScopeLogs\n                     * @static\n                     * @param {Object.<string,*>} object Plain object\n                     * @returns {opentelemetry.proto.logs.v1.ScopeLogs} ScopeLogs\n                     */\n                    ScopeLogs.fromObject = function fromObject(object) {\n                        if (object instanceof $root.opentelemetry.proto.logs.v1.ScopeLogs)\n                            return object;\n                        var message = new $root.opentelemetry.proto.logs.v1.ScopeLogs();\n                        if (object.scope != null) {\n                            if (typeof object.scope !== \"object\")\n                                throw TypeError(\".opentelemetry.proto.logs.v1.ScopeLogs.scope: object expected\");\n                            message.scope = $root.opentelemetry.proto.common.v1.InstrumentationScope.fromObject(object.scope);\n                        }\n                        if (object.logRecords) {\n                            if (!Array.isArray(object.logRecords))\n                                throw TypeError(\".opentelemetry.proto.logs.v1.ScopeLogs.logRecords: array expected\");\n                            message.logRecords = [];\n                            for (var i = 0; i < object.logRecords.length; ++i) {\n                                if (typeof object.logRecords[i] !== \"object\")\n                                    throw TypeError(\".opentelemetry.proto.logs.v1.ScopeLogs.logRecords: object expected\");\n                                message.logRecords[i] = $root.opentelemetry.proto.logs.v1.LogRecord.fromObject(object.logRecords[i]);\n                            }\n                        }\n                        if (object.schemaUrl != null)\n                            message.schemaUrl = String(object.schemaUrl);\n                        return message;\n                    };\n                    /**\n                     * Creates a plain object from a ScopeLogs message. Also converts values to other types if specified.\n                     * @function toObject\n                     * @memberof opentelemetry.proto.logs.v1.ScopeLogs\n                     * @static\n                     * @param {opentelemetry.proto.logs.v1.ScopeLogs} message ScopeLogs\n                     * @param {$protobuf.IConversionOptions} [options] Conversion options\n                     * @returns {Object.<string,*>} Plain object\n                     */\n                    ScopeLogs.toObject = function toObject(message, options) {\n                        if (!options)\n                            options = {};\n                        var object = {};\n                        if (options.arrays || options.defaults)\n                            object.logRecords = [];\n                        if (options.defaults) {\n                            object.scope = null;\n                            object.schemaUrl = \"\";\n                        }\n                        if (message.scope != null && message.hasOwnProperty(\"scope\"))\n                            object.scope = $root.opentelemetry.proto.common.v1.InstrumentationScope.toObject(message.scope, options);\n                        if (message.logRecords && message.logRecords.length) {\n                            object.logRecords = [];\n                            for (var j = 0; j < message.logRecords.length; ++j)\n                                object.logRecords[j] = $root.opentelemetry.proto.logs.v1.LogRecord.toObject(message.logRecords[j], options);\n                        }\n                        if (message.schemaUrl != null && message.hasOwnProperty(\"schemaUrl\"))\n                            object.schemaUrl = message.schemaUrl;\n                        return object;\n                    };\n                    /**\n                     * Converts this ScopeLogs to JSON.\n                     * @function toJSON\n                     * @memberof opentelemetry.proto.logs.v1.ScopeLogs\n                     * @instance\n                     * @returns {Object.<string,*>} JSON object\n                     */\n                    ScopeLogs.prototype.toJSON = function toJSON() {\n                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                    };\n                    /**\n                     * Gets the default type url for ScopeLogs\n                     * @function getTypeUrl\n                     * @memberof opentelemetry.proto.logs.v1.ScopeLogs\n                     * @static\n                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n                     * @returns {string} The default type url\n                     */\n                    ScopeLogs.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                        if (typeUrlPrefix === undefined) {\n                            typeUrlPrefix = \"type.googleapis.com\";\n                        }\n                        return typeUrlPrefix + \"/opentelemetry.proto.logs.v1.ScopeLogs\";\n                    };\n                    return ScopeLogs;\n                })();\n                /**\n                 * SeverityNumber enum.\n                 * @name opentelemetry.proto.logs.v1.SeverityNumber\n                 * @enum {number}\n                 * @property {number} SEVERITY_NUMBER_UNSPECIFIED=0 SEVERITY_NUMBER_UNSPECIFIED value\n                 * @property {number} SEVERITY_NUMBER_TRACE=1 SEVERITY_NUMBER_TRACE value\n                 * @property {number} SEVERITY_NUMBER_TRACE2=2 SEVERITY_NUMBER_TRACE2 value\n                 * @property {number} SEVERITY_NUMBER_TRACE3=3 SEVERITY_NUMBER_TRACE3 value\n                 * @property {number} SEVERITY_NUMBER_TRACE4=4 SEVERITY_NUMBER_TRACE4 value\n                 * @property {number} SEVERITY_NUMBER_DEBUG=5 SEVERITY_NUMBER_DEBUG value\n                 * @property {number} SEVERITY_NUMBER_DEBUG2=6 SEVERITY_NUMBER_DEBUG2 value\n                 * @property {number} SEVERITY_NUMBER_DEBUG3=7 SEVERITY_NUMBER_DEBUG3 value\n                 * @property {number} SEVERITY_NUMBER_DEBUG4=8 SEVERITY_NUMBER_DEBUG4 value\n                 * @property {number} SEVERITY_NUMBER_INFO=9 SEVERITY_NUMBER_INFO value\n                 * @property {number} SEVERITY_NUMBER_INFO2=10 SEVERITY_NUMBER_INFO2 value\n                 * @property {number} SEVERITY_NUMBER_INFO3=11 SEVERITY_NUMBER_INFO3 value\n                 * @property {number} SEVERITY_NUMBER_INFO4=12 SEVERITY_NUMBER_INFO4 value\n                 * @property {number} SEVERITY_NUMBER_WARN=13 SEVERITY_NUMBER_WARN value\n                 * @property {number} SEVERITY_NUMBER_WARN2=14 SEVERITY_NUMBER_WARN2 value\n                 * @property {number} SEVERITY_NUMBER_WARN3=15 SEVERITY_NUMBER_WARN3 value\n                 * @property {number} SEVERITY_NUMBER_WARN4=16 SEVERITY_NUMBER_WARN4 value\n                 * @property {number} SEVERITY_NUMBER_ERROR=17 SEVERITY_NUMBER_ERROR value\n                 * @property {number} SEVERITY_NUMBER_ERROR2=18 SEVERITY_NUMBER_ERROR2 value\n                 * @property {number} SEVERITY_NUMBER_ERROR3=19 SEVERITY_NUMBER_ERROR3 value\n                 * @property {number} SEVERITY_NUMBER_ERROR4=20 SEVERITY_NUMBER_ERROR4 value\n                 * @property {number} SEVERITY_NUMBER_FATAL=21 SEVERITY_NUMBER_FATAL value\n                 * @property {number} SEVERITY_NUMBER_FATAL2=22 SEVERITY_NUMBER_FATAL2 value\n                 * @property {number} SEVERITY_NUMBER_FATAL3=23 SEVERITY_NUMBER_FATAL3 value\n                 * @property {number} SEVERITY_NUMBER_FATAL4=24 SEVERITY_NUMBER_FATAL4 value\n                 */\n                v1.SeverityNumber = (function () {\n                    var valuesById = {}, values = Object.create(valuesById);\n                    values[valuesById[0] = \"SEVERITY_NUMBER_UNSPECIFIED\"] = 0;\n                    values[valuesById[1] = \"SEVERITY_NUMBER_TRACE\"] = 1;\n                    values[valuesById[2] = \"SEVERITY_NUMBER_TRACE2\"] = 2;\n                    values[valuesById[3] = \"SEVERITY_NUMBER_TRACE3\"] = 3;\n                    values[valuesById[4] = \"SEVERITY_NUMBER_TRACE4\"] = 4;\n                    values[valuesById[5] = \"SEVERITY_NUMBER_DEBUG\"] = 5;\n                    values[valuesById[6] = \"SEVERITY_NUMBER_DEBUG2\"] = 6;\n                    values[valuesById[7] = \"SEVERITY_NUMBER_DEBUG3\"] = 7;\n                    values[valuesById[8] = \"SEVERITY_NUMBER_DEBUG4\"] = 8;\n                    values[valuesById[9] = \"SEVERITY_NUMBER_INFO\"] = 9;\n                    values[valuesById[10] = \"SEVERITY_NUMBER_INFO2\"] = 10;\n                    values[valuesById[11] = \"SEVERITY_NUMBER_INFO3\"] = 11;\n                    values[valuesById[12] = \"SEVERITY_NUMBER_INFO4\"] = 12;\n                    values[valuesById[13] = \"SEVERITY_NUMBER_WARN\"] = 13;\n                    values[valuesById[14] = \"SEVERITY_NUMBER_WARN2\"] = 14;\n                    values[valuesById[15] = \"SEVERITY_NUMBER_WARN3\"] = 15;\n                    values[valuesById[16] = \"SEVERITY_NUMBER_WARN4\"] = 16;\n                    values[valuesById[17] = \"SEVERITY_NUMBER_ERROR\"] = 17;\n                    values[valuesById[18] = \"SEVERITY_NUMBER_ERROR2\"] = 18;\n                    values[valuesById[19] = \"SEVERITY_NUMBER_ERROR3\"] = 19;\n                    values[valuesById[20] = \"SEVERITY_NUMBER_ERROR4\"] = 20;\n                    values[valuesById[21] = \"SEVERITY_NUMBER_FATAL\"] = 21;\n                    values[valuesById[22] = \"SEVERITY_NUMBER_FATAL2\"] = 22;\n                    values[valuesById[23] = \"SEVERITY_NUMBER_FATAL3\"] = 23;\n                    values[valuesById[24] = \"SEVERITY_NUMBER_FATAL4\"] = 24;\n                    return values;\n                })();\n                /**\n                 * LogRecordFlags enum.\n                 * @name opentelemetry.proto.logs.v1.LogRecordFlags\n                 * @enum {number}\n                 * @property {number} LOG_RECORD_FLAGS_DO_NOT_USE=0 LOG_RECORD_FLAGS_DO_NOT_USE value\n                 * @property {number} LOG_RECORD_FLAGS_TRACE_FLAGS_MASK=255 LOG_RECORD_FLAGS_TRACE_FLAGS_MASK value\n                 */\n                v1.LogRecordFlags = (function () {\n                    var valuesById = {}, values = Object.create(valuesById);\n                    values[valuesById[0] = \"LOG_RECORD_FLAGS_DO_NOT_USE\"] = 0;\n                    values[valuesById[255] = \"LOG_RECORD_FLAGS_TRACE_FLAGS_MASK\"] = 255;\n                    return values;\n                })();\n                v1.LogRecord = (function () {\n                    /**\n                     * Properties of a LogRecord.\n                     * @memberof opentelemetry.proto.logs.v1\n                     * @interface ILogRecord\n                     * @property {number|Long|null} [timeUnixNano] LogRecord timeUnixNano\n                     * @property {number|Long|null} [observedTimeUnixNano] LogRecord observedTimeUnixNano\n                     * @property {opentelemetry.proto.logs.v1.SeverityNumber|null} [severityNumber] LogRecord severityNumber\n                     * @property {string|null} [severityText] LogRecord severityText\n                     * @property {opentelemetry.proto.common.v1.IAnyValue|null} [body] LogRecord body\n                     * @property {Array.<opentelemetry.proto.common.v1.IKeyValue>|null} [attributes] LogRecord attributes\n                     * @property {number|null} [droppedAttributesCount] LogRecord droppedAttributesCount\n                     * @property {number|null} [flags] LogRecord flags\n                     * @property {Uint8Array|null} [traceId] LogRecord traceId\n                     * @property {Uint8Array|null} [spanId] LogRecord spanId\n                     */\n                    /**\n                     * Constructs a new LogRecord.\n                     * @memberof opentelemetry.proto.logs.v1\n                     * @classdesc Represents a LogRecord.\n                     * @implements ILogRecord\n                     * @constructor\n                     * @param {opentelemetry.proto.logs.v1.ILogRecord=} [properties] Properties to set\n                     */\n                    function LogRecord(properties) {\n                        this.attributes = [];\n                        if (properties)\n                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                                if (properties[keys[i]] != null)\n                                    this[keys[i]] = properties[keys[i]];\n                    }\n                    /**\n                     * LogRecord timeUnixNano.\n                     * @member {number|Long|null|undefined} timeUnixNano\n                     * @memberof opentelemetry.proto.logs.v1.LogRecord\n                     * @instance\n                     */\n                    LogRecord.prototype.timeUnixNano = null;\n                    /**\n                     * LogRecord observedTimeUnixNano.\n                     * @member {number|Long|null|undefined} observedTimeUnixNano\n                     * @memberof opentelemetry.proto.logs.v1.LogRecord\n                     * @instance\n                     */\n                    LogRecord.prototype.observedTimeUnixNano = null;\n                    /**\n                     * LogRecord severityNumber.\n                     * @member {opentelemetry.proto.logs.v1.SeverityNumber|null|undefined} severityNumber\n                     * @memberof opentelemetry.proto.logs.v1.LogRecord\n                     * @instance\n                     */\n                    LogRecord.prototype.severityNumber = null;\n                    /**\n                     * LogRecord severityText.\n                     * @member {string|null|undefined} severityText\n                     * @memberof opentelemetry.proto.logs.v1.LogRecord\n                     * @instance\n                     */\n                    LogRecord.prototype.severityText = null;\n                    /**\n                     * LogRecord body.\n                     * @member {opentelemetry.proto.common.v1.IAnyValue|null|undefined} body\n                     * @memberof opentelemetry.proto.logs.v1.LogRecord\n                     * @instance\n                     */\n                    LogRecord.prototype.body = null;\n                    /**\n                     * LogRecord attributes.\n                     * @member {Array.<opentelemetry.proto.common.v1.IKeyValue>} attributes\n                     * @memberof opentelemetry.proto.logs.v1.LogRecord\n                     * @instance\n                     */\n                    LogRecord.prototype.attributes = $util.emptyArray;\n                    /**\n                     * LogRecord droppedAttributesCount.\n                     * @member {number|null|undefined} droppedAttributesCount\n                     * @memberof opentelemetry.proto.logs.v1.LogRecord\n                     * @instance\n                     */\n                    LogRecord.prototype.droppedAttributesCount = null;\n                    /**\n                     * LogRecord flags.\n                     * @member {number|null|undefined} flags\n                     * @memberof opentelemetry.proto.logs.v1.LogRecord\n                     * @instance\n                     */\n                    LogRecord.prototype.flags = null;\n                    /**\n                     * LogRecord traceId.\n                     * @member {Uint8Array|null|undefined} traceId\n                     * @memberof opentelemetry.proto.logs.v1.LogRecord\n                     * @instance\n                     */\n                    LogRecord.prototype.traceId = null;\n                    /**\n                     * LogRecord spanId.\n                     * @member {Uint8Array|null|undefined} spanId\n                     * @memberof opentelemetry.proto.logs.v1.LogRecord\n                     * @instance\n                     */\n                    LogRecord.prototype.spanId = null;\n                    /**\n                     * Creates a new LogRecord instance using the specified properties.\n                     * @function create\n                     * @memberof opentelemetry.proto.logs.v1.LogRecord\n                     * @static\n                     * @param {opentelemetry.proto.logs.v1.ILogRecord=} [properties] Properties to set\n                     * @returns {opentelemetry.proto.logs.v1.LogRecord} LogRecord instance\n                     */\n                    LogRecord.create = function create(properties) {\n                        return new LogRecord(properties);\n                    };\n                    /**\n                     * Encodes the specified LogRecord message. Does not implicitly {@link opentelemetry.proto.logs.v1.LogRecord.verify|verify} messages.\n                     * @function encode\n                     * @memberof opentelemetry.proto.logs.v1.LogRecord\n                     * @static\n                     * @param {opentelemetry.proto.logs.v1.ILogRecord} message LogRecord message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    LogRecord.encode = function encode(message, writer) {\n                        if (!writer)\n                            writer = $Writer.create();\n                        if (message.timeUnixNano != null && Object.hasOwnProperty.call(message, \"timeUnixNano\"))\n                            writer.uint32(/* id 1, wireType 1 =*/ 9).fixed64(message.timeUnixNano);\n                        if (message.severityNumber != null && Object.hasOwnProperty.call(message, \"severityNumber\"))\n                            writer.uint32(/* id 2, wireType 0 =*/ 16).int32(message.severityNumber);\n                        if (message.severityText != null && Object.hasOwnProperty.call(message, \"severityText\"))\n                            writer.uint32(/* id 3, wireType 2 =*/ 26).string(message.severityText);\n                        if (message.body != null && Object.hasOwnProperty.call(message, \"body\"))\n                            $root.opentelemetry.proto.common.v1.AnyValue.encode(message.body, writer.uint32(/* id 5, wireType 2 =*/ 42).fork()).ldelim();\n                        if (message.attributes != null && message.attributes.length)\n                            for (var i = 0; i < message.attributes.length; ++i)\n                                $root.opentelemetry.proto.common.v1.KeyValue.encode(message.attributes[i], writer.uint32(/* id 6, wireType 2 =*/ 50).fork()).ldelim();\n                        if (message.droppedAttributesCount != null && Object.hasOwnProperty.call(message, \"droppedAttributesCount\"))\n                            writer.uint32(/* id 7, wireType 0 =*/ 56).uint32(message.droppedAttributesCount);\n                        if (message.flags != null && Object.hasOwnProperty.call(message, \"flags\"))\n                            writer.uint32(/* id 8, wireType 5 =*/ 69).fixed32(message.flags);\n                        if (message.traceId != null && Object.hasOwnProperty.call(message, \"traceId\"))\n                            writer.uint32(/* id 9, wireType 2 =*/ 74).bytes(message.traceId);\n                        if (message.spanId != null && Object.hasOwnProperty.call(message, \"spanId\"))\n                            writer.uint32(/* id 10, wireType 2 =*/ 82).bytes(message.spanId);\n                        if (message.observedTimeUnixNano != null && Object.hasOwnProperty.call(message, \"observedTimeUnixNano\"))\n                            writer.uint32(/* id 11, wireType 1 =*/ 89).fixed64(message.observedTimeUnixNano);\n                        return writer;\n                    };\n                    /**\n                     * Encodes the specified LogRecord message, length delimited. Does not implicitly {@link opentelemetry.proto.logs.v1.LogRecord.verify|verify} messages.\n                     * @function encodeDelimited\n                     * @memberof opentelemetry.proto.logs.v1.LogRecord\n                     * @static\n                     * @param {opentelemetry.proto.logs.v1.ILogRecord} message LogRecord message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    LogRecord.encodeDelimited = function encodeDelimited(message, writer) {\n                        return this.encode(message, writer).ldelim();\n                    };\n                    /**\n                     * Decodes a LogRecord message from the specified reader or buffer.\n                     * @function decode\n                     * @memberof opentelemetry.proto.logs.v1.LogRecord\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @param {number} [length] Message length if known beforehand\n                     * @returns {opentelemetry.proto.logs.v1.LogRecord} LogRecord\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    LogRecord.decode = function decode(reader, length) {\n                        if (!(reader instanceof $Reader))\n                            reader = $Reader.create(reader);\n                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.opentelemetry.proto.logs.v1.LogRecord();\n                        while (reader.pos < end) {\n                            var tag = reader.uint32();\n                            switch (tag >>> 3) {\n                                case 1: {\n                                    message.timeUnixNano = reader.fixed64();\n                                    break;\n                                }\n                                case 11: {\n                                    message.observedTimeUnixNano = reader.fixed64();\n                                    break;\n                                }\n                                case 2: {\n                                    message.severityNumber = reader.int32();\n                                    break;\n                                }\n                                case 3: {\n                                    message.severityText = reader.string();\n                                    break;\n                                }\n                                case 5: {\n                                    message.body = $root.opentelemetry.proto.common.v1.AnyValue.decode(reader, reader.uint32());\n                                    break;\n                                }\n                                case 6: {\n                                    if (!(message.attributes && message.attributes.length))\n                                        message.attributes = [];\n                                    message.attributes.push($root.opentelemetry.proto.common.v1.KeyValue.decode(reader, reader.uint32()));\n                                    break;\n                                }\n                                case 7: {\n                                    message.droppedAttributesCount = reader.uint32();\n                                    break;\n                                }\n                                case 8: {\n                                    message.flags = reader.fixed32();\n                                    break;\n                                }\n                                case 9: {\n                                    message.traceId = reader.bytes();\n                                    break;\n                                }\n                                case 10: {\n                                    message.spanId = reader.bytes();\n                                    break;\n                                }\n                                default:\n                                    reader.skipType(tag & 7);\n                                    break;\n                            }\n                        }\n                        return message;\n                    };\n                    /**\n                     * Decodes a LogRecord message from the specified reader or buffer, length delimited.\n                     * @function decodeDelimited\n                     * @memberof opentelemetry.proto.logs.v1.LogRecord\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @returns {opentelemetry.proto.logs.v1.LogRecord} LogRecord\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    LogRecord.decodeDelimited = function decodeDelimited(reader) {\n                        if (!(reader instanceof $Reader))\n                            reader = new $Reader(reader);\n                        return this.decode(reader, reader.uint32());\n                    };\n                    /**\n                     * Verifies a LogRecord message.\n                     * @function verify\n                     * @memberof opentelemetry.proto.logs.v1.LogRecord\n                     * @static\n                     * @param {Object.<string,*>} message Plain object to verify\n                     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                     */\n                    LogRecord.verify = function verify(message) {\n                        if (typeof message !== \"object\" || message === null)\n                            return \"object expected\";\n                        if (message.timeUnixNano != null && message.hasOwnProperty(\"timeUnixNano\"))\n                            if (!$util.isInteger(message.timeUnixNano) && !(message.timeUnixNano && $util.isInteger(message.timeUnixNano.low) && $util.isInteger(message.timeUnixNano.high)))\n                                return \"timeUnixNano: integer|Long expected\";\n                        if (message.observedTimeUnixNano != null && message.hasOwnProperty(\"observedTimeUnixNano\"))\n                            if (!$util.isInteger(message.observedTimeUnixNano) && !(message.observedTimeUnixNano && $util.isInteger(message.observedTimeUnixNano.low) && $util.isInteger(message.observedTimeUnixNano.high)))\n                                return \"observedTimeUnixNano: integer|Long expected\";\n                        if (message.severityNumber != null && message.hasOwnProperty(\"severityNumber\"))\n                            switch (message.severityNumber) {\n                                default:\n                                    return \"severityNumber: enum value expected\";\n                                case 0:\n                                case 1:\n                                case 2:\n                                case 3:\n                                case 4:\n                                case 5:\n                                case 6:\n                                case 7:\n                                case 8:\n                                case 9:\n                                case 10:\n                                case 11:\n                                case 12:\n                                case 13:\n                                case 14:\n                                case 15:\n                                case 16:\n                                case 17:\n                                case 18:\n                                case 19:\n                                case 20:\n                                case 21:\n                                case 22:\n                                case 23:\n                                case 24:\n                                    break;\n                            }\n                        if (message.severityText != null && message.hasOwnProperty(\"severityText\"))\n                            if (!$util.isString(message.severityText))\n                                return \"severityText: string expected\";\n                        if (message.body != null && message.hasOwnProperty(\"body\")) {\n                            var error = $root.opentelemetry.proto.common.v1.AnyValue.verify(message.body);\n                            if (error)\n                                return \"body.\" + error;\n                        }\n                        if (message.attributes != null && message.hasOwnProperty(\"attributes\")) {\n                            if (!Array.isArray(message.attributes))\n                                return \"attributes: array expected\";\n                            for (var i = 0; i < message.attributes.length; ++i) {\n                                var error = $root.opentelemetry.proto.common.v1.KeyValue.verify(message.attributes[i]);\n                                if (error)\n                                    return \"attributes.\" + error;\n                            }\n                        }\n                        if (message.droppedAttributesCount != null && message.hasOwnProperty(\"droppedAttributesCount\"))\n                            if (!$util.isInteger(message.droppedAttributesCount))\n                                return \"droppedAttributesCount: integer expected\";\n                        if (message.flags != null && message.hasOwnProperty(\"flags\"))\n                            if (!$util.isInteger(message.flags))\n                                return \"flags: integer expected\";\n                        if (message.traceId != null && message.hasOwnProperty(\"traceId\"))\n                            if (!(message.traceId && typeof message.traceId.length === \"number\" || $util.isString(message.traceId)))\n                                return \"traceId: buffer expected\";\n                        if (message.spanId != null && message.hasOwnProperty(\"spanId\"))\n                            if (!(message.spanId && typeof message.spanId.length === \"number\" || $util.isString(message.spanId)))\n                                return \"spanId: buffer expected\";\n                        return null;\n                    };\n                    /**\n                     * Creates a LogRecord message from a plain object. Also converts values to their respective internal types.\n                     * @function fromObject\n                     * @memberof opentelemetry.proto.logs.v1.LogRecord\n                     * @static\n                     * @param {Object.<string,*>} object Plain object\n                     * @returns {opentelemetry.proto.logs.v1.LogRecord} LogRecord\n                     */\n                    LogRecord.fromObject = function fromObject(object) {\n                        if (object instanceof $root.opentelemetry.proto.logs.v1.LogRecord)\n                            return object;\n                        var message = new $root.opentelemetry.proto.logs.v1.LogRecord();\n                        if (object.timeUnixNano != null)\n                            if ($util.Long)\n                                (message.timeUnixNano = $util.Long.fromValue(object.timeUnixNano)).unsigned = false;\n                            else if (typeof object.timeUnixNano === \"string\")\n                                message.timeUnixNano = parseInt(object.timeUnixNano, 10);\n                            else if (typeof object.timeUnixNano === \"number\")\n                                message.timeUnixNano = object.timeUnixNano;\n                            else if (typeof object.timeUnixNano === \"object\")\n                                message.timeUnixNano = new $util.LongBits(object.timeUnixNano.low >>> 0, object.timeUnixNano.high >>> 0).toNumber();\n                        if (object.observedTimeUnixNano != null)\n                            if ($util.Long)\n                                (message.observedTimeUnixNano = $util.Long.fromValue(object.observedTimeUnixNano)).unsigned = false;\n                            else if (typeof object.observedTimeUnixNano === \"string\")\n                                message.observedTimeUnixNano = parseInt(object.observedTimeUnixNano, 10);\n                            else if (typeof object.observedTimeUnixNano === \"number\")\n                                message.observedTimeUnixNano = object.observedTimeUnixNano;\n                            else if (typeof object.observedTimeUnixNano === \"object\")\n                                message.observedTimeUnixNano = new $util.LongBits(object.observedTimeUnixNano.low >>> 0, object.observedTimeUnixNano.high >>> 0).toNumber();\n                        switch (object.severityNumber) {\n                            default:\n                                if (typeof object.severityNumber === \"number\") {\n                                    message.severityNumber = object.severityNumber;\n                                    break;\n                                }\n                                break;\n                            case \"SEVERITY_NUMBER_UNSPECIFIED\":\n                            case 0:\n                                message.severityNumber = 0;\n                                break;\n                            case \"SEVERITY_NUMBER_TRACE\":\n                            case 1:\n                                message.severityNumber = 1;\n                                break;\n                            case \"SEVERITY_NUMBER_TRACE2\":\n                            case 2:\n                                message.severityNumber = 2;\n                                break;\n                            case \"SEVERITY_NUMBER_TRACE3\":\n                            case 3:\n                                message.severityNumber = 3;\n                                break;\n                            case \"SEVERITY_NUMBER_TRACE4\":\n                            case 4:\n                                message.severityNumber = 4;\n                                break;\n                            case \"SEVERITY_NUMBER_DEBUG\":\n                            case 5:\n                                message.severityNumber = 5;\n                                break;\n                            case \"SEVERITY_NUMBER_DEBUG2\":\n                            case 6:\n                                message.severityNumber = 6;\n                                break;\n                            case \"SEVERITY_NUMBER_DEBUG3\":\n                            case 7:\n                                message.severityNumber = 7;\n                                break;\n                            case \"SEVERITY_NUMBER_DEBUG4\":\n                            case 8:\n                                message.severityNumber = 8;\n                                break;\n                            case \"SEVERITY_NUMBER_INFO\":\n                            case 9:\n                                message.severityNumber = 9;\n                                break;\n                            case \"SEVERITY_NUMBER_INFO2\":\n                            case 10:\n                                message.severityNumber = 10;\n                                break;\n                            case \"SEVERITY_NUMBER_INFO3\":\n                            case 11:\n                                message.severityNumber = 11;\n                                break;\n                            case \"SEVERITY_NUMBER_INFO4\":\n                            case 12:\n                                message.severityNumber = 12;\n                                break;\n                            case \"SEVERITY_NUMBER_WARN\":\n                            case 13:\n                                message.severityNumber = 13;\n                                break;\n                            case \"SEVERITY_NUMBER_WARN2\":\n                            case 14:\n                                message.severityNumber = 14;\n                                break;\n                            case \"SEVERITY_NUMBER_WARN3\":\n                            case 15:\n                                message.severityNumber = 15;\n                                break;\n                            case \"SEVERITY_NUMBER_WARN4\":\n                            case 16:\n                                message.severityNumber = 16;\n                                break;\n                            case \"SEVERITY_NUMBER_ERROR\":\n                            case 17:\n                                message.severityNumber = 17;\n                                break;\n                            case \"SEVERITY_NUMBER_ERROR2\":\n                            case 18:\n                                message.severityNumber = 18;\n                                break;\n                            case \"SEVERITY_NUMBER_ERROR3\":\n                            case 19:\n                                message.severityNumber = 19;\n                                break;\n                            case \"SEVERITY_NUMBER_ERROR4\":\n                            case 20:\n                                message.severityNumber = 20;\n                                break;\n                            case \"SEVERITY_NUMBER_FATAL\":\n                            case 21:\n                                message.severityNumber = 21;\n                                break;\n                            case \"SEVERITY_NUMBER_FATAL2\":\n                            case 22:\n                                message.severityNumber = 22;\n                                break;\n                            case \"SEVERITY_NUMBER_FATAL3\":\n                            case 23:\n                                message.severityNumber = 23;\n                                break;\n                            case \"SEVERITY_NUMBER_FATAL4\":\n                            case 24:\n                                message.severityNumber = 24;\n                                break;\n                        }\n                        if (object.severityText != null)\n                            message.severityText = String(object.severityText);\n                        if (object.body != null) {\n                            if (typeof object.body !== \"object\")\n                                throw TypeError(\".opentelemetry.proto.logs.v1.LogRecord.body: object expected\");\n                            message.body = $root.opentelemetry.proto.common.v1.AnyValue.fromObject(object.body);\n                        }\n                        if (object.attributes) {\n                            if (!Array.isArray(object.attributes))\n                                throw TypeError(\".opentelemetry.proto.logs.v1.LogRecord.attributes: array expected\");\n                            message.attributes = [];\n                            for (var i = 0; i < object.attributes.length; ++i) {\n                                if (typeof object.attributes[i] !== \"object\")\n                                    throw TypeError(\".opentelemetry.proto.logs.v1.LogRecord.attributes: object expected\");\n                                message.attributes[i] = $root.opentelemetry.proto.common.v1.KeyValue.fromObject(object.attributes[i]);\n                            }\n                        }\n                        if (object.droppedAttributesCount != null)\n                            message.droppedAttributesCount = object.droppedAttributesCount >>> 0;\n                        if (object.flags != null)\n                            message.flags = object.flags >>> 0;\n                        if (object.traceId != null)\n                            if (typeof object.traceId === \"string\")\n                                $util.base64.decode(object.traceId, message.traceId = $util.newBuffer($util.base64.length(object.traceId)), 0);\n                            else if (object.traceId.length >= 0)\n                                message.traceId = object.traceId;\n                        if (object.spanId != null)\n                            if (typeof object.spanId === \"string\")\n                                $util.base64.decode(object.spanId, message.spanId = $util.newBuffer($util.base64.length(object.spanId)), 0);\n                            else if (object.spanId.length >= 0)\n                                message.spanId = object.spanId;\n                        return message;\n                    };\n                    /**\n                     * Creates a plain object from a LogRecord message. Also converts values to other types if specified.\n                     * @function toObject\n                     * @memberof opentelemetry.proto.logs.v1.LogRecord\n                     * @static\n                     * @param {opentelemetry.proto.logs.v1.LogRecord} message LogRecord\n                     * @param {$protobuf.IConversionOptions} [options] Conversion options\n                     * @returns {Object.<string,*>} Plain object\n                     */\n                    LogRecord.toObject = function toObject(message, options) {\n                        if (!options)\n                            options = {};\n                        var object = {};\n                        if (options.arrays || options.defaults)\n                            object.attributes = [];\n                        if (options.defaults) {\n                            if ($util.Long) {\n                                var long = new $util.Long(0, 0, false);\n                                object.timeUnixNano = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                            }\n                            else\n                                object.timeUnixNano = options.longs === String ? \"0\" : 0;\n                            object.severityNumber = options.enums === String ? \"SEVERITY_NUMBER_UNSPECIFIED\" : 0;\n                            object.severityText = \"\";\n                            object.body = null;\n                            object.droppedAttributesCount = 0;\n                            object.flags = 0;\n                            if (options.bytes === String)\n                                object.traceId = \"\";\n                            else {\n                                object.traceId = [];\n                                if (options.bytes !== Array)\n                                    object.traceId = $util.newBuffer(object.traceId);\n                            }\n                            if (options.bytes === String)\n                                object.spanId = \"\";\n                            else {\n                                object.spanId = [];\n                                if (options.bytes !== Array)\n                                    object.spanId = $util.newBuffer(object.spanId);\n                            }\n                            if ($util.Long) {\n                                var long = new $util.Long(0, 0, false);\n                                object.observedTimeUnixNano = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                            }\n                            else\n                                object.observedTimeUnixNano = options.longs === String ? \"0\" : 0;\n                        }\n                        if (message.timeUnixNano != null && message.hasOwnProperty(\"timeUnixNano\"))\n                            if (typeof message.timeUnixNano === \"number\")\n                                object.timeUnixNano = options.longs === String ? String(message.timeUnixNano) : message.timeUnixNano;\n                            else\n                                object.timeUnixNano = options.longs === String ? $util.Long.prototype.toString.call(message.timeUnixNano) : options.longs === Number ? new $util.LongBits(message.timeUnixNano.low >>> 0, message.timeUnixNano.high >>> 0).toNumber() : message.timeUnixNano;\n                        if (message.severityNumber != null && message.hasOwnProperty(\"severityNumber\"))\n                            object.severityNumber = options.enums === String ? $root.opentelemetry.proto.logs.v1.SeverityNumber[message.severityNumber] === undefined ? message.severityNumber : $root.opentelemetry.proto.logs.v1.SeverityNumber[message.severityNumber] : message.severityNumber;\n                        if (message.severityText != null && message.hasOwnProperty(\"severityText\"))\n                            object.severityText = message.severityText;\n                        if (message.body != null && message.hasOwnProperty(\"body\"))\n                            object.body = $root.opentelemetry.proto.common.v1.AnyValue.toObject(message.body, options);\n                        if (message.attributes && message.attributes.length) {\n                            object.attributes = [];\n                            for (var j = 0; j < message.attributes.length; ++j)\n                                object.attributes[j] = $root.opentelemetry.proto.common.v1.KeyValue.toObject(message.attributes[j], options);\n                        }\n                        if (message.droppedAttributesCount != null && message.hasOwnProperty(\"droppedAttributesCount\"))\n                            object.droppedAttributesCount = message.droppedAttributesCount;\n                        if (message.flags != null && message.hasOwnProperty(\"flags\"))\n                            object.flags = message.flags;\n                        if (message.traceId != null && message.hasOwnProperty(\"traceId\"))\n                            object.traceId = options.bytes === String ? $util.base64.encode(message.traceId, 0, message.traceId.length) : options.bytes === Array ? Array.prototype.slice.call(message.traceId) : message.traceId;\n                        if (message.spanId != null && message.hasOwnProperty(\"spanId\"))\n                            object.spanId = options.bytes === String ? $util.base64.encode(message.spanId, 0, message.spanId.length) : options.bytes === Array ? Array.prototype.slice.call(message.spanId) : message.spanId;\n                        if (message.observedTimeUnixNano != null && message.hasOwnProperty(\"observedTimeUnixNano\"))\n                            if (typeof message.observedTimeUnixNano === \"number\")\n                                object.observedTimeUnixNano = options.longs === String ? String(message.observedTimeUnixNano) : message.observedTimeUnixNano;\n                            else\n                                object.observedTimeUnixNano = options.longs === String ? $util.Long.prototype.toString.call(message.observedTimeUnixNano) : options.longs === Number ? new $util.LongBits(message.observedTimeUnixNano.low >>> 0, message.observedTimeUnixNano.high >>> 0).toNumber() : message.observedTimeUnixNano;\n                        return object;\n                    };\n                    /**\n                     * Converts this LogRecord to JSON.\n                     * @function toJSON\n                     * @memberof opentelemetry.proto.logs.v1.LogRecord\n                     * @instance\n                     * @returns {Object.<string,*>} JSON object\n                     */\n                    LogRecord.prototype.toJSON = function toJSON() {\n                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                    };\n                    /**\n                     * Gets the default type url for LogRecord\n                     * @function getTypeUrl\n                     * @memberof opentelemetry.proto.logs.v1.LogRecord\n                     * @static\n                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n                     * @returns {string} The default type url\n                     */\n                    LogRecord.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                        if (typeUrlPrefix === undefined) {\n                            typeUrlPrefix = \"type.googleapis.com\";\n                        }\n                        return typeUrlPrefix + \"/opentelemetry.proto.logs.v1.LogRecord\";\n                    };\n                    return LogRecord;\n                })();\n                return v1;\n            })();\n            return logs;\n        })();\n        return proto;\n    })();\n    return opentelemetry;\n})();\nmodule.exports = $root;\n//# sourceMappingURL=root.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport var ServiceClientType;\n(function (ServiceClientType) {\n    ServiceClientType[ServiceClientType[\"SPANS\"] = 0] = \"SPANS\";\n    ServiceClientType[ServiceClientType[\"METRICS\"] = 1] = \"METRICS\";\n    ServiceClientType[ServiceClientType[\"LOGS\"] = 2] = \"LOGS\";\n})(ServiceClientType || (ServiceClientType = {}));\n//# sourceMappingURL=types.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport * as root from '../generated/root';\nimport { ServiceClientType } from './types';\nexport function getExportRequestProto(clientType) {\n    if (clientType === ServiceClientType.SPANS) {\n        return root.opentelemetry.proto.collector.trace.v1\n            .ExportTraceServiceRequest;\n    }\n    else if (clientType === ServiceClientType.LOGS) {\n        return root.opentelemetry.proto.collector.logs.v1\n            .ExportLogsServiceRequest;\n    }\n    else {\n        return root.opentelemetry.proto.collector.metrics.v1\n            .ExportMetricsServiceRequest;\n    }\n}\n//# sourceMappingURL=util.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nimport { diag } from '@opentelemetry/api';\nimport { OTLPExporterBrowserBase as OTLPExporterBaseMain, OTLPExporterError, sendWithXhr, } from '@opentelemetry/otlp-exporter-base';\nimport { getExportRequestProto } from '../util';\n/**\n * Collector Exporter abstract base class\n */\nvar OTLPProtoExporterBrowserBase = /** @class */ (function (_super) {\n    __extends(OTLPProtoExporterBrowserBase, _super);\n    function OTLPProtoExporterBrowserBase(config) {\n        if (config === void 0) { config = {}; }\n        return _super.call(this, config) || this;\n    }\n    OTLPProtoExporterBrowserBase.prototype.send = function (objects, onSuccess, onError) {\n        if (this._shutdownOnce.isCalled) {\n            diag.debug('Shutdown already started. Cannot send objects');\n            return;\n        }\n        var serviceRequest = this.convert(objects);\n        var exportRequestType = getExportRequestProto(this.getServiceClientType());\n        var message = exportRequestType.create(serviceRequest);\n        if (message) {\n            var body = exportRequestType.encode(message).finish();\n            if (body) {\n                sendWithXhr(new Blob([body], { type: 'application/x-protobuf' }), this.url, __assign(__assign({}, this._headers), { 'Content-Type': 'application/x-protobuf', Accept: 'application/x-protobuf' }), this.timeoutMillis, onSuccess, onError);\n            }\n        }\n        else {\n            onError(new OTLPExporterError('No proto'));\n        }\n    };\n    return OTLPProtoExporterBrowserBase;\n}(OTLPExporterBaseMain));\nexport { OTLPProtoExporterBrowserBase };\n//# sourceMappingURL=OTLPProtoExporterBrowserBase.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { hexToBinary, hrTimeToNanoseconds } from '@opentelemetry/core';\nvar NANOSECONDS = BigInt(1000000000);\nexport function hrTimeToNanos(hrTime) {\n    return BigInt(hrTime[0]) * NANOSECONDS + BigInt(hrTime[1]);\n}\nexport function toLongBits(value) {\n    var low = Number(BigInt.asUintN(32, value));\n    var high = Number(BigInt.asUintN(32, value >> BigInt(32)));\n    return { low: low, high: high };\n}\nexport function encodeAsLongBits(hrTime) {\n    var nanos = hrTimeToNanos(hrTime);\n    return toLongBits(nanos);\n}\nexport function encodeAsString(hrTime) {\n    var nanos = hrTimeToNanos(hrTime);\n    return nanos.toString();\n}\nvar encodeTimestamp = typeof BigInt !== 'undefined' ? encodeAsString : hrTimeToNanoseconds;\nfunction identity(value) {\n    return value;\n}\nfunction optionalHexToBinary(str) {\n    if (str === undefined)\n        return undefined;\n    return hexToBinary(str);\n}\nvar DEFAULT_ENCODER = {\n    encodeHrTime: encodeAsLongBits,\n    encodeSpanContext: hexToBinary,\n    encodeOptionalSpanContext: optionalHexToBinary,\n};\nexport function getOtlpEncoder(options) {\n    var _a, _b;\n    if (options === undefined) {\n        return DEFAULT_ENCODER;\n    }\n    var useLongBits = (_a = options.useLongBits) !== null && _a !== void 0 ? _a : true;\n    var useHex = (_b = options.useHex) !== null && _b !== void 0 ? _b : false;\n    return {\n        encodeHrTime: useLongBits ? encodeAsLongBits : encodeTimestamp,\n        encodeSpanContext: useHex ? identity : hexToBinary,\n        encodeOptionalSpanContext: useHex ? identity : optionalHexToBinary,\n    };\n}\n//# sourceMappingURL=index.js.map","var __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nexport function toAttributes(attributes) {\n    return Object.keys(attributes).map(function (key) { return toKeyValue(key, attributes[key]); });\n}\nexport function toKeyValue(key, value) {\n    return {\n        key: key,\n        value: toAnyValue(value),\n    };\n}\nexport function toAnyValue(value) {\n    var t = typeof value;\n    if (t === 'string')\n        return { stringValue: value };\n    if (t === 'number') {\n        if (!Number.isInteger(value))\n            return { doubleValue: value };\n        return { intValue: value };\n    }\n    if (t === 'boolean')\n        return { boolValue: value };\n    if (value instanceof Uint8Array)\n        return { bytesValue: value };\n    if (Array.isArray(value))\n        return { arrayValue: { values: value.map(toAnyValue) } };\n    if (t === 'object' && value != null)\n        return {\n            kvlistValue: {\n                values: Object.entries(value).map(function (_a) {\n                    var _b = __read(_a, 2), k = _b[0], v = _b[1];\n                    return toKeyValue(k, v);\n                }),\n            },\n        };\n    return {};\n}\n//# sourceMappingURL=internal.js.map","import { toAttributes } from '../common/internal';\nexport function sdkSpanToOtlpSpan(span, encoder) {\n    var _a;\n    var ctx = span.spanContext();\n    var status = span.status;\n    return {\n        traceId: encoder.encodeSpanContext(ctx.traceId),\n        spanId: encoder.encodeSpanContext(ctx.spanId),\n        parentSpanId: encoder.encodeOptionalSpanContext(span.parentSpanId),\n        traceState: (_a = ctx.traceState) === null || _a === void 0 ? void 0 : _a.serialize(),\n        name: span.name,\n        // Span kind is offset by 1 because the API does not define a value for unset\n        kind: span.kind == null ? 0 : span.kind + 1,\n        startTimeUnixNano: encoder.encodeHrTime(span.startTime),\n        endTimeUnixNano: encoder.encodeHrTime(span.endTime),\n        attributes: toAttributes(span.attributes),\n        droppedAttributesCount: span.droppedAttributesCount,\n        events: span.events.map(function (event) { return toOtlpSpanEvent(event, encoder); }),\n        droppedEventsCount: span.droppedEventsCount,\n        status: {\n            // API and proto enums share the same values\n            code: status.code,\n            message: status.message,\n        },\n        links: span.links.map(function (link) { return toOtlpLink(link, encoder); }),\n        droppedLinksCount: span.droppedLinksCount,\n    };\n}\nexport function toOtlpLink(link, encoder) {\n    var _a;\n    return {\n        attributes: link.attributes ? toAttributes(link.attributes) : [],\n        spanId: encoder.encodeSpanContext(link.context.spanId),\n        traceId: encoder.encodeSpanContext(link.context.traceId),\n        traceState: (_a = link.context.traceState) === null || _a === void 0 ? void 0 : _a.serialize(),\n        droppedAttributesCount: link.droppedAttributesCount || 0,\n    };\n}\nexport function toOtlpSpanEvent(timedEvent, encoder) {\n    return {\n        attributes: timedEvent.attributes\n            ? toAttributes(timedEvent.attributes)\n            : [],\n        name: timedEvent.name,\n        timeUnixNano: encoder.encodeHrTime(timedEvent.time),\n        droppedAttributesCount: timedEvent.droppedAttributesCount || 0,\n    };\n}\n//# sourceMappingURL=internal.js.map","var __values = (this && this.__values) || function(o) {\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\n    if (m) return m.call(o);\n    if (o && typeof o.length === \"number\") return {\n        next: function () {\n            if (o && i >= o.length) o = void 0;\n            return { value: o && o[i++], done: !o };\n        }\n    };\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\nvar __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nimport { toAttributes } from '../common/internal';\nimport { sdkSpanToOtlpSpan } from './internal';\nimport { getOtlpEncoder } from '../common';\nexport function createExportTraceServiceRequest(spans, options) {\n    var encoder = getOtlpEncoder(options);\n    return {\n        resourceSpans: spanRecordsToResourceSpans(spans, encoder),\n    };\n}\nfunction createResourceMap(readableSpans) {\n    var e_1, _a;\n    var resourceMap = new Map();\n    try {\n        for (var readableSpans_1 = __values(readableSpans), readableSpans_1_1 = readableSpans_1.next(); !readableSpans_1_1.done; readableSpans_1_1 = readableSpans_1.next()) {\n            var record = readableSpans_1_1.value;\n            var ilmMap = resourceMap.get(record.resource);\n            if (!ilmMap) {\n                ilmMap = new Map();\n                resourceMap.set(record.resource, ilmMap);\n            }\n            // TODO this is duplicated in basic tracer. Consolidate on a common helper in core\n            var instrumentationLibraryKey = record.instrumentationLibrary.name + \"@\" + (record.instrumentationLibrary.version || '') + \":\" + (record.instrumentationLibrary.schemaUrl || '');\n            var records = ilmMap.get(instrumentationLibraryKey);\n            if (!records) {\n                records = [];\n                ilmMap.set(instrumentationLibraryKey, records);\n            }\n            records.push(record);\n        }\n    }\n    catch (e_1_1) { e_1 = { error: e_1_1 }; }\n    finally {\n        try {\n            if (readableSpans_1_1 && !readableSpans_1_1.done && (_a = readableSpans_1.return)) _a.call(readableSpans_1);\n        }\n        finally { if (e_1) throw e_1.error; }\n    }\n    return resourceMap;\n}\nfunction spanRecordsToResourceSpans(readableSpans, encoder) {\n    var resourceMap = createResourceMap(readableSpans);\n    var out = [];\n    var entryIterator = resourceMap.entries();\n    var entry = entryIterator.next();\n    while (!entry.done) {\n        var _a = __read(entry.value, 2), resource = _a[0], ilmMap = _a[1];\n        var scopeResourceSpans = [];\n        var ilmIterator = ilmMap.values();\n        var ilmEntry = ilmIterator.next();\n        while (!ilmEntry.done) {\n            var scopeSpans = ilmEntry.value;\n            if (scopeSpans.length > 0) {\n                var _b = scopeSpans[0].instrumentationLibrary, name_1 = _b.name, version = _b.version, schemaUrl = _b.schemaUrl;\n                var spans = scopeSpans.map(function (readableSpan) {\n                    return sdkSpanToOtlpSpan(readableSpan, encoder);\n                });\n                scopeResourceSpans.push({\n                    scope: { name: name_1, version: version },\n                    spans: spans,\n                    schemaUrl: schemaUrl,\n                });\n            }\n            ilmEntry = ilmIterator.next();\n        }\n        // TODO SDK types don't provide resource schema URL at this time\n        var transformedSpans = {\n            resource: {\n                attributes: toAttributes(resource.attributes),\n                droppedAttributesCount: 0,\n            },\n            scopeSpans: scopeResourceSpans,\n            schemaUrl: undefined,\n        };\n        out.push(transformedSpans);\n        entry = entryIterator.next();\n    }\n    return out;\n}\n//# sourceMappingURL=index.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// DO NOT EDIT, this is an Auto-generated file from scripts/semconv/templates//templates/SemanticAttributes.ts.j2\nexport var SemanticResourceAttributes = {\n    /**\n     * Name of the cloud provider.\n     */\n    CLOUD_PROVIDER: 'cloud.provider',\n    /**\n     * The cloud account ID the resource is assigned to.\n     */\n    CLOUD_ACCOUNT_ID: 'cloud.account.id',\n    /**\n     * The geographical region the resource is running. Refer to your provider&#39;s docs to see the available regions, for example [Alibaba Cloud regions](https://www.alibabacloud.com/help/doc-detail/40654.htm), [AWS regions](https://aws.amazon.com/about-aws/global-infrastructure/regions_az/), [Azure regions](https://azure.microsoft.com/en-us/global-infrastructure/geographies/), or [Google Cloud regions](https://cloud.google.com/about/locations).\n     */\n    CLOUD_REGION: 'cloud.region',\n    /**\n     * Cloud regions often have multiple, isolated locations known as zones to increase availability. Availability zone represents the zone where the resource is running.\n     *\n     * Note: Availability zones are called &#34;zones&#34; on Alibaba Cloud and Google Cloud.\n     */\n    CLOUD_AVAILABILITY_ZONE: 'cloud.availability_zone',\n    /**\n     * The cloud platform in use.\n     *\n     * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.\n     */\n    CLOUD_PLATFORM: 'cloud.platform',\n    /**\n     * The Amazon Resource Name (ARN) of an [ECS container instance](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ECS_instances.html).\n     */\n    AWS_ECS_CONTAINER_ARN: 'aws.ecs.container.arn',\n    /**\n     * The ARN of an [ECS cluster](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/clusters.html).\n     */\n    AWS_ECS_CLUSTER_ARN: 'aws.ecs.cluster.arn',\n    /**\n     * The [launch type](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/launch_types.html) for an ECS task.\n     */\n    AWS_ECS_LAUNCHTYPE: 'aws.ecs.launchtype',\n    /**\n     * The ARN of an [ECS task definition](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task_definitions.html).\n     */\n    AWS_ECS_TASK_ARN: 'aws.ecs.task.arn',\n    /**\n     * The task definition family this task definition is a member of.\n     */\n    AWS_ECS_TASK_FAMILY: 'aws.ecs.task.family',\n    /**\n     * The revision for this task definition.\n     */\n    AWS_ECS_TASK_REVISION: 'aws.ecs.task.revision',\n    /**\n     * The ARN of an EKS cluster.\n     */\n    AWS_EKS_CLUSTER_ARN: 'aws.eks.cluster.arn',\n    /**\n     * The name(s) of the AWS log group(s) an application is writing to.\n     *\n     * Note: Multiple log groups must be supported for cases like multi-container applications, where a single application has sidecar containers, and each write to their own log group.\n     */\n    AWS_LOG_GROUP_NAMES: 'aws.log.group.names',\n    /**\n     * The Amazon Resource Name(s) (ARN) of the AWS log group(s).\n     *\n     * Note: See the [log group ARN format documentation](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/iam-access-control-overview-cwl.html#CWL_ARN_Format).\n     */\n    AWS_LOG_GROUP_ARNS: 'aws.log.group.arns',\n    /**\n     * The name(s) of the AWS log stream(s) an application is writing to.\n     */\n    AWS_LOG_STREAM_NAMES: 'aws.log.stream.names',\n    /**\n     * The ARN(s) of the AWS log stream(s).\n     *\n     * Note: See the [log stream ARN format documentation](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/iam-access-control-overview-cwl.html#CWL_ARN_Format). One log group can contain several log streams, so these ARNs necessarily identify both a log group and a log stream.\n     */\n    AWS_LOG_STREAM_ARNS: 'aws.log.stream.arns',\n    /**\n     * Container name.\n     */\n    CONTAINER_NAME: 'container.name',\n    /**\n     * Container ID. Usually a UUID, as for example used to [identify Docker containers](https://docs.docker.com/engine/reference/run/#container-identification). The UUID might be abbreviated.\n     */\n    CONTAINER_ID: 'container.id',\n    /**\n     * The container runtime managing this container.\n     */\n    CONTAINER_RUNTIME: 'container.runtime',\n    /**\n     * Name of the image the container was built on.\n     */\n    CONTAINER_IMAGE_NAME: 'container.image.name',\n    /**\n     * Container image tag.\n     */\n    CONTAINER_IMAGE_TAG: 'container.image.tag',\n    /**\n     * Name of the [deployment environment](https://en.wikipedia.org/wiki/Deployment_environment) (aka deployment tier).\n     */\n    DEPLOYMENT_ENVIRONMENT: 'deployment.environment',\n    /**\n     * A unique identifier representing the device.\n     *\n     * Note: The device identifier MUST only be defined using the values outlined below. This value is not an advertising identifier and MUST NOT be used as such. On iOS (Swift or Objective-C), this value MUST be equal to the [vendor identifier](https://developer.apple.com/documentation/uikit/uidevice/1620059-identifierforvendor). On Android (Java or Kotlin), this value MUST be equal to the Firebase Installation ID or a globally unique UUID which is persisted across sessions in your application. More information can be found [here](https://developer.android.com/training/articles/user-data-ids) on best practices and exact implementation details. Caution should be taken when storing personal data or anything which can identify a user. GDPR and data protection laws may apply, ensure you do your own due diligence.\n     */\n    DEVICE_ID: 'device.id',\n    /**\n     * The model identifier for the device.\n     *\n     * Note: It&#39;s recommended this value represents a machine readable version of the model identifier rather than the market or consumer-friendly name of the device.\n     */\n    DEVICE_MODEL_IDENTIFIER: 'device.model.identifier',\n    /**\n     * The marketing name for the device model.\n     *\n     * Note: It&#39;s recommended this value represents a human readable version of the device model rather than a machine readable alternative.\n     */\n    DEVICE_MODEL_NAME: 'device.model.name',\n    /**\n     * The name of the single function that this runtime instance executes.\n     *\n     * Note: This is the name of the function as configured/deployed on the FaaS platform and is usually different from the name of the callback function (which may be stored in the [`code.namespace`/`code.function`](../../trace/semantic_conventions/span-general.md#source-code-attributes) span attributes).\n     */\n    FAAS_NAME: 'faas.name',\n    /**\n    * The unique ID of the single function that this runtime instance executes.\n    *\n    * Note: Depending on the cloud provider, use:\n  \n  * **AWS Lambda:** The function [ARN](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html).\n  Take care not to use the &#34;invoked ARN&#34; directly but replace any\n  [alias suffix](https://docs.aws.amazon.com/lambda/latest/dg/configuration-aliases.html) with the resolved function version, as the same runtime instance may be invokable with multiple\n  different aliases.\n  * **GCP:** The [URI of the resource](https://cloud.google.com/iam/docs/full-resource-names)\n  * **Azure:** The [Fully Qualified Resource ID](https://docs.microsoft.com/en-us/rest/api/resources/resources/get-by-id).\n  \n  On some providers, it may not be possible to determine the full ID at startup,\n  which is why this field cannot be made required. For example, on AWS the account ID\n  part of the ARN is not available without calling another AWS API\n  which may be deemed too slow for a short-running lambda function.\n  As an alternative, consider setting `faas.id` as a span attribute instead.\n    */\n    FAAS_ID: 'faas.id',\n    /**\n    * The immutable version of the function being executed.\n    *\n    * Note: Depending on the cloud provider and platform, use:\n  \n  * **AWS Lambda:** The [function version](https://docs.aws.amazon.com/lambda/latest/dg/configuration-versions.html)\n    (an integer represented as a decimal string).\n  * **Google Cloud Run:** The [revision](https://cloud.google.com/run/docs/managing/revisions)\n    (i.e., the function name plus the revision suffix).\n  * **Google Cloud Functions:** The value of the\n    [`K_REVISION` environment variable](https://cloud.google.com/functions/docs/env-var#runtime_environment_variables_set_automatically).\n  * **Azure Functions:** Not applicable. Do not set this attribute.\n    */\n    FAAS_VERSION: 'faas.version',\n    /**\n     * The execution environment ID as a string, that will be potentially reused for other invocations to the same function/function version.\n     *\n     * Note: * **AWS Lambda:** Use the (full) log stream name.\n     */\n    FAAS_INSTANCE: 'faas.instance',\n    /**\n     * The amount of memory available to the serverless function in MiB.\n     *\n     * Note: It&#39;s recommended to set this attribute since e.g. too little memory can easily stop a Java AWS Lambda function from working correctly. On AWS Lambda, the environment variable `AWS_LAMBDA_FUNCTION_MEMORY_SIZE` provides this information.\n     */\n    FAAS_MAX_MEMORY: 'faas.max_memory',\n    /**\n     * Unique host ID. For Cloud, this must be the instance_id assigned by the cloud provider.\n     */\n    HOST_ID: 'host.id',\n    /**\n     * Name of the host. On Unix systems, it may contain what the hostname command returns, or the fully qualified hostname, or another name specified by the user.\n     */\n    HOST_NAME: 'host.name',\n    /**\n     * Type of host. For Cloud, this must be the machine type.\n     */\n    HOST_TYPE: 'host.type',\n    /**\n     * The CPU architecture the host system is running on.\n     */\n    HOST_ARCH: 'host.arch',\n    /**\n     * Name of the VM image or OS install the host was instantiated from.\n     */\n    HOST_IMAGE_NAME: 'host.image.name',\n    /**\n     * VM image ID. For Cloud, this value is from the provider.\n     */\n    HOST_IMAGE_ID: 'host.image.id',\n    /**\n     * The version string of the VM image as defined in [Version SpanAttributes](README.md#version-attributes).\n     */\n    HOST_IMAGE_VERSION: 'host.image.version',\n    /**\n     * The name of the cluster.\n     */\n    K8S_CLUSTER_NAME: 'k8s.cluster.name',\n    /**\n     * The name of the Node.\n     */\n    K8S_NODE_NAME: 'k8s.node.name',\n    /**\n     * The UID of the Node.\n     */\n    K8S_NODE_UID: 'k8s.node.uid',\n    /**\n     * The name of the namespace that the pod is running in.\n     */\n    K8S_NAMESPACE_NAME: 'k8s.namespace.name',\n    /**\n     * The UID of the Pod.\n     */\n    K8S_POD_UID: 'k8s.pod.uid',\n    /**\n     * The name of the Pod.\n     */\n    K8S_POD_NAME: 'k8s.pod.name',\n    /**\n     * The name of the Container in a Pod template.\n     */\n    K8S_CONTAINER_NAME: 'k8s.container.name',\n    /**\n     * The UID of the ReplicaSet.\n     */\n    K8S_REPLICASET_UID: 'k8s.replicaset.uid',\n    /**\n     * The name of the ReplicaSet.\n     */\n    K8S_REPLICASET_NAME: 'k8s.replicaset.name',\n    /**\n     * The UID of the Deployment.\n     */\n    K8S_DEPLOYMENT_UID: 'k8s.deployment.uid',\n    /**\n     * The name of the Deployment.\n     */\n    K8S_DEPLOYMENT_NAME: 'k8s.deployment.name',\n    /**\n     * The UID of the StatefulSet.\n     */\n    K8S_STATEFULSET_UID: 'k8s.statefulset.uid',\n    /**\n     * The name of the StatefulSet.\n     */\n    K8S_STATEFULSET_NAME: 'k8s.statefulset.name',\n    /**\n     * The UID of the DaemonSet.\n     */\n    K8S_DAEMONSET_UID: 'k8s.daemonset.uid',\n    /**\n     * The name of the DaemonSet.\n     */\n    K8S_DAEMONSET_NAME: 'k8s.daemonset.name',\n    /**\n     * The UID of the Job.\n     */\n    K8S_JOB_UID: 'k8s.job.uid',\n    /**\n     * The name of the Job.\n     */\n    K8S_JOB_NAME: 'k8s.job.name',\n    /**\n     * The UID of the CronJob.\n     */\n    K8S_CRONJOB_UID: 'k8s.cronjob.uid',\n    /**\n     * The name of the CronJob.\n     */\n    K8S_CRONJOB_NAME: 'k8s.cronjob.name',\n    /**\n     * The operating system type.\n     */\n    OS_TYPE: 'os.type',\n    /**\n     * Human readable (not intended to be parsed) OS version information, like e.g. reported by `ver` or `lsb_release -a` commands.\n     */\n    OS_DESCRIPTION: 'os.description',\n    /**\n     * Human readable operating system name.\n     */\n    OS_NAME: 'os.name',\n    /**\n     * The version string of the operating system as defined in [Version SpanAttributes](../../resource/semantic_conventions/README.md#version-attributes).\n     */\n    OS_VERSION: 'os.version',\n    /**\n     * Process identifier (PID).\n     */\n    PROCESS_PID: 'process.pid',\n    /**\n     * The name of the process executable. On Linux based systems, can be set to the `Name` in `proc/[pid]/status`. On Windows, can be set to the base name of `GetProcessImageFileNameW`.\n     */\n    PROCESS_EXECUTABLE_NAME: 'process.executable.name',\n    /**\n     * The full path to the process executable. On Linux based systems, can be set to the target of `proc/[pid]/exe`. On Windows, can be set to the result of `GetProcessImageFileNameW`.\n     */\n    PROCESS_EXECUTABLE_PATH: 'process.executable.path',\n    /**\n     * The command used to launch the process (i.e. the command name). On Linux based systems, can be set to the zeroth string in `proc/[pid]/cmdline`. On Windows, can be set to the first parameter extracted from `GetCommandLineW`.\n     */\n    PROCESS_COMMAND: 'process.command',\n    /**\n     * The full command used to launch the process as a single string representing the full command. On Windows, can be set to the result of `GetCommandLineW`. Do not set this if you have to assemble it just for monitoring; use `process.command_args` instead.\n     */\n    PROCESS_COMMAND_LINE: 'process.command_line',\n    /**\n     * All the command arguments (including the command/executable itself) as received by the process. On Linux-based systems (and some other Unixoid systems supporting procfs), can be set according to the list of null-delimited strings extracted from `proc/[pid]/cmdline`. For libc-based executables, this would be the full argv vector passed to `main`.\n     */\n    PROCESS_COMMAND_ARGS: 'process.command_args',\n    /**\n     * The username of the user that owns the process.\n     */\n    PROCESS_OWNER: 'process.owner',\n    /**\n     * The name of the runtime of this process. For compiled native binaries, this SHOULD be the name of the compiler.\n     */\n    PROCESS_RUNTIME_NAME: 'process.runtime.name',\n    /**\n     * The version of the runtime of this process, as returned by the runtime without modification.\n     */\n    PROCESS_RUNTIME_VERSION: 'process.runtime.version',\n    /**\n     * An additional description about the runtime of the process, for example a specific vendor customization of the runtime environment.\n     */\n    PROCESS_RUNTIME_DESCRIPTION: 'process.runtime.description',\n    /**\n     * Logical name of the service.\n     *\n     * Note: MUST be the same for all instances of horizontally scaled services. If the value was not specified, SDKs MUST fallback to `unknown_service:` concatenated with [`process.executable.name`](process.md#process), e.g. `unknown_service:bash`. If `process.executable.name` is not available, the value MUST be set to `unknown_service`.\n     */\n    SERVICE_NAME: 'service.name',\n    /**\n     * A namespace for `service.name`.\n     *\n     * Note: A string value having a meaning that helps to distinguish a group of services, for example the team name that owns a group of services. `service.name` is expected to be unique within the same namespace. If `service.namespace` is not specified in the Resource then `service.name` is expected to be unique for all services that have no explicit namespace defined (so the empty/unspecified namespace is simply one more valid namespace). Zero-length namespace string is assumed equal to unspecified namespace.\n     */\n    SERVICE_NAMESPACE: 'service.namespace',\n    /**\n     * The string ID of the service instance.\n     *\n     * Note: MUST be unique for each instance of the same `service.namespace,service.name` pair (in other words `service.namespace,service.name,service.instance.id` triplet MUST be globally unique). The ID helps to distinguish instances of the same service that exist at the same time (e.g. instances of a horizontally scaled service). It is preferable for the ID to be persistent and stay the same for the lifetime of the service instance, however it is acceptable that the ID is ephemeral and changes during important lifetime events for the service (e.g. service restarts). If the service has no inherent unique ID that can be used as the value of this attribute it is recommended to generate a random Version 1 or Version 4 RFC 4122 UUID (services aiming for reproducible UUIDs may also use Version 5, see RFC 4122 for more recommendations).\n     */\n    SERVICE_INSTANCE_ID: 'service.instance.id',\n    /**\n     * The version string of the service API or implementation.\n     */\n    SERVICE_VERSION: 'service.version',\n    /**\n     * The name of the telemetry SDK as defined above.\n     */\n    TELEMETRY_SDK_NAME: 'telemetry.sdk.name',\n    /**\n     * The language of the telemetry SDK.\n     */\n    TELEMETRY_SDK_LANGUAGE: 'telemetry.sdk.language',\n    /**\n     * The version string of the telemetry SDK.\n     */\n    TELEMETRY_SDK_VERSION: 'telemetry.sdk.version',\n    /**\n     * The version string of the auto instrumentation agent, if used.\n     */\n    TELEMETRY_AUTO_VERSION: 'telemetry.auto.version',\n    /**\n     * The name of the web engine.\n     */\n    WEBENGINE_NAME: 'webengine.name',\n    /**\n     * The version of the web engine.\n     */\n    WEBENGINE_VERSION: 'webengine.version',\n    /**\n     * Additional description of the web engine (e.g. detailed version and edition information).\n     */\n    WEBENGINE_DESCRIPTION: 'webengine.description',\n};\nexport var CloudProviderValues = {\n    /** Alibaba Cloud. */\n    ALIBABA_CLOUD: 'alibaba_cloud',\n    /** Amazon Web Services. */\n    AWS: 'aws',\n    /** Microsoft Azure. */\n    AZURE: 'azure',\n    /** Google Cloud Platform. */\n    GCP: 'gcp',\n};\nexport var CloudPlatformValues = {\n    /** Alibaba Cloud Elastic Compute Service. */\n    ALIBABA_CLOUD_ECS: 'alibaba_cloud_ecs',\n    /** Alibaba Cloud Function Compute. */\n    ALIBABA_CLOUD_FC: 'alibaba_cloud_fc',\n    /** AWS Elastic Compute Cloud. */\n    AWS_EC2: 'aws_ec2',\n    /** AWS Elastic Container Service. */\n    AWS_ECS: 'aws_ecs',\n    /** AWS Elastic Kubernetes Service. */\n    AWS_EKS: 'aws_eks',\n    /** AWS Lambda. */\n    AWS_LAMBDA: 'aws_lambda',\n    /** AWS Elastic Beanstalk. */\n    AWS_ELASTIC_BEANSTALK: 'aws_elastic_beanstalk',\n    /** Azure Virtual Machines. */\n    AZURE_VM: 'azure_vm',\n    /** Azure Container Instances. */\n    AZURE_CONTAINER_INSTANCES: 'azure_container_instances',\n    /** Azure Kubernetes Service. */\n    AZURE_AKS: 'azure_aks',\n    /** Azure Functions. */\n    AZURE_FUNCTIONS: 'azure_functions',\n    /** Azure App Service. */\n    AZURE_APP_SERVICE: 'azure_app_service',\n    /** Google Cloud Compute Engine (GCE). */\n    GCP_COMPUTE_ENGINE: 'gcp_compute_engine',\n    /** Google Cloud Run. */\n    GCP_CLOUD_RUN: 'gcp_cloud_run',\n    /** Google Cloud Kubernetes Engine (GKE). */\n    GCP_KUBERNETES_ENGINE: 'gcp_kubernetes_engine',\n    /** Google Cloud Functions (GCF). */\n    GCP_CLOUD_FUNCTIONS: 'gcp_cloud_functions',\n    /** Google Cloud App Engine (GAE). */\n    GCP_APP_ENGINE: 'gcp_app_engine',\n};\nexport var AwsEcsLaunchtypeValues = {\n    /** ec2. */\n    EC2: 'ec2',\n    /** fargate. */\n    FARGATE: 'fargate',\n};\nexport var HostArchValues = {\n    /** AMD64. */\n    AMD64: 'amd64',\n    /** ARM32. */\n    ARM32: 'arm32',\n    /** ARM64. */\n    ARM64: 'arm64',\n    /** Itanium. */\n    IA64: 'ia64',\n    /** 32-bit PowerPC. */\n    PPC32: 'ppc32',\n    /** 64-bit PowerPC. */\n    PPC64: 'ppc64',\n    /** 32-bit x86. */\n    X86: 'x86',\n};\nexport var OsTypeValues = {\n    /** Microsoft Windows. */\n    WINDOWS: 'windows',\n    /** Linux. */\n    LINUX: 'linux',\n    /** Apple Darwin. */\n    DARWIN: 'darwin',\n    /** FreeBSD. */\n    FREEBSD: 'freebsd',\n    /** NetBSD. */\n    NETBSD: 'netbsd',\n    /** OpenBSD. */\n    OPENBSD: 'openbsd',\n    /** DragonFly BSD. */\n    DRAGONFLYBSD: 'dragonflybsd',\n    /** HP-UX (Hewlett Packard Unix). */\n    HPUX: 'hpux',\n    /** AIX (Advanced Interactive eXecutive). */\n    AIX: 'aix',\n    /** Oracle Solaris. */\n    SOLARIS: 'solaris',\n    /** IBM z/OS. */\n    Z_OS: 'z_os',\n};\nexport var TelemetrySdkLanguageValues = {\n    /** cpp. */\n    CPP: 'cpp',\n    /** dotnet. */\n    DOTNET: 'dotnet',\n    /** erlang. */\n    ERLANG: 'erlang',\n    /** go. */\n    GO: 'go',\n    /** java. */\n    JAVA: 'java',\n    /** nodejs. */\n    NODEJS: 'nodejs',\n    /** php. */\n    PHP: 'php',\n    /** python. */\n    PYTHON: 'python',\n    /** ruby. */\n    RUBY: 'ruby',\n    /** webjs. */\n    WEBJS: 'webjs',\n};\n//# sourceMappingURL=SemanticResourceAttributes.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport function defaultServiceName() {\n    return 'unknown_service';\n}\n//# sourceMappingURL=default-service-name.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nvar __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nimport { diag } from '@opentelemetry/api';\nimport { SemanticResourceAttributes } from '@opentelemetry/semantic-conventions';\nimport { SDK_INFO } from '@opentelemetry/core';\nimport { defaultServiceName } from './platform';\n/**\n * A Resource describes the entity for which a signals (metrics or trace) are\n * collected.\n */\nvar Resource = /** @class */ (function () {\n    function Resource(\n    /**\n     * A dictionary of attributes with string keys and values that provide\n     * information about the entity as numbers, strings or booleans\n     * TODO: Consider to add check/validation on attributes.\n     */\n    attributes, asyncAttributesPromise) {\n        var _this = this;\n        var _a;\n        this._attributes = attributes;\n        this.asyncAttributesPending = asyncAttributesPromise != null;\n        this._syncAttributes = (_a = this._attributes) !== null && _a !== void 0 ? _a : {};\n        this._asyncAttributesPromise = asyncAttributesPromise === null || asyncAttributesPromise === void 0 ? void 0 : asyncAttributesPromise.then(function (asyncAttributes) {\n            _this._attributes = Object.assign({}, _this._attributes, asyncAttributes);\n            _this.asyncAttributesPending = false;\n            return asyncAttributes;\n        }, function (err) {\n            diag.debug(\"a resource's async attributes promise rejected: %s\", err);\n            _this.asyncAttributesPending = false;\n            return {};\n        });\n    }\n    /**\n     * Returns an empty Resource\n     */\n    Resource.empty = function () {\n        return Resource.EMPTY;\n    };\n    /**\n     * Returns a Resource that identifies the SDK in use.\n     */\n    Resource.default = function () {\n        var _a;\n        return new Resource((_a = {},\n            _a[SemanticResourceAttributes.SERVICE_NAME] = defaultServiceName(),\n            _a[SemanticResourceAttributes.TELEMETRY_SDK_LANGUAGE] = SDK_INFO[SemanticResourceAttributes.TELEMETRY_SDK_LANGUAGE],\n            _a[SemanticResourceAttributes.TELEMETRY_SDK_NAME] = SDK_INFO[SemanticResourceAttributes.TELEMETRY_SDK_NAME],\n            _a[SemanticResourceAttributes.TELEMETRY_SDK_VERSION] = SDK_INFO[SemanticResourceAttributes.TELEMETRY_SDK_VERSION],\n            _a));\n    };\n    Object.defineProperty(Resource.prototype, \"attributes\", {\n        get: function () {\n            var _a;\n            if (this.asyncAttributesPending) {\n                diag.error('Accessing resource attributes before async attributes settled');\n            }\n            return (_a = this._attributes) !== null && _a !== void 0 ? _a : {};\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * Returns a promise that will never be rejected. Resolves when all async attributes have finished being added to\n     * this Resource's attributes. This is useful in exporters to block until resource detection\n     * has finished.\n     */\n    Resource.prototype.waitForAsyncAttributes = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (!this.asyncAttributesPending) return [3 /*break*/, 2];\n                        return [4 /*yield*/, this._asyncAttributesPromise];\n                    case 1:\n                        _a.sent();\n                        _a.label = 2;\n                    case 2: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Returns a new, merged {@link Resource} by merging the current Resource\n     * with the other Resource. In case of a collision, other Resource takes\n     * precedence.\n     *\n     * @param other the Resource that will be merged with this.\n     * @returns the newly merged Resource.\n     */\n    Resource.prototype.merge = function (other) {\n        var _this = this;\n        var _a;\n        if (!other)\n            return this;\n        // SpanAttributes from other resource overwrite attributes from this resource.\n        var mergedSyncAttributes = __assign(__assign({}, this._syncAttributes), ((_a = other._syncAttributes) !== null && _a !== void 0 ? _a : other.attributes));\n        if (!this._asyncAttributesPromise &&\n            !other._asyncAttributesPromise) {\n            return new Resource(mergedSyncAttributes);\n        }\n        var mergedAttributesPromise = Promise.all([\n            this._asyncAttributesPromise,\n            other._asyncAttributesPromise,\n        ]).then(function (_a) {\n            var _b;\n            var _c = __read(_a, 2), thisAsyncAttributes = _c[0], otherAsyncAttributes = _c[1];\n            return __assign(__assign(__assign(__assign({}, _this._syncAttributes), thisAsyncAttributes), ((_b = other._syncAttributes) !== null && _b !== void 0 ? _b : other.attributes)), otherAsyncAttributes);\n        });\n        return new Resource(mergedSyncAttributes, mergedAttributesPromise);\n    };\n    Resource.EMPTY = new Resource({});\n    return Resource;\n}());\nexport { Resource };\n//# sourceMappingURL=Resource.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __values = (this && this.__values) || function(o) {\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\n    if (m) return m.call(o);\n    if (o && typeof o.length === \"number\") return {\n        next: function () {\n            if (o && i >= o.length) o = void 0;\n            return { value: o && o[i++], done: !o };\n        }\n    };\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\nvar __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nimport { getOtlpEncoder } from '../common';\nimport { toAnyValue, toAttributes, toKeyValue } from '../common/internal';\nexport function createExportLogsServiceRequest(logRecords, options) {\n    var encoder = getOtlpEncoder(options);\n    return {\n        resourceLogs: logRecordsToResourceLogs(logRecords, encoder),\n    };\n}\nfunction createResourceMap(logRecords) {\n    var e_1, _a;\n    var resourceMap = new Map();\n    try {\n        for (var logRecords_1 = __values(logRecords), logRecords_1_1 = logRecords_1.next(); !logRecords_1_1.done; logRecords_1_1 = logRecords_1.next()) {\n            var record = logRecords_1_1.value;\n            var resource = record.resource, _b = record.instrumentationScope, name_1 = _b.name, _c = _b.version, version = _c === void 0 ? '' : _c, _d = _b.schemaUrl, schemaUrl = _d === void 0 ? '' : _d;\n            var ismMap = resourceMap.get(resource);\n            if (!ismMap) {\n                ismMap = new Map();\n                resourceMap.set(resource, ismMap);\n            }\n            var ismKey = name_1 + \"@\" + version + \":\" + schemaUrl;\n            var records = ismMap.get(ismKey);\n            if (!records) {\n                records = [];\n                ismMap.set(ismKey, records);\n            }\n            records.push(record);\n        }\n    }\n    catch (e_1_1) { e_1 = { error: e_1_1 }; }\n    finally {\n        try {\n            if (logRecords_1_1 && !logRecords_1_1.done && (_a = logRecords_1.return)) _a.call(logRecords_1);\n        }\n        finally { if (e_1) throw e_1.error; }\n    }\n    return resourceMap;\n}\nfunction logRecordsToResourceLogs(logRecords, encoder) {\n    var resourceMap = createResourceMap(logRecords);\n    return Array.from(resourceMap, function (_a) {\n        var _b = __read(_a, 2), resource = _b[0], ismMap = _b[1];\n        return ({\n            resource: {\n                attributes: toAttributes(resource.attributes),\n                droppedAttributesCount: 0,\n            },\n            scopeLogs: Array.from(ismMap, function (_a) {\n                var _b = __read(_a, 2), scopeLogs = _b[1];\n                var _c = scopeLogs[0].instrumentationScope, name = _c.name, version = _c.version, schemaUrl = _c.schemaUrl;\n                return {\n                    scope: { name: name, version: version },\n                    logRecords: scopeLogs.map(function (log) { return toLogRecord(log, encoder); }),\n                    schemaUrl: schemaUrl,\n                };\n            }),\n            schemaUrl: undefined,\n        });\n    });\n}\nfunction toLogRecord(log, encoder) {\n    var _a, _b, _c;\n    return {\n        timeUnixNano: encoder.encodeHrTime(log.hrTime),\n        observedTimeUnixNano: encoder.encodeHrTime(log.hrTimeObserved),\n        severityNumber: toSeverityNumber(log.severityNumber),\n        severityText: log.severityText,\n        body: toAnyValue(log.body),\n        attributes: toLogAttributes(log.attributes),\n        droppedAttributesCount: log.droppedAttributesCount,\n        flags: (_a = log.spanContext) === null || _a === void 0 ? void 0 : _a.traceFlags,\n        traceId: encoder.encodeOptionalSpanContext((_b = log.spanContext) === null || _b === void 0 ? void 0 : _b.traceId),\n        spanId: encoder.encodeOptionalSpanContext((_c = log.spanContext) === null || _c === void 0 ? void 0 : _c.spanId),\n    };\n}\nfunction toSeverityNumber(severityNumber) {\n    return severityNumber;\n}\nexport function toLogAttributes(attributes) {\n    return Object.keys(attributes).map(function (key) { return toKeyValue(key, attributes[key]); });\n}\n//# sourceMappingURL=index.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport { getEnv, baggageUtils } from '@opentelemetry/core';\nimport { appendResourcePathToUrl, appendRootPathToUrlIfNeeded, } from '@opentelemetry/otlp-exporter-base';\nimport { OTLPProtoExporterBrowserBase, ServiceClientType, } from '@opentelemetry/otlp-proto-exporter-base';\nimport { createExportLogsServiceRequest, } from '@opentelemetry/otlp-transformer';\nvar DEFAULT_COLLECTOR_RESOURCE_PATH = 'v1/logs';\nvar DEFAULT_COLLECTOR_URL = \"http://localhost:4318/\" + DEFAULT_COLLECTOR_RESOURCE_PATH;\n/**\n * Collector Trace Exporter for Web\n */\nvar OTLPLogExporter = /** @class */ (function (_super) {\n    __extends(OTLPLogExporter, _super);\n    function OTLPLogExporter(config) {\n        if (config === void 0) { config = {}; }\n        var _this = _super.call(this, config) || this;\n        _this._headers = Object.assign(_this._headers, baggageUtils.parseKeyPairsIntoRecord(getEnv().OTEL_EXPORTER_OTLP_LOGS_HEADERS));\n        return _this;\n    }\n    OTLPLogExporter.prototype.convert = function (logs) {\n        return createExportLogsServiceRequest(logs);\n    };\n    OTLPLogExporter.prototype.getDefaultUrl = function (config) {\n        return typeof config.url === 'string'\n            ? config.url\n            : getEnv().OTEL_EXPORTER_OTLP_LOGS_ENDPOINT.length > 0\n                ? appendRootPathToUrlIfNeeded(getEnv().OTEL_EXPORTER_OTLP_LOGS_ENDPOINT)\n                : getEnv().OTEL_EXPORTER_OTLP_ENDPOINT.length > 0\n                    ? appendResourcePathToUrl(getEnv().OTEL_EXPORTER_OTLP_ENDPOINT, DEFAULT_COLLECTOR_RESOURCE_PATH)\n                    : DEFAULT_COLLECTOR_URL;\n    };\n    OTLPLogExporter.prototype.getServiceClientType = function () {\n        return ServiceClientType.LOGS;\n    };\n    return OTLPLogExporter;\n}(OTLPProtoExporterBrowserBase));\nexport { OTLPLogExporter };\n//# sourceMappingURL=OTLPLogExporter.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport { getEnv, baggageUtils } from '@opentelemetry/core';\nimport { appendResourcePathToUrl, appendRootPathToUrlIfNeeded, } from '@opentelemetry/otlp-exporter-base';\nimport { OTLPProtoExporterBrowserBase, ServiceClientType, } from '@opentelemetry/otlp-proto-exporter-base';\nimport { createExportTraceServiceRequest, } from '@opentelemetry/otlp-transformer';\nvar DEFAULT_COLLECTOR_RESOURCE_PATH = 'v1/traces';\nvar DEFAULT_COLLECTOR_URL = \"http://localhost:4318/\" + DEFAULT_COLLECTOR_RESOURCE_PATH;\n/**\n * Collector Trace Exporter for Web\n */\nvar OTLPTraceExporter = /** @class */ (function (_super) {\n    __extends(OTLPTraceExporter, _super);\n    function OTLPTraceExporter(config) {\n        if (config === void 0) { config = {}; }\n        var _this = _super.call(this, config) || this;\n        _this._headers = Object.assign(_this._headers, baggageUtils.parseKeyPairsIntoRecord(getEnv().OTEL_EXPORTER_OTLP_TRACES_HEADERS));\n        return _this;\n    }\n    OTLPTraceExporter.prototype.convert = function (spans) {\n        return createExportTraceServiceRequest(spans);\n    };\n    OTLPTraceExporter.prototype.getDefaultUrl = function (config) {\n        return typeof config.url === 'string'\n            ? config.url\n            : getEnv().OTEL_EXPORTER_OTLP_TRACES_ENDPOINT.length > 0\n                ? appendRootPathToUrlIfNeeded(getEnv().OTEL_EXPORTER_OTLP_TRACES_ENDPOINT)\n                : getEnv().OTEL_EXPORTER_OTLP_ENDPOINT.length > 0\n                    ? appendResourcePathToUrl(getEnv().OTEL_EXPORTER_OTLP_ENDPOINT, DEFAULT_COLLECTOR_RESOURCE_PATH)\n                    : DEFAULT_COLLECTOR_URL;\n    };\n    OTLPTraceExporter.prototype.getServiceClientType = function () {\n        return ServiceClientType.SPANS;\n    };\n    return OTLPTraceExporter;\n}(OTLPProtoExporterBrowserBase));\nexport { OTLPTraceExporter };\n//# sourceMappingURL=OTLPTraceExporter.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { createConstMap } from '../internal/utils';\n//----------------------------------------------------------------------------------------------------------\n// DO NOT EDIT, this is an Auto-generated file from scripts/semconv/templates//templates/SemanticAttributes.ts.j2\n//----------------------------------------------------------------------------------------------------------\n//----------------------------------------------------------------------------------------------------------\n// Constant values for SemanticAttributes\n//----------------------------------------------------------------------------------------------------------\n// Temporary local constants to assign to the individual exports and the namespaced version\n// Required to avoid the namespace exports using the unminifable export names for some package types\nvar TMP_AWS_LAMBDA_INVOKED_ARN = 'aws.lambda.invoked_arn';\nvar TMP_DB_SYSTEM = 'db.system';\nvar TMP_DB_CONNECTION_STRING = 'db.connection_string';\nvar TMP_DB_USER = 'db.user';\nvar TMP_DB_JDBC_DRIVER_CLASSNAME = 'db.jdbc.driver_classname';\nvar TMP_DB_NAME = 'db.name';\nvar TMP_DB_STATEMENT = 'db.statement';\nvar TMP_DB_OPERATION = 'db.operation';\nvar TMP_DB_MSSQL_INSTANCE_NAME = 'db.mssql.instance_name';\nvar TMP_DB_CASSANDRA_KEYSPACE = 'db.cassandra.keyspace';\nvar TMP_DB_CASSANDRA_PAGE_SIZE = 'db.cassandra.page_size';\nvar TMP_DB_CASSANDRA_CONSISTENCY_LEVEL = 'db.cassandra.consistency_level';\nvar TMP_DB_CASSANDRA_TABLE = 'db.cassandra.table';\nvar TMP_DB_CASSANDRA_IDEMPOTENCE = 'db.cassandra.idempotence';\nvar TMP_DB_CASSANDRA_SPECULATIVE_EXECUTION_COUNT = 'db.cassandra.speculative_execution_count';\nvar TMP_DB_CASSANDRA_COORDINATOR_ID = 'db.cassandra.coordinator.id';\nvar TMP_DB_CASSANDRA_COORDINATOR_DC = 'db.cassandra.coordinator.dc';\nvar TMP_DB_HBASE_NAMESPACE = 'db.hbase.namespace';\nvar TMP_DB_REDIS_DATABASE_INDEX = 'db.redis.database_index';\nvar TMP_DB_MONGODB_COLLECTION = 'db.mongodb.collection';\nvar TMP_DB_SQL_TABLE = 'db.sql.table';\nvar TMP_EXCEPTION_TYPE = 'exception.type';\nvar TMP_EXCEPTION_MESSAGE = 'exception.message';\nvar TMP_EXCEPTION_STACKTRACE = 'exception.stacktrace';\nvar TMP_EXCEPTION_ESCAPED = 'exception.escaped';\nvar TMP_FAAS_TRIGGER = 'faas.trigger';\nvar TMP_FAAS_EXECUTION = 'faas.execution';\nvar TMP_FAAS_DOCUMENT_COLLECTION = 'faas.document.collection';\nvar TMP_FAAS_DOCUMENT_OPERATION = 'faas.document.operation';\nvar TMP_FAAS_DOCUMENT_TIME = 'faas.document.time';\nvar TMP_FAAS_DOCUMENT_NAME = 'faas.document.name';\nvar TMP_FAAS_TIME = 'faas.time';\nvar TMP_FAAS_CRON = 'faas.cron';\nvar TMP_FAAS_COLDSTART = 'faas.coldstart';\nvar TMP_FAAS_INVOKED_NAME = 'faas.invoked_name';\nvar TMP_FAAS_INVOKED_PROVIDER = 'faas.invoked_provider';\nvar TMP_FAAS_INVOKED_REGION = 'faas.invoked_region';\nvar TMP_NET_TRANSPORT = 'net.transport';\nvar TMP_NET_PEER_IP = 'net.peer.ip';\nvar TMP_NET_PEER_PORT = 'net.peer.port';\nvar TMP_NET_PEER_NAME = 'net.peer.name';\nvar TMP_NET_HOST_IP = 'net.host.ip';\nvar TMP_NET_HOST_PORT = 'net.host.port';\nvar TMP_NET_HOST_NAME = 'net.host.name';\nvar TMP_NET_HOST_CONNECTION_TYPE = 'net.host.connection.type';\nvar TMP_NET_HOST_CONNECTION_SUBTYPE = 'net.host.connection.subtype';\nvar TMP_NET_HOST_CARRIER_NAME = 'net.host.carrier.name';\nvar TMP_NET_HOST_CARRIER_MCC = 'net.host.carrier.mcc';\nvar TMP_NET_HOST_CARRIER_MNC = 'net.host.carrier.mnc';\nvar TMP_NET_HOST_CARRIER_ICC = 'net.host.carrier.icc';\nvar TMP_PEER_SERVICE = 'peer.service';\nvar TMP_ENDUSER_ID = 'enduser.id';\nvar TMP_ENDUSER_ROLE = 'enduser.role';\nvar TMP_ENDUSER_SCOPE = 'enduser.scope';\nvar TMP_THREAD_ID = 'thread.id';\nvar TMP_THREAD_NAME = 'thread.name';\nvar TMP_CODE_FUNCTION = 'code.function';\nvar TMP_CODE_NAMESPACE = 'code.namespace';\nvar TMP_CODE_FILEPATH = 'code.filepath';\nvar TMP_CODE_LINENO = 'code.lineno';\nvar TMP_HTTP_METHOD = 'http.method';\nvar TMP_HTTP_URL = 'http.url';\nvar TMP_HTTP_TARGET = 'http.target';\nvar TMP_HTTP_HOST = 'http.host';\nvar TMP_HTTP_SCHEME = 'http.scheme';\nvar TMP_HTTP_STATUS_CODE = 'http.status_code';\nvar TMP_HTTP_FLAVOR = 'http.flavor';\nvar TMP_HTTP_USER_AGENT = 'http.user_agent';\nvar TMP_HTTP_REQUEST_CONTENT_LENGTH = 'http.request_content_length';\nvar TMP_HTTP_REQUEST_CONTENT_LENGTH_UNCOMPRESSED = 'http.request_content_length_uncompressed';\nvar TMP_HTTP_RESPONSE_CONTENT_LENGTH = 'http.response_content_length';\nvar TMP_HTTP_RESPONSE_CONTENT_LENGTH_UNCOMPRESSED = 'http.response_content_length_uncompressed';\nvar TMP_HTTP_SERVER_NAME = 'http.server_name';\nvar TMP_HTTP_ROUTE = 'http.route';\nvar TMP_HTTP_CLIENT_IP = 'http.client_ip';\nvar TMP_AWS_DYNAMODB_TABLE_NAMES = 'aws.dynamodb.table_names';\nvar TMP_AWS_DYNAMODB_CONSUMED_CAPACITY = 'aws.dynamodb.consumed_capacity';\nvar TMP_AWS_DYNAMODB_ITEM_COLLECTION_METRICS = 'aws.dynamodb.item_collection_metrics';\nvar TMP_AWS_DYNAMODB_PROVISIONED_READ_CAPACITY = 'aws.dynamodb.provisioned_read_capacity';\nvar TMP_AWS_DYNAMODB_PROVISIONED_WRITE_CAPACITY = 'aws.dynamodb.provisioned_write_capacity';\nvar TMP_AWS_DYNAMODB_CONSISTENT_READ = 'aws.dynamodb.consistent_read';\nvar TMP_AWS_DYNAMODB_PROJECTION = 'aws.dynamodb.projection';\nvar TMP_AWS_DYNAMODB_LIMIT = 'aws.dynamodb.limit';\nvar TMP_AWS_DYNAMODB_ATTRIBUTES_TO_GET = 'aws.dynamodb.attributes_to_get';\nvar TMP_AWS_DYNAMODB_INDEX_NAME = 'aws.dynamodb.index_name';\nvar TMP_AWS_DYNAMODB_SELECT = 'aws.dynamodb.select';\nvar TMP_AWS_DYNAMODB_GLOBAL_SECONDARY_INDEXES = 'aws.dynamodb.global_secondary_indexes';\nvar TMP_AWS_DYNAMODB_LOCAL_SECONDARY_INDEXES = 'aws.dynamodb.local_secondary_indexes';\nvar TMP_AWS_DYNAMODB_EXCLUSIVE_START_TABLE = 'aws.dynamodb.exclusive_start_table';\nvar TMP_AWS_DYNAMODB_TABLE_COUNT = 'aws.dynamodb.table_count';\nvar TMP_AWS_DYNAMODB_SCAN_FORWARD = 'aws.dynamodb.scan_forward';\nvar TMP_AWS_DYNAMODB_SEGMENT = 'aws.dynamodb.segment';\nvar TMP_AWS_DYNAMODB_TOTAL_SEGMENTS = 'aws.dynamodb.total_segments';\nvar TMP_AWS_DYNAMODB_COUNT = 'aws.dynamodb.count';\nvar TMP_AWS_DYNAMODB_SCANNED_COUNT = 'aws.dynamodb.scanned_count';\nvar TMP_AWS_DYNAMODB_ATTRIBUTE_DEFINITIONS = 'aws.dynamodb.attribute_definitions';\nvar TMP_AWS_DYNAMODB_GLOBAL_SECONDARY_INDEX_UPDATES = 'aws.dynamodb.global_secondary_index_updates';\nvar TMP_MESSAGING_SYSTEM = 'messaging.system';\nvar TMP_MESSAGING_DESTINATION = 'messaging.destination';\nvar TMP_MESSAGING_DESTINATION_KIND = 'messaging.destination_kind';\nvar TMP_MESSAGING_TEMP_DESTINATION = 'messaging.temp_destination';\nvar TMP_MESSAGING_PROTOCOL = 'messaging.protocol';\nvar TMP_MESSAGING_PROTOCOL_VERSION = 'messaging.protocol_version';\nvar TMP_MESSAGING_URL = 'messaging.url';\nvar TMP_MESSAGING_MESSAGE_ID = 'messaging.message_id';\nvar TMP_MESSAGING_CONVERSATION_ID = 'messaging.conversation_id';\nvar TMP_MESSAGING_MESSAGE_PAYLOAD_SIZE_BYTES = 'messaging.message_payload_size_bytes';\nvar TMP_MESSAGING_MESSAGE_PAYLOAD_COMPRESSED_SIZE_BYTES = 'messaging.message_payload_compressed_size_bytes';\nvar TMP_MESSAGING_OPERATION = 'messaging.operation';\nvar TMP_MESSAGING_CONSUMER_ID = 'messaging.consumer_id';\nvar TMP_MESSAGING_RABBITMQ_ROUTING_KEY = 'messaging.rabbitmq.routing_key';\nvar TMP_MESSAGING_KAFKA_MESSAGE_KEY = 'messaging.kafka.message_key';\nvar TMP_MESSAGING_KAFKA_CONSUMER_GROUP = 'messaging.kafka.consumer_group';\nvar TMP_MESSAGING_KAFKA_CLIENT_ID = 'messaging.kafka.client_id';\nvar TMP_MESSAGING_KAFKA_PARTITION = 'messaging.kafka.partition';\nvar TMP_MESSAGING_KAFKA_TOMBSTONE = 'messaging.kafka.tombstone';\nvar TMP_RPC_SYSTEM = 'rpc.system';\nvar TMP_RPC_SERVICE = 'rpc.service';\nvar TMP_RPC_METHOD = 'rpc.method';\nvar TMP_RPC_GRPC_STATUS_CODE = 'rpc.grpc.status_code';\nvar TMP_RPC_JSONRPC_VERSION = 'rpc.jsonrpc.version';\nvar TMP_RPC_JSONRPC_REQUEST_ID = 'rpc.jsonrpc.request_id';\nvar TMP_RPC_JSONRPC_ERROR_CODE = 'rpc.jsonrpc.error_code';\nvar TMP_RPC_JSONRPC_ERROR_MESSAGE = 'rpc.jsonrpc.error_message';\nvar TMP_MESSAGE_TYPE = 'message.type';\nvar TMP_MESSAGE_ID = 'message.id';\nvar TMP_MESSAGE_COMPRESSED_SIZE = 'message.compressed_size';\nvar TMP_MESSAGE_UNCOMPRESSED_SIZE = 'message.uncompressed_size';\n/**\n * The full invoked ARN as provided on the `Context` passed to the function (`Lambda-Runtime-Invoked-Function-Arn` header on the `/runtime/invocation/next` applicable).\n *\n * Note: This may be different from `faas.id` if an alias is involved.\n */\nexport var SEMATTRS_AWS_LAMBDA_INVOKED_ARN = TMP_AWS_LAMBDA_INVOKED_ARN;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n */\nexport var SEMATTRS_DB_SYSTEM = TMP_DB_SYSTEM;\n/**\n * The connection string used to connect to the database. It is recommended to remove embedded credentials.\n */\nexport var SEMATTRS_DB_CONNECTION_STRING = TMP_DB_CONNECTION_STRING;\n/**\n * Username for accessing the database.\n */\nexport var SEMATTRS_DB_USER = TMP_DB_USER;\n/**\n * The fully-qualified class name of the [Java Database Connectivity (JDBC)](https://docs.oracle.com/javase/8/docs/technotes/guides/jdbc/) driver used to connect.\n */\nexport var SEMATTRS_DB_JDBC_DRIVER_CLASSNAME = TMP_DB_JDBC_DRIVER_CLASSNAME;\n/**\n * If no [tech-specific attribute](#call-level-attributes-for-specific-technologies) is defined, this attribute is used to report the name of the database being accessed. For commands that switch the database, this should be set to the target database (even if the command fails).\n *\n * Note: In some SQL databases, the database name to be used is called &#34;schema name&#34;.\n */\nexport var SEMATTRS_DB_NAME = TMP_DB_NAME;\n/**\n * The database statement being executed.\n *\n * Note: The value may be sanitized to exclude sensitive information.\n */\nexport var SEMATTRS_DB_STATEMENT = TMP_DB_STATEMENT;\n/**\n * The name of the operation being executed, e.g. the [MongoDB command name](https://docs.mongodb.com/manual/reference/command/#database-operations) such as `findAndModify`, or the SQL keyword.\n *\n * Note: When setting this to an SQL keyword, it is not recommended to attempt any client-side parsing of `db.statement` just to get this property, but it should be set if the operation name is provided by the library being instrumented. If the SQL statement has an ambiguous operation, or performs more than one operation, this value may be omitted.\n */\nexport var SEMATTRS_DB_OPERATION = TMP_DB_OPERATION;\n/**\n * The Microsoft SQL Server [instance name](https://docs.microsoft.com/en-us/sql/connect/jdbc/building-the-connection-url?view=sql-server-ver15) connecting to. This name is used to determine the port of a named instance.\n *\n * Note: If setting a `db.mssql.instance_name`, `net.peer.port` is no longer required (but still recommended if non-standard).\n */\nexport var SEMATTRS_DB_MSSQL_INSTANCE_NAME = TMP_DB_MSSQL_INSTANCE_NAME;\n/**\n * The name of the keyspace being accessed. To be used instead of the generic `db.name` attribute.\n */\nexport var SEMATTRS_DB_CASSANDRA_KEYSPACE = TMP_DB_CASSANDRA_KEYSPACE;\n/**\n * The fetch size used for paging, i.e. how many rows will be returned at once.\n */\nexport var SEMATTRS_DB_CASSANDRA_PAGE_SIZE = TMP_DB_CASSANDRA_PAGE_SIZE;\n/**\n * The consistency level of the query. Based on consistency values from [CQL](https://docs.datastax.com/en/cassandra-oss/3.0/cassandra/dml/dmlConfigConsistency.html).\n */\nexport var SEMATTRS_DB_CASSANDRA_CONSISTENCY_LEVEL = TMP_DB_CASSANDRA_CONSISTENCY_LEVEL;\n/**\n * The name of the primary table that the operation is acting upon, including the schema name (if applicable).\n *\n * Note: This mirrors the db.sql.table attribute but references cassandra rather than sql. It is not recommended to attempt any client-side parsing of `db.statement` just to get this property, but it should be set if it is provided by the library being instrumented. If the operation is acting upon an anonymous table, or more than one table, this value MUST NOT be set.\n */\nexport var SEMATTRS_DB_CASSANDRA_TABLE = TMP_DB_CASSANDRA_TABLE;\n/**\n * Whether or not the query is idempotent.\n */\nexport var SEMATTRS_DB_CASSANDRA_IDEMPOTENCE = TMP_DB_CASSANDRA_IDEMPOTENCE;\n/**\n * The number of times a query was speculatively executed. Not set or `0` if the query was not executed speculatively.\n */\nexport var SEMATTRS_DB_CASSANDRA_SPECULATIVE_EXECUTION_COUNT = TMP_DB_CASSANDRA_SPECULATIVE_EXECUTION_COUNT;\n/**\n * The ID of the coordinating node for a query.\n */\nexport var SEMATTRS_DB_CASSANDRA_COORDINATOR_ID = TMP_DB_CASSANDRA_COORDINATOR_ID;\n/**\n * The data center of the coordinating node for a query.\n */\nexport var SEMATTRS_DB_CASSANDRA_COORDINATOR_DC = TMP_DB_CASSANDRA_COORDINATOR_DC;\n/**\n * The [HBase namespace](https://hbase.apache.org/book.html#_namespace) being accessed. To be used instead of the generic `db.name` attribute.\n */\nexport var SEMATTRS_DB_HBASE_NAMESPACE = TMP_DB_HBASE_NAMESPACE;\n/**\n * The index of the database being accessed as used in the [`SELECT` command](https://redis.io/commands/select), provided as an integer. To be used instead of the generic `db.name` attribute.\n */\nexport var SEMATTRS_DB_REDIS_DATABASE_INDEX = TMP_DB_REDIS_DATABASE_INDEX;\n/**\n * The collection being accessed within the database stated in `db.name`.\n */\nexport var SEMATTRS_DB_MONGODB_COLLECTION = TMP_DB_MONGODB_COLLECTION;\n/**\n * The name of the primary table that the operation is acting upon, including the schema name (if applicable).\n *\n * Note: It is not recommended to attempt any client-side parsing of `db.statement` just to get this property, but it should be set if it is provided by the library being instrumented. If the operation is acting upon an anonymous table, or more than one table, this value MUST NOT be set.\n */\nexport var SEMATTRS_DB_SQL_TABLE = TMP_DB_SQL_TABLE;\n/**\n * The type of the exception (its fully-qualified class name, if applicable). The dynamic type of the exception should be preferred over the static type in languages that support it.\n */\nexport var SEMATTRS_EXCEPTION_TYPE = TMP_EXCEPTION_TYPE;\n/**\n * The exception message.\n */\nexport var SEMATTRS_EXCEPTION_MESSAGE = TMP_EXCEPTION_MESSAGE;\n/**\n * A stacktrace as a string in the natural representation for the language runtime. The representation is to be determined and documented by each language SIG.\n */\nexport var SEMATTRS_EXCEPTION_STACKTRACE = TMP_EXCEPTION_STACKTRACE;\n/**\n* SHOULD be set to true if the exception event is recorded at a point where it is known that the exception is escaping the scope of the span.\n*\n* Note: An exception is considered to have escaped (or left) the scope of a span,\nif that span is ended while the exception is still logically &#34;in flight&#34;.\nThis may be actually &#34;in flight&#34; in some languages (e.g. if the exception\nis passed to a Context manager&#39;s `__exit__` method in Python) but will\nusually be caught at the point of recording the exception in most languages.\n\nIt is usually not possible to determine at the point where an exception is thrown\nwhether it will escape the scope of a span.\nHowever, it is trivial to know that an exception\nwill escape, if one checks for an active exception just before ending the span,\nas done in the [example above](#exception-end-example).\n\nIt follows that an exception may still escape the scope of the span\neven if the `exception.escaped` attribute was not set or set to false,\nsince the event might have been recorded at a time where it was not\nclear whether the exception will escape.\n*/\nexport var SEMATTRS_EXCEPTION_ESCAPED = TMP_EXCEPTION_ESCAPED;\n/**\n * Type of the trigger on which the function is executed.\n */\nexport var SEMATTRS_FAAS_TRIGGER = TMP_FAAS_TRIGGER;\n/**\n * The execution ID of the current function execution.\n */\nexport var SEMATTRS_FAAS_EXECUTION = TMP_FAAS_EXECUTION;\n/**\n * The name of the source on which the triggering operation was performed. For example, in Cloud Storage or S3 corresponds to the bucket name, and in Cosmos DB to the database name.\n */\nexport var SEMATTRS_FAAS_DOCUMENT_COLLECTION = TMP_FAAS_DOCUMENT_COLLECTION;\n/**\n * Describes the type of the operation that was performed on the data.\n */\nexport var SEMATTRS_FAAS_DOCUMENT_OPERATION = TMP_FAAS_DOCUMENT_OPERATION;\n/**\n * A string containing the time when the data was accessed in the [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html) format expressed in [UTC](https://www.w3.org/TR/NOTE-datetime).\n */\nexport var SEMATTRS_FAAS_DOCUMENT_TIME = TMP_FAAS_DOCUMENT_TIME;\n/**\n * The document name/table subjected to the operation. For example, in Cloud Storage or S3 is the name of the file, and in Cosmos DB the table name.\n */\nexport var SEMATTRS_FAAS_DOCUMENT_NAME = TMP_FAAS_DOCUMENT_NAME;\n/**\n * A string containing the function invocation time in the [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html) format expressed in [UTC](https://www.w3.org/TR/NOTE-datetime).\n */\nexport var SEMATTRS_FAAS_TIME = TMP_FAAS_TIME;\n/**\n * A string containing the schedule period as [Cron Expression](https://docs.oracle.com/cd/E12058_01/doc/doc.1014/e12030/cron_expressions.htm).\n */\nexport var SEMATTRS_FAAS_CRON = TMP_FAAS_CRON;\n/**\n * A boolean that is true if the serverless function is executed for the first time (aka cold-start).\n */\nexport var SEMATTRS_FAAS_COLDSTART = TMP_FAAS_COLDSTART;\n/**\n * The name of the invoked function.\n *\n * Note: SHOULD be equal to the `faas.name` resource attribute of the invoked function.\n */\nexport var SEMATTRS_FAAS_INVOKED_NAME = TMP_FAAS_INVOKED_NAME;\n/**\n * The cloud provider of the invoked function.\n *\n * Note: SHOULD be equal to the `cloud.provider` resource attribute of the invoked function.\n */\nexport var SEMATTRS_FAAS_INVOKED_PROVIDER = TMP_FAAS_INVOKED_PROVIDER;\n/**\n * The cloud region of the invoked function.\n *\n * Note: SHOULD be equal to the `cloud.region` resource attribute of the invoked function.\n */\nexport var SEMATTRS_FAAS_INVOKED_REGION = TMP_FAAS_INVOKED_REGION;\n/**\n * Transport protocol used. See note below.\n */\nexport var SEMATTRS_NET_TRANSPORT = TMP_NET_TRANSPORT;\n/**\n * Remote address of the peer (dotted decimal for IPv4 or [RFC5952](https://tools.ietf.org/html/rfc5952) for IPv6).\n */\nexport var SEMATTRS_NET_PEER_IP = TMP_NET_PEER_IP;\n/**\n * Remote port number.\n */\nexport var SEMATTRS_NET_PEER_PORT = TMP_NET_PEER_PORT;\n/**\n * Remote hostname or similar, see note below.\n */\nexport var SEMATTRS_NET_PEER_NAME = TMP_NET_PEER_NAME;\n/**\n * Like `net.peer.ip` but for the host IP. Useful in case of a multi-IP host.\n */\nexport var SEMATTRS_NET_HOST_IP = TMP_NET_HOST_IP;\n/**\n * Like `net.peer.port` but for the host port.\n */\nexport var SEMATTRS_NET_HOST_PORT = TMP_NET_HOST_PORT;\n/**\n * Local hostname or similar, see note below.\n */\nexport var SEMATTRS_NET_HOST_NAME = TMP_NET_HOST_NAME;\n/**\n * The internet connection type currently being used by the host.\n */\nexport var SEMATTRS_NET_HOST_CONNECTION_TYPE = TMP_NET_HOST_CONNECTION_TYPE;\n/**\n * This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.\n */\nexport var SEMATTRS_NET_HOST_CONNECTION_SUBTYPE = TMP_NET_HOST_CONNECTION_SUBTYPE;\n/**\n * The name of the mobile carrier.\n */\nexport var SEMATTRS_NET_HOST_CARRIER_NAME = TMP_NET_HOST_CARRIER_NAME;\n/**\n * The mobile carrier country code.\n */\nexport var SEMATTRS_NET_HOST_CARRIER_MCC = TMP_NET_HOST_CARRIER_MCC;\n/**\n * The mobile carrier network code.\n */\nexport var SEMATTRS_NET_HOST_CARRIER_MNC = TMP_NET_HOST_CARRIER_MNC;\n/**\n * The ISO 3166-1 alpha-2 2-character country code associated with the mobile carrier network.\n */\nexport var SEMATTRS_NET_HOST_CARRIER_ICC = TMP_NET_HOST_CARRIER_ICC;\n/**\n * The [`service.name`](../../resource/semantic_conventions/README.md#service) of the remote service. SHOULD be equal to the actual `service.name` resource attribute of the remote service if any.\n */\nexport var SEMATTRS_PEER_SERVICE = TMP_PEER_SERVICE;\n/**\n * Username or client_id extracted from the access token or [Authorization](https://tools.ietf.org/html/rfc7235#section-4.2) header in the inbound request from outside the system.\n */\nexport var SEMATTRS_ENDUSER_ID = TMP_ENDUSER_ID;\n/**\n * Actual/assumed role the client is making the request under extracted from token or application security context.\n */\nexport var SEMATTRS_ENDUSER_ROLE = TMP_ENDUSER_ROLE;\n/**\n * Scopes or granted authorities the client currently possesses extracted from token or application security context. The value would come from the scope associated with an [OAuth 2.0 Access Token](https://tools.ietf.org/html/rfc6749#section-3.3) or an attribute value in a [SAML 2.0 Assertion](http://docs.oasis-open.org/security/saml/Post2.0/sstc-saml-tech-overview-2.0.html).\n */\nexport var SEMATTRS_ENDUSER_SCOPE = TMP_ENDUSER_SCOPE;\n/**\n * Current &#34;managed&#34; thread ID (as opposed to OS thread ID).\n */\nexport var SEMATTRS_THREAD_ID = TMP_THREAD_ID;\n/**\n * Current thread name.\n */\nexport var SEMATTRS_THREAD_NAME = TMP_THREAD_NAME;\n/**\n * The method or function name, or equivalent (usually rightmost part of the code unit&#39;s name).\n */\nexport var SEMATTRS_CODE_FUNCTION = TMP_CODE_FUNCTION;\n/**\n * The &#34;namespace&#34; within which `code.function` is defined. Usually the qualified class or module name, such that `code.namespace` + some separator + `code.function` form a unique identifier for the code unit.\n */\nexport var SEMATTRS_CODE_NAMESPACE = TMP_CODE_NAMESPACE;\n/**\n * The source code file name that identifies the code unit as uniquely as possible (preferably an absolute file path).\n */\nexport var SEMATTRS_CODE_FILEPATH = TMP_CODE_FILEPATH;\n/**\n * The line number in `code.filepath` best representing the operation. It SHOULD point within the code unit named in `code.function`.\n */\nexport var SEMATTRS_CODE_LINENO = TMP_CODE_LINENO;\n/**\n * HTTP request method.\n */\nexport var SEMATTRS_HTTP_METHOD = TMP_HTTP_METHOD;\n/**\n * Full HTTP request URL in the form `scheme://host[:port]/path?query[#fragment]`. Usually the fragment is not transmitted over HTTP, but if it is known, it should be included nevertheless.\n *\n * Note: `http.url` MUST NOT contain credentials passed via URL in form of `https://username:password@www.example.com/`. In such case the attribute&#39;s value should be `https://www.example.com/`.\n */\nexport var SEMATTRS_HTTP_URL = TMP_HTTP_URL;\n/**\n * The full request target as passed in a HTTP request line or equivalent.\n */\nexport var SEMATTRS_HTTP_TARGET = TMP_HTTP_TARGET;\n/**\n * The value of the [HTTP host header](https://tools.ietf.org/html/rfc7230#section-5.4). An empty Host header should also be reported, see note.\n *\n * Note: When the header is present but empty the attribute SHOULD be set to the empty string. Note that this is a valid situation that is expected in certain cases, according the aforementioned [section of RFC 7230](https://tools.ietf.org/html/rfc7230#section-5.4). When the header is not set the attribute MUST NOT be set.\n */\nexport var SEMATTRS_HTTP_HOST = TMP_HTTP_HOST;\n/**\n * The URI scheme identifying the used protocol.\n */\nexport var SEMATTRS_HTTP_SCHEME = TMP_HTTP_SCHEME;\n/**\n * [HTTP response status code](https://tools.ietf.org/html/rfc7231#section-6).\n */\nexport var SEMATTRS_HTTP_STATUS_CODE = TMP_HTTP_STATUS_CODE;\n/**\n * Kind of HTTP protocol used.\n *\n * Note: If `net.transport` is not specified, it can be assumed to be `IP.TCP` except if `http.flavor` is `QUIC`, in which case `IP.UDP` is assumed.\n */\nexport var SEMATTRS_HTTP_FLAVOR = TMP_HTTP_FLAVOR;\n/**\n * Value of the [HTTP User-Agent](https://tools.ietf.org/html/rfc7231#section-5.5.3) header sent by the client.\n */\nexport var SEMATTRS_HTTP_USER_AGENT = TMP_HTTP_USER_AGENT;\n/**\n * The size of the request payload body in bytes. This is the number of bytes transferred excluding headers and is often, but not always, present as the [Content-Length](https://tools.ietf.org/html/rfc7230#section-3.3.2) header. For requests using transport encoding, this should be the compressed size.\n */\nexport var SEMATTRS_HTTP_REQUEST_CONTENT_LENGTH = TMP_HTTP_REQUEST_CONTENT_LENGTH;\n/**\n * The size of the uncompressed request payload body after transport decoding. Not set if transport encoding not used.\n */\nexport var SEMATTRS_HTTP_REQUEST_CONTENT_LENGTH_UNCOMPRESSED = TMP_HTTP_REQUEST_CONTENT_LENGTH_UNCOMPRESSED;\n/**\n * The size of the response payload body in bytes. This is the number of bytes transferred excluding headers and is often, but not always, present as the [Content-Length](https://tools.ietf.org/html/rfc7230#section-3.3.2) header. For requests using transport encoding, this should be the compressed size.\n */\nexport var SEMATTRS_HTTP_RESPONSE_CONTENT_LENGTH = TMP_HTTP_RESPONSE_CONTENT_LENGTH;\n/**\n * The size of the uncompressed response payload body after transport decoding. Not set if transport encoding not used.\n */\nexport var SEMATTRS_HTTP_RESPONSE_CONTENT_LENGTH_UNCOMPRESSED = TMP_HTTP_RESPONSE_CONTENT_LENGTH_UNCOMPRESSED;\n/**\n * The primary server name of the matched virtual host. This should be obtained via configuration. If no such configuration can be obtained, this attribute MUST NOT be set ( `net.host.name` should be used instead).\n *\n * Note: `http.url` is usually not readily available on the server side but would have to be assembled in a cumbersome and sometimes lossy process from other information (see e.g. open-telemetry/opentelemetry-python/pull/148). It is thus preferred to supply the raw data that is available.\n */\nexport var SEMATTRS_HTTP_SERVER_NAME = TMP_HTTP_SERVER_NAME;\n/**\n * The matched route (path template).\n */\nexport var SEMATTRS_HTTP_ROUTE = TMP_HTTP_ROUTE;\n/**\n* The IP address of the original client behind all proxies, if known (e.g. from [X-Forwarded-For](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Forwarded-For)).\n*\n* Note: This is not necessarily the same as `net.peer.ip`, which would\nidentify the network-level peer, which may be a proxy.\n\nThis attribute should be set when a source of information different\nfrom the one used for `net.peer.ip`, is available even if that other\nsource just confirms the same value as `net.peer.ip`.\nRationale: For `net.peer.ip`, one typically does not know if it\ncomes from a proxy, reverse proxy, or the actual client. Setting\n`http.client_ip` when it&#39;s the same as `net.peer.ip` means that\none is at least somewhat confident that the address is not that of\nthe closest proxy.\n*/\nexport var SEMATTRS_HTTP_CLIENT_IP = TMP_HTTP_CLIENT_IP;\n/**\n * The keys in the `RequestItems` object field.\n */\nexport var SEMATTRS_AWS_DYNAMODB_TABLE_NAMES = TMP_AWS_DYNAMODB_TABLE_NAMES;\n/**\n * The JSON-serialized value of each item in the `ConsumedCapacity` response field.\n */\nexport var SEMATTRS_AWS_DYNAMODB_CONSUMED_CAPACITY = TMP_AWS_DYNAMODB_CONSUMED_CAPACITY;\n/**\n * The JSON-serialized value of the `ItemCollectionMetrics` response field.\n */\nexport var SEMATTRS_AWS_DYNAMODB_ITEM_COLLECTION_METRICS = TMP_AWS_DYNAMODB_ITEM_COLLECTION_METRICS;\n/**\n * The value of the `ProvisionedThroughput.ReadCapacityUnits` request parameter.\n */\nexport var SEMATTRS_AWS_DYNAMODB_PROVISIONED_READ_CAPACITY = TMP_AWS_DYNAMODB_PROVISIONED_READ_CAPACITY;\n/**\n * The value of the `ProvisionedThroughput.WriteCapacityUnits` request parameter.\n */\nexport var SEMATTRS_AWS_DYNAMODB_PROVISIONED_WRITE_CAPACITY = TMP_AWS_DYNAMODB_PROVISIONED_WRITE_CAPACITY;\n/**\n * The value of the `ConsistentRead` request parameter.\n */\nexport var SEMATTRS_AWS_DYNAMODB_CONSISTENT_READ = TMP_AWS_DYNAMODB_CONSISTENT_READ;\n/**\n * The value of the `ProjectionExpression` request parameter.\n */\nexport var SEMATTRS_AWS_DYNAMODB_PROJECTION = TMP_AWS_DYNAMODB_PROJECTION;\n/**\n * The value of the `Limit` request parameter.\n */\nexport var SEMATTRS_AWS_DYNAMODB_LIMIT = TMP_AWS_DYNAMODB_LIMIT;\n/**\n * The value of the `AttributesToGet` request parameter.\n */\nexport var SEMATTRS_AWS_DYNAMODB_ATTRIBUTES_TO_GET = TMP_AWS_DYNAMODB_ATTRIBUTES_TO_GET;\n/**\n * The value of the `IndexName` request parameter.\n */\nexport var SEMATTRS_AWS_DYNAMODB_INDEX_NAME = TMP_AWS_DYNAMODB_INDEX_NAME;\n/**\n * The value of the `Select` request parameter.\n */\nexport var SEMATTRS_AWS_DYNAMODB_SELECT = TMP_AWS_DYNAMODB_SELECT;\n/**\n * The JSON-serialized value of each item of the `GlobalSecondaryIndexes` request field.\n */\nexport var SEMATTRS_AWS_DYNAMODB_GLOBAL_SECONDARY_INDEXES = TMP_AWS_DYNAMODB_GLOBAL_SECONDARY_INDEXES;\n/**\n * The JSON-serialized value of each item of the `LocalSecondaryIndexes` request field.\n */\nexport var SEMATTRS_AWS_DYNAMODB_LOCAL_SECONDARY_INDEXES = TMP_AWS_DYNAMODB_LOCAL_SECONDARY_INDEXES;\n/**\n * The value of the `ExclusiveStartTableName` request parameter.\n */\nexport var SEMATTRS_AWS_DYNAMODB_EXCLUSIVE_START_TABLE = TMP_AWS_DYNAMODB_EXCLUSIVE_START_TABLE;\n/**\n * The the number of items in the `TableNames` response parameter.\n */\nexport var SEMATTRS_AWS_DYNAMODB_TABLE_COUNT = TMP_AWS_DYNAMODB_TABLE_COUNT;\n/**\n * The value of the `ScanIndexForward` request parameter.\n */\nexport var SEMATTRS_AWS_DYNAMODB_SCAN_FORWARD = TMP_AWS_DYNAMODB_SCAN_FORWARD;\n/**\n * The value of the `Segment` request parameter.\n */\nexport var SEMATTRS_AWS_DYNAMODB_SEGMENT = TMP_AWS_DYNAMODB_SEGMENT;\n/**\n * The value of the `TotalSegments` request parameter.\n */\nexport var SEMATTRS_AWS_DYNAMODB_TOTAL_SEGMENTS = TMP_AWS_DYNAMODB_TOTAL_SEGMENTS;\n/**\n * The value of the `Count` response parameter.\n */\nexport var SEMATTRS_AWS_DYNAMODB_COUNT = TMP_AWS_DYNAMODB_COUNT;\n/**\n * The value of the `ScannedCount` response parameter.\n */\nexport var SEMATTRS_AWS_DYNAMODB_SCANNED_COUNT = TMP_AWS_DYNAMODB_SCANNED_COUNT;\n/**\n * The JSON-serialized value of each item in the `AttributeDefinitions` request field.\n */\nexport var SEMATTRS_AWS_DYNAMODB_ATTRIBUTE_DEFINITIONS = TMP_AWS_DYNAMODB_ATTRIBUTE_DEFINITIONS;\n/**\n * The JSON-serialized value of each item in the the `GlobalSecondaryIndexUpdates` request field.\n */\nexport var SEMATTRS_AWS_DYNAMODB_GLOBAL_SECONDARY_INDEX_UPDATES = TMP_AWS_DYNAMODB_GLOBAL_SECONDARY_INDEX_UPDATES;\n/**\n * A string identifying the messaging system.\n */\nexport var SEMATTRS_MESSAGING_SYSTEM = TMP_MESSAGING_SYSTEM;\n/**\n * The message destination name. This might be equal to the span name but is required nevertheless.\n */\nexport var SEMATTRS_MESSAGING_DESTINATION = TMP_MESSAGING_DESTINATION;\n/**\n * The kind of message destination.\n */\nexport var SEMATTRS_MESSAGING_DESTINATION_KIND = TMP_MESSAGING_DESTINATION_KIND;\n/**\n * A boolean that is true if the message destination is temporary.\n */\nexport var SEMATTRS_MESSAGING_TEMP_DESTINATION = TMP_MESSAGING_TEMP_DESTINATION;\n/**\n * The name of the transport protocol.\n */\nexport var SEMATTRS_MESSAGING_PROTOCOL = TMP_MESSAGING_PROTOCOL;\n/**\n * The version of the transport protocol.\n */\nexport var SEMATTRS_MESSAGING_PROTOCOL_VERSION = TMP_MESSAGING_PROTOCOL_VERSION;\n/**\n * Connection string.\n */\nexport var SEMATTRS_MESSAGING_URL = TMP_MESSAGING_URL;\n/**\n * A value used by the messaging system as an identifier for the message, represented as a string.\n */\nexport var SEMATTRS_MESSAGING_MESSAGE_ID = TMP_MESSAGING_MESSAGE_ID;\n/**\n * The [conversation ID](#conversations) identifying the conversation to which the message belongs, represented as a string. Sometimes called &#34;Correlation ID&#34;.\n */\nexport var SEMATTRS_MESSAGING_CONVERSATION_ID = TMP_MESSAGING_CONVERSATION_ID;\n/**\n * The (uncompressed) size of the message payload in bytes. Also use this attribute if it is unknown whether the compressed or uncompressed payload size is reported.\n */\nexport var SEMATTRS_MESSAGING_MESSAGE_PAYLOAD_SIZE_BYTES = TMP_MESSAGING_MESSAGE_PAYLOAD_SIZE_BYTES;\n/**\n * The compressed size of the message payload in bytes.\n */\nexport var SEMATTRS_MESSAGING_MESSAGE_PAYLOAD_COMPRESSED_SIZE_BYTES = TMP_MESSAGING_MESSAGE_PAYLOAD_COMPRESSED_SIZE_BYTES;\n/**\n * A string identifying the kind of message consumption as defined in the [Operation names](#operation-names) section above. If the operation is &#34;send&#34;, this attribute MUST NOT be set, since the operation can be inferred from the span kind in that case.\n */\nexport var SEMATTRS_MESSAGING_OPERATION = TMP_MESSAGING_OPERATION;\n/**\n * The identifier for the consumer receiving a message. For Kafka, set it to `{messaging.kafka.consumer_group} - {messaging.kafka.client_id}`, if both are present, or only `messaging.kafka.consumer_group`. For brokers, such as RabbitMQ and Artemis, set it to the `client_id` of the client consuming the message.\n */\nexport var SEMATTRS_MESSAGING_CONSUMER_ID = TMP_MESSAGING_CONSUMER_ID;\n/**\n * RabbitMQ message routing key.\n */\nexport var SEMATTRS_MESSAGING_RABBITMQ_ROUTING_KEY = TMP_MESSAGING_RABBITMQ_ROUTING_KEY;\n/**\n * Message keys in Kafka are used for grouping alike messages to ensure they&#39;re processed on the same partition. They differ from `messaging.message_id` in that they&#39;re not unique. If the key is `null`, the attribute MUST NOT be set.\n *\n * Note: If the key type is not string, it&#39;s string representation has to be supplied for the attribute. If the key has no unambiguous, canonical string form, don&#39;t include its value.\n */\nexport var SEMATTRS_MESSAGING_KAFKA_MESSAGE_KEY = TMP_MESSAGING_KAFKA_MESSAGE_KEY;\n/**\n * Name of the Kafka Consumer Group that is handling the message. Only applies to consumers, not producers.\n */\nexport var SEMATTRS_MESSAGING_KAFKA_CONSUMER_GROUP = TMP_MESSAGING_KAFKA_CONSUMER_GROUP;\n/**\n * Client Id for the Consumer or Producer that is handling the message.\n */\nexport var SEMATTRS_MESSAGING_KAFKA_CLIENT_ID = TMP_MESSAGING_KAFKA_CLIENT_ID;\n/**\n * Partition the message is sent to.\n */\nexport var SEMATTRS_MESSAGING_KAFKA_PARTITION = TMP_MESSAGING_KAFKA_PARTITION;\n/**\n * A boolean that is true if the message is a tombstone.\n */\nexport var SEMATTRS_MESSAGING_KAFKA_TOMBSTONE = TMP_MESSAGING_KAFKA_TOMBSTONE;\n/**\n * A string identifying the remoting system.\n */\nexport var SEMATTRS_RPC_SYSTEM = TMP_RPC_SYSTEM;\n/**\n * The full (logical) name of the service being called, including its package name, if applicable.\n *\n * Note: This is the logical name of the service from the RPC interface perspective, which can be different from the name of any implementing class. The `code.namespace` attribute may be used to store the latter (despite the attribute name, it may include a class name; e.g., class with method actually executing the call on the server side, RPC client stub class on the client side).\n */\nexport var SEMATTRS_RPC_SERVICE = TMP_RPC_SERVICE;\n/**\n * The name of the (logical) method being called, must be equal to the $method part in the span name.\n *\n * Note: This is the logical name of the method from the RPC interface perspective, which can be different from the name of any implementing method/function. The `code.function` attribute may be used to store the latter (e.g., method actually executing the call on the server side, RPC client stub method on the client side).\n */\nexport var SEMATTRS_RPC_METHOD = TMP_RPC_METHOD;\n/**\n * The [numeric status code](https://github.com/grpc/grpc/blob/v1.33.2/doc/statuscodes.md) of the gRPC request.\n */\nexport var SEMATTRS_RPC_GRPC_STATUS_CODE = TMP_RPC_GRPC_STATUS_CODE;\n/**\n * Protocol version as in `jsonrpc` property of request/response. Since JSON-RPC 1.0 does not specify this, the value can be omitted.\n */\nexport var SEMATTRS_RPC_JSONRPC_VERSION = TMP_RPC_JSONRPC_VERSION;\n/**\n * `id` property of request or response. Since protocol allows id to be int, string, `null` or missing (for notifications), value is expected to be cast to string for simplicity. Use empty string in case of `null` value. Omit entirely if this is a notification.\n */\nexport var SEMATTRS_RPC_JSONRPC_REQUEST_ID = TMP_RPC_JSONRPC_REQUEST_ID;\n/**\n * `error.code` property of response if it is an error response.\n */\nexport var SEMATTRS_RPC_JSONRPC_ERROR_CODE = TMP_RPC_JSONRPC_ERROR_CODE;\n/**\n * `error.message` property of response if it is an error response.\n */\nexport var SEMATTRS_RPC_JSONRPC_ERROR_MESSAGE = TMP_RPC_JSONRPC_ERROR_MESSAGE;\n/**\n * Whether this is a received or sent message.\n */\nexport var SEMATTRS_MESSAGE_TYPE = TMP_MESSAGE_TYPE;\n/**\n * MUST be calculated as two different counters starting from `1` one for sent messages and one for received message.\n *\n * Note: This way we guarantee that the values will be consistent between different implementations.\n */\nexport var SEMATTRS_MESSAGE_ID = TMP_MESSAGE_ID;\n/**\n * Compressed size of the message in bytes.\n */\nexport var SEMATTRS_MESSAGE_COMPRESSED_SIZE = TMP_MESSAGE_COMPRESSED_SIZE;\n/**\n * Uncompressed size of the message in bytes.\n */\nexport var SEMATTRS_MESSAGE_UNCOMPRESSED_SIZE = TMP_MESSAGE_UNCOMPRESSED_SIZE;\n/**\n * Create exported Value Map for SemanticAttributes values\n * @deprecated Use the SEMATTRS_XXXXX constants rather than the SemanticAttributes.XXXXX for bundle minification\n */\nexport var SemanticAttributes = \n/*#__PURE__*/ createConstMap([\n    TMP_AWS_LAMBDA_INVOKED_ARN,\n    TMP_DB_SYSTEM,\n    TMP_DB_CONNECTION_STRING,\n    TMP_DB_USER,\n    TMP_DB_JDBC_DRIVER_CLASSNAME,\n    TMP_DB_NAME,\n    TMP_DB_STATEMENT,\n    TMP_DB_OPERATION,\n    TMP_DB_MSSQL_INSTANCE_NAME,\n    TMP_DB_CASSANDRA_KEYSPACE,\n    TMP_DB_CASSANDRA_PAGE_SIZE,\n    TMP_DB_CASSANDRA_CONSISTENCY_LEVEL,\n    TMP_DB_CASSANDRA_TABLE,\n    TMP_DB_CASSANDRA_IDEMPOTENCE,\n    TMP_DB_CASSANDRA_SPECULATIVE_EXECUTION_COUNT,\n    TMP_DB_CASSANDRA_COORDINATOR_ID,\n    TMP_DB_CASSANDRA_COORDINATOR_DC,\n    TMP_DB_HBASE_NAMESPACE,\n    TMP_DB_REDIS_DATABASE_INDEX,\n    TMP_DB_MONGODB_COLLECTION,\n    TMP_DB_SQL_TABLE,\n    TMP_EXCEPTION_TYPE,\n    TMP_EXCEPTION_MESSAGE,\n    TMP_EXCEPTION_STACKTRACE,\n    TMP_EXCEPTION_ESCAPED,\n    TMP_FAAS_TRIGGER,\n    TMP_FAAS_EXECUTION,\n    TMP_FAAS_DOCUMENT_COLLECTION,\n    TMP_FAAS_DOCUMENT_OPERATION,\n    TMP_FAAS_DOCUMENT_TIME,\n    TMP_FAAS_DOCUMENT_NAME,\n    TMP_FAAS_TIME,\n    TMP_FAAS_CRON,\n    TMP_FAAS_COLDSTART,\n    TMP_FAAS_INVOKED_NAME,\n    TMP_FAAS_INVOKED_PROVIDER,\n    TMP_FAAS_INVOKED_REGION,\n    TMP_NET_TRANSPORT,\n    TMP_NET_PEER_IP,\n    TMP_NET_PEER_PORT,\n    TMP_NET_PEER_NAME,\n    TMP_NET_HOST_IP,\n    TMP_NET_HOST_PORT,\n    TMP_NET_HOST_NAME,\n    TMP_NET_HOST_CONNECTION_TYPE,\n    TMP_NET_HOST_CONNECTION_SUBTYPE,\n    TMP_NET_HOST_CARRIER_NAME,\n    TMP_NET_HOST_CARRIER_MCC,\n    TMP_NET_HOST_CARRIER_MNC,\n    TMP_NET_HOST_CARRIER_ICC,\n    TMP_PEER_SERVICE,\n    TMP_ENDUSER_ID,\n    TMP_ENDUSER_ROLE,\n    TMP_ENDUSER_SCOPE,\n    TMP_THREAD_ID,\n    TMP_THREAD_NAME,\n    TMP_CODE_FUNCTION,\n    TMP_CODE_NAMESPACE,\n    TMP_CODE_FILEPATH,\n    TMP_CODE_LINENO,\n    TMP_HTTP_METHOD,\n    TMP_HTTP_URL,\n    TMP_HTTP_TARGET,\n    TMP_HTTP_HOST,\n    TMP_HTTP_SCHEME,\n    TMP_HTTP_STATUS_CODE,\n    TMP_HTTP_FLAVOR,\n    TMP_HTTP_USER_AGENT,\n    TMP_HTTP_REQUEST_CONTENT_LENGTH,\n    TMP_HTTP_REQUEST_CONTENT_LENGTH_UNCOMPRESSED,\n    TMP_HTTP_RESPONSE_CONTENT_LENGTH,\n    TMP_HTTP_RESPONSE_CONTENT_LENGTH_UNCOMPRESSED,\n    TMP_HTTP_SERVER_NAME,\n    TMP_HTTP_ROUTE,\n    TMP_HTTP_CLIENT_IP,\n    TMP_AWS_DYNAMODB_TABLE_NAMES,\n    TMP_AWS_DYNAMODB_CONSUMED_CAPACITY,\n    TMP_AWS_DYNAMODB_ITEM_COLLECTION_METRICS,\n    TMP_AWS_DYNAMODB_PROVISIONED_READ_CAPACITY,\n    TMP_AWS_DYNAMODB_PROVISIONED_WRITE_CAPACITY,\n    TMP_AWS_DYNAMODB_CONSISTENT_READ,\n    TMP_AWS_DYNAMODB_PROJECTION,\n    TMP_AWS_DYNAMODB_LIMIT,\n    TMP_AWS_DYNAMODB_ATTRIBUTES_TO_GET,\n    TMP_AWS_DYNAMODB_INDEX_NAME,\n    TMP_AWS_DYNAMODB_SELECT,\n    TMP_AWS_DYNAMODB_GLOBAL_SECONDARY_INDEXES,\n    TMP_AWS_DYNAMODB_LOCAL_SECONDARY_INDEXES,\n    TMP_AWS_DYNAMODB_EXCLUSIVE_START_TABLE,\n    TMP_AWS_DYNAMODB_TABLE_COUNT,\n    TMP_AWS_DYNAMODB_SCAN_FORWARD,\n    TMP_AWS_DYNAMODB_SEGMENT,\n    TMP_AWS_DYNAMODB_TOTAL_SEGMENTS,\n    TMP_AWS_DYNAMODB_COUNT,\n    TMP_AWS_DYNAMODB_SCANNED_COUNT,\n    TMP_AWS_DYNAMODB_ATTRIBUTE_DEFINITIONS,\n    TMP_AWS_DYNAMODB_GLOBAL_SECONDARY_INDEX_UPDATES,\n    TMP_MESSAGING_SYSTEM,\n    TMP_MESSAGING_DESTINATION,\n    TMP_MESSAGING_DESTINATION_KIND,\n    TMP_MESSAGING_TEMP_DESTINATION,\n    TMP_MESSAGING_PROTOCOL,\n    TMP_MESSAGING_PROTOCOL_VERSION,\n    TMP_MESSAGING_URL,\n    TMP_MESSAGING_MESSAGE_ID,\n    TMP_MESSAGING_CONVERSATION_ID,\n    TMP_MESSAGING_MESSAGE_PAYLOAD_SIZE_BYTES,\n    TMP_MESSAGING_MESSAGE_PAYLOAD_COMPRESSED_SIZE_BYTES,\n    TMP_MESSAGING_OPERATION,\n    TMP_MESSAGING_CONSUMER_ID,\n    TMP_MESSAGING_RABBITMQ_ROUTING_KEY,\n    TMP_MESSAGING_KAFKA_MESSAGE_KEY,\n    TMP_MESSAGING_KAFKA_CONSUMER_GROUP,\n    TMP_MESSAGING_KAFKA_CLIENT_ID,\n    TMP_MESSAGING_KAFKA_PARTITION,\n    TMP_MESSAGING_KAFKA_TOMBSTONE,\n    TMP_RPC_SYSTEM,\n    TMP_RPC_SERVICE,\n    TMP_RPC_METHOD,\n    TMP_RPC_GRPC_STATUS_CODE,\n    TMP_RPC_JSONRPC_VERSION,\n    TMP_RPC_JSONRPC_REQUEST_ID,\n    TMP_RPC_JSONRPC_ERROR_CODE,\n    TMP_RPC_JSONRPC_ERROR_MESSAGE,\n    TMP_MESSAGE_TYPE,\n    TMP_MESSAGE_ID,\n    TMP_MESSAGE_COMPRESSED_SIZE,\n    TMP_MESSAGE_UNCOMPRESSED_SIZE,\n]);\n/* ----------------------------------------------------------------------------------------------------------\n * Constant values for DbSystemValues enum definition\n *\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n * ---------------------------------------------------------------------------------------------------------- */\n// Temporary local constants to assign to the individual exports and the namespaced version\n// Required to avoid the namespace exports using the unminifable export names for some package types\nvar TMP_DBSYSTEMVALUES_OTHER_SQL = 'other_sql';\nvar TMP_DBSYSTEMVALUES_MSSQL = 'mssql';\nvar TMP_DBSYSTEMVALUES_MYSQL = 'mysql';\nvar TMP_DBSYSTEMVALUES_ORACLE = 'oracle';\nvar TMP_DBSYSTEMVALUES_DB2 = 'db2';\nvar TMP_DBSYSTEMVALUES_POSTGRESQL = 'postgresql';\nvar TMP_DBSYSTEMVALUES_REDSHIFT = 'redshift';\nvar TMP_DBSYSTEMVALUES_HIVE = 'hive';\nvar TMP_DBSYSTEMVALUES_CLOUDSCAPE = 'cloudscape';\nvar TMP_DBSYSTEMVALUES_HSQLDB = 'hsqldb';\nvar TMP_DBSYSTEMVALUES_PROGRESS = 'progress';\nvar TMP_DBSYSTEMVALUES_MAXDB = 'maxdb';\nvar TMP_DBSYSTEMVALUES_HANADB = 'hanadb';\nvar TMP_DBSYSTEMVALUES_INGRES = 'ingres';\nvar TMP_DBSYSTEMVALUES_FIRSTSQL = 'firstsql';\nvar TMP_DBSYSTEMVALUES_EDB = 'edb';\nvar TMP_DBSYSTEMVALUES_CACHE = 'cache';\nvar TMP_DBSYSTEMVALUES_ADABAS = 'adabas';\nvar TMP_DBSYSTEMVALUES_FIREBIRD = 'firebird';\nvar TMP_DBSYSTEMVALUES_DERBY = 'derby';\nvar TMP_DBSYSTEMVALUES_FILEMAKER = 'filemaker';\nvar TMP_DBSYSTEMVALUES_INFORMIX = 'informix';\nvar TMP_DBSYSTEMVALUES_INSTANTDB = 'instantdb';\nvar TMP_DBSYSTEMVALUES_INTERBASE = 'interbase';\nvar TMP_DBSYSTEMVALUES_MARIADB = 'mariadb';\nvar TMP_DBSYSTEMVALUES_NETEZZA = 'netezza';\nvar TMP_DBSYSTEMVALUES_PERVASIVE = 'pervasive';\nvar TMP_DBSYSTEMVALUES_POINTBASE = 'pointbase';\nvar TMP_DBSYSTEMVALUES_SQLITE = 'sqlite';\nvar TMP_DBSYSTEMVALUES_SYBASE = 'sybase';\nvar TMP_DBSYSTEMVALUES_TERADATA = 'teradata';\nvar TMP_DBSYSTEMVALUES_VERTICA = 'vertica';\nvar TMP_DBSYSTEMVALUES_H2 = 'h2';\nvar TMP_DBSYSTEMVALUES_COLDFUSION = 'coldfusion';\nvar TMP_DBSYSTEMVALUES_CASSANDRA = 'cassandra';\nvar TMP_DBSYSTEMVALUES_HBASE = 'hbase';\nvar TMP_DBSYSTEMVALUES_MONGODB = 'mongodb';\nvar TMP_DBSYSTEMVALUES_REDIS = 'redis';\nvar TMP_DBSYSTEMVALUES_COUCHBASE = 'couchbase';\nvar TMP_DBSYSTEMVALUES_COUCHDB = 'couchdb';\nvar TMP_DBSYSTEMVALUES_COSMOSDB = 'cosmosdb';\nvar TMP_DBSYSTEMVALUES_DYNAMODB = 'dynamodb';\nvar TMP_DBSYSTEMVALUES_NEO4J = 'neo4j';\nvar TMP_DBSYSTEMVALUES_GEODE = 'geode';\nvar TMP_DBSYSTEMVALUES_ELASTICSEARCH = 'elasticsearch';\nvar TMP_DBSYSTEMVALUES_MEMCACHED = 'memcached';\nvar TMP_DBSYSTEMVALUES_COCKROACHDB = 'cockroachdb';\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n */\nexport var DBSYSTEMVALUES_OTHER_SQL = TMP_DBSYSTEMVALUES_OTHER_SQL;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n */\nexport var DBSYSTEMVALUES_MSSQL = TMP_DBSYSTEMVALUES_MSSQL;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n */\nexport var DBSYSTEMVALUES_MYSQL = TMP_DBSYSTEMVALUES_MYSQL;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n */\nexport var DBSYSTEMVALUES_ORACLE = TMP_DBSYSTEMVALUES_ORACLE;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n */\nexport var DBSYSTEMVALUES_DB2 = TMP_DBSYSTEMVALUES_DB2;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n */\nexport var DBSYSTEMVALUES_POSTGRESQL = TMP_DBSYSTEMVALUES_POSTGRESQL;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n */\nexport var DBSYSTEMVALUES_REDSHIFT = TMP_DBSYSTEMVALUES_REDSHIFT;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n */\nexport var DBSYSTEMVALUES_HIVE = TMP_DBSYSTEMVALUES_HIVE;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n */\nexport var DBSYSTEMVALUES_CLOUDSCAPE = TMP_DBSYSTEMVALUES_CLOUDSCAPE;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n */\nexport var DBSYSTEMVALUES_HSQLDB = TMP_DBSYSTEMVALUES_HSQLDB;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n */\nexport var DBSYSTEMVALUES_PROGRESS = TMP_DBSYSTEMVALUES_PROGRESS;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n */\nexport var DBSYSTEMVALUES_MAXDB = TMP_DBSYSTEMVALUES_MAXDB;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n */\nexport var DBSYSTEMVALUES_HANADB = TMP_DBSYSTEMVALUES_HANADB;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n */\nexport var DBSYSTEMVALUES_INGRES = TMP_DBSYSTEMVALUES_INGRES;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n */\nexport var DBSYSTEMVALUES_FIRSTSQL = TMP_DBSYSTEMVALUES_FIRSTSQL;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n */\nexport var DBSYSTEMVALUES_EDB = TMP_DBSYSTEMVALUES_EDB;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n */\nexport var DBSYSTEMVALUES_CACHE = TMP_DBSYSTEMVALUES_CACHE;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n */\nexport var DBSYSTEMVALUES_ADABAS = TMP_DBSYSTEMVALUES_ADABAS;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n */\nexport var DBSYSTEMVALUES_FIREBIRD = TMP_DBSYSTEMVALUES_FIREBIRD;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n */\nexport var DBSYSTEMVALUES_DERBY = TMP_DBSYSTEMVALUES_DERBY;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n */\nexport var DBSYSTEMVALUES_FILEMAKER = TMP_DBSYSTEMVALUES_FILEMAKER;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n */\nexport var DBSYSTEMVALUES_INFORMIX = TMP_DBSYSTEMVALUES_INFORMIX;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n */\nexport var DBSYSTEMVALUES_INSTANTDB = TMP_DBSYSTEMVALUES_INSTANTDB;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n */\nexport var DBSYSTEMVALUES_INTERBASE = TMP_DBSYSTEMVALUES_INTERBASE;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n */\nexport var DBSYSTEMVALUES_MARIADB = TMP_DBSYSTEMVALUES_MARIADB;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n */\nexport var DBSYSTEMVALUES_NETEZZA = TMP_DBSYSTEMVALUES_NETEZZA;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n */\nexport var DBSYSTEMVALUES_PERVASIVE = TMP_DBSYSTEMVALUES_PERVASIVE;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n */\nexport var DBSYSTEMVALUES_POINTBASE = TMP_DBSYSTEMVALUES_POINTBASE;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n */\nexport var DBSYSTEMVALUES_SQLITE = TMP_DBSYSTEMVALUES_SQLITE;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n */\nexport var DBSYSTEMVALUES_SYBASE = TMP_DBSYSTEMVALUES_SYBASE;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n */\nexport var DBSYSTEMVALUES_TERADATA = TMP_DBSYSTEMVALUES_TERADATA;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n */\nexport var DBSYSTEMVALUES_VERTICA = TMP_DBSYSTEMVALUES_VERTICA;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n */\nexport var DBSYSTEMVALUES_H2 = TMP_DBSYSTEMVALUES_H2;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n */\nexport var DBSYSTEMVALUES_COLDFUSION = TMP_DBSYSTEMVALUES_COLDFUSION;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n */\nexport var DBSYSTEMVALUES_CASSANDRA = TMP_DBSYSTEMVALUES_CASSANDRA;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n */\nexport var DBSYSTEMVALUES_HBASE = TMP_DBSYSTEMVALUES_HBASE;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n */\nexport var DBSYSTEMVALUES_MONGODB = TMP_DBSYSTEMVALUES_MONGODB;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n */\nexport var DBSYSTEMVALUES_REDIS = TMP_DBSYSTEMVALUES_REDIS;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n */\nexport var DBSYSTEMVALUES_COUCHBASE = TMP_DBSYSTEMVALUES_COUCHBASE;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n */\nexport var DBSYSTEMVALUES_COUCHDB = TMP_DBSYSTEMVALUES_COUCHDB;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n */\nexport var DBSYSTEMVALUES_COSMOSDB = TMP_DBSYSTEMVALUES_COSMOSDB;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n */\nexport var DBSYSTEMVALUES_DYNAMODB = TMP_DBSYSTEMVALUES_DYNAMODB;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n */\nexport var DBSYSTEMVALUES_NEO4J = TMP_DBSYSTEMVALUES_NEO4J;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n */\nexport var DBSYSTEMVALUES_GEODE = TMP_DBSYSTEMVALUES_GEODE;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n */\nexport var DBSYSTEMVALUES_ELASTICSEARCH = TMP_DBSYSTEMVALUES_ELASTICSEARCH;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n */\nexport var DBSYSTEMVALUES_MEMCACHED = TMP_DBSYSTEMVALUES_MEMCACHED;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n */\nexport var DBSYSTEMVALUES_COCKROACHDB = TMP_DBSYSTEMVALUES_COCKROACHDB;\n/**\n * The constant map of values for DbSystemValues.\n * @deprecated Use the DBSYSTEMVALUES_XXXXX constants rather than the DbSystemValues.XXXXX for bundle minification.\n */\nexport var DbSystemValues = \n/*#__PURE__*/ createConstMap([\n    TMP_DBSYSTEMVALUES_OTHER_SQL,\n    TMP_DBSYSTEMVALUES_MSSQL,\n    TMP_DBSYSTEMVALUES_MYSQL,\n    TMP_DBSYSTEMVALUES_ORACLE,\n    TMP_DBSYSTEMVALUES_DB2,\n    TMP_DBSYSTEMVALUES_POSTGRESQL,\n    TMP_DBSYSTEMVALUES_REDSHIFT,\n    TMP_DBSYSTEMVALUES_HIVE,\n    TMP_DBSYSTEMVALUES_CLOUDSCAPE,\n    TMP_DBSYSTEMVALUES_HSQLDB,\n    TMP_DBSYSTEMVALUES_PROGRESS,\n    TMP_DBSYSTEMVALUES_MAXDB,\n    TMP_DBSYSTEMVALUES_HANADB,\n    TMP_DBSYSTEMVALUES_INGRES,\n    TMP_DBSYSTEMVALUES_FIRSTSQL,\n    TMP_DBSYSTEMVALUES_EDB,\n    TMP_DBSYSTEMVALUES_CACHE,\n    TMP_DBSYSTEMVALUES_ADABAS,\n    TMP_DBSYSTEMVALUES_FIREBIRD,\n    TMP_DBSYSTEMVALUES_DERBY,\n    TMP_DBSYSTEMVALUES_FILEMAKER,\n    TMP_DBSYSTEMVALUES_INFORMIX,\n    TMP_DBSYSTEMVALUES_INSTANTDB,\n    TMP_DBSYSTEMVALUES_INTERBASE,\n    TMP_DBSYSTEMVALUES_MARIADB,\n    TMP_DBSYSTEMVALUES_NETEZZA,\n    TMP_DBSYSTEMVALUES_PERVASIVE,\n    TMP_DBSYSTEMVALUES_POINTBASE,\n    TMP_DBSYSTEMVALUES_SQLITE,\n    TMP_DBSYSTEMVALUES_SYBASE,\n    TMP_DBSYSTEMVALUES_TERADATA,\n    TMP_DBSYSTEMVALUES_VERTICA,\n    TMP_DBSYSTEMVALUES_H2,\n    TMP_DBSYSTEMVALUES_COLDFUSION,\n    TMP_DBSYSTEMVALUES_CASSANDRA,\n    TMP_DBSYSTEMVALUES_HBASE,\n    TMP_DBSYSTEMVALUES_MONGODB,\n    TMP_DBSYSTEMVALUES_REDIS,\n    TMP_DBSYSTEMVALUES_COUCHBASE,\n    TMP_DBSYSTEMVALUES_COUCHDB,\n    TMP_DBSYSTEMVALUES_COSMOSDB,\n    TMP_DBSYSTEMVALUES_DYNAMODB,\n    TMP_DBSYSTEMVALUES_NEO4J,\n    TMP_DBSYSTEMVALUES_GEODE,\n    TMP_DBSYSTEMVALUES_ELASTICSEARCH,\n    TMP_DBSYSTEMVALUES_MEMCACHED,\n    TMP_DBSYSTEMVALUES_COCKROACHDB,\n]);\n/* ----------------------------------------------------------------------------------------------------------\n * Constant values for DbCassandraConsistencyLevelValues enum definition\n *\n * The consistency level of the query. Based on consistency values from [CQL](https://docs.datastax.com/en/cassandra-oss/3.0/cassandra/dml/dmlConfigConsistency.html).\n * ---------------------------------------------------------------------------------------------------------- */\n// Temporary local constants to assign to the individual exports and the namespaced version\n// Required to avoid the namespace exports using the unminifable export names for some package types\nvar TMP_DBCASSANDRACONSISTENCYLEVELVALUES_ALL = 'all';\nvar TMP_DBCASSANDRACONSISTENCYLEVELVALUES_EACH_QUORUM = 'each_quorum';\nvar TMP_DBCASSANDRACONSISTENCYLEVELVALUES_QUORUM = 'quorum';\nvar TMP_DBCASSANDRACONSISTENCYLEVELVALUES_LOCAL_QUORUM = 'local_quorum';\nvar TMP_DBCASSANDRACONSISTENCYLEVELVALUES_ONE = 'one';\nvar TMP_DBCASSANDRACONSISTENCYLEVELVALUES_TWO = 'two';\nvar TMP_DBCASSANDRACONSISTENCYLEVELVALUES_THREE = 'three';\nvar TMP_DBCASSANDRACONSISTENCYLEVELVALUES_LOCAL_ONE = 'local_one';\nvar TMP_DBCASSANDRACONSISTENCYLEVELVALUES_ANY = 'any';\nvar TMP_DBCASSANDRACONSISTENCYLEVELVALUES_SERIAL = 'serial';\nvar TMP_DBCASSANDRACONSISTENCYLEVELVALUES_LOCAL_SERIAL = 'local_serial';\n/**\n * The consistency level of the query. Based on consistency values from [CQL](https://docs.datastax.com/en/cassandra-oss/3.0/cassandra/dml/dmlConfigConsistency.html).\n */\nexport var DBCASSANDRACONSISTENCYLEVELVALUES_ALL = TMP_DBCASSANDRACONSISTENCYLEVELVALUES_ALL;\n/**\n * The consistency level of the query. Based on consistency values from [CQL](https://docs.datastax.com/en/cassandra-oss/3.0/cassandra/dml/dmlConfigConsistency.html).\n */\nexport var DBCASSANDRACONSISTENCYLEVELVALUES_EACH_QUORUM = TMP_DBCASSANDRACONSISTENCYLEVELVALUES_EACH_QUORUM;\n/**\n * The consistency level of the query. Based on consistency values from [CQL](https://docs.datastax.com/en/cassandra-oss/3.0/cassandra/dml/dmlConfigConsistency.html).\n */\nexport var DBCASSANDRACONSISTENCYLEVELVALUES_QUORUM = TMP_DBCASSANDRACONSISTENCYLEVELVALUES_QUORUM;\n/**\n * The consistency level of the query. Based on consistency values from [CQL](https://docs.datastax.com/en/cassandra-oss/3.0/cassandra/dml/dmlConfigConsistency.html).\n */\nexport var DBCASSANDRACONSISTENCYLEVELVALUES_LOCAL_QUORUM = TMP_DBCASSANDRACONSISTENCYLEVELVALUES_LOCAL_QUORUM;\n/**\n * The consistency level of the query. Based on consistency values from [CQL](https://docs.datastax.com/en/cassandra-oss/3.0/cassandra/dml/dmlConfigConsistency.html).\n */\nexport var DBCASSANDRACONSISTENCYLEVELVALUES_ONE = TMP_DBCASSANDRACONSISTENCYLEVELVALUES_ONE;\n/**\n * The consistency level of the query. Based on consistency values from [CQL](https://docs.datastax.com/en/cassandra-oss/3.0/cassandra/dml/dmlConfigConsistency.html).\n */\nexport var DBCASSANDRACONSISTENCYLEVELVALUES_TWO = TMP_DBCASSANDRACONSISTENCYLEVELVALUES_TWO;\n/**\n * The consistency level of the query. Based on consistency values from [CQL](https://docs.datastax.com/en/cassandra-oss/3.0/cassandra/dml/dmlConfigConsistency.html).\n */\nexport var DBCASSANDRACONSISTENCYLEVELVALUES_THREE = TMP_DBCASSANDRACONSISTENCYLEVELVALUES_THREE;\n/**\n * The consistency level of the query. Based on consistency values from [CQL](https://docs.datastax.com/en/cassandra-oss/3.0/cassandra/dml/dmlConfigConsistency.html).\n */\nexport var DBCASSANDRACONSISTENCYLEVELVALUES_LOCAL_ONE = TMP_DBCASSANDRACONSISTENCYLEVELVALUES_LOCAL_ONE;\n/**\n * The consistency level of the query. Based on consistency values from [CQL](https://docs.datastax.com/en/cassandra-oss/3.0/cassandra/dml/dmlConfigConsistency.html).\n */\nexport var DBCASSANDRACONSISTENCYLEVELVALUES_ANY = TMP_DBCASSANDRACONSISTENCYLEVELVALUES_ANY;\n/**\n * The consistency level of the query. Based on consistency values from [CQL](https://docs.datastax.com/en/cassandra-oss/3.0/cassandra/dml/dmlConfigConsistency.html).\n */\nexport var DBCASSANDRACONSISTENCYLEVELVALUES_SERIAL = TMP_DBCASSANDRACONSISTENCYLEVELVALUES_SERIAL;\n/**\n * The consistency level of the query. Based on consistency values from [CQL](https://docs.datastax.com/en/cassandra-oss/3.0/cassandra/dml/dmlConfigConsistency.html).\n */\nexport var DBCASSANDRACONSISTENCYLEVELVALUES_LOCAL_SERIAL = TMP_DBCASSANDRACONSISTENCYLEVELVALUES_LOCAL_SERIAL;\n/**\n * The constant map of values for DbCassandraConsistencyLevelValues.\n * @deprecated Use the DBCASSANDRACONSISTENCYLEVELVALUES_XXXXX constants rather than the DbCassandraConsistencyLevelValues.XXXXX for bundle minification.\n */\nexport var DbCassandraConsistencyLevelValues = \n/*#__PURE__*/ createConstMap([\n    TMP_DBCASSANDRACONSISTENCYLEVELVALUES_ALL,\n    TMP_DBCASSANDRACONSISTENCYLEVELVALUES_EACH_QUORUM,\n    TMP_DBCASSANDRACONSISTENCYLEVELVALUES_QUORUM,\n    TMP_DBCASSANDRACONSISTENCYLEVELVALUES_LOCAL_QUORUM,\n    TMP_DBCASSANDRACONSISTENCYLEVELVALUES_ONE,\n    TMP_DBCASSANDRACONSISTENCYLEVELVALUES_TWO,\n    TMP_DBCASSANDRACONSISTENCYLEVELVALUES_THREE,\n    TMP_DBCASSANDRACONSISTENCYLEVELVALUES_LOCAL_ONE,\n    TMP_DBCASSANDRACONSISTENCYLEVELVALUES_ANY,\n    TMP_DBCASSANDRACONSISTENCYLEVELVALUES_SERIAL,\n    TMP_DBCASSANDRACONSISTENCYLEVELVALUES_LOCAL_SERIAL,\n]);\n/* ----------------------------------------------------------------------------------------------------------\n * Constant values for FaasTriggerValues enum definition\n *\n * Type of the trigger on which the function is executed.\n * ---------------------------------------------------------------------------------------------------------- */\n// Temporary local constants to assign to the individual exports and the namespaced version\n// Required to avoid the namespace exports using the unminifable export names for some package types\nvar TMP_FAASTRIGGERVALUES_DATASOURCE = 'datasource';\nvar TMP_FAASTRIGGERVALUES_HTTP = 'http';\nvar TMP_FAASTRIGGERVALUES_PUBSUB = 'pubsub';\nvar TMP_FAASTRIGGERVALUES_TIMER = 'timer';\nvar TMP_FAASTRIGGERVALUES_OTHER = 'other';\n/**\n * Type of the trigger on which the function is executed.\n */\nexport var FAASTRIGGERVALUES_DATASOURCE = TMP_FAASTRIGGERVALUES_DATASOURCE;\n/**\n * Type of the trigger on which the function is executed.\n */\nexport var FAASTRIGGERVALUES_HTTP = TMP_FAASTRIGGERVALUES_HTTP;\n/**\n * Type of the trigger on which the function is executed.\n */\nexport var FAASTRIGGERVALUES_PUBSUB = TMP_FAASTRIGGERVALUES_PUBSUB;\n/**\n * Type of the trigger on which the function is executed.\n */\nexport var FAASTRIGGERVALUES_TIMER = TMP_FAASTRIGGERVALUES_TIMER;\n/**\n * Type of the trigger on which the function is executed.\n */\nexport var FAASTRIGGERVALUES_OTHER = TMP_FAASTRIGGERVALUES_OTHER;\n/**\n * The constant map of values for FaasTriggerValues.\n * @deprecated Use the FAASTRIGGERVALUES_XXXXX constants rather than the FaasTriggerValues.XXXXX for bundle minification.\n */\nexport var FaasTriggerValues = \n/*#__PURE__*/ createConstMap([\n    TMP_FAASTRIGGERVALUES_DATASOURCE,\n    TMP_FAASTRIGGERVALUES_HTTP,\n    TMP_FAASTRIGGERVALUES_PUBSUB,\n    TMP_FAASTRIGGERVALUES_TIMER,\n    TMP_FAASTRIGGERVALUES_OTHER,\n]);\n/* ----------------------------------------------------------------------------------------------------------\n * Constant values for FaasDocumentOperationValues enum definition\n *\n * Describes the type of the operation that was performed on the data.\n * ---------------------------------------------------------------------------------------------------------- */\n// Temporary local constants to assign to the individual exports and the namespaced version\n// Required to avoid the namespace exports using the unminifable export names for some package types\nvar TMP_FAASDOCUMENTOPERATIONVALUES_INSERT = 'insert';\nvar TMP_FAASDOCUMENTOPERATIONVALUES_EDIT = 'edit';\nvar TMP_FAASDOCUMENTOPERATIONVALUES_DELETE = 'delete';\n/**\n * Describes the type of the operation that was performed on the data.\n */\nexport var FAASDOCUMENTOPERATIONVALUES_INSERT = TMP_FAASDOCUMENTOPERATIONVALUES_INSERT;\n/**\n * Describes the type of the operation that was performed on the data.\n */\nexport var FAASDOCUMENTOPERATIONVALUES_EDIT = TMP_FAASDOCUMENTOPERATIONVALUES_EDIT;\n/**\n * Describes the type of the operation that was performed on the data.\n */\nexport var FAASDOCUMENTOPERATIONVALUES_DELETE = TMP_FAASDOCUMENTOPERATIONVALUES_DELETE;\n/**\n * The constant map of values for FaasDocumentOperationValues.\n * @deprecated Use the FAASDOCUMENTOPERATIONVALUES_XXXXX constants rather than the FaasDocumentOperationValues.XXXXX for bundle minification.\n */\nexport var FaasDocumentOperationValues = \n/*#__PURE__*/ createConstMap([\n    TMP_FAASDOCUMENTOPERATIONVALUES_INSERT,\n    TMP_FAASDOCUMENTOPERATIONVALUES_EDIT,\n    TMP_FAASDOCUMENTOPERATIONVALUES_DELETE,\n]);\n/* ----------------------------------------------------------------------------------------------------------\n * Constant values for FaasInvokedProviderValues enum definition\n *\n * The cloud provider of the invoked function.\n *\n * Note: SHOULD be equal to the `cloud.provider` resource attribute of the invoked function.\n * ---------------------------------------------------------------------------------------------------------- */\n// Temporary local constants to assign to the individual exports and the namespaced version\n// Required to avoid the namespace exports using the unminifable export names for some package types\nvar TMP_FAASINVOKEDPROVIDERVALUES_ALIBABA_CLOUD = 'alibaba_cloud';\nvar TMP_FAASINVOKEDPROVIDERVALUES_AWS = 'aws';\nvar TMP_FAASINVOKEDPROVIDERVALUES_AZURE = 'azure';\nvar TMP_FAASINVOKEDPROVIDERVALUES_GCP = 'gcp';\n/**\n * The cloud provider of the invoked function.\n *\n * Note: SHOULD be equal to the `cloud.provider` resource attribute of the invoked function.\n */\nexport var FAASINVOKEDPROVIDERVALUES_ALIBABA_CLOUD = TMP_FAASINVOKEDPROVIDERVALUES_ALIBABA_CLOUD;\n/**\n * The cloud provider of the invoked function.\n *\n * Note: SHOULD be equal to the `cloud.provider` resource attribute of the invoked function.\n */\nexport var FAASINVOKEDPROVIDERVALUES_AWS = TMP_FAASINVOKEDPROVIDERVALUES_AWS;\n/**\n * The cloud provider of the invoked function.\n *\n * Note: SHOULD be equal to the `cloud.provider` resource attribute of the invoked function.\n */\nexport var FAASINVOKEDPROVIDERVALUES_AZURE = TMP_FAASINVOKEDPROVIDERVALUES_AZURE;\n/**\n * The cloud provider of the invoked function.\n *\n * Note: SHOULD be equal to the `cloud.provider` resource attribute of the invoked function.\n */\nexport var FAASINVOKEDPROVIDERVALUES_GCP = TMP_FAASINVOKEDPROVIDERVALUES_GCP;\n/**\n * The constant map of values for FaasInvokedProviderValues.\n * @deprecated Use the FAASINVOKEDPROVIDERVALUES_XXXXX constants rather than the FaasInvokedProviderValues.XXXXX for bundle minification.\n */\nexport var FaasInvokedProviderValues = \n/*#__PURE__*/ createConstMap([\n    TMP_FAASINVOKEDPROVIDERVALUES_ALIBABA_CLOUD,\n    TMP_FAASINVOKEDPROVIDERVALUES_AWS,\n    TMP_FAASINVOKEDPROVIDERVALUES_AZURE,\n    TMP_FAASINVOKEDPROVIDERVALUES_GCP,\n]);\n/* ----------------------------------------------------------------------------------------------------------\n * Constant values for NetTransportValues enum definition\n *\n * Transport protocol used. See note below.\n * ---------------------------------------------------------------------------------------------------------- */\n// Temporary local constants to assign to the individual exports and the namespaced version\n// Required to avoid the namespace exports using the unminifable export names for some package types\nvar TMP_NETTRANSPORTVALUES_IP_TCP = 'ip_tcp';\nvar TMP_NETTRANSPORTVALUES_IP_UDP = 'ip_udp';\nvar TMP_NETTRANSPORTVALUES_IP = 'ip';\nvar TMP_NETTRANSPORTVALUES_UNIX = 'unix';\nvar TMP_NETTRANSPORTVALUES_PIPE = 'pipe';\nvar TMP_NETTRANSPORTVALUES_INPROC = 'inproc';\nvar TMP_NETTRANSPORTVALUES_OTHER = 'other';\n/**\n * Transport protocol used. See note below.\n */\nexport var NETTRANSPORTVALUES_IP_TCP = TMP_NETTRANSPORTVALUES_IP_TCP;\n/**\n * Transport protocol used. See note below.\n */\nexport var NETTRANSPORTVALUES_IP_UDP = TMP_NETTRANSPORTVALUES_IP_UDP;\n/**\n * Transport protocol used. See note below.\n */\nexport var NETTRANSPORTVALUES_IP = TMP_NETTRANSPORTVALUES_IP;\n/**\n * Transport protocol used. See note below.\n */\nexport var NETTRANSPORTVALUES_UNIX = TMP_NETTRANSPORTVALUES_UNIX;\n/**\n * Transport protocol used. See note below.\n */\nexport var NETTRANSPORTVALUES_PIPE = TMP_NETTRANSPORTVALUES_PIPE;\n/**\n * Transport protocol used. See note below.\n */\nexport var NETTRANSPORTVALUES_INPROC = TMP_NETTRANSPORTVALUES_INPROC;\n/**\n * Transport protocol used. See note below.\n */\nexport var NETTRANSPORTVALUES_OTHER = TMP_NETTRANSPORTVALUES_OTHER;\n/**\n * The constant map of values for NetTransportValues.\n * @deprecated Use the NETTRANSPORTVALUES_XXXXX constants rather than the NetTransportValues.XXXXX for bundle minification.\n */\nexport var NetTransportValues = \n/*#__PURE__*/ createConstMap([\n    TMP_NETTRANSPORTVALUES_IP_TCP,\n    TMP_NETTRANSPORTVALUES_IP_UDP,\n    TMP_NETTRANSPORTVALUES_IP,\n    TMP_NETTRANSPORTVALUES_UNIX,\n    TMP_NETTRANSPORTVALUES_PIPE,\n    TMP_NETTRANSPORTVALUES_INPROC,\n    TMP_NETTRANSPORTVALUES_OTHER,\n]);\n/* ----------------------------------------------------------------------------------------------------------\n * Constant values for NetHostConnectionTypeValues enum definition\n *\n * The internet connection type currently being used by the host.\n * ---------------------------------------------------------------------------------------------------------- */\n// Temporary local constants to assign to the individual exports and the namespaced version\n// Required to avoid the namespace exports using the unminifable export names for some package types\nvar TMP_NETHOSTCONNECTIONTYPEVALUES_WIFI = 'wifi';\nvar TMP_NETHOSTCONNECTIONTYPEVALUES_WIRED = 'wired';\nvar TMP_NETHOSTCONNECTIONTYPEVALUES_CELL = 'cell';\nvar TMP_NETHOSTCONNECTIONTYPEVALUES_UNAVAILABLE = 'unavailable';\nvar TMP_NETHOSTCONNECTIONTYPEVALUES_UNKNOWN = 'unknown';\n/**\n * The internet connection type currently being used by the host.\n */\nexport var NETHOSTCONNECTIONTYPEVALUES_WIFI = TMP_NETHOSTCONNECTIONTYPEVALUES_WIFI;\n/**\n * The internet connection type currently being used by the host.\n */\nexport var NETHOSTCONNECTIONTYPEVALUES_WIRED = TMP_NETHOSTCONNECTIONTYPEVALUES_WIRED;\n/**\n * The internet connection type currently being used by the host.\n */\nexport var NETHOSTCONNECTIONTYPEVALUES_CELL = TMP_NETHOSTCONNECTIONTYPEVALUES_CELL;\n/**\n * The internet connection type currently being used by the host.\n */\nexport var NETHOSTCONNECTIONTYPEVALUES_UNAVAILABLE = TMP_NETHOSTCONNECTIONTYPEVALUES_UNAVAILABLE;\n/**\n * The internet connection type currently being used by the host.\n */\nexport var NETHOSTCONNECTIONTYPEVALUES_UNKNOWN = TMP_NETHOSTCONNECTIONTYPEVALUES_UNKNOWN;\n/**\n * The constant map of values for NetHostConnectionTypeValues.\n * @deprecated Use the NETHOSTCONNECTIONTYPEVALUES_XXXXX constants rather than the NetHostConnectionTypeValues.XXXXX for bundle minification.\n */\nexport var NetHostConnectionTypeValues = \n/*#__PURE__*/ createConstMap([\n    TMP_NETHOSTCONNECTIONTYPEVALUES_WIFI,\n    TMP_NETHOSTCONNECTIONTYPEVALUES_WIRED,\n    TMP_NETHOSTCONNECTIONTYPEVALUES_CELL,\n    TMP_NETHOSTCONNECTIONTYPEVALUES_UNAVAILABLE,\n    TMP_NETHOSTCONNECTIONTYPEVALUES_UNKNOWN,\n]);\n/* ----------------------------------------------------------------------------------------------------------\n * Constant values for NetHostConnectionSubtypeValues enum definition\n *\n * This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.\n * ---------------------------------------------------------------------------------------------------------- */\n// Temporary local constants to assign to the individual exports and the namespaced version\n// Required to avoid the namespace exports using the unminifable export names for some package types\nvar TMP_NETHOSTCONNECTIONSUBTYPEVALUES_GPRS = 'gprs';\nvar TMP_NETHOSTCONNECTIONSUBTYPEVALUES_EDGE = 'edge';\nvar TMP_NETHOSTCONNECTIONSUBTYPEVALUES_UMTS = 'umts';\nvar TMP_NETHOSTCONNECTIONSUBTYPEVALUES_CDMA = 'cdma';\nvar TMP_NETHOSTCONNECTIONSUBTYPEVALUES_EVDO_0 = 'evdo_0';\nvar TMP_NETHOSTCONNECTIONSUBTYPEVALUES_EVDO_A = 'evdo_a';\nvar TMP_NETHOSTCONNECTIONSUBTYPEVALUES_CDMA2000_1XRTT = 'cdma2000_1xrtt';\nvar TMP_NETHOSTCONNECTIONSUBTYPEVALUES_HSDPA = 'hsdpa';\nvar TMP_NETHOSTCONNECTIONSUBTYPEVALUES_HSUPA = 'hsupa';\nvar TMP_NETHOSTCONNECTIONSUBTYPEVALUES_HSPA = 'hspa';\nvar TMP_NETHOSTCONNECTIONSUBTYPEVALUES_IDEN = 'iden';\nvar TMP_NETHOSTCONNECTIONSUBTYPEVALUES_EVDO_B = 'evdo_b';\nvar TMP_NETHOSTCONNECTIONSUBTYPEVALUES_LTE = 'lte';\nvar TMP_NETHOSTCONNECTIONSUBTYPEVALUES_EHRPD = 'ehrpd';\nvar TMP_NETHOSTCONNECTIONSUBTYPEVALUES_HSPAP = 'hspap';\nvar TMP_NETHOSTCONNECTIONSUBTYPEVALUES_GSM = 'gsm';\nvar TMP_NETHOSTCONNECTIONSUBTYPEVALUES_TD_SCDMA = 'td_scdma';\nvar TMP_NETHOSTCONNECTIONSUBTYPEVALUES_IWLAN = 'iwlan';\nvar TMP_NETHOSTCONNECTIONSUBTYPEVALUES_NR = 'nr';\nvar TMP_NETHOSTCONNECTIONSUBTYPEVALUES_NRNSA = 'nrnsa';\nvar TMP_NETHOSTCONNECTIONSUBTYPEVALUES_LTE_CA = 'lte_ca';\n/**\n * This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.\n */\nexport var NETHOSTCONNECTIONSUBTYPEVALUES_GPRS = TMP_NETHOSTCONNECTIONSUBTYPEVALUES_GPRS;\n/**\n * This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.\n */\nexport var NETHOSTCONNECTIONSUBTYPEVALUES_EDGE = TMP_NETHOSTCONNECTIONSUBTYPEVALUES_EDGE;\n/**\n * This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.\n */\nexport var NETHOSTCONNECTIONSUBTYPEVALUES_UMTS = TMP_NETHOSTCONNECTIONSUBTYPEVALUES_UMTS;\n/**\n * This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.\n */\nexport var NETHOSTCONNECTIONSUBTYPEVALUES_CDMA = TMP_NETHOSTCONNECTIONSUBTYPEVALUES_CDMA;\n/**\n * This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.\n */\nexport var NETHOSTCONNECTIONSUBTYPEVALUES_EVDO_0 = TMP_NETHOSTCONNECTIONSUBTYPEVALUES_EVDO_0;\n/**\n * This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.\n */\nexport var NETHOSTCONNECTIONSUBTYPEVALUES_EVDO_A = TMP_NETHOSTCONNECTIONSUBTYPEVALUES_EVDO_A;\n/**\n * This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.\n */\nexport var NETHOSTCONNECTIONSUBTYPEVALUES_CDMA2000_1XRTT = TMP_NETHOSTCONNECTIONSUBTYPEVALUES_CDMA2000_1XRTT;\n/**\n * This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.\n */\nexport var NETHOSTCONNECTIONSUBTYPEVALUES_HSDPA = TMP_NETHOSTCONNECTIONSUBTYPEVALUES_HSDPA;\n/**\n * This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.\n */\nexport var NETHOSTCONNECTIONSUBTYPEVALUES_HSUPA = TMP_NETHOSTCONNECTIONSUBTYPEVALUES_HSUPA;\n/**\n * This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.\n */\nexport var NETHOSTCONNECTIONSUBTYPEVALUES_HSPA = TMP_NETHOSTCONNECTIONSUBTYPEVALUES_HSPA;\n/**\n * This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.\n */\nexport var NETHOSTCONNECTIONSUBTYPEVALUES_IDEN = TMP_NETHOSTCONNECTIONSUBTYPEVALUES_IDEN;\n/**\n * This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.\n */\nexport var NETHOSTCONNECTIONSUBTYPEVALUES_EVDO_B = TMP_NETHOSTCONNECTIONSUBTYPEVALUES_EVDO_B;\n/**\n * This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.\n */\nexport var NETHOSTCONNECTIONSUBTYPEVALUES_LTE = TMP_NETHOSTCONNECTIONSUBTYPEVALUES_LTE;\n/**\n * This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.\n */\nexport var NETHOSTCONNECTIONSUBTYPEVALUES_EHRPD = TMP_NETHOSTCONNECTIONSUBTYPEVALUES_EHRPD;\n/**\n * This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.\n */\nexport var NETHOSTCONNECTIONSUBTYPEVALUES_HSPAP = TMP_NETHOSTCONNECTIONSUBTYPEVALUES_HSPAP;\n/**\n * This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.\n */\nexport var NETHOSTCONNECTIONSUBTYPEVALUES_GSM = TMP_NETHOSTCONNECTIONSUBTYPEVALUES_GSM;\n/**\n * This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.\n */\nexport var NETHOSTCONNECTIONSUBTYPEVALUES_TD_SCDMA = TMP_NETHOSTCONNECTIONSUBTYPEVALUES_TD_SCDMA;\n/**\n * This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.\n */\nexport var NETHOSTCONNECTIONSUBTYPEVALUES_IWLAN = TMP_NETHOSTCONNECTIONSUBTYPEVALUES_IWLAN;\n/**\n * This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.\n */\nexport var NETHOSTCONNECTIONSUBTYPEVALUES_NR = TMP_NETHOSTCONNECTIONSUBTYPEVALUES_NR;\n/**\n * This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.\n */\nexport var NETHOSTCONNECTIONSUBTYPEVALUES_NRNSA = TMP_NETHOSTCONNECTIONSUBTYPEVALUES_NRNSA;\n/**\n * This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.\n */\nexport var NETHOSTCONNECTIONSUBTYPEVALUES_LTE_CA = TMP_NETHOSTCONNECTIONSUBTYPEVALUES_LTE_CA;\n/**\n * The constant map of values for NetHostConnectionSubtypeValues.\n * @deprecated Use the NETHOSTCONNECTIONSUBTYPEVALUES_XXXXX constants rather than the NetHostConnectionSubtypeValues.XXXXX for bundle minification.\n */\nexport var NetHostConnectionSubtypeValues = \n/*#__PURE__*/ createConstMap([\n    TMP_NETHOSTCONNECTIONSUBTYPEVALUES_GPRS,\n    TMP_NETHOSTCONNECTIONSUBTYPEVALUES_EDGE,\n    TMP_NETHOSTCONNECTIONSUBTYPEVALUES_UMTS,\n    TMP_NETHOSTCONNECTIONSUBTYPEVALUES_CDMA,\n    TMP_NETHOSTCONNECTIONSUBTYPEVALUES_EVDO_0,\n    TMP_NETHOSTCONNECTIONSUBTYPEVALUES_EVDO_A,\n    TMP_NETHOSTCONNECTIONSUBTYPEVALUES_CDMA2000_1XRTT,\n    TMP_NETHOSTCONNECTIONSUBTYPEVALUES_HSDPA,\n    TMP_NETHOSTCONNECTIONSUBTYPEVALUES_HSUPA,\n    TMP_NETHOSTCONNECTIONSUBTYPEVALUES_HSPA,\n    TMP_NETHOSTCONNECTIONSUBTYPEVALUES_IDEN,\n    TMP_NETHOSTCONNECTIONSUBTYPEVALUES_EVDO_B,\n    TMP_NETHOSTCONNECTIONSUBTYPEVALUES_LTE,\n    TMP_NETHOSTCONNECTIONSUBTYPEVALUES_EHRPD,\n    TMP_NETHOSTCONNECTIONSUBTYPEVALUES_HSPAP,\n    TMP_NETHOSTCONNECTIONSUBTYPEVALUES_GSM,\n    TMP_NETHOSTCONNECTIONSUBTYPEVALUES_TD_SCDMA,\n    TMP_NETHOSTCONNECTIONSUBTYPEVALUES_IWLAN,\n    TMP_NETHOSTCONNECTIONSUBTYPEVALUES_NR,\n    TMP_NETHOSTCONNECTIONSUBTYPEVALUES_NRNSA,\n    TMP_NETHOSTCONNECTIONSUBTYPEVALUES_LTE_CA,\n]);\n/* ----------------------------------------------------------------------------------------------------------\n * Constant values for HttpFlavorValues enum definition\n *\n * Kind of HTTP protocol used.\n *\n * Note: If `net.transport` is not specified, it can be assumed to be `IP.TCP` except if `http.flavor` is `QUIC`, in which case `IP.UDP` is assumed.\n * ---------------------------------------------------------------------------------------------------------- */\n// Temporary local constants to assign to the individual exports and the namespaced version\n// Required to avoid the namespace exports using the unminifable export names for some package types\nvar TMP_HTTPFLAVORVALUES_HTTP_1_0 = '1.0';\nvar TMP_HTTPFLAVORVALUES_HTTP_1_1 = '1.1';\nvar TMP_HTTPFLAVORVALUES_HTTP_2_0 = '2.0';\nvar TMP_HTTPFLAVORVALUES_SPDY = 'SPDY';\nvar TMP_HTTPFLAVORVALUES_QUIC = 'QUIC';\n/**\n * Kind of HTTP protocol used.\n *\n * Note: If `net.transport` is not specified, it can be assumed to be `IP.TCP` except if `http.flavor` is `QUIC`, in which case `IP.UDP` is assumed.\n */\nexport var HTTPFLAVORVALUES_HTTP_1_0 = TMP_HTTPFLAVORVALUES_HTTP_1_0;\n/**\n * Kind of HTTP protocol used.\n *\n * Note: If `net.transport` is not specified, it can be assumed to be `IP.TCP` except if `http.flavor` is `QUIC`, in which case `IP.UDP` is assumed.\n */\nexport var HTTPFLAVORVALUES_HTTP_1_1 = TMP_HTTPFLAVORVALUES_HTTP_1_1;\n/**\n * Kind of HTTP protocol used.\n *\n * Note: If `net.transport` is not specified, it can be assumed to be `IP.TCP` except if `http.flavor` is `QUIC`, in which case `IP.UDP` is assumed.\n */\nexport var HTTPFLAVORVALUES_HTTP_2_0 = TMP_HTTPFLAVORVALUES_HTTP_2_0;\n/**\n * Kind of HTTP protocol used.\n *\n * Note: If `net.transport` is not specified, it can be assumed to be `IP.TCP` except if `http.flavor` is `QUIC`, in which case `IP.UDP` is assumed.\n */\nexport var HTTPFLAVORVALUES_SPDY = TMP_HTTPFLAVORVALUES_SPDY;\n/**\n * Kind of HTTP protocol used.\n *\n * Note: If `net.transport` is not specified, it can be assumed to be `IP.TCP` except if `http.flavor` is `QUIC`, in which case `IP.UDP` is assumed.\n */\nexport var HTTPFLAVORVALUES_QUIC = TMP_HTTPFLAVORVALUES_QUIC;\n/**\n * The constant map of values for HttpFlavorValues.\n * @deprecated Use the HTTPFLAVORVALUES_XXXXX constants rather than the HttpFlavorValues.XXXXX for bundle minification.\n */\nexport var HttpFlavorValues = {\n    HTTP_1_0: TMP_HTTPFLAVORVALUES_HTTP_1_0,\n    HTTP_1_1: TMP_HTTPFLAVORVALUES_HTTP_1_1,\n    HTTP_2_0: TMP_HTTPFLAVORVALUES_HTTP_2_0,\n    SPDY: TMP_HTTPFLAVORVALUES_SPDY,\n    QUIC: TMP_HTTPFLAVORVALUES_QUIC,\n};\n/* ----------------------------------------------------------------------------------------------------------\n * Constant values for MessagingDestinationKindValues enum definition\n *\n * The kind of message destination.\n * ---------------------------------------------------------------------------------------------------------- */\n// Temporary local constants to assign to the individual exports and the namespaced version\n// Required to avoid the namespace exports using the unminifable export names for some package types\nvar TMP_MESSAGINGDESTINATIONKINDVALUES_QUEUE = 'queue';\nvar TMP_MESSAGINGDESTINATIONKINDVALUES_TOPIC = 'topic';\n/**\n * The kind of message destination.\n */\nexport var MESSAGINGDESTINATIONKINDVALUES_QUEUE = TMP_MESSAGINGDESTINATIONKINDVALUES_QUEUE;\n/**\n * The kind of message destination.\n */\nexport var MESSAGINGDESTINATIONKINDVALUES_TOPIC = TMP_MESSAGINGDESTINATIONKINDVALUES_TOPIC;\n/**\n * The constant map of values for MessagingDestinationKindValues.\n * @deprecated Use the MESSAGINGDESTINATIONKINDVALUES_XXXXX constants rather than the MessagingDestinationKindValues.XXXXX for bundle minification.\n */\nexport var MessagingDestinationKindValues = \n/*#__PURE__*/ createConstMap([\n    TMP_MESSAGINGDESTINATIONKINDVALUES_QUEUE,\n    TMP_MESSAGINGDESTINATIONKINDVALUES_TOPIC,\n]);\n/* ----------------------------------------------------------------------------------------------------------\n * Constant values for MessagingOperationValues enum definition\n *\n * A string identifying the kind of message consumption as defined in the [Operation names](#operation-names) section above. If the operation is &#34;send&#34;, this attribute MUST NOT be set, since the operation can be inferred from the span kind in that case.\n * ---------------------------------------------------------------------------------------------------------- */\n// Temporary local constants to assign to the individual exports and the namespaced version\n// Required to avoid the namespace exports using the unminifable export names for some package types\nvar TMP_MESSAGINGOPERATIONVALUES_RECEIVE = 'receive';\nvar TMP_MESSAGINGOPERATIONVALUES_PROCESS = 'process';\n/**\n * A string identifying the kind of message consumption as defined in the [Operation names](#operation-names) section above. If the operation is &#34;send&#34;, this attribute MUST NOT be set, since the operation can be inferred from the span kind in that case.\n */\nexport var MESSAGINGOPERATIONVALUES_RECEIVE = TMP_MESSAGINGOPERATIONVALUES_RECEIVE;\n/**\n * A string identifying the kind of message consumption as defined in the [Operation names](#operation-names) section above. If the operation is &#34;send&#34;, this attribute MUST NOT be set, since the operation can be inferred from the span kind in that case.\n */\nexport var MESSAGINGOPERATIONVALUES_PROCESS = TMP_MESSAGINGOPERATIONVALUES_PROCESS;\n/**\n * The constant map of values for MessagingOperationValues.\n * @deprecated Use the MESSAGINGOPERATIONVALUES_XXXXX constants rather than the MessagingOperationValues.XXXXX for bundle minification.\n */\nexport var MessagingOperationValues = \n/*#__PURE__*/ createConstMap([\n    TMP_MESSAGINGOPERATIONVALUES_RECEIVE,\n    TMP_MESSAGINGOPERATIONVALUES_PROCESS,\n]);\n/* ----------------------------------------------------------------------------------------------------------\n * Constant values for RpcGrpcStatusCodeValues enum definition\n *\n * The [numeric status code](https://github.com/grpc/grpc/blob/v1.33.2/doc/statuscodes.md) of the gRPC request.\n * ---------------------------------------------------------------------------------------------------------- */\n// Temporary local constants to assign to the individual exports and the namespaced version\n// Required to avoid the namespace exports using the unminifable export names for some package types\nvar TMP_RPCGRPCSTATUSCODEVALUES_OK = 0;\nvar TMP_RPCGRPCSTATUSCODEVALUES_CANCELLED = 1;\nvar TMP_RPCGRPCSTATUSCODEVALUES_UNKNOWN = 2;\nvar TMP_RPCGRPCSTATUSCODEVALUES_INVALID_ARGUMENT = 3;\nvar TMP_RPCGRPCSTATUSCODEVALUES_DEADLINE_EXCEEDED = 4;\nvar TMP_RPCGRPCSTATUSCODEVALUES_NOT_FOUND = 5;\nvar TMP_RPCGRPCSTATUSCODEVALUES_ALREADY_EXISTS = 6;\nvar TMP_RPCGRPCSTATUSCODEVALUES_PERMISSION_DENIED = 7;\nvar TMP_RPCGRPCSTATUSCODEVALUES_RESOURCE_EXHAUSTED = 8;\nvar TMP_RPCGRPCSTATUSCODEVALUES_FAILED_PRECONDITION = 9;\nvar TMP_RPCGRPCSTATUSCODEVALUES_ABORTED = 10;\nvar TMP_RPCGRPCSTATUSCODEVALUES_OUT_OF_RANGE = 11;\nvar TMP_RPCGRPCSTATUSCODEVALUES_UNIMPLEMENTED = 12;\nvar TMP_RPCGRPCSTATUSCODEVALUES_INTERNAL = 13;\nvar TMP_RPCGRPCSTATUSCODEVALUES_UNAVAILABLE = 14;\nvar TMP_RPCGRPCSTATUSCODEVALUES_DATA_LOSS = 15;\nvar TMP_RPCGRPCSTATUSCODEVALUES_UNAUTHENTICATED = 16;\n/**\n * The [numeric status code](https://github.com/grpc/grpc/blob/v1.33.2/doc/statuscodes.md) of the gRPC request.\n */\nexport var RPCGRPCSTATUSCODEVALUES_OK = TMP_RPCGRPCSTATUSCODEVALUES_OK;\n/**\n * The [numeric status code](https://github.com/grpc/grpc/blob/v1.33.2/doc/statuscodes.md) of the gRPC request.\n */\nexport var RPCGRPCSTATUSCODEVALUES_CANCELLED = TMP_RPCGRPCSTATUSCODEVALUES_CANCELLED;\n/**\n * The [numeric status code](https://github.com/grpc/grpc/blob/v1.33.2/doc/statuscodes.md) of the gRPC request.\n */\nexport var RPCGRPCSTATUSCODEVALUES_UNKNOWN = TMP_RPCGRPCSTATUSCODEVALUES_UNKNOWN;\n/**\n * The [numeric status code](https://github.com/grpc/grpc/blob/v1.33.2/doc/statuscodes.md) of the gRPC request.\n */\nexport var RPCGRPCSTATUSCODEVALUES_INVALID_ARGUMENT = TMP_RPCGRPCSTATUSCODEVALUES_INVALID_ARGUMENT;\n/**\n * The [numeric status code](https://github.com/grpc/grpc/blob/v1.33.2/doc/statuscodes.md) of the gRPC request.\n */\nexport var RPCGRPCSTATUSCODEVALUES_DEADLINE_EXCEEDED = TMP_RPCGRPCSTATUSCODEVALUES_DEADLINE_EXCEEDED;\n/**\n * The [numeric status code](https://github.com/grpc/grpc/blob/v1.33.2/doc/statuscodes.md) of the gRPC request.\n */\nexport var RPCGRPCSTATUSCODEVALUES_NOT_FOUND = TMP_RPCGRPCSTATUSCODEVALUES_NOT_FOUND;\n/**\n * The [numeric status code](https://github.com/grpc/grpc/blob/v1.33.2/doc/statuscodes.md) of the gRPC request.\n */\nexport var RPCGRPCSTATUSCODEVALUES_ALREADY_EXISTS = TMP_RPCGRPCSTATUSCODEVALUES_ALREADY_EXISTS;\n/**\n * The [numeric status code](https://github.com/grpc/grpc/blob/v1.33.2/doc/statuscodes.md) of the gRPC request.\n */\nexport var RPCGRPCSTATUSCODEVALUES_PERMISSION_DENIED = TMP_RPCGRPCSTATUSCODEVALUES_PERMISSION_DENIED;\n/**\n * The [numeric status code](https://github.com/grpc/grpc/blob/v1.33.2/doc/statuscodes.md) of the gRPC request.\n */\nexport var RPCGRPCSTATUSCODEVALUES_RESOURCE_EXHAUSTED = TMP_RPCGRPCSTATUSCODEVALUES_RESOURCE_EXHAUSTED;\n/**\n * The [numeric status code](https://github.com/grpc/grpc/blob/v1.33.2/doc/statuscodes.md) of the gRPC request.\n */\nexport var RPCGRPCSTATUSCODEVALUES_FAILED_PRECONDITION = TMP_RPCGRPCSTATUSCODEVALUES_FAILED_PRECONDITION;\n/**\n * The [numeric status code](https://github.com/grpc/grpc/blob/v1.33.2/doc/statuscodes.md) of the gRPC request.\n */\nexport var RPCGRPCSTATUSCODEVALUES_ABORTED = TMP_RPCGRPCSTATUSCODEVALUES_ABORTED;\n/**\n * The [numeric status code](https://github.com/grpc/grpc/blob/v1.33.2/doc/statuscodes.md) of the gRPC request.\n */\nexport var RPCGRPCSTATUSCODEVALUES_OUT_OF_RANGE = TMP_RPCGRPCSTATUSCODEVALUES_OUT_OF_RANGE;\n/**\n * The [numeric status code](https://github.com/grpc/grpc/blob/v1.33.2/doc/statuscodes.md) of the gRPC request.\n */\nexport var RPCGRPCSTATUSCODEVALUES_UNIMPLEMENTED = TMP_RPCGRPCSTATUSCODEVALUES_UNIMPLEMENTED;\n/**\n * The [numeric status code](https://github.com/grpc/grpc/blob/v1.33.2/doc/statuscodes.md) of the gRPC request.\n */\nexport var RPCGRPCSTATUSCODEVALUES_INTERNAL = TMP_RPCGRPCSTATUSCODEVALUES_INTERNAL;\n/**\n * The [numeric status code](https://github.com/grpc/grpc/blob/v1.33.2/doc/statuscodes.md) of the gRPC request.\n */\nexport var RPCGRPCSTATUSCODEVALUES_UNAVAILABLE = TMP_RPCGRPCSTATUSCODEVALUES_UNAVAILABLE;\n/**\n * The [numeric status code](https://github.com/grpc/grpc/blob/v1.33.2/doc/statuscodes.md) of the gRPC request.\n */\nexport var RPCGRPCSTATUSCODEVALUES_DATA_LOSS = TMP_RPCGRPCSTATUSCODEVALUES_DATA_LOSS;\n/**\n * The [numeric status code](https://github.com/grpc/grpc/blob/v1.33.2/doc/statuscodes.md) of the gRPC request.\n */\nexport var RPCGRPCSTATUSCODEVALUES_UNAUTHENTICATED = TMP_RPCGRPCSTATUSCODEVALUES_UNAUTHENTICATED;\n/**\n * The constant map of values for RpcGrpcStatusCodeValues.\n * @deprecated Use the RPCGRPCSTATUSCODEVALUES_XXXXX constants rather than the RpcGrpcStatusCodeValues.XXXXX for bundle minification.\n */\nexport var RpcGrpcStatusCodeValues = {\n    OK: TMP_RPCGRPCSTATUSCODEVALUES_OK,\n    CANCELLED: TMP_RPCGRPCSTATUSCODEVALUES_CANCELLED,\n    UNKNOWN: TMP_RPCGRPCSTATUSCODEVALUES_UNKNOWN,\n    INVALID_ARGUMENT: TMP_RPCGRPCSTATUSCODEVALUES_INVALID_ARGUMENT,\n    DEADLINE_EXCEEDED: TMP_RPCGRPCSTATUSCODEVALUES_DEADLINE_EXCEEDED,\n    NOT_FOUND: TMP_RPCGRPCSTATUSCODEVALUES_NOT_FOUND,\n    ALREADY_EXISTS: TMP_RPCGRPCSTATUSCODEVALUES_ALREADY_EXISTS,\n    PERMISSION_DENIED: TMP_RPCGRPCSTATUSCODEVALUES_PERMISSION_DENIED,\n    RESOURCE_EXHAUSTED: TMP_RPCGRPCSTATUSCODEVALUES_RESOURCE_EXHAUSTED,\n    FAILED_PRECONDITION: TMP_RPCGRPCSTATUSCODEVALUES_FAILED_PRECONDITION,\n    ABORTED: TMP_RPCGRPCSTATUSCODEVALUES_ABORTED,\n    OUT_OF_RANGE: TMP_RPCGRPCSTATUSCODEVALUES_OUT_OF_RANGE,\n    UNIMPLEMENTED: TMP_RPCGRPCSTATUSCODEVALUES_UNIMPLEMENTED,\n    INTERNAL: TMP_RPCGRPCSTATUSCODEVALUES_INTERNAL,\n    UNAVAILABLE: TMP_RPCGRPCSTATUSCODEVALUES_UNAVAILABLE,\n    DATA_LOSS: TMP_RPCGRPCSTATUSCODEVALUES_DATA_LOSS,\n    UNAUTHENTICATED: TMP_RPCGRPCSTATUSCODEVALUES_UNAUTHENTICATED,\n};\n/* ----------------------------------------------------------------------------------------------------------\n * Constant values for MessageTypeValues enum definition\n *\n * Whether this is a received or sent message.\n * ---------------------------------------------------------------------------------------------------------- */\n// Temporary local constants to assign to the individual exports and the namespaced version\n// Required to avoid the namespace exports using the unminifable export names for some package types\nvar TMP_MESSAGETYPEVALUES_SENT = 'SENT';\nvar TMP_MESSAGETYPEVALUES_RECEIVED = 'RECEIVED';\n/**\n * Whether this is a received or sent message.\n */\nexport var MESSAGETYPEVALUES_SENT = TMP_MESSAGETYPEVALUES_SENT;\n/**\n * Whether this is a received or sent message.\n */\nexport var MESSAGETYPEVALUES_RECEIVED = TMP_MESSAGETYPEVALUES_RECEIVED;\n/**\n * The constant map of values for MessageTypeValues.\n * @deprecated Use the MESSAGETYPEVALUES_XXXXX constants rather than the MessageTypeValues.XXXXX for bundle minification.\n */\nexport var MessageTypeValues = \n/*#__PURE__*/ createConstMap([\n    TMP_MESSAGETYPEVALUES_SENT,\n    TMP_MESSAGETYPEVALUES_RECEIVED,\n]);\n//# sourceMappingURL=SemanticAttributes.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { createConstMap } from '../internal/utils';\n//----------------------------------------------------------------------------------------------------------\n// DO NOT EDIT, this is an Auto-generated file from scripts/semconv/templates//templates/SemanticAttributes.ts.j2\n//----------------------------------------------------------------------------------------------------------\n//----------------------------------------------------------------------------------------------------------\n// Constant values for SemanticResourceAttributes\n//----------------------------------------------------------------------------------------------------------\n// Temporary local constants to assign to the individual exports and the namespaced version\n// Required to avoid the namespace exports using the unminifable export names for some package types\nvar TMP_CLOUD_PROVIDER = 'cloud.provider';\nvar TMP_CLOUD_ACCOUNT_ID = 'cloud.account.id';\nvar TMP_CLOUD_REGION = 'cloud.region';\nvar TMP_CLOUD_AVAILABILITY_ZONE = 'cloud.availability_zone';\nvar TMP_CLOUD_PLATFORM = 'cloud.platform';\nvar TMP_AWS_ECS_CONTAINER_ARN = 'aws.ecs.container.arn';\nvar TMP_AWS_ECS_CLUSTER_ARN = 'aws.ecs.cluster.arn';\nvar TMP_AWS_ECS_LAUNCHTYPE = 'aws.ecs.launchtype';\nvar TMP_AWS_ECS_TASK_ARN = 'aws.ecs.task.arn';\nvar TMP_AWS_ECS_TASK_FAMILY = 'aws.ecs.task.family';\nvar TMP_AWS_ECS_TASK_REVISION = 'aws.ecs.task.revision';\nvar TMP_AWS_EKS_CLUSTER_ARN = 'aws.eks.cluster.arn';\nvar TMP_AWS_LOG_GROUP_NAMES = 'aws.log.group.names';\nvar TMP_AWS_LOG_GROUP_ARNS = 'aws.log.group.arns';\nvar TMP_AWS_LOG_STREAM_NAMES = 'aws.log.stream.names';\nvar TMP_AWS_LOG_STREAM_ARNS = 'aws.log.stream.arns';\nvar TMP_CONTAINER_NAME = 'container.name';\nvar TMP_CONTAINER_ID = 'container.id';\nvar TMP_CONTAINER_RUNTIME = 'container.runtime';\nvar TMP_CONTAINER_IMAGE_NAME = 'container.image.name';\nvar TMP_CONTAINER_IMAGE_TAG = 'container.image.tag';\nvar TMP_DEPLOYMENT_ENVIRONMENT = 'deployment.environment';\nvar TMP_DEVICE_ID = 'device.id';\nvar TMP_DEVICE_MODEL_IDENTIFIER = 'device.model.identifier';\nvar TMP_DEVICE_MODEL_NAME = 'device.model.name';\nvar TMP_FAAS_NAME = 'faas.name';\nvar TMP_FAAS_ID = 'faas.id';\nvar TMP_FAAS_VERSION = 'faas.version';\nvar TMP_FAAS_INSTANCE = 'faas.instance';\nvar TMP_FAAS_MAX_MEMORY = 'faas.max_memory';\nvar TMP_HOST_ID = 'host.id';\nvar TMP_HOST_NAME = 'host.name';\nvar TMP_HOST_TYPE = 'host.type';\nvar TMP_HOST_ARCH = 'host.arch';\nvar TMP_HOST_IMAGE_NAME = 'host.image.name';\nvar TMP_HOST_IMAGE_ID = 'host.image.id';\nvar TMP_HOST_IMAGE_VERSION = 'host.image.version';\nvar TMP_K8S_CLUSTER_NAME = 'k8s.cluster.name';\nvar TMP_K8S_NODE_NAME = 'k8s.node.name';\nvar TMP_K8S_NODE_UID = 'k8s.node.uid';\nvar TMP_K8S_NAMESPACE_NAME = 'k8s.namespace.name';\nvar TMP_K8S_POD_UID = 'k8s.pod.uid';\nvar TMP_K8S_POD_NAME = 'k8s.pod.name';\nvar TMP_K8S_CONTAINER_NAME = 'k8s.container.name';\nvar TMP_K8S_REPLICASET_UID = 'k8s.replicaset.uid';\nvar TMP_K8S_REPLICASET_NAME = 'k8s.replicaset.name';\nvar TMP_K8S_DEPLOYMENT_UID = 'k8s.deployment.uid';\nvar TMP_K8S_DEPLOYMENT_NAME = 'k8s.deployment.name';\nvar TMP_K8S_STATEFULSET_UID = 'k8s.statefulset.uid';\nvar TMP_K8S_STATEFULSET_NAME = 'k8s.statefulset.name';\nvar TMP_K8S_DAEMONSET_UID = 'k8s.daemonset.uid';\nvar TMP_K8S_DAEMONSET_NAME = 'k8s.daemonset.name';\nvar TMP_K8S_JOB_UID = 'k8s.job.uid';\nvar TMP_K8S_JOB_NAME = 'k8s.job.name';\nvar TMP_K8S_CRONJOB_UID = 'k8s.cronjob.uid';\nvar TMP_K8S_CRONJOB_NAME = 'k8s.cronjob.name';\nvar TMP_OS_TYPE = 'os.type';\nvar TMP_OS_DESCRIPTION = 'os.description';\nvar TMP_OS_NAME = 'os.name';\nvar TMP_OS_VERSION = 'os.version';\nvar TMP_PROCESS_PID = 'process.pid';\nvar TMP_PROCESS_EXECUTABLE_NAME = 'process.executable.name';\nvar TMP_PROCESS_EXECUTABLE_PATH = 'process.executable.path';\nvar TMP_PROCESS_COMMAND = 'process.command';\nvar TMP_PROCESS_COMMAND_LINE = 'process.command_line';\nvar TMP_PROCESS_COMMAND_ARGS = 'process.command_args';\nvar TMP_PROCESS_OWNER = 'process.owner';\nvar TMP_PROCESS_RUNTIME_NAME = 'process.runtime.name';\nvar TMP_PROCESS_RUNTIME_VERSION = 'process.runtime.version';\nvar TMP_PROCESS_RUNTIME_DESCRIPTION = 'process.runtime.description';\nvar TMP_SERVICE_NAME = 'service.name';\nvar TMP_SERVICE_NAMESPACE = 'service.namespace';\nvar TMP_SERVICE_INSTANCE_ID = 'service.instance.id';\nvar TMP_SERVICE_VERSION = 'service.version';\nvar TMP_TELEMETRY_SDK_NAME = 'telemetry.sdk.name';\nvar TMP_TELEMETRY_SDK_LANGUAGE = 'telemetry.sdk.language';\nvar TMP_TELEMETRY_SDK_VERSION = 'telemetry.sdk.version';\nvar TMP_TELEMETRY_AUTO_VERSION = 'telemetry.auto.version';\nvar TMP_WEBENGINE_NAME = 'webengine.name';\nvar TMP_WEBENGINE_VERSION = 'webengine.version';\nvar TMP_WEBENGINE_DESCRIPTION = 'webengine.description';\n/**\n * Name of the cloud provider.\n */\nexport var SEMRESATTRS_CLOUD_PROVIDER = TMP_CLOUD_PROVIDER;\n/**\n * The cloud account ID the resource is assigned to.\n */\nexport var SEMRESATTRS_CLOUD_ACCOUNT_ID = TMP_CLOUD_ACCOUNT_ID;\n/**\n * The geographical region the resource is running. Refer to your provider&#39;s docs to see the available regions, for example [Alibaba Cloud regions](https://www.alibabacloud.com/help/doc-detail/40654.htm), [AWS regions](https://aws.amazon.com/about-aws/global-infrastructure/regions_az/), [Azure regions](https://azure.microsoft.com/en-us/global-infrastructure/geographies/), or [Google Cloud regions](https://cloud.google.com/about/locations).\n */\nexport var SEMRESATTRS_CLOUD_REGION = TMP_CLOUD_REGION;\n/**\n * Cloud regions often have multiple, isolated locations known as zones to increase availability. Availability zone represents the zone where the resource is running.\n *\n * Note: Availability zones are called &#34;zones&#34; on Alibaba Cloud and Google Cloud.\n */\nexport var SEMRESATTRS_CLOUD_AVAILABILITY_ZONE = TMP_CLOUD_AVAILABILITY_ZONE;\n/**\n * The cloud platform in use.\n *\n * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.\n */\nexport var SEMRESATTRS_CLOUD_PLATFORM = TMP_CLOUD_PLATFORM;\n/**\n * The Amazon Resource Name (ARN) of an [ECS container instance](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ECS_instances.html).\n */\nexport var SEMRESATTRS_AWS_ECS_CONTAINER_ARN = TMP_AWS_ECS_CONTAINER_ARN;\n/**\n * The ARN of an [ECS cluster](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/clusters.html).\n */\nexport var SEMRESATTRS_AWS_ECS_CLUSTER_ARN = TMP_AWS_ECS_CLUSTER_ARN;\n/**\n * The [launch type](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/launch_types.html) for an ECS task.\n */\nexport var SEMRESATTRS_AWS_ECS_LAUNCHTYPE = TMP_AWS_ECS_LAUNCHTYPE;\n/**\n * The ARN of an [ECS task definition](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task_definitions.html).\n */\nexport var SEMRESATTRS_AWS_ECS_TASK_ARN = TMP_AWS_ECS_TASK_ARN;\n/**\n * The task definition family this task definition is a member of.\n */\nexport var SEMRESATTRS_AWS_ECS_TASK_FAMILY = TMP_AWS_ECS_TASK_FAMILY;\n/**\n * The revision for this task definition.\n */\nexport var SEMRESATTRS_AWS_ECS_TASK_REVISION = TMP_AWS_ECS_TASK_REVISION;\n/**\n * The ARN of an EKS cluster.\n */\nexport var SEMRESATTRS_AWS_EKS_CLUSTER_ARN = TMP_AWS_EKS_CLUSTER_ARN;\n/**\n * The name(s) of the AWS log group(s) an application is writing to.\n *\n * Note: Multiple log groups must be supported for cases like multi-container applications, where a single application has sidecar containers, and each write to their own log group.\n */\nexport var SEMRESATTRS_AWS_LOG_GROUP_NAMES = TMP_AWS_LOG_GROUP_NAMES;\n/**\n * The Amazon Resource Name(s) (ARN) of the AWS log group(s).\n *\n * Note: See the [log group ARN format documentation](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/iam-access-control-overview-cwl.html#CWL_ARN_Format).\n */\nexport var SEMRESATTRS_AWS_LOG_GROUP_ARNS = TMP_AWS_LOG_GROUP_ARNS;\n/**\n * The name(s) of the AWS log stream(s) an application is writing to.\n */\nexport var SEMRESATTRS_AWS_LOG_STREAM_NAMES = TMP_AWS_LOG_STREAM_NAMES;\n/**\n * The ARN(s) of the AWS log stream(s).\n *\n * Note: See the [log stream ARN format documentation](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/iam-access-control-overview-cwl.html#CWL_ARN_Format). One log group can contain several log streams, so these ARNs necessarily identify both a log group and a log stream.\n */\nexport var SEMRESATTRS_AWS_LOG_STREAM_ARNS = TMP_AWS_LOG_STREAM_ARNS;\n/**\n * Container name.\n */\nexport var SEMRESATTRS_CONTAINER_NAME = TMP_CONTAINER_NAME;\n/**\n * Container ID. Usually a UUID, as for example used to [identify Docker containers](https://docs.docker.com/engine/reference/run/#container-identification). The UUID might be abbreviated.\n */\nexport var SEMRESATTRS_CONTAINER_ID = TMP_CONTAINER_ID;\n/**\n * The container runtime managing this container.\n */\nexport var SEMRESATTRS_CONTAINER_RUNTIME = TMP_CONTAINER_RUNTIME;\n/**\n * Name of the image the container was built on.\n */\nexport var SEMRESATTRS_CONTAINER_IMAGE_NAME = TMP_CONTAINER_IMAGE_NAME;\n/**\n * Container image tag.\n */\nexport var SEMRESATTRS_CONTAINER_IMAGE_TAG = TMP_CONTAINER_IMAGE_TAG;\n/**\n * Name of the [deployment environment](https://en.wikipedia.org/wiki/Deployment_environment) (aka deployment tier).\n */\nexport var SEMRESATTRS_DEPLOYMENT_ENVIRONMENT = TMP_DEPLOYMENT_ENVIRONMENT;\n/**\n * A unique identifier representing the device.\n *\n * Note: The device identifier MUST only be defined using the values outlined below. This value is not an advertising identifier and MUST NOT be used as such. On iOS (Swift or Objective-C), this value MUST be equal to the [vendor identifier](https://developer.apple.com/documentation/uikit/uidevice/1620059-identifierforvendor). On Android (Java or Kotlin), this value MUST be equal to the Firebase Installation ID or a globally unique UUID which is persisted across sessions in your application. More information can be found [here](https://developer.android.com/training/articles/user-data-ids) on best practices and exact implementation details. Caution should be taken when storing personal data or anything which can identify a user. GDPR and data protection laws may apply, ensure you do your own due diligence.\n */\nexport var SEMRESATTRS_DEVICE_ID = TMP_DEVICE_ID;\n/**\n * The model identifier for the device.\n *\n * Note: It&#39;s recommended this value represents a machine readable version of the model identifier rather than the market or consumer-friendly name of the device.\n */\nexport var SEMRESATTRS_DEVICE_MODEL_IDENTIFIER = TMP_DEVICE_MODEL_IDENTIFIER;\n/**\n * The marketing name for the device model.\n *\n * Note: It&#39;s recommended this value represents a human readable version of the device model rather than a machine readable alternative.\n */\nexport var SEMRESATTRS_DEVICE_MODEL_NAME = TMP_DEVICE_MODEL_NAME;\n/**\n * The name of the single function that this runtime instance executes.\n *\n * Note: This is the name of the function as configured/deployed on the FaaS platform and is usually different from the name of the callback function (which may be stored in the [`code.namespace`/`code.function`](../../trace/semantic_conventions/span-general.md#source-code-attributes) span attributes).\n */\nexport var SEMRESATTRS_FAAS_NAME = TMP_FAAS_NAME;\n/**\n* The unique ID of the single function that this runtime instance executes.\n*\n* Note: Depending on the cloud provider, use:\n\n* **AWS Lambda:** The function [ARN](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html).\nTake care not to use the &#34;invoked ARN&#34; directly but replace any\n[alias suffix](https://docs.aws.amazon.com/lambda/latest/dg/configuration-aliases.html) with the resolved function version, as the same runtime instance may be invokable with multiple\ndifferent aliases.\n* **GCP:** The [URI of the resource](https://cloud.google.com/iam/docs/full-resource-names)\n* **Azure:** The [Fully Qualified Resource ID](https://docs.microsoft.com/en-us/rest/api/resources/resources/get-by-id).\n\nOn some providers, it may not be possible to determine the full ID at startup,\nwhich is why this field cannot be made required. For example, on AWS the account ID\npart of the ARN is not available without calling another AWS API\nwhich may be deemed too slow for a short-running lambda function.\nAs an alternative, consider setting `faas.id` as a span attribute instead.\n*/\nexport var SEMRESATTRS_FAAS_ID = TMP_FAAS_ID;\n/**\n* The immutable version of the function being executed.\n*\n* Note: Depending on the cloud provider and platform, use:\n\n* **AWS Lambda:** The [function version](https://docs.aws.amazon.com/lambda/latest/dg/configuration-versions.html)\n  (an integer represented as a decimal string).\n* **Google Cloud Run:** The [revision](https://cloud.google.com/run/docs/managing/revisions)\n  (i.e., the function name plus the revision suffix).\n* **Google Cloud Functions:** The value of the\n  [`K_REVISION` environment variable](https://cloud.google.com/functions/docs/env-var#runtime_environment_variables_set_automatically).\n* **Azure Functions:** Not applicable. Do not set this attribute.\n*/\nexport var SEMRESATTRS_FAAS_VERSION = TMP_FAAS_VERSION;\n/**\n * The execution environment ID as a string, that will be potentially reused for other invocations to the same function/function version.\n *\n * Note: * **AWS Lambda:** Use the (full) log stream name.\n */\nexport var SEMRESATTRS_FAAS_INSTANCE = TMP_FAAS_INSTANCE;\n/**\n * The amount of memory available to the serverless function in MiB.\n *\n * Note: It&#39;s recommended to set this attribute since e.g. too little memory can easily stop a Java AWS Lambda function from working correctly. On AWS Lambda, the environment variable `AWS_LAMBDA_FUNCTION_MEMORY_SIZE` provides this information.\n */\nexport var SEMRESATTRS_FAAS_MAX_MEMORY = TMP_FAAS_MAX_MEMORY;\n/**\n * Unique host ID. For Cloud, this must be the instance_id assigned by the cloud provider.\n */\nexport var SEMRESATTRS_HOST_ID = TMP_HOST_ID;\n/**\n * Name of the host. On Unix systems, it may contain what the hostname command returns, or the fully qualified hostname, or another name specified by the user.\n */\nexport var SEMRESATTRS_HOST_NAME = TMP_HOST_NAME;\n/**\n * Type of host. For Cloud, this must be the machine type.\n */\nexport var SEMRESATTRS_HOST_TYPE = TMP_HOST_TYPE;\n/**\n * The CPU architecture the host system is running on.\n */\nexport var SEMRESATTRS_HOST_ARCH = TMP_HOST_ARCH;\n/**\n * Name of the VM image or OS install the host was instantiated from.\n */\nexport var SEMRESATTRS_HOST_IMAGE_NAME = TMP_HOST_IMAGE_NAME;\n/**\n * VM image ID. For Cloud, this value is from the provider.\n */\nexport var SEMRESATTRS_HOST_IMAGE_ID = TMP_HOST_IMAGE_ID;\n/**\n * The version string of the VM image as defined in [Version Attributes](README.md#version-attributes).\n */\nexport var SEMRESATTRS_HOST_IMAGE_VERSION = TMP_HOST_IMAGE_VERSION;\n/**\n * The name of the cluster.\n */\nexport var SEMRESATTRS_K8S_CLUSTER_NAME = TMP_K8S_CLUSTER_NAME;\n/**\n * The name of the Node.\n */\nexport var SEMRESATTRS_K8S_NODE_NAME = TMP_K8S_NODE_NAME;\n/**\n * The UID of the Node.\n */\nexport var SEMRESATTRS_K8S_NODE_UID = TMP_K8S_NODE_UID;\n/**\n * The name of the namespace that the pod is running in.\n */\nexport var SEMRESATTRS_K8S_NAMESPACE_NAME = TMP_K8S_NAMESPACE_NAME;\n/**\n * The UID of the Pod.\n */\nexport var SEMRESATTRS_K8S_POD_UID = TMP_K8S_POD_UID;\n/**\n * The name of the Pod.\n */\nexport var SEMRESATTRS_K8S_POD_NAME = TMP_K8S_POD_NAME;\n/**\n * The name of the Container in a Pod template.\n */\nexport var SEMRESATTRS_K8S_CONTAINER_NAME = TMP_K8S_CONTAINER_NAME;\n/**\n * The UID of the ReplicaSet.\n */\nexport var SEMRESATTRS_K8S_REPLICASET_UID = TMP_K8S_REPLICASET_UID;\n/**\n * The name of the ReplicaSet.\n */\nexport var SEMRESATTRS_K8S_REPLICASET_NAME = TMP_K8S_REPLICASET_NAME;\n/**\n * The UID of the Deployment.\n */\nexport var SEMRESATTRS_K8S_DEPLOYMENT_UID = TMP_K8S_DEPLOYMENT_UID;\n/**\n * The name of the Deployment.\n */\nexport var SEMRESATTRS_K8S_DEPLOYMENT_NAME = TMP_K8S_DEPLOYMENT_NAME;\n/**\n * The UID of the StatefulSet.\n */\nexport var SEMRESATTRS_K8S_STATEFULSET_UID = TMP_K8S_STATEFULSET_UID;\n/**\n * The name of the StatefulSet.\n */\nexport var SEMRESATTRS_K8S_STATEFULSET_NAME = TMP_K8S_STATEFULSET_NAME;\n/**\n * The UID of the DaemonSet.\n */\nexport var SEMRESATTRS_K8S_DAEMONSET_UID = TMP_K8S_DAEMONSET_UID;\n/**\n * The name of the DaemonSet.\n */\nexport var SEMRESATTRS_K8S_DAEMONSET_NAME = TMP_K8S_DAEMONSET_NAME;\n/**\n * The UID of the Job.\n */\nexport var SEMRESATTRS_K8S_JOB_UID = TMP_K8S_JOB_UID;\n/**\n * The name of the Job.\n */\nexport var SEMRESATTRS_K8S_JOB_NAME = TMP_K8S_JOB_NAME;\n/**\n * The UID of the CronJob.\n */\nexport var SEMRESATTRS_K8S_CRONJOB_UID = TMP_K8S_CRONJOB_UID;\n/**\n * The name of the CronJob.\n */\nexport var SEMRESATTRS_K8S_CRONJOB_NAME = TMP_K8S_CRONJOB_NAME;\n/**\n * The operating system type.\n */\nexport var SEMRESATTRS_OS_TYPE = TMP_OS_TYPE;\n/**\n * Human readable (not intended to be parsed) OS version information, like e.g. reported by `ver` or `lsb_release -a` commands.\n */\nexport var SEMRESATTRS_OS_DESCRIPTION = TMP_OS_DESCRIPTION;\n/**\n * Human readable operating system name.\n */\nexport var SEMRESATTRS_OS_NAME = TMP_OS_NAME;\n/**\n * The version string of the operating system as defined in [Version Attributes](../../resource/semantic_conventions/README.md#version-attributes).\n */\nexport var SEMRESATTRS_OS_VERSION = TMP_OS_VERSION;\n/**\n * Process identifier (PID).\n */\nexport var SEMRESATTRS_PROCESS_PID = TMP_PROCESS_PID;\n/**\n * The name of the process executable. On Linux based systems, can be set to the `Name` in `proc/[pid]/status`. On Windows, can be set to the base name of `GetProcessImageFileNameW`.\n */\nexport var SEMRESATTRS_PROCESS_EXECUTABLE_NAME = TMP_PROCESS_EXECUTABLE_NAME;\n/**\n * The full path to the process executable. On Linux based systems, can be set to the target of `proc/[pid]/exe`. On Windows, can be set to the result of `GetProcessImageFileNameW`.\n */\nexport var SEMRESATTRS_PROCESS_EXECUTABLE_PATH = TMP_PROCESS_EXECUTABLE_PATH;\n/**\n * The command used to launch the process (i.e. the command name). On Linux based systems, can be set to the zeroth string in `proc/[pid]/cmdline`. On Windows, can be set to the first parameter extracted from `GetCommandLineW`.\n */\nexport var SEMRESATTRS_PROCESS_COMMAND = TMP_PROCESS_COMMAND;\n/**\n * The full command used to launch the process as a single string representing the full command. On Windows, can be set to the result of `GetCommandLineW`. Do not set this if you have to assemble it just for monitoring; use `process.command_args` instead.\n */\nexport var SEMRESATTRS_PROCESS_COMMAND_LINE = TMP_PROCESS_COMMAND_LINE;\n/**\n * All the command arguments (including the command/executable itself) as received by the process. On Linux-based systems (and some other Unixoid systems supporting procfs), can be set according to the list of null-delimited strings extracted from `proc/[pid]/cmdline`. For libc-based executables, this would be the full argv vector passed to `main`.\n */\nexport var SEMRESATTRS_PROCESS_COMMAND_ARGS = TMP_PROCESS_COMMAND_ARGS;\n/**\n * The username of the user that owns the process.\n */\nexport var SEMRESATTRS_PROCESS_OWNER = TMP_PROCESS_OWNER;\n/**\n * The name of the runtime of this process. For compiled native binaries, this SHOULD be the name of the compiler.\n */\nexport var SEMRESATTRS_PROCESS_RUNTIME_NAME = TMP_PROCESS_RUNTIME_NAME;\n/**\n * The version of the runtime of this process, as returned by the runtime without modification.\n */\nexport var SEMRESATTRS_PROCESS_RUNTIME_VERSION = TMP_PROCESS_RUNTIME_VERSION;\n/**\n * An additional description about the runtime of the process, for example a specific vendor customization of the runtime environment.\n */\nexport var SEMRESATTRS_PROCESS_RUNTIME_DESCRIPTION = TMP_PROCESS_RUNTIME_DESCRIPTION;\n/**\n * Logical name of the service.\n *\n * Note: MUST be the same for all instances of horizontally scaled services. If the value was not specified, SDKs MUST fallback to `unknown_service:` concatenated with [`process.executable.name`](process.md#process), e.g. `unknown_service:bash`. If `process.executable.name` is not available, the value MUST be set to `unknown_service`.\n */\nexport var SEMRESATTRS_SERVICE_NAME = TMP_SERVICE_NAME;\n/**\n * A namespace for `service.name`.\n *\n * Note: A string value having a meaning that helps to distinguish a group of services, for example the team name that owns a group of services. `service.name` is expected to be unique within the same namespace. If `service.namespace` is not specified in the Resource then `service.name` is expected to be unique for all services that have no explicit namespace defined (so the empty/unspecified namespace is simply one more valid namespace). Zero-length namespace string is assumed equal to unspecified namespace.\n */\nexport var SEMRESATTRS_SERVICE_NAMESPACE = TMP_SERVICE_NAMESPACE;\n/**\n * The string ID of the service instance.\n *\n * Note: MUST be unique for each instance of the same `service.namespace,service.name` pair (in other words `service.namespace,service.name,service.instance.id` triplet MUST be globally unique). The ID helps to distinguish instances of the same service that exist at the same time (e.g. instances of a horizontally scaled service). It is preferable for the ID to be persistent and stay the same for the lifetime of the service instance, however it is acceptable that the ID is ephemeral and changes during important lifetime events for the service (e.g. service restarts). If the service has no inherent unique ID that can be used as the value of this attribute it is recommended to generate a random Version 1 or Version 4 RFC 4122 UUID (services aiming for reproducible UUIDs may also use Version 5, see RFC 4122 for more recommendations).\n */\nexport var SEMRESATTRS_SERVICE_INSTANCE_ID = TMP_SERVICE_INSTANCE_ID;\n/**\n * The version string of the service API or implementation.\n */\nexport var SEMRESATTRS_SERVICE_VERSION = TMP_SERVICE_VERSION;\n/**\n * The name of the telemetry SDK as defined above.\n */\nexport var SEMRESATTRS_TELEMETRY_SDK_NAME = TMP_TELEMETRY_SDK_NAME;\n/**\n * The language of the telemetry SDK.\n */\nexport var SEMRESATTRS_TELEMETRY_SDK_LANGUAGE = TMP_TELEMETRY_SDK_LANGUAGE;\n/**\n * The version string of the telemetry SDK.\n */\nexport var SEMRESATTRS_TELEMETRY_SDK_VERSION = TMP_TELEMETRY_SDK_VERSION;\n/**\n * The version string of the auto instrumentation agent, if used.\n */\nexport var SEMRESATTRS_TELEMETRY_AUTO_VERSION = TMP_TELEMETRY_AUTO_VERSION;\n/**\n * The name of the web engine.\n */\nexport var SEMRESATTRS_WEBENGINE_NAME = TMP_WEBENGINE_NAME;\n/**\n * The version of the web engine.\n */\nexport var SEMRESATTRS_WEBENGINE_VERSION = TMP_WEBENGINE_VERSION;\n/**\n * Additional description of the web engine (e.g. detailed version and edition information).\n */\nexport var SEMRESATTRS_WEBENGINE_DESCRIPTION = TMP_WEBENGINE_DESCRIPTION;\n/**\n * Create exported Value Map for SemanticResourceAttributes values\n * @deprecated Use the SEMRESATTRS_XXXXX constants rather than the SemanticResourceAttributes.XXXXX for bundle minification\n */\nexport var SemanticResourceAttributes = \n/*#__PURE__*/ createConstMap([\n    TMP_CLOUD_PROVIDER,\n    TMP_CLOUD_ACCOUNT_ID,\n    TMP_CLOUD_REGION,\n    TMP_CLOUD_AVAILABILITY_ZONE,\n    TMP_CLOUD_PLATFORM,\n    TMP_AWS_ECS_CONTAINER_ARN,\n    TMP_AWS_ECS_CLUSTER_ARN,\n    TMP_AWS_ECS_LAUNCHTYPE,\n    TMP_AWS_ECS_TASK_ARN,\n    TMP_AWS_ECS_TASK_FAMILY,\n    TMP_AWS_ECS_TASK_REVISION,\n    TMP_AWS_EKS_CLUSTER_ARN,\n    TMP_AWS_LOG_GROUP_NAMES,\n    TMP_AWS_LOG_GROUP_ARNS,\n    TMP_AWS_LOG_STREAM_NAMES,\n    TMP_AWS_LOG_STREAM_ARNS,\n    TMP_CONTAINER_NAME,\n    TMP_CONTAINER_ID,\n    TMP_CONTAINER_RUNTIME,\n    TMP_CONTAINER_IMAGE_NAME,\n    TMP_CONTAINER_IMAGE_TAG,\n    TMP_DEPLOYMENT_ENVIRONMENT,\n    TMP_DEVICE_ID,\n    TMP_DEVICE_MODEL_IDENTIFIER,\n    TMP_DEVICE_MODEL_NAME,\n    TMP_FAAS_NAME,\n    TMP_FAAS_ID,\n    TMP_FAAS_VERSION,\n    TMP_FAAS_INSTANCE,\n    TMP_FAAS_MAX_MEMORY,\n    TMP_HOST_ID,\n    TMP_HOST_NAME,\n    TMP_HOST_TYPE,\n    TMP_HOST_ARCH,\n    TMP_HOST_IMAGE_NAME,\n    TMP_HOST_IMAGE_ID,\n    TMP_HOST_IMAGE_VERSION,\n    TMP_K8S_CLUSTER_NAME,\n    TMP_K8S_NODE_NAME,\n    TMP_K8S_NODE_UID,\n    TMP_K8S_NAMESPACE_NAME,\n    TMP_K8S_POD_UID,\n    TMP_K8S_POD_NAME,\n    TMP_K8S_CONTAINER_NAME,\n    TMP_K8S_REPLICASET_UID,\n    TMP_K8S_REPLICASET_NAME,\n    TMP_K8S_DEPLOYMENT_UID,\n    TMP_K8S_DEPLOYMENT_NAME,\n    TMP_K8S_STATEFULSET_UID,\n    TMP_K8S_STATEFULSET_NAME,\n    TMP_K8S_DAEMONSET_UID,\n    TMP_K8S_DAEMONSET_NAME,\n    TMP_K8S_JOB_UID,\n    TMP_K8S_JOB_NAME,\n    TMP_K8S_CRONJOB_UID,\n    TMP_K8S_CRONJOB_NAME,\n    TMP_OS_TYPE,\n    TMP_OS_DESCRIPTION,\n    TMP_OS_NAME,\n    TMP_OS_VERSION,\n    TMP_PROCESS_PID,\n    TMP_PROCESS_EXECUTABLE_NAME,\n    TMP_PROCESS_EXECUTABLE_PATH,\n    TMP_PROCESS_COMMAND,\n    TMP_PROCESS_COMMAND_LINE,\n    TMP_PROCESS_COMMAND_ARGS,\n    TMP_PROCESS_OWNER,\n    TMP_PROCESS_RUNTIME_NAME,\n    TMP_PROCESS_RUNTIME_VERSION,\n    TMP_PROCESS_RUNTIME_DESCRIPTION,\n    TMP_SERVICE_NAME,\n    TMP_SERVICE_NAMESPACE,\n    TMP_SERVICE_INSTANCE_ID,\n    TMP_SERVICE_VERSION,\n    TMP_TELEMETRY_SDK_NAME,\n    TMP_TELEMETRY_SDK_LANGUAGE,\n    TMP_TELEMETRY_SDK_VERSION,\n    TMP_TELEMETRY_AUTO_VERSION,\n    TMP_WEBENGINE_NAME,\n    TMP_WEBENGINE_VERSION,\n    TMP_WEBENGINE_DESCRIPTION,\n]);\n/* ----------------------------------------------------------------------------------------------------------\n * Constant values for CloudProviderValues enum definition\n *\n * Name of the cloud provider.\n * ---------------------------------------------------------------------------------------------------------- */\n// Temporary local constants to assign to the individual exports and the namespaced version\n// Required to avoid the namespace exports using the unminifable export names for some package types\nvar TMP_CLOUDPROVIDERVALUES_ALIBABA_CLOUD = 'alibaba_cloud';\nvar TMP_CLOUDPROVIDERVALUES_AWS = 'aws';\nvar TMP_CLOUDPROVIDERVALUES_AZURE = 'azure';\nvar TMP_CLOUDPROVIDERVALUES_GCP = 'gcp';\n/**\n * Name of the cloud provider.\n */\nexport var CLOUDPROVIDERVALUES_ALIBABA_CLOUD = TMP_CLOUDPROVIDERVALUES_ALIBABA_CLOUD;\n/**\n * Name of the cloud provider.\n */\nexport var CLOUDPROVIDERVALUES_AWS = TMP_CLOUDPROVIDERVALUES_AWS;\n/**\n * Name of the cloud provider.\n */\nexport var CLOUDPROVIDERVALUES_AZURE = TMP_CLOUDPROVIDERVALUES_AZURE;\n/**\n * Name of the cloud provider.\n */\nexport var CLOUDPROVIDERVALUES_GCP = TMP_CLOUDPROVIDERVALUES_GCP;\n/**\n * The constant map of values for CloudProviderValues.\n * @deprecated Use the CLOUDPROVIDERVALUES_XXXXX constants rather than the CloudProviderValues.XXXXX for bundle minification.\n */\nexport var CloudProviderValues = \n/*#__PURE__*/ createConstMap([\n    TMP_CLOUDPROVIDERVALUES_ALIBABA_CLOUD,\n    TMP_CLOUDPROVIDERVALUES_AWS,\n    TMP_CLOUDPROVIDERVALUES_AZURE,\n    TMP_CLOUDPROVIDERVALUES_GCP,\n]);\n/* ----------------------------------------------------------------------------------------------------------\n * Constant values for CloudPlatformValues enum definition\n *\n * The cloud platform in use.\n *\n * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.\n * ---------------------------------------------------------------------------------------------------------- */\n// Temporary local constants to assign to the individual exports and the namespaced version\n// Required to avoid the namespace exports using the unminifable export names for some package types\nvar TMP_CLOUDPLATFORMVALUES_ALIBABA_CLOUD_ECS = 'alibaba_cloud_ecs';\nvar TMP_CLOUDPLATFORMVALUES_ALIBABA_CLOUD_FC = 'alibaba_cloud_fc';\nvar TMP_CLOUDPLATFORMVALUES_AWS_EC2 = 'aws_ec2';\nvar TMP_CLOUDPLATFORMVALUES_AWS_ECS = 'aws_ecs';\nvar TMP_CLOUDPLATFORMVALUES_AWS_EKS = 'aws_eks';\nvar TMP_CLOUDPLATFORMVALUES_AWS_LAMBDA = 'aws_lambda';\nvar TMP_CLOUDPLATFORMVALUES_AWS_ELASTIC_BEANSTALK = 'aws_elastic_beanstalk';\nvar TMP_CLOUDPLATFORMVALUES_AZURE_VM = 'azure_vm';\nvar TMP_CLOUDPLATFORMVALUES_AZURE_CONTAINER_INSTANCES = 'azure_container_instances';\nvar TMP_CLOUDPLATFORMVALUES_AZURE_AKS = 'azure_aks';\nvar TMP_CLOUDPLATFORMVALUES_AZURE_FUNCTIONS = 'azure_functions';\nvar TMP_CLOUDPLATFORMVALUES_AZURE_APP_SERVICE = 'azure_app_service';\nvar TMP_CLOUDPLATFORMVALUES_GCP_COMPUTE_ENGINE = 'gcp_compute_engine';\nvar TMP_CLOUDPLATFORMVALUES_GCP_CLOUD_RUN = 'gcp_cloud_run';\nvar TMP_CLOUDPLATFORMVALUES_GCP_KUBERNETES_ENGINE = 'gcp_kubernetes_engine';\nvar TMP_CLOUDPLATFORMVALUES_GCP_CLOUD_FUNCTIONS = 'gcp_cloud_functions';\nvar TMP_CLOUDPLATFORMVALUES_GCP_APP_ENGINE = 'gcp_app_engine';\n/**\n * The cloud platform in use.\n *\n * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.\n */\nexport var CLOUDPLATFORMVALUES_ALIBABA_CLOUD_ECS = TMP_CLOUDPLATFORMVALUES_ALIBABA_CLOUD_ECS;\n/**\n * The cloud platform in use.\n *\n * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.\n */\nexport var CLOUDPLATFORMVALUES_ALIBABA_CLOUD_FC = TMP_CLOUDPLATFORMVALUES_ALIBABA_CLOUD_FC;\n/**\n * The cloud platform in use.\n *\n * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.\n */\nexport var CLOUDPLATFORMVALUES_AWS_EC2 = TMP_CLOUDPLATFORMVALUES_AWS_EC2;\n/**\n * The cloud platform in use.\n *\n * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.\n */\nexport var CLOUDPLATFORMVALUES_AWS_ECS = TMP_CLOUDPLATFORMVALUES_AWS_ECS;\n/**\n * The cloud platform in use.\n *\n * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.\n */\nexport var CLOUDPLATFORMVALUES_AWS_EKS = TMP_CLOUDPLATFORMVALUES_AWS_EKS;\n/**\n * The cloud platform in use.\n *\n * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.\n */\nexport var CLOUDPLATFORMVALUES_AWS_LAMBDA = TMP_CLOUDPLATFORMVALUES_AWS_LAMBDA;\n/**\n * The cloud platform in use.\n *\n * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.\n */\nexport var CLOUDPLATFORMVALUES_AWS_ELASTIC_BEANSTALK = TMP_CLOUDPLATFORMVALUES_AWS_ELASTIC_BEANSTALK;\n/**\n * The cloud platform in use.\n *\n * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.\n */\nexport var CLOUDPLATFORMVALUES_AZURE_VM = TMP_CLOUDPLATFORMVALUES_AZURE_VM;\n/**\n * The cloud platform in use.\n *\n * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.\n */\nexport var CLOUDPLATFORMVALUES_AZURE_CONTAINER_INSTANCES = TMP_CLOUDPLATFORMVALUES_AZURE_CONTAINER_INSTANCES;\n/**\n * The cloud platform in use.\n *\n * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.\n */\nexport var CLOUDPLATFORMVALUES_AZURE_AKS = TMP_CLOUDPLATFORMVALUES_AZURE_AKS;\n/**\n * The cloud platform in use.\n *\n * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.\n */\nexport var CLOUDPLATFORMVALUES_AZURE_FUNCTIONS = TMP_CLOUDPLATFORMVALUES_AZURE_FUNCTIONS;\n/**\n * The cloud platform in use.\n *\n * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.\n */\nexport var CLOUDPLATFORMVALUES_AZURE_APP_SERVICE = TMP_CLOUDPLATFORMVALUES_AZURE_APP_SERVICE;\n/**\n * The cloud platform in use.\n *\n * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.\n */\nexport var CLOUDPLATFORMVALUES_GCP_COMPUTE_ENGINE = TMP_CLOUDPLATFORMVALUES_GCP_COMPUTE_ENGINE;\n/**\n * The cloud platform in use.\n *\n * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.\n */\nexport var CLOUDPLATFORMVALUES_GCP_CLOUD_RUN = TMP_CLOUDPLATFORMVALUES_GCP_CLOUD_RUN;\n/**\n * The cloud platform in use.\n *\n * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.\n */\nexport var CLOUDPLATFORMVALUES_GCP_KUBERNETES_ENGINE = TMP_CLOUDPLATFORMVALUES_GCP_KUBERNETES_ENGINE;\n/**\n * The cloud platform in use.\n *\n * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.\n */\nexport var CLOUDPLATFORMVALUES_GCP_CLOUD_FUNCTIONS = TMP_CLOUDPLATFORMVALUES_GCP_CLOUD_FUNCTIONS;\n/**\n * The cloud platform in use.\n *\n * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.\n */\nexport var CLOUDPLATFORMVALUES_GCP_APP_ENGINE = TMP_CLOUDPLATFORMVALUES_GCP_APP_ENGINE;\n/**\n * The constant map of values for CloudPlatformValues.\n * @deprecated Use the CLOUDPLATFORMVALUES_XXXXX constants rather than the CloudPlatformValues.XXXXX for bundle minification.\n */\nexport var CloudPlatformValues = \n/*#__PURE__*/ createConstMap([\n    TMP_CLOUDPLATFORMVALUES_ALIBABA_CLOUD_ECS,\n    TMP_CLOUDPLATFORMVALUES_ALIBABA_CLOUD_FC,\n    TMP_CLOUDPLATFORMVALUES_AWS_EC2,\n    TMP_CLOUDPLATFORMVALUES_AWS_ECS,\n    TMP_CLOUDPLATFORMVALUES_AWS_EKS,\n    TMP_CLOUDPLATFORMVALUES_AWS_LAMBDA,\n    TMP_CLOUDPLATFORMVALUES_AWS_ELASTIC_BEANSTALK,\n    TMP_CLOUDPLATFORMVALUES_AZURE_VM,\n    TMP_CLOUDPLATFORMVALUES_AZURE_CONTAINER_INSTANCES,\n    TMP_CLOUDPLATFORMVALUES_AZURE_AKS,\n    TMP_CLOUDPLATFORMVALUES_AZURE_FUNCTIONS,\n    TMP_CLOUDPLATFORMVALUES_AZURE_APP_SERVICE,\n    TMP_CLOUDPLATFORMVALUES_GCP_COMPUTE_ENGINE,\n    TMP_CLOUDPLATFORMVALUES_GCP_CLOUD_RUN,\n    TMP_CLOUDPLATFORMVALUES_GCP_KUBERNETES_ENGINE,\n    TMP_CLOUDPLATFORMVALUES_GCP_CLOUD_FUNCTIONS,\n    TMP_CLOUDPLATFORMVALUES_GCP_APP_ENGINE,\n]);\n/* ----------------------------------------------------------------------------------------------------------\n * Constant values for AwsEcsLaunchtypeValues enum definition\n *\n * The [launch type](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/launch_types.html) for an ECS task.\n * ---------------------------------------------------------------------------------------------------------- */\n// Temporary local constants to assign to the individual exports and the namespaced version\n// Required to avoid the namespace exports using the unminifable export names for some package types\nvar TMP_AWSECSLAUNCHTYPEVALUES_EC2 = 'ec2';\nvar TMP_AWSECSLAUNCHTYPEVALUES_FARGATE = 'fargate';\n/**\n * The [launch type](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/launch_types.html) for an ECS task.\n */\nexport var AWSECSLAUNCHTYPEVALUES_EC2 = TMP_AWSECSLAUNCHTYPEVALUES_EC2;\n/**\n * The [launch type](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/launch_types.html) for an ECS task.\n */\nexport var AWSECSLAUNCHTYPEVALUES_FARGATE = TMP_AWSECSLAUNCHTYPEVALUES_FARGATE;\n/**\n * The constant map of values for AwsEcsLaunchtypeValues.\n * @deprecated Use the AWSECSLAUNCHTYPEVALUES_XXXXX constants rather than the AwsEcsLaunchtypeValues.XXXXX for bundle minification.\n */\nexport var AwsEcsLaunchtypeValues = \n/*#__PURE__*/ createConstMap([\n    TMP_AWSECSLAUNCHTYPEVALUES_EC2,\n    TMP_AWSECSLAUNCHTYPEVALUES_FARGATE,\n]);\n/* ----------------------------------------------------------------------------------------------------------\n * Constant values for HostArchValues enum definition\n *\n * The CPU architecture the host system is running on.\n * ---------------------------------------------------------------------------------------------------------- */\n// Temporary local constants to assign to the individual exports and the namespaced version\n// Required to avoid the namespace exports using the unminifable export names for some package types\nvar TMP_HOSTARCHVALUES_AMD64 = 'amd64';\nvar TMP_HOSTARCHVALUES_ARM32 = 'arm32';\nvar TMP_HOSTARCHVALUES_ARM64 = 'arm64';\nvar TMP_HOSTARCHVALUES_IA64 = 'ia64';\nvar TMP_HOSTARCHVALUES_PPC32 = 'ppc32';\nvar TMP_HOSTARCHVALUES_PPC64 = 'ppc64';\nvar TMP_HOSTARCHVALUES_X86 = 'x86';\n/**\n * The CPU architecture the host system is running on.\n */\nexport var HOSTARCHVALUES_AMD64 = TMP_HOSTARCHVALUES_AMD64;\n/**\n * The CPU architecture the host system is running on.\n */\nexport var HOSTARCHVALUES_ARM32 = TMP_HOSTARCHVALUES_ARM32;\n/**\n * The CPU architecture the host system is running on.\n */\nexport var HOSTARCHVALUES_ARM64 = TMP_HOSTARCHVALUES_ARM64;\n/**\n * The CPU architecture the host system is running on.\n */\nexport var HOSTARCHVALUES_IA64 = TMP_HOSTARCHVALUES_IA64;\n/**\n * The CPU architecture the host system is running on.\n */\nexport var HOSTARCHVALUES_PPC32 = TMP_HOSTARCHVALUES_PPC32;\n/**\n * The CPU architecture the host system is running on.\n */\nexport var HOSTARCHVALUES_PPC64 = TMP_HOSTARCHVALUES_PPC64;\n/**\n * The CPU architecture the host system is running on.\n */\nexport var HOSTARCHVALUES_X86 = TMP_HOSTARCHVALUES_X86;\n/**\n * The constant map of values for HostArchValues.\n * @deprecated Use the HOSTARCHVALUES_XXXXX constants rather than the HostArchValues.XXXXX for bundle minification.\n */\nexport var HostArchValues = \n/*#__PURE__*/ createConstMap([\n    TMP_HOSTARCHVALUES_AMD64,\n    TMP_HOSTARCHVALUES_ARM32,\n    TMP_HOSTARCHVALUES_ARM64,\n    TMP_HOSTARCHVALUES_IA64,\n    TMP_HOSTARCHVALUES_PPC32,\n    TMP_HOSTARCHVALUES_PPC64,\n    TMP_HOSTARCHVALUES_X86,\n]);\n/* ----------------------------------------------------------------------------------------------------------\n * Constant values for OsTypeValues enum definition\n *\n * The operating system type.\n * ---------------------------------------------------------------------------------------------------------- */\n// Temporary local constants to assign to the individual exports and the namespaced version\n// Required to avoid the namespace exports using the unminifable export names for some package types\nvar TMP_OSTYPEVALUES_WINDOWS = 'windows';\nvar TMP_OSTYPEVALUES_LINUX = 'linux';\nvar TMP_OSTYPEVALUES_DARWIN = 'darwin';\nvar TMP_OSTYPEVALUES_FREEBSD = 'freebsd';\nvar TMP_OSTYPEVALUES_NETBSD = 'netbsd';\nvar TMP_OSTYPEVALUES_OPENBSD = 'openbsd';\nvar TMP_OSTYPEVALUES_DRAGONFLYBSD = 'dragonflybsd';\nvar TMP_OSTYPEVALUES_HPUX = 'hpux';\nvar TMP_OSTYPEVALUES_AIX = 'aix';\nvar TMP_OSTYPEVALUES_SOLARIS = 'solaris';\nvar TMP_OSTYPEVALUES_Z_OS = 'z_os';\n/**\n * The operating system type.\n */\nexport var OSTYPEVALUES_WINDOWS = TMP_OSTYPEVALUES_WINDOWS;\n/**\n * The operating system type.\n */\nexport var OSTYPEVALUES_LINUX = TMP_OSTYPEVALUES_LINUX;\n/**\n * The operating system type.\n */\nexport var OSTYPEVALUES_DARWIN = TMP_OSTYPEVALUES_DARWIN;\n/**\n * The operating system type.\n */\nexport var OSTYPEVALUES_FREEBSD = TMP_OSTYPEVALUES_FREEBSD;\n/**\n * The operating system type.\n */\nexport var OSTYPEVALUES_NETBSD = TMP_OSTYPEVALUES_NETBSD;\n/**\n * The operating system type.\n */\nexport var OSTYPEVALUES_OPENBSD = TMP_OSTYPEVALUES_OPENBSD;\n/**\n * The operating system type.\n */\nexport var OSTYPEVALUES_DRAGONFLYBSD = TMP_OSTYPEVALUES_DRAGONFLYBSD;\n/**\n * The operating system type.\n */\nexport var OSTYPEVALUES_HPUX = TMP_OSTYPEVALUES_HPUX;\n/**\n * The operating system type.\n */\nexport var OSTYPEVALUES_AIX = TMP_OSTYPEVALUES_AIX;\n/**\n * The operating system type.\n */\nexport var OSTYPEVALUES_SOLARIS = TMP_OSTYPEVALUES_SOLARIS;\n/**\n * The operating system type.\n */\nexport var OSTYPEVALUES_Z_OS = TMP_OSTYPEVALUES_Z_OS;\n/**\n * The constant map of values for OsTypeValues.\n * @deprecated Use the OSTYPEVALUES_XXXXX constants rather than the OsTypeValues.XXXXX for bundle minification.\n */\nexport var OsTypeValues = \n/*#__PURE__*/ createConstMap([\n    TMP_OSTYPEVALUES_WINDOWS,\n    TMP_OSTYPEVALUES_LINUX,\n    TMP_OSTYPEVALUES_DARWIN,\n    TMP_OSTYPEVALUES_FREEBSD,\n    TMP_OSTYPEVALUES_NETBSD,\n    TMP_OSTYPEVALUES_OPENBSD,\n    TMP_OSTYPEVALUES_DRAGONFLYBSD,\n    TMP_OSTYPEVALUES_HPUX,\n    TMP_OSTYPEVALUES_AIX,\n    TMP_OSTYPEVALUES_SOLARIS,\n    TMP_OSTYPEVALUES_Z_OS,\n]);\n/* ----------------------------------------------------------------------------------------------------------\n * Constant values for TelemetrySdkLanguageValues enum definition\n *\n * The language of the telemetry SDK.\n * ---------------------------------------------------------------------------------------------------------- */\n// Temporary local constants to assign to the individual exports and the namespaced version\n// Required to avoid the namespace exports using the unminifable export names for some package types\nvar TMP_TELEMETRYSDKLANGUAGEVALUES_CPP = 'cpp';\nvar TMP_TELEMETRYSDKLANGUAGEVALUES_DOTNET = 'dotnet';\nvar TMP_TELEMETRYSDKLANGUAGEVALUES_ERLANG = 'erlang';\nvar TMP_TELEMETRYSDKLANGUAGEVALUES_GO = 'go';\nvar TMP_TELEMETRYSDKLANGUAGEVALUES_JAVA = 'java';\nvar TMP_TELEMETRYSDKLANGUAGEVALUES_NODEJS = 'nodejs';\nvar TMP_TELEMETRYSDKLANGUAGEVALUES_PHP = 'php';\nvar TMP_TELEMETRYSDKLANGUAGEVALUES_PYTHON = 'python';\nvar TMP_TELEMETRYSDKLANGUAGEVALUES_RUBY = 'ruby';\nvar TMP_TELEMETRYSDKLANGUAGEVALUES_WEBJS = 'webjs';\n/**\n * The language of the telemetry SDK.\n */\nexport var TELEMETRYSDKLANGUAGEVALUES_CPP = TMP_TELEMETRYSDKLANGUAGEVALUES_CPP;\n/**\n * The language of the telemetry SDK.\n */\nexport var TELEMETRYSDKLANGUAGEVALUES_DOTNET = TMP_TELEMETRYSDKLANGUAGEVALUES_DOTNET;\n/**\n * The language of the telemetry SDK.\n */\nexport var TELEMETRYSDKLANGUAGEVALUES_ERLANG = TMP_TELEMETRYSDKLANGUAGEVALUES_ERLANG;\n/**\n * The language of the telemetry SDK.\n */\nexport var TELEMETRYSDKLANGUAGEVALUES_GO = TMP_TELEMETRYSDKLANGUAGEVALUES_GO;\n/**\n * The language of the telemetry SDK.\n */\nexport var TELEMETRYSDKLANGUAGEVALUES_JAVA = TMP_TELEMETRYSDKLANGUAGEVALUES_JAVA;\n/**\n * The language of the telemetry SDK.\n */\nexport var TELEMETRYSDKLANGUAGEVALUES_NODEJS = TMP_TELEMETRYSDKLANGUAGEVALUES_NODEJS;\n/**\n * The language of the telemetry SDK.\n */\nexport var TELEMETRYSDKLANGUAGEVALUES_PHP = TMP_TELEMETRYSDKLANGUAGEVALUES_PHP;\n/**\n * The language of the telemetry SDK.\n */\nexport var TELEMETRYSDKLANGUAGEVALUES_PYTHON = TMP_TELEMETRYSDKLANGUAGEVALUES_PYTHON;\n/**\n * The language of the telemetry SDK.\n */\nexport var TELEMETRYSDKLANGUAGEVALUES_RUBY = TMP_TELEMETRYSDKLANGUAGEVALUES_RUBY;\n/**\n * The language of the telemetry SDK.\n */\nexport var TELEMETRYSDKLANGUAGEVALUES_WEBJS = TMP_TELEMETRYSDKLANGUAGEVALUES_WEBJS;\n/**\n * The constant map of values for TelemetrySdkLanguageValues.\n * @deprecated Use the TELEMETRYSDKLANGUAGEVALUES_XXXXX constants rather than the TelemetrySdkLanguageValues.XXXXX for bundle minification.\n */\nexport var TelemetrySdkLanguageValues = \n/*#__PURE__*/ createConstMap([\n    TMP_TELEMETRYSDKLANGUAGEVALUES_CPP,\n    TMP_TELEMETRYSDKLANGUAGEVALUES_DOTNET,\n    TMP_TELEMETRYSDKLANGUAGEVALUES_ERLANG,\n    TMP_TELEMETRYSDKLANGUAGEVALUES_GO,\n    TMP_TELEMETRYSDKLANGUAGEVALUES_JAVA,\n    TMP_TELEMETRYSDKLANGUAGEVALUES_NODEJS,\n    TMP_TELEMETRYSDKLANGUAGEVALUES_PHP,\n    TMP_TELEMETRYSDKLANGUAGEVALUES_PYTHON,\n    TMP_TELEMETRYSDKLANGUAGEVALUES_RUBY,\n    TMP_TELEMETRYSDKLANGUAGEVALUES_WEBJS,\n]);\n//# sourceMappingURL=SemanticResourceAttributes.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// this is autogenerated file, see scripts/version-update.js\nexport var VERSION = '1.25.1';\n//# sourceMappingURL=version.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar _a;\nimport { VERSION } from '../../version';\nimport { SEMRESATTRS_TELEMETRY_SDK_NAME, SEMRESATTRS_PROCESS_RUNTIME_NAME, SEMRESATTRS_TELEMETRY_SDK_LANGUAGE, TELEMETRYSDKLANGUAGEVALUES_WEBJS, SEMRESATTRS_TELEMETRY_SDK_VERSION, } from '@opentelemetry/semantic-conventions';\n/** Constants describing the SDK in use */\nexport var SDK_INFO = (_a = {},\n    _a[SEMRESATTRS_TELEMETRY_SDK_NAME] = 'opentelemetry',\n    _a[SEMRESATTRS_PROCESS_RUNTIME_NAME] = 'browser',\n    _a[SEMRESATTRS_TELEMETRY_SDK_LANGUAGE] = TELEMETRYSDKLANGUAGEVALUES_WEBJS,\n    _a[SEMRESATTRS_TELEMETRY_SDK_VERSION] = VERSION,\n    _a);\n//# sourceMappingURL=sdk-info.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport function defaultServiceName() {\n    return 'unknown_service';\n}\n//# sourceMappingURL=default-service-name.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nvar __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nimport { diag } from '@opentelemetry/api';\nimport { SEMRESATTRS_SERVICE_NAME, SEMRESATTRS_TELEMETRY_SDK_LANGUAGE, SEMRESATTRS_TELEMETRY_SDK_NAME, SEMRESATTRS_TELEMETRY_SDK_VERSION, } from '@opentelemetry/semantic-conventions';\nimport { SDK_INFO } from '@opentelemetry/core';\nimport { defaultServiceName } from './platform';\n/**\n * A Resource describes the entity for which a signals (metrics or trace) are\n * collected.\n */\nvar Resource = /** @class */ (function () {\n    function Resource(\n    /**\n     * A dictionary of attributes with string keys and values that provide\n     * information about the entity as numbers, strings or booleans\n     * TODO: Consider to add check/validation on attributes.\n     */\n    attributes, asyncAttributesPromise) {\n        var _this = this;\n        var _a;\n        this._attributes = attributes;\n        this.asyncAttributesPending = asyncAttributesPromise != null;\n        this._syncAttributes = (_a = this._attributes) !== null && _a !== void 0 ? _a : {};\n        this._asyncAttributesPromise = asyncAttributesPromise === null || asyncAttributesPromise === void 0 ? void 0 : asyncAttributesPromise.then(function (asyncAttributes) {\n            _this._attributes = Object.assign({}, _this._attributes, asyncAttributes);\n            _this.asyncAttributesPending = false;\n            return asyncAttributes;\n        }, function (err) {\n            diag.debug(\"a resource's async attributes promise rejected: %s\", err);\n            _this.asyncAttributesPending = false;\n            return {};\n        });\n    }\n    /**\n     * Returns an empty Resource\n     */\n    Resource.empty = function () {\n        return Resource.EMPTY;\n    };\n    /**\n     * Returns a Resource that identifies the SDK in use.\n     */\n    Resource.default = function () {\n        var _a;\n        return new Resource((_a = {},\n            _a[SEMRESATTRS_SERVICE_NAME] = defaultServiceName(),\n            _a[SEMRESATTRS_TELEMETRY_SDK_LANGUAGE] = SDK_INFO[SEMRESATTRS_TELEMETRY_SDK_LANGUAGE],\n            _a[SEMRESATTRS_TELEMETRY_SDK_NAME] = SDK_INFO[SEMRESATTRS_TELEMETRY_SDK_NAME],\n            _a[SEMRESATTRS_TELEMETRY_SDK_VERSION] = SDK_INFO[SEMRESATTRS_TELEMETRY_SDK_VERSION],\n            _a));\n    };\n    Object.defineProperty(Resource.prototype, \"attributes\", {\n        get: function () {\n            var _a;\n            if (this.asyncAttributesPending) {\n                diag.error('Accessing resource attributes before async attributes settled');\n            }\n            return (_a = this._attributes) !== null && _a !== void 0 ? _a : {};\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * Returns a promise that will never be rejected. Resolves when all async attributes have finished being added to\n     * this Resource's attributes. This is useful in exporters to block until resource detection\n     * has finished.\n     */\n    Resource.prototype.waitForAsyncAttributes = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (!this.asyncAttributesPending) return [3 /*break*/, 2];\n                        return [4 /*yield*/, this._asyncAttributesPromise];\n                    case 1:\n                        _a.sent();\n                        _a.label = 2;\n                    case 2: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Returns a new, merged {@link Resource} by merging the current Resource\n     * with the other Resource. In case of a collision, other Resource takes\n     * precedence.\n     *\n     * @param other the Resource that will be merged with this.\n     * @returns the newly merged Resource.\n     */\n    Resource.prototype.merge = function (other) {\n        var _this = this;\n        var _a;\n        if (!other)\n            return this;\n        // SpanAttributes from other resource overwrite attributes from this resource.\n        var mergedSyncAttributes = __assign(__assign({}, this._syncAttributes), ((_a = other._syncAttributes) !== null && _a !== void 0 ? _a : other.attributes));\n        if (!this._asyncAttributesPromise &&\n            !other._asyncAttributesPromise) {\n            return new Resource(mergedSyncAttributes);\n        }\n        var mergedAttributesPromise = Promise.all([\n            this._asyncAttributesPromise,\n            other._asyncAttributesPromise,\n        ]).then(function (_a) {\n            var _b;\n            var _c = __read(_a, 2), thisAsyncAttributes = _c[0], otherAsyncAttributes = _c[1];\n            return __assign(__assign(__assign(__assign({}, _this._syncAttributes), thisAsyncAttributes), ((_b = other._syncAttributes) !== null && _b !== void 0 ? _b : other.attributes)), otherAsyncAttributes);\n        });\n        return new Resource(mergedSyncAttributes, mergedAttributesPromise);\n    };\n    Resource.EMPTY = new Resource({});\n    return Resource;\n}());\nexport { Resource };\n//# sourceMappingURL=Resource.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __values = (this && this.__values) || function(o) {\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\n    if (m) return m.call(o);\n    if (o && typeof o.length === \"number\") return {\n        next: function () {\n            if (o && i >= o.length) o = void 0;\n            return { value: o && o[i++], done: !o };\n        }\n    };\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\nvar __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nimport { diag } from '@opentelemetry/api';\nimport * as api from '@opentelemetry/api';\nimport { timeInputToHrTime, isAttributeValue, } from '@opentelemetry/core';\nvar LogRecord = /** @class */ (function () {\n    function LogRecord(_sharedState, instrumentationScope, logRecord) {\n        this.attributes = {};\n        this.totalAttributesCount = 0;\n        this._isReadonly = false;\n        var timestamp = logRecord.timestamp, observedTimestamp = logRecord.observedTimestamp, severityNumber = logRecord.severityNumber, severityText = logRecord.severityText, body = logRecord.body, _a = logRecord.attributes, attributes = _a === void 0 ? {} : _a, context = logRecord.context;\n        var now = Date.now();\n        this.hrTime = timeInputToHrTime(timestamp !== null && timestamp !== void 0 ? timestamp : now);\n        this.hrTimeObserved = timeInputToHrTime(observedTimestamp !== null && observedTimestamp !== void 0 ? observedTimestamp : now);\n        if (context) {\n            var spanContext = api.trace.getSpanContext(context);\n            if (spanContext && api.isSpanContextValid(spanContext)) {\n                this.spanContext = spanContext;\n            }\n        }\n        this.severityNumber = severityNumber;\n        this.severityText = severityText;\n        this.body = body;\n        this.resource = _sharedState.resource;\n        this.instrumentationScope = instrumentationScope;\n        this._logRecordLimits = _sharedState.logRecordLimits;\n        this.setAttributes(attributes);\n    }\n    Object.defineProperty(LogRecord.prototype, \"severityText\", {\n        get: function () {\n            return this._severityText;\n        },\n        set: function (severityText) {\n            if (this._isLogRecordReadonly()) {\n                return;\n            }\n            this._severityText = severityText;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(LogRecord.prototype, \"severityNumber\", {\n        get: function () {\n            return this._severityNumber;\n        },\n        set: function (severityNumber) {\n            if (this._isLogRecordReadonly()) {\n                return;\n            }\n            this._severityNumber = severityNumber;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(LogRecord.prototype, \"body\", {\n        get: function () {\n            return this._body;\n        },\n        set: function (body) {\n            if (this._isLogRecordReadonly()) {\n                return;\n            }\n            this._body = body;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(LogRecord.prototype, \"droppedAttributesCount\", {\n        get: function () {\n            return this.totalAttributesCount - Object.keys(this.attributes).length;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    LogRecord.prototype.setAttribute = function (key, value) {\n        if (this._isLogRecordReadonly()) {\n            return this;\n        }\n        if (value === null) {\n            return this;\n        }\n        if (key.length === 0) {\n            api.diag.warn(\"Invalid attribute key: \" + key);\n            return this;\n        }\n        if (!isAttributeValue(value) &&\n            !(typeof value === 'object' &&\n                !Array.isArray(value) &&\n                Object.keys(value).length > 0)) {\n            api.diag.warn(\"Invalid attribute value set for key: \" + key);\n            return this;\n        }\n        this.totalAttributesCount += 1;\n        if (Object.keys(this.attributes).length >=\n            this._logRecordLimits.attributeCountLimit &&\n            !Object.prototype.hasOwnProperty.call(this.attributes, key)) {\n            return this;\n        }\n        if (isAttributeValue(value)) {\n            this.attributes[key] = this._truncateToSize(value);\n        }\n        else {\n            this.attributes[key] = value;\n        }\n        return this;\n    };\n    LogRecord.prototype.setAttributes = function (attributes) {\n        var e_1, _a;\n        try {\n            for (var _b = __values(Object.entries(attributes)), _c = _b.next(); !_c.done; _c = _b.next()) {\n                var _d = __read(_c.value, 2), k = _d[0], v = _d[1];\n                this.setAttribute(k, v);\n            }\n        }\n        catch (e_1_1) { e_1 = { error: e_1_1 }; }\n        finally {\n            try {\n                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n            }\n            finally { if (e_1) throw e_1.error; }\n        }\n        return this;\n    };\n    LogRecord.prototype.setBody = function (body) {\n        this.body = body;\n        return this;\n    };\n    LogRecord.prototype.setSeverityNumber = function (severityNumber) {\n        this.severityNumber = severityNumber;\n        return this;\n    };\n    LogRecord.prototype.setSeverityText = function (severityText) {\n        this.severityText = severityText;\n        return this;\n    };\n    /**\n     * @internal\n     * A LogRecordProcessor may freely modify logRecord for the duration of the OnEmit call.\n     * If logRecord is needed after OnEmit returns (i.e. for asynchronous processing) only reads are permitted.\n     */\n    LogRecord.prototype._makeReadonly = function () {\n        this._isReadonly = true;\n    };\n    LogRecord.prototype._truncateToSize = function (value) {\n        var _this = this;\n        var limit = this._logRecordLimits.attributeValueLengthLimit;\n        // Check limit\n        if (limit <= 0) {\n            // Negative values are invalid, so do not truncate\n            api.diag.warn(\"Attribute value limit must be positive, got \" + limit);\n            return value;\n        }\n        // String\n        if (typeof value === 'string') {\n            return this._truncateToLimitUtil(value, limit);\n        }\n        // Array of strings\n        if (Array.isArray(value)) {\n            return value.map(function (val) {\n                return typeof val === 'string' ? _this._truncateToLimitUtil(val, limit) : val;\n            });\n        }\n        // Other types, no need to apply value length limit\n        return value;\n    };\n    LogRecord.prototype._truncateToLimitUtil = function (value, limit) {\n        if (value.length <= limit) {\n            return value;\n        }\n        return value.substring(0, limit);\n    };\n    LogRecord.prototype._isLogRecordReadonly = function () {\n        if (this._isReadonly) {\n            diag.warn('Can not execute the operation on emitted log record');\n        }\n        return this._isReadonly;\n    };\n    return LogRecord;\n}());\nexport { LogRecord };\n//# sourceMappingURL=LogRecord.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nimport { context } from '@opentelemetry/api';\nimport { LogRecord } from './LogRecord';\nvar Logger = /** @class */ (function () {\n    function Logger(instrumentationScope, _sharedState) {\n        this.instrumentationScope = instrumentationScope;\n        this._sharedState = _sharedState;\n    }\n    Logger.prototype.emit = function (logRecord) {\n        var currentContext = logRecord.context || context.active();\n        /**\n         * If a Logger was obtained with include_trace_context=true,\n         * the LogRecords it emits MUST automatically include the Trace Context from the active Context,\n         * if Context has not been explicitly set.\n         */\n        var logRecordInstance = new LogRecord(this._sharedState, this.instrumentationScope, __assign({ context: currentContext }, logRecord));\n        /**\n         * the explicitly passed Context,\n         * the current Context, or an empty Context if the Logger was obtained with include_trace_context=false\n         */\n        this._sharedState.activeProcessor.onEmit(logRecordInstance, currentContext);\n        /**\n         * A LogRecordProcessor may freely modify logRecord for the duration of the OnEmit call.\n         * If logRecord is needed after OnEmit returns (i.e. for asynchronous processing) only reads are permitted.\n         */\n        logRecordInstance._makeReadonly();\n    };\n    return Logger;\n}());\nexport { Logger };\n//# sourceMappingURL=Logger.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { DEFAULT_ATTRIBUTE_COUNT_LIMIT, DEFAULT_ATTRIBUTE_VALUE_LENGTH_LIMIT, getEnv, getEnvWithoutDefaults, } from '@opentelemetry/core';\nexport function loadDefaultConfig() {\n    return {\n        forceFlushTimeoutMillis: 30000,\n        logRecordLimits: {\n            attributeValueLengthLimit: getEnv().OTEL_LOGRECORD_ATTRIBUTE_VALUE_LENGTH_LIMIT,\n            attributeCountLimit: getEnv().OTEL_LOGRECORD_ATTRIBUTE_COUNT_LIMIT,\n        },\n        includeTraceContext: true,\n    };\n}\n/**\n * When general limits are provided and model specific limits are not,\n * configures the model specific limits by using the values from the general ones.\n * @param logRecordLimits User provided limits configuration\n */\nexport function reconfigureLimits(logRecordLimits) {\n    var _a, _b, _c, _d, _e, _f;\n    var parsedEnvConfig = getEnvWithoutDefaults();\n    return {\n        /**\n         * Reassign log record attribute count limit to use first non null value defined by user or use default value\n         */\n        attributeCountLimit: (_c = (_b = (_a = logRecordLimits.attributeCountLimit) !== null && _a !== void 0 ? _a : parsedEnvConfig.OTEL_LOGRECORD_ATTRIBUTE_COUNT_LIMIT) !== null && _b !== void 0 ? _b : parsedEnvConfig.OTEL_ATTRIBUTE_COUNT_LIMIT) !== null && _c !== void 0 ? _c : DEFAULT_ATTRIBUTE_COUNT_LIMIT,\n        /**\n         * Reassign log record attribute value length limit to use first non null value defined by user or use default value\n         */\n        attributeValueLengthLimit: (_f = (_e = (_d = logRecordLimits.attributeValueLengthLimit) !== null && _d !== void 0 ? _d : parsedEnvConfig.OTEL_LOGRECORD_ATTRIBUTE_VALUE_LENGTH_LIMIT) !== null && _e !== void 0 ? _e : parsedEnvConfig.OTEL_ATTRIBUTE_VALUE_LENGTH_LIMIT) !== null && _f !== void 0 ? _f : DEFAULT_ATTRIBUTE_VALUE_LENGTH_LIMIT,\n    };\n}\n//# sourceMappingURL=config.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nimport { callWithTimeout } from '@opentelemetry/core';\n/**\n * Implementation of the {@link LogRecordProcessor} that simply forwards all\n * received events to a list of {@link LogRecordProcessor}s.\n */\nvar MultiLogRecordProcessor = /** @class */ (function () {\n    function MultiLogRecordProcessor(processors, forceFlushTimeoutMillis) {\n        this.processors = processors;\n        this.forceFlushTimeoutMillis = forceFlushTimeoutMillis;\n    }\n    MultiLogRecordProcessor.prototype.forceFlush = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var timeout;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        timeout = this.forceFlushTimeoutMillis;\n                        return [4 /*yield*/, Promise.all(this.processors.map(function (processor) {\n                                return callWithTimeout(processor.forceFlush(), timeout);\n                            }))];\n                    case 1:\n                        _a.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    MultiLogRecordProcessor.prototype.onEmit = function (logRecord, context) {\n        this.processors.forEach(function (processors) {\n            return processors.onEmit(logRecord, context);\n        });\n    };\n    MultiLogRecordProcessor.prototype.shutdown = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, Promise.all(this.processors.map(function (processor) { return processor.shutdown(); }))];\n                    case 1:\n                        _a.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    return MultiLogRecordProcessor;\n}());\nexport { MultiLogRecordProcessor };\n//# sourceMappingURL=MultiLogRecordProcessor.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar NoopLogRecordProcessor = /** @class */ (function () {\n    function NoopLogRecordProcessor() {\n    }\n    NoopLogRecordProcessor.prototype.forceFlush = function () {\n        return Promise.resolve();\n    };\n    NoopLogRecordProcessor.prototype.onEmit = function (_logRecord, _context) { };\n    NoopLogRecordProcessor.prototype.shutdown = function () {\n        return Promise.resolve();\n    };\n    return NoopLogRecordProcessor;\n}());\nexport { NoopLogRecordProcessor };\n//# sourceMappingURL=NoopLogRecordProcessor.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { NoopLogRecordProcessor } from '../export/NoopLogRecordProcessor';\nvar LoggerProviderSharedState = /** @class */ (function () {\n    function LoggerProviderSharedState(resource, forceFlushTimeoutMillis, logRecordLimits) {\n        this.resource = resource;\n        this.forceFlushTimeoutMillis = forceFlushTimeoutMillis;\n        this.logRecordLimits = logRecordLimits;\n        this.loggers = new Map();\n        this.registeredLogRecordProcessors = [];\n        this.activeProcessor = new NoopLogRecordProcessor();\n    }\n    return LoggerProviderSharedState;\n}());\nexport { LoggerProviderSharedState };\n//# sourceMappingURL=LoggerProviderSharedState.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { diag } from '@opentelemetry/api';\nimport { NOOP_LOGGER } from '@opentelemetry/api-logs';\nimport { Resource } from '@opentelemetry/resources';\nimport { BindOnceFuture, merge } from '@opentelemetry/core';\nimport { Logger } from './Logger';\nimport { loadDefaultConfig, reconfigureLimits } from './config';\nimport { MultiLogRecordProcessor } from './MultiLogRecordProcessor';\nimport { LoggerProviderSharedState } from './internal/LoggerProviderSharedState';\nexport var DEFAULT_LOGGER_NAME = 'unknown';\nvar LoggerProvider = /** @class */ (function () {\n    function LoggerProvider(config) {\n        if (config === void 0) { config = {}; }\n        var _a = merge({}, loadDefaultConfig(), config), _b = _a.resource, resource = _b === void 0 ? Resource.default() : _b, logRecordLimits = _a.logRecordLimits, forceFlushTimeoutMillis = _a.forceFlushTimeoutMillis;\n        this._sharedState = new LoggerProviderSharedState(resource, forceFlushTimeoutMillis, reconfigureLimits(logRecordLimits));\n        this._shutdownOnce = new BindOnceFuture(this._shutdown, this);\n    }\n    /**\n     * Get a logger with the configuration of the LoggerProvider.\n     */\n    LoggerProvider.prototype.getLogger = function (name, version, options) {\n        if (this._shutdownOnce.isCalled) {\n            diag.warn('A shutdown LoggerProvider cannot provide a Logger');\n            return NOOP_LOGGER;\n        }\n        if (!name) {\n            diag.warn('Logger requested without instrumentation scope name.');\n        }\n        var loggerName = name || DEFAULT_LOGGER_NAME;\n        var key = loggerName + \"@\" + (version || '') + \":\" + ((options === null || options === void 0 ? void 0 : options.schemaUrl) || '');\n        if (!this._sharedState.loggers.has(key)) {\n            this._sharedState.loggers.set(key, new Logger({ name: loggerName, version: version, schemaUrl: options === null || options === void 0 ? void 0 : options.schemaUrl }, this._sharedState));\n        }\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        return this._sharedState.loggers.get(key);\n    };\n    /**\n     * Adds a new {@link LogRecordProcessor} to this logger.\n     * @param processor the new LogRecordProcessor to be added.\n     */\n    LoggerProvider.prototype.addLogRecordProcessor = function (processor) {\n        if (this._sharedState.registeredLogRecordProcessors.length === 0) {\n            // since we might have enabled by default a batchProcessor, we disable it\n            // before adding the new one\n            this._sharedState.activeProcessor\n                .shutdown()\n                .catch(function (err) {\n                return diag.error('Error while trying to shutdown current log record processor', err);\n            });\n        }\n        this._sharedState.registeredLogRecordProcessors.push(processor);\n        this._sharedState.activeProcessor = new MultiLogRecordProcessor(this._sharedState.registeredLogRecordProcessors, this._sharedState.forceFlushTimeoutMillis);\n    };\n    /**\n     * Notifies all registered LogRecordProcessor to flush any buffered data.\n     *\n     * Returns a promise which is resolved when all flushes are complete.\n     */\n    LoggerProvider.prototype.forceFlush = function () {\n        // do not flush after shutdown\n        if (this._shutdownOnce.isCalled) {\n            diag.warn('invalid attempt to force flush after LoggerProvider shutdown');\n            return this._shutdownOnce.promise;\n        }\n        return this._sharedState.activeProcessor.forceFlush();\n    };\n    /**\n     * Flush all buffered data and shut down the LoggerProvider and all registered\n     * LogRecordProcessor.\n     *\n     * Returns a promise which is resolved when all flushes are complete.\n     */\n    LoggerProvider.prototype.shutdown = function () {\n        if (this._shutdownOnce.isCalled) {\n            diag.warn('shutdown may only be called once per LoggerProvider');\n            return this._shutdownOnce.promise;\n        }\n        return this._shutdownOnce.call();\n    };\n    LoggerProvider.prototype._shutdown = function () {\n        return this._sharedState.activeProcessor.shutdown();\n    };\n    return LoggerProvider;\n}());\nexport { LoggerProvider };\n//# sourceMappingURL=LoggerProvider.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nimport { BindOnceFuture, ExportResultCode, globalErrorHandler, internal, } from '@opentelemetry/core';\nvar SimpleLogRecordProcessor = /** @class */ (function () {\n    function SimpleLogRecordProcessor(_exporter) {\n        this._exporter = _exporter;\n        this._shutdownOnce = new BindOnceFuture(this._shutdown, this);\n        this._unresolvedExports = new Set();\n    }\n    SimpleLogRecordProcessor.prototype.onEmit = function (logRecord) {\n        var _this = this;\n        var _a, _b;\n        if (this._shutdownOnce.isCalled) {\n            return;\n        }\n        var doExport = function () {\n            return internal\n                ._export(_this._exporter, [logRecord])\n                .then(function (result) {\n                var _a;\n                if (result.code !== ExportResultCode.SUCCESS) {\n                    globalErrorHandler((_a = result.error) !== null && _a !== void 0 ? _a : new Error(\"SimpleLogRecordProcessor: log record export failed (status \" + result + \")\"));\n                }\n            })\n                .catch(globalErrorHandler);\n        };\n        // Avoid scheduling a promise to make the behavior more predictable and easier to test\n        if (logRecord.resource.asyncAttributesPending) {\n            var exportPromise_1 = (_b = (_a = logRecord.resource).waitForAsyncAttributes) === null || _b === void 0 ? void 0 : _b.call(_a).then(function () {\n                // Using TS Non-null assertion operator because exportPromise could not be null in here\n                // if waitForAsyncAttributes is not present this code will never be reached\n                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                _this._unresolvedExports.delete(exportPromise_1);\n                return doExport();\n            }, globalErrorHandler);\n            // store the unresolved exports\n            if (exportPromise_1 != null) {\n                this._unresolvedExports.add(exportPromise_1);\n            }\n        }\n        else {\n            void doExport();\n        }\n    };\n    SimpleLogRecordProcessor.prototype.forceFlush = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: \n                    // await unresolved resources before resolving\n                    return [4 /*yield*/, Promise.all(Array.from(this._unresolvedExports))];\n                    case 1:\n                        // await unresolved resources before resolving\n                        _a.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    SimpleLogRecordProcessor.prototype.shutdown = function () {\n        return this._shutdownOnce.call();\n    };\n    SimpleLogRecordProcessor.prototype._shutdown = function () {\n        return this._exporter.shutdown();\n    };\n    return SimpleLogRecordProcessor;\n}());\nexport { SimpleLogRecordProcessor };\n//# sourceMappingURL=SimpleLogRecordProcessor.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { createContextKey } from '@opentelemetry/api';\nvar SUPPRESS_TRACING_KEY = createContextKey('OpenTelemetry SDK Context Key SUPPRESS_TRACING');\nexport function suppressTracing(context) {\n    return context.setValue(SUPPRESS_TRACING_KEY, true);\n}\nexport function unsuppressTracing(context) {\n    return context.deleteValue(SUPPRESS_TRACING_KEY);\n}\nexport function isTracingSuppressed(context) {\n    return context.getValue(SUPPRESS_TRACING_KEY) === true;\n}\n//# sourceMappingURL=suppress-tracing.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport var BAGGAGE_KEY_PAIR_SEPARATOR = '=';\nexport var BAGGAGE_PROPERTIES_SEPARATOR = ';';\nexport var BAGGAGE_ITEMS_SEPARATOR = ',';\n// Name of the http header used to propagate the baggage\nexport var BAGGAGE_HEADER = 'baggage';\n// Maximum number of name-value pairs allowed by w3c spec\nexport var BAGGAGE_MAX_NAME_VALUE_PAIRS = 180;\n// Maximum number of bytes per a single name-value pair allowed by w3c spec\nexport var BAGGAGE_MAX_PER_NAME_VALUE_PAIRS = 4096;\n// Maximum total length of all name-value pairs allowed by w3c spec\nexport var BAGGAGE_MAX_TOTAL_LENGTH = 8192;\n//# sourceMappingURL=constants.js.map","var __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { baggageEntryMetadataFromString, } from '@opentelemetry/api';\nimport { BAGGAGE_ITEMS_SEPARATOR, BAGGAGE_PROPERTIES_SEPARATOR, BAGGAGE_KEY_PAIR_SEPARATOR, BAGGAGE_MAX_TOTAL_LENGTH, } from './constants';\nexport function serializeKeyPairs(keyPairs) {\n    return keyPairs.reduce(function (hValue, current) {\n        var value = \"\" + hValue + (hValue !== '' ? BAGGAGE_ITEMS_SEPARATOR : '') + current;\n        return value.length > BAGGAGE_MAX_TOTAL_LENGTH ? hValue : value;\n    }, '');\n}\nexport function getKeyPairs(baggage) {\n    return baggage.getAllEntries().map(function (_a) {\n        var _b = __read(_a, 2), key = _b[0], value = _b[1];\n        var entry = encodeURIComponent(key) + \"=\" + encodeURIComponent(value.value);\n        // include opaque metadata if provided\n        // NOTE: we intentionally don't URI-encode the metadata - that responsibility falls on the metadata implementation\n        if (value.metadata !== undefined) {\n            entry += BAGGAGE_PROPERTIES_SEPARATOR + value.metadata.toString();\n        }\n        return entry;\n    });\n}\nexport function parsePairKeyValue(entry) {\n    var valueProps = entry.split(BAGGAGE_PROPERTIES_SEPARATOR);\n    if (valueProps.length <= 0)\n        return;\n    var keyPairPart = valueProps.shift();\n    if (!keyPairPart)\n        return;\n    var separatorIndex = keyPairPart.indexOf(BAGGAGE_KEY_PAIR_SEPARATOR);\n    if (separatorIndex <= 0)\n        return;\n    var key = decodeURIComponent(keyPairPart.substring(0, separatorIndex).trim());\n    var value = decodeURIComponent(keyPairPart.substring(separatorIndex + 1).trim());\n    var metadata;\n    if (valueProps.length > 0) {\n        metadata = baggageEntryMetadataFromString(valueProps.join(BAGGAGE_PROPERTIES_SEPARATOR));\n    }\n    return { key: key, value: value, metadata: metadata };\n}\n/**\n * Parse a string serialized in the baggage HTTP Format (without metadata):\n * https://github.com/w3c/baggage/blob/master/baggage/HTTP_HEADER_FORMAT.md\n */\nexport function parseKeyPairsIntoRecord(value) {\n    if (typeof value !== 'string' || value.length === 0)\n        return {};\n    return value\n        .split(BAGGAGE_ITEMS_SEPARATOR)\n        .map(function (entry) {\n        return parsePairKeyValue(entry);\n    })\n        .filter(function (keyPair) { return keyPair !== undefined && keyPair.value.length > 0; })\n        .reduce(function (headers, keyPair) {\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        headers[keyPair.key] = keyPair.value;\n        return headers;\n    }, {});\n}\n//# sourceMappingURL=utils.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { propagation, } from '@opentelemetry/api';\nimport { isTracingSuppressed } from '../../trace/suppress-tracing';\nimport { BAGGAGE_HEADER, BAGGAGE_ITEMS_SEPARATOR, BAGGAGE_MAX_NAME_VALUE_PAIRS, BAGGAGE_MAX_PER_NAME_VALUE_PAIRS, } from '../constants';\nimport { getKeyPairs, parsePairKeyValue, serializeKeyPairs } from '../utils';\n/**\n * Propagates {@link Baggage} through Context format propagation.\n *\n * Based on the Baggage specification:\n * https://w3c.github.io/baggage/\n */\nvar W3CBaggagePropagator = /** @class */ (function () {\n    function W3CBaggagePropagator() {\n    }\n    W3CBaggagePropagator.prototype.inject = function (context, carrier, setter) {\n        var baggage = propagation.getBaggage(context);\n        if (!baggage || isTracingSuppressed(context))\n            return;\n        var keyPairs = getKeyPairs(baggage)\n            .filter(function (pair) {\n            return pair.length <= BAGGAGE_MAX_PER_NAME_VALUE_PAIRS;\n        })\n            .slice(0, BAGGAGE_MAX_NAME_VALUE_PAIRS);\n        var headerValue = serializeKeyPairs(keyPairs);\n        if (headerValue.length > 0) {\n            setter.set(carrier, BAGGAGE_HEADER, headerValue);\n        }\n    };\n    W3CBaggagePropagator.prototype.extract = function (context, carrier, getter) {\n        var headerValue = getter.get(carrier, BAGGAGE_HEADER);\n        var baggageString = Array.isArray(headerValue)\n            ? headerValue.join(BAGGAGE_ITEMS_SEPARATOR)\n            : headerValue;\n        if (!baggageString)\n            return context;\n        var baggage = {};\n        if (baggageString.length === 0) {\n            return context;\n        }\n        var pairs = baggageString.split(BAGGAGE_ITEMS_SEPARATOR);\n        pairs.forEach(function (entry) {\n            var keyPair = parsePairKeyValue(entry);\n            if (keyPair) {\n                var baggageEntry = { value: keyPair.value };\n                if (keyPair.metadata) {\n                    baggageEntry.metadata = keyPair.metadata;\n                }\n                baggage[keyPair.key] = baggageEntry;\n            }\n        });\n        if (Object.entries(baggage).length === 0) {\n            return context;\n        }\n        return propagation.setBaggage(context, propagation.createBaggage(baggage));\n    };\n    W3CBaggagePropagator.prototype.fields = function () {\n        return [BAGGAGE_HEADER];\n    };\n    return W3CBaggagePropagator;\n}());\nexport { W3CBaggagePropagator };\n//# sourceMappingURL=W3CBaggagePropagator.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __values = (this && this.__values) || function(o) {\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\n    if (m) return m.call(o);\n    if (o && typeof o.length === \"number\") return {\n        next: function () {\n            if (o && i >= o.length) o = void 0;\n            return { value: o && o[i++], done: !o };\n        }\n    };\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\nvar __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nimport { diag } from '@opentelemetry/api';\nexport function sanitizeAttributes(attributes) {\n    var e_1, _a;\n    var out = {};\n    if (typeof attributes !== 'object' || attributes == null) {\n        return out;\n    }\n    try {\n        for (var _b = __values(Object.entries(attributes)), _c = _b.next(); !_c.done; _c = _b.next()) {\n            var _d = __read(_c.value, 2), key = _d[0], val = _d[1];\n            if (!isAttributeKey(key)) {\n                diag.warn(\"Invalid attribute key: \" + key);\n                continue;\n            }\n            if (!isAttributeValue(val)) {\n                diag.warn(\"Invalid attribute value set for key: \" + key);\n                continue;\n            }\n            if (Array.isArray(val)) {\n                out[key] = val.slice();\n            }\n            else {\n                out[key] = val;\n            }\n        }\n    }\n    catch (e_1_1) { e_1 = { error: e_1_1 }; }\n    finally {\n        try {\n            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n        }\n        finally { if (e_1) throw e_1.error; }\n    }\n    return out;\n}\nexport function isAttributeKey(key) {\n    return typeof key === 'string' && key.length > 0;\n}\nexport function isAttributeValue(val) {\n    if (val == null) {\n        return true;\n    }\n    if (Array.isArray(val)) {\n        return isHomogeneousAttributeValueArray(val);\n    }\n    return isValidPrimitiveAttributeValue(val);\n}\nfunction isHomogeneousAttributeValueArray(arr) {\n    var e_2, _a;\n    var type;\n    try {\n        for (var arr_1 = __values(arr), arr_1_1 = arr_1.next(); !arr_1_1.done; arr_1_1 = arr_1.next()) {\n            var element = arr_1_1.value;\n            // null/undefined elements are allowed\n            if (element == null)\n                continue;\n            if (!type) {\n                if (isValidPrimitiveAttributeValue(element)) {\n                    type = typeof element;\n                    continue;\n                }\n                // encountered an invalid primitive\n                return false;\n            }\n            if (typeof element === type) {\n                continue;\n            }\n            return false;\n        }\n    }\n    catch (e_2_1) { e_2 = { error: e_2_1 }; }\n    finally {\n        try {\n            if (arr_1_1 && !arr_1_1.done && (_a = arr_1.return)) _a.call(arr_1);\n        }\n        finally { if (e_2) throw e_2.error; }\n    }\n    return true;\n}\nfunction isValidPrimitiveAttributeValue(val) {\n    switch (typeof val) {\n        case 'number':\n        case 'boolean':\n        case 'string':\n            return true;\n    }\n    return false;\n}\n//# sourceMappingURL=attributes.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { diag } from '@opentelemetry/api';\n/**\n * Returns a function that logs an error using the provided logger, or a\n * console logger if one was not provided.\n */\nexport function loggingErrorHandler() {\n    return function (ex) {\n        diag.error(stringifyException(ex));\n    };\n}\n/**\n * Converts an exception into a string representation\n * @param {Exception} ex\n */\nfunction stringifyException(ex) {\n    if (typeof ex === 'string') {\n        return ex;\n    }\n    else {\n        return JSON.stringify(flattenException(ex));\n    }\n}\n/**\n * Flattens an exception into key-value pairs by traversing the prototype chain\n * and coercing values to strings. Duplicate properties will not be overwritten;\n * the first insert wins.\n */\nfunction flattenException(ex) {\n    var result = {};\n    var current = ex;\n    while (current !== null) {\n        Object.getOwnPropertyNames(current).forEach(function (propertyName) {\n            if (result[propertyName])\n                return;\n            var value = current[propertyName];\n            if (value) {\n                result[propertyName] = String(value);\n            }\n        });\n        current = Object.getPrototypeOf(current);\n    }\n    return result;\n}\n//# sourceMappingURL=logging-error-handler.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { loggingErrorHandler } from './logging-error-handler';\n/** The global error handler delegate */\nvar delegateHandler = loggingErrorHandler();\n/**\n * Set the global error handler\n * @param {ErrorHandler} handler\n */\nexport function setGlobalErrorHandler(handler) {\n    delegateHandler = handler;\n}\n/**\n * Return the global error handler\n * @param {Exception} ex\n */\nexport function globalErrorHandler(ex) {\n    try {\n        delegateHandler(ex);\n    }\n    catch (_a) { } // eslint-disable-line no-empty\n}\n//# sourceMappingURL=global-error-handler.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport var TracesSamplerValues;\n(function (TracesSamplerValues) {\n    TracesSamplerValues[\"AlwaysOff\"] = \"always_off\";\n    TracesSamplerValues[\"AlwaysOn\"] = \"always_on\";\n    TracesSamplerValues[\"ParentBasedAlwaysOff\"] = \"parentbased_always_off\";\n    TracesSamplerValues[\"ParentBasedAlwaysOn\"] = \"parentbased_always_on\";\n    TracesSamplerValues[\"ParentBasedTraceIdRatio\"] = \"parentbased_traceidratio\";\n    TracesSamplerValues[\"TraceIdRatio\"] = \"traceidratio\";\n})(TracesSamplerValues || (TracesSamplerValues = {}));\n//# sourceMappingURL=sampling.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { DiagLogLevel } from '@opentelemetry/api';\nimport { TracesSamplerValues } from './sampling';\nvar DEFAULT_LIST_SEPARATOR = ',';\n/**\n * Environment interface to define all names\n */\nvar ENVIRONMENT_BOOLEAN_KEYS = ['OTEL_SDK_DISABLED'];\nfunction isEnvVarABoolean(key) {\n    return (ENVIRONMENT_BOOLEAN_KEYS.indexOf(key) > -1);\n}\nvar ENVIRONMENT_NUMBERS_KEYS = [\n    'OTEL_BSP_EXPORT_TIMEOUT',\n    'OTEL_BSP_MAX_EXPORT_BATCH_SIZE',\n    'OTEL_BSP_MAX_QUEUE_SIZE',\n    'OTEL_BSP_SCHEDULE_DELAY',\n    'OTEL_BLRP_EXPORT_TIMEOUT',\n    'OTEL_BLRP_MAX_EXPORT_BATCH_SIZE',\n    'OTEL_BLRP_MAX_QUEUE_SIZE',\n    'OTEL_BLRP_SCHEDULE_DELAY',\n    'OTEL_ATTRIBUTE_VALUE_LENGTH_LIMIT',\n    'OTEL_ATTRIBUTE_COUNT_LIMIT',\n    'OTEL_SPAN_ATTRIBUTE_VALUE_LENGTH_LIMIT',\n    'OTEL_SPAN_ATTRIBUTE_COUNT_LIMIT',\n    'OTEL_LOGRECORD_ATTRIBUTE_VALUE_LENGTH_LIMIT',\n    'OTEL_LOGRECORD_ATTRIBUTE_COUNT_LIMIT',\n    'OTEL_SPAN_EVENT_COUNT_LIMIT',\n    'OTEL_SPAN_LINK_COUNT_LIMIT',\n    'OTEL_SPAN_ATTRIBUTE_PER_EVENT_COUNT_LIMIT',\n    'OTEL_SPAN_ATTRIBUTE_PER_LINK_COUNT_LIMIT',\n    'OTEL_EXPORTER_OTLP_TIMEOUT',\n    'OTEL_EXPORTER_OTLP_TRACES_TIMEOUT',\n    'OTEL_EXPORTER_OTLP_METRICS_TIMEOUT',\n    'OTEL_EXPORTER_OTLP_LOGS_TIMEOUT',\n    'OTEL_EXPORTER_JAEGER_AGENT_PORT',\n];\nfunction isEnvVarANumber(key) {\n    return (ENVIRONMENT_NUMBERS_KEYS.indexOf(key) > -1);\n}\nvar ENVIRONMENT_LISTS_KEYS = [\n    'OTEL_NO_PATCH_MODULES',\n    'OTEL_PROPAGATORS',\n];\nfunction isEnvVarAList(key) {\n    return ENVIRONMENT_LISTS_KEYS.indexOf(key) > -1;\n}\nexport var DEFAULT_ATTRIBUTE_VALUE_LENGTH_LIMIT = Infinity;\nexport var DEFAULT_ATTRIBUTE_COUNT_LIMIT = 128;\nexport var DEFAULT_SPAN_ATTRIBUTE_PER_EVENT_COUNT_LIMIT = 128;\nexport var DEFAULT_SPAN_ATTRIBUTE_PER_LINK_COUNT_LIMIT = 128;\n/**\n * Default environment variables\n */\nexport var DEFAULT_ENVIRONMENT = {\n    OTEL_SDK_DISABLED: false,\n    CONTAINER_NAME: '',\n    ECS_CONTAINER_METADATA_URI_V4: '',\n    ECS_CONTAINER_METADATA_URI: '',\n    HOSTNAME: '',\n    KUBERNETES_SERVICE_HOST: '',\n    NAMESPACE: '',\n    OTEL_BSP_EXPORT_TIMEOUT: 30000,\n    OTEL_BSP_MAX_EXPORT_BATCH_SIZE: 512,\n    OTEL_BSP_MAX_QUEUE_SIZE: 2048,\n    OTEL_BSP_SCHEDULE_DELAY: 5000,\n    OTEL_BLRP_EXPORT_TIMEOUT: 30000,\n    OTEL_BLRP_MAX_EXPORT_BATCH_SIZE: 512,\n    OTEL_BLRP_MAX_QUEUE_SIZE: 2048,\n    OTEL_BLRP_SCHEDULE_DELAY: 5000,\n    OTEL_EXPORTER_JAEGER_AGENT_HOST: '',\n    OTEL_EXPORTER_JAEGER_AGENT_PORT: 6832,\n    OTEL_EXPORTER_JAEGER_ENDPOINT: '',\n    OTEL_EXPORTER_JAEGER_PASSWORD: '',\n    OTEL_EXPORTER_JAEGER_USER: '',\n    OTEL_EXPORTER_OTLP_ENDPOINT: '',\n    OTEL_EXPORTER_OTLP_TRACES_ENDPOINT: '',\n    OTEL_EXPORTER_OTLP_METRICS_ENDPOINT: '',\n    OTEL_EXPORTER_OTLP_LOGS_ENDPOINT: '',\n    OTEL_EXPORTER_OTLP_HEADERS: '',\n    OTEL_EXPORTER_OTLP_TRACES_HEADERS: '',\n    OTEL_EXPORTER_OTLP_METRICS_HEADERS: '',\n    OTEL_EXPORTER_OTLP_LOGS_HEADERS: '',\n    OTEL_EXPORTER_OTLP_TIMEOUT: 10000,\n    OTEL_EXPORTER_OTLP_TRACES_TIMEOUT: 10000,\n    OTEL_EXPORTER_OTLP_METRICS_TIMEOUT: 10000,\n    OTEL_EXPORTER_OTLP_LOGS_TIMEOUT: 10000,\n    OTEL_EXPORTER_ZIPKIN_ENDPOINT: 'http://localhost:9411/api/v2/spans',\n    OTEL_LOG_LEVEL: DiagLogLevel.INFO,\n    OTEL_NO_PATCH_MODULES: [],\n    OTEL_PROPAGATORS: ['tracecontext', 'baggage'],\n    OTEL_RESOURCE_ATTRIBUTES: '',\n    OTEL_SERVICE_NAME: '',\n    OTEL_ATTRIBUTE_VALUE_LENGTH_LIMIT: DEFAULT_ATTRIBUTE_VALUE_LENGTH_LIMIT,\n    OTEL_ATTRIBUTE_COUNT_LIMIT: DEFAULT_ATTRIBUTE_COUNT_LIMIT,\n    OTEL_SPAN_ATTRIBUTE_VALUE_LENGTH_LIMIT: DEFAULT_ATTRIBUTE_VALUE_LENGTH_LIMIT,\n    OTEL_SPAN_ATTRIBUTE_COUNT_LIMIT: DEFAULT_ATTRIBUTE_COUNT_LIMIT,\n    OTEL_LOGRECORD_ATTRIBUTE_VALUE_LENGTH_LIMIT: DEFAULT_ATTRIBUTE_VALUE_LENGTH_LIMIT,\n    OTEL_LOGRECORD_ATTRIBUTE_COUNT_LIMIT: DEFAULT_ATTRIBUTE_COUNT_LIMIT,\n    OTEL_SPAN_EVENT_COUNT_LIMIT: 128,\n    OTEL_SPAN_LINK_COUNT_LIMIT: 128,\n    OTEL_SPAN_ATTRIBUTE_PER_EVENT_COUNT_LIMIT: DEFAULT_SPAN_ATTRIBUTE_PER_EVENT_COUNT_LIMIT,\n    OTEL_SPAN_ATTRIBUTE_PER_LINK_COUNT_LIMIT: DEFAULT_SPAN_ATTRIBUTE_PER_LINK_COUNT_LIMIT,\n    OTEL_TRACES_EXPORTER: '',\n    OTEL_TRACES_SAMPLER: TracesSamplerValues.ParentBasedAlwaysOn,\n    OTEL_TRACES_SAMPLER_ARG: '',\n    OTEL_LOGS_EXPORTER: '',\n    OTEL_EXPORTER_OTLP_INSECURE: '',\n    OTEL_EXPORTER_OTLP_TRACES_INSECURE: '',\n    OTEL_EXPORTER_OTLP_METRICS_INSECURE: '',\n    OTEL_EXPORTER_OTLP_LOGS_INSECURE: '',\n    OTEL_EXPORTER_OTLP_CERTIFICATE: '',\n    OTEL_EXPORTER_OTLP_TRACES_CERTIFICATE: '',\n    OTEL_EXPORTER_OTLP_METRICS_CERTIFICATE: '',\n    OTEL_EXPORTER_OTLP_LOGS_CERTIFICATE: '',\n    OTEL_EXPORTER_OTLP_COMPRESSION: '',\n    OTEL_EXPORTER_OTLP_TRACES_COMPRESSION: '',\n    OTEL_EXPORTER_OTLP_METRICS_COMPRESSION: '',\n    OTEL_EXPORTER_OTLP_LOGS_COMPRESSION: '',\n    OTEL_EXPORTER_OTLP_CLIENT_KEY: '',\n    OTEL_EXPORTER_OTLP_TRACES_CLIENT_KEY: '',\n    OTEL_EXPORTER_OTLP_METRICS_CLIENT_KEY: '',\n    OTEL_EXPORTER_OTLP_LOGS_CLIENT_KEY: '',\n    OTEL_EXPORTER_OTLP_CLIENT_CERTIFICATE: '',\n    OTEL_EXPORTER_OTLP_TRACES_CLIENT_CERTIFICATE: '',\n    OTEL_EXPORTER_OTLP_METRICS_CLIENT_CERTIFICATE: '',\n    OTEL_EXPORTER_OTLP_LOGS_CLIENT_CERTIFICATE: '',\n    OTEL_EXPORTER_OTLP_PROTOCOL: 'http/protobuf',\n    OTEL_EXPORTER_OTLP_TRACES_PROTOCOL: 'http/protobuf',\n    OTEL_EXPORTER_OTLP_METRICS_PROTOCOL: 'http/protobuf',\n    OTEL_EXPORTER_OTLP_LOGS_PROTOCOL: 'http/protobuf',\n    OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE: 'cumulative',\n};\n/**\n * @param key\n * @param environment\n * @param values\n */\nfunction parseBoolean(key, environment, values) {\n    if (typeof values[key] === 'undefined') {\n        return;\n    }\n    var value = String(values[key]);\n    // support case-insensitive \"true\"\n    environment[key] = value.toLowerCase() === 'true';\n}\n/**\n * Parses a variable as number with number validation\n * @param name\n * @param environment\n * @param values\n * @param min\n * @param max\n */\nfunction parseNumber(name, environment, values, min, max) {\n    if (min === void 0) { min = -Infinity; }\n    if (max === void 0) { max = Infinity; }\n    if (typeof values[name] !== 'undefined') {\n        var value = Number(values[name]);\n        if (!isNaN(value)) {\n            if (value < min) {\n                environment[name] = min;\n            }\n            else if (value > max) {\n                environment[name] = max;\n            }\n            else {\n                environment[name] = value;\n            }\n        }\n    }\n}\n/**\n * Parses list-like strings from input into output.\n * @param name\n * @param environment\n * @param values\n * @param separator\n */\nfunction parseStringList(name, output, input, separator) {\n    if (separator === void 0) { separator = DEFAULT_LIST_SEPARATOR; }\n    var givenValue = input[name];\n    if (typeof givenValue === 'string') {\n        output[name] = givenValue.split(separator).map(function (v) { return v.trim(); });\n    }\n}\n// The support string -> DiagLogLevel mappings\nvar logLevelMap = {\n    ALL: DiagLogLevel.ALL,\n    VERBOSE: DiagLogLevel.VERBOSE,\n    DEBUG: DiagLogLevel.DEBUG,\n    INFO: DiagLogLevel.INFO,\n    WARN: DiagLogLevel.WARN,\n    ERROR: DiagLogLevel.ERROR,\n    NONE: DiagLogLevel.NONE,\n};\n/**\n * Environmentally sets log level if valid log level string is provided\n * @param key\n * @param environment\n * @param values\n */\nfunction setLogLevelFromEnv(key, environment, values) {\n    var value = values[key];\n    if (typeof value === 'string') {\n        var theLevel = logLevelMap[value.toUpperCase()];\n        if (theLevel != null) {\n            environment[key] = theLevel;\n        }\n    }\n}\n/**\n * Parses environment values\n * @param values\n */\nexport function parseEnvironment(values) {\n    var environment = {};\n    for (var env in DEFAULT_ENVIRONMENT) {\n        var key = env;\n        switch (key) {\n            case 'OTEL_LOG_LEVEL':\n                setLogLevelFromEnv(key, environment, values);\n                break;\n            default:\n                if (isEnvVarABoolean(key)) {\n                    parseBoolean(key, environment, values);\n                }\n                else if (isEnvVarANumber(key)) {\n                    parseNumber(key, environment, values);\n                }\n                else if (isEnvVarAList(key)) {\n                    parseStringList(key, environment, values);\n                }\n                else {\n                    var value = values[key];\n                    if (typeof value !== 'undefined' && value !== null) {\n                        environment[key] = String(value);\n                    }\n                }\n        }\n    }\n    return environment;\n}\n//# sourceMappingURL=environment.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// Updates to this file should also be replicated to @opentelemetry/api too.\n/**\n * - globalThis (New standard)\n * - self (Will return the current window instance for supported browsers)\n * - window (fallback for older browser implementations)\n * - global (NodeJS implementation)\n * - <object> (When all else fails)\n */\n/** only globals that common to node and browsers are allowed */\n// eslint-disable-next-line node/no-unsupported-features/es-builtins, no-undef\nexport var _globalThis = typeof globalThis === 'object'\n    ? globalThis\n    : typeof self === 'object'\n        ? self\n        : typeof window === 'object'\n            ? window\n            : typeof global === 'object'\n                ? global\n                : {};\n//# sourceMappingURL=globalThis.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { DEFAULT_ENVIRONMENT, parseEnvironment, } from '../../utils/environment';\nimport { _globalThis } from './globalThis';\n/**\n * Gets the environment variables\n */\nexport function getEnv() {\n    var globalEnv = parseEnvironment(_globalThis);\n    return Object.assign({}, DEFAULT_ENVIRONMENT, globalEnv);\n}\nexport function getEnvWithoutDefaults() {\n    return parseEnvironment(_globalThis);\n}\n//# sourceMappingURL=environment.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport var otperformance = performance;\n//# sourceMappingURL=performance.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// this is autogenerated file, see scripts/version-update.js\nexport var VERSION = '1.25.1';\n//# sourceMappingURL=version.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar _a;\nimport { VERSION } from '../../version';\nimport { SEMRESATTRS_TELEMETRY_SDK_NAME, SEMRESATTRS_PROCESS_RUNTIME_NAME, SEMRESATTRS_TELEMETRY_SDK_LANGUAGE, TELEMETRYSDKLANGUAGEVALUES_WEBJS, SEMRESATTRS_TELEMETRY_SDK_VERSION, } from '@opentelemetry/semantic-conventions';\n/** Constants describing the SDK in use */\nexport var SDK_INFO = (_a = {},\n    _a[SEMRESATTRS_TELEMETRY_SDK_NAME] = 'opentelemetry',\n    _a[SEMRESATTRS_PROCESS_RUNTIME_NAME] = 'browser',\n    _a[SEMRESATTRS_TELEMETRY_SDK_LANGUAGE] = TELEMETRYSDKLANGUAGEVALUES_WEBJS,\n    _a[SEMRESATTRS_TELEMETRY_SDK_VERSION] = VERSION,\n    _a);\n//# sourceMappingURL=sdk-info.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport function unrefTimer(_timer) { }\n//# sourceMappingURL=timer-util.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { otperformance as performance } from '../platform';\nvar NANOSECOND_DIGITS = 9;\nvar NANOSECOND_DIGITS_IN_MILLIS = 6;\nvar MILLISECONDS_TO_NANOSECONDS = Math.pow(10, NANOSECOND_DIGITS_IN_MILLIS);\nvar SECOND_TO_NANOSECONDS = Math.pow(10, NANOSECOND_DIGITS);\n/**\n * Converts a number of milliseconds from epoch to HrTime([seconds, remainder in nanoseconds]).\n * @param epochMillis\n */\nexport function millisToHrTime(epochMillis) {\n    var epochSeconds = epochMillis / 1000;\n    // Decimals only.\n    var seconds = Math.trunc(epochSeconds);\n    // Round sub-nanosecond accuracy to nanosecond.\n    var nanos = Math.round((epochMillis % 1000) * MILLISECONDS_TO_NANOSECONDS);\n    return [seconds, nanos];\n}\nexport function getTimeOrigin() {\n    var timeOrigin = performance.timeOrigin;\n    if (typeof timeOrigin !== 'number') {\n        var perf = performance;\n        timeOrigin = perf.timing && perf.timing.fetchStart;\n    }\n    return timeOrigin;\n}\n/**\n * Returns an hrtime calculated via performance component.\n * @param performanceNow\n */\nexport function hrTime(performanceNow) {\n    var timeOrigin = millisToHrTime(getTimeOrigin());\n    var now = millisToHrTime(typeof performanceNow === 'number' ? performanceNow : performance.now());\n    return addHrTimes(timeOrigin, now);\n}\n/**\n *\n * Converts a TimeInput to an HrTime, defaults to _hrtime().\n * @param time\n */\nexport function timeInputToHrTime(time) {\n    // process.hrtime\n    if (isTimeInputHrTime(time)) {\n        return time;\n    }\n    else if (typeof time === 'number') {\n        // Must be a performance.now() if it's smaller than process start time.\n        if (time < getTimeOrigin()) {\n            return hrTime(time);\n        }\n        else {\n            // epoch milliseconds or performance.timeOrigin\n            return millisToHrTime(time);\n        }\n    }\n    else if (time instanceof Date) {\n        return millisToHrTime(time.getTime());\n    }\n    else {\n        throw TypeError('Invalid input type');\n    }\n}\n/**\n * Returns a duration of two hrTime.\n * @param startTime\n * @param endTime\n */\nexport function hrTimeDuration(startTime, endTime) {\n    var seconds = endTime[0] - startTime[0];\n    var nanos = endTime[1] - startTime[1];\n    // overflow\n    if (nanos < 0) {\n        seconds -= 1;\n        // negate\n        nanos += SECOND_TO_NANOSECONDS;\n    }\n    return [seconds, nanos];\n}\n/**\n * Convert hrTime to timestamp, for example \"2019-05-14T17:00:00.000123456Z\"\n * @param time\n */\nexport function hrTimeToTimeStamp(time) {\n    var precision = NANOSECOND_DIGITS;\n    var tmp = \"\" + '0'.repeat(precision) + time[1] + \"Z\";\n    var nanoString = tmp.substr(tmp.length - precision - 1);\n    var date = new Date(time[0] * 1000).toISOString();\n    return date.replace('000Z', nanoString);\n}\n/**\n * Convert hrTime to nanoseconds.\n * @param time\n */\nexport function hrTimeToNanoseconds(time) {\n    return time[0] * SECOND_TO_NANOSECONDS + time[1];\n}\n/**\n * Convert hrTime to milliseconds.\n * @param time\n */\nexport function hrTimeToMilliseconds(time) {\n    return time[0] * 1e3 + time[1] / 1e6;\n}\n/**\n * Convert hrTime to microseconds.\n * @param time\n */\nexport function hrTimeToMicroseconds(time) {\n    return time[0] * 1e6 + time[1] / 1e3;\n}\n/**\n * check if time is HrTime\n * @param value\n */\nexport function isTimeInputHrTime(value) {\n    return (Array.isArray(value) &&\n        value.length === 2 &&\n        typeof value[0] === 'number' &&\n        typeof value[1] === 'number');\n}\n/**\n * check if input value is a correct types.TimeInput\n * @param value\n */\nexport function isTimeInput(value) {\n    return (isTimeInputHrTime(value) ||\n        typeof value === 'number' ||\n        value instanceof Date);\n}\n/**\n * Given 2 HrTime formatted times, return their sum as an HrTime.\n */\nexport function addHrTimes(time1, time2) {\n    var out = [time1[0] + time2[0], time1[1] + time2[1]];\n    // Nanoseconds\n    if (out[1] >= SECOND_TO_NANOSECONDS) {\n        out[1] -= SECOND_TO_NANOSECONDS;\n        out[0] += 1;\n    }\n    return out;\n}\n//# sourceMappingURL=time.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport var ExportResultCode;\n(function (ExportResultCode) {\n    ExportResultCode[ExportResultCode[\"SUCCESS\"] = 0] = \"SUCCESS\";\n    ExportResultCode[ExportResultCode[\"FAILED\"] = 1] = \"FAILED\";\n})(ExportResultCode || (ExportResultCode = {}));\n//# sourceMappingURL=ExportResult.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __values = (this && this.__values) || function(o) {\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\n    if (m) return m.call(o);\n    if (o && typeof o.length === \"number\") return {\n        next: function () {\n            if (o && i >= o.length) o = void 0;\n            return { value: o && o[i++], done: !o };\n        }\n    };\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\nimport { diag, } from '@opentelemetry/api';\n/** Combines multiple propagators into a single propagator. */\nvar CompositePropagator = /** @class */ (function () {\n    /**\n     * Construct a composite propagator from a list of propagators.\n     *\n     * @param [config] Configuration object for composite propagator\n     */\n    function CompositePropagator(config) {\n        if (config === void 0) { config = {}; }\n        var _a;\n        this._propagators = (_a = config.propagators) !== null && _a !== void 0 ? _a : [];\n        this._fields = Array.from(new Set(this._propagators\n            // older propagators may not have fields function, null check to be sure\n            .map(function (p) { return (typeof p.fields === 'function' ? p.fields() : []); })\n            .reduce(function (x, y) { return x.concat(y); }, [])));\n    }\n    /**\n     * Run each of the configured propagators with the given context and carrier.\n     * Propagators are run in the order they are configured, so if multiple\n     * propagators write the same carrier key, the propagator later in the list\n     * will \"win\".\n     *\n     * @param context Context to inject\n     * @param carrier Carrier into which context will be injected\n     */\n    CompositePropagator.prototype.inject = function (context, carrier, setter) {\n        var e_1, _a;\n        try {\n            for (var _b = __values(this._propagators), _c = _b.next(); !_c.done; _c = _b.next()) {\n                var propagator = _c.value;\n                try {\n                    propagator.inject(context, carrier, setter);\n                }\n                catch (err) {\n                    diag.warn(\"Failed to inject with \" + propagator.constructor.name + \". Err: \" + err.message);\n                }\n            }\n        }\n        catch (e_1_1) { e_1 = { error: e_1_1 }; }\n        finally {\n            try {\n                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n            }\n            finally { if (e_1) throw e_1.error; }\n        }\n    };\n    /**\n     * Run each of the configured propagators with the given context and carrier.\n     * Propagators are run in the order they are configured, so if multiple\n     * propagators write the same context key, the propagator later in the list\n     * will \"win\".\n     *\n     * @param context Context to add values to\n     * @param carrier Carrier from which to extract context\n     */\n    CompositePropagator.prototype.extract = function (context, carrier, getter) {\n        return this._propagators.reduce(function (ctx, propagator) {\n            try {\n                return propagator.extract(ctx, carrier, getter);\n            }\n            catch (err) {\n                diag.warn(\"Failed to inject with \" + propagator.constructor.name + \". Err: \" + err.message);\n            }\n            return ctx;\n        }, context);\n    };\n    CompositePropagator.prototype.fields = function () {\n        // return a new array so our fields cannot be modified\n        return this._fields.slice();\n    };\n    return CompositePropagator;\n}());\nexport { CompositePropagator };\n//# sourceMappingURL=composite.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar VALID_KEY_CHAR_RANGE = '[_0-9a-z-*/]';\nvar VALID_KEY = \"[a-z]\" + VALID_KEY_CHAR_RANGE + \"{0,255}\";\nvar VALID_VENDOR_KEY = \"[a-z0-9]\" + VALID_KEY_CHAR_RANGE + \"{0,240}@[a-z]\" + VALID_KEY_CHAR_RANGE + \"{0,13}\";\nvar VALID_KEY_REGEX = new RegExp(\"^(?:\" + VALID_KEY + \"|\" + VALID_VENDOR_KEY + \")$\");\nvar VALID_VALUE_BASE_REGEX = /^[ -~]{0,255}[!-~]$/;\nvar INVALID_VALUE_COMMA_EQUAL_REGEX = /,|=/;\n/**\n * Key is opaque string up to 256 characters printable. It MUST begin with a\n * lowercase letter, and can only contain lowercase letters a-z, digits 0-9,\n * underscores _, dashes -, asterisks *, and forward slashes /.\n * For multi-tenant vendor scenarios, an at sign (@) can be used to prefix the\n * vendor name. Vendors SHOULD set the tenant ID at the beginning of the key.\n * see https://www.w3.org/TR/trace-context/#key\n */\nexport function validateKey(key) {\n    return VALID_KEY_REGEX.test(key);\n}\n/**\n * Value is opaque string up to 256 characters printable ASCII RFC0020\n * characters (i.e., the range 0x20 to 0x7E) except comma , and =.\n */\nexport function validateValue(value) {\n    return (VALID_VALUE_BASE_REGEX.test(value) &&\n        !INVALID_VALUE_COMMA_EQUAL_REGEX.test(value));\n}\n//# sourceMappingURL=validators.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { validateKey, validateValue } from '../internal/validators';\nvar MAX_TRACE_STATE_ITEMS = 32;\nvar MAX_TRACE_STATE_LEN = 512;\nvar LIST_MEMBERS_SEPARATOR = ',';\nvar LIST_MEMBER_KEY_VALUE_SPLITTER = '=';\n/**\n * TraceState must be a class and not a simple object type because of the spec\n * requirement (https://www.w3.org/TR/trace-context/#tracestate-field).\n *\n * Here is the list of allowed mutations:\n * - New key-value pair should be added into the beginning of the list\n * - The value of any key can be updated. Modified keys MUST be moved to the\n * beginning of the list.\n */\nvar TraceState = /** @class */ (function () {\n    function TraceState(rawTraceState) {\n        this._internalState = new Map();\n        if (rawTraceState)\n            this._parse(rawTraceState);\n    }\n    TraceState.prototype.set = function (key, value) {\n        // TODO: Benchmark the different approaches(map vs list) and\n        // use the faster one.\n        var traceState = this._clone();\n        if (traceState._internalState.has(key)) {\n            traceState._internalState.delete(key);\n        }\n        traceState._internalState.set(key, value);\n        return traceState;\n    };\n    TraceState.prototype.unset = function (key) {\n        var traceState = this._clone();\n        traceState._internalState.delete(key);\n        return traceState;\n    };\n    TraceState.prototype.get = function (key) {\n        return this._internalState.get(key);\n    };\n    TraceState.prototype.serialize = function () {\n        var _this = this;\n        return this._keys()\n            .reduce(function (agg, key) {\n            agg.push(key + LIST_MEMBER_KEY_VALUE_SPLITTER + _this.get(key));\n            return agg;\n        }, [])\n            .join(LIST_MEMBERS_SEPARATOR);\n    };\n    TraceState.prototype._parse = function (rawTraceState) {\n        if (rawTraceState.length > MAX_TRACE_STATE_LEN)\n            return;\n        this._internalState = rawTraceState\n            .split(LIST_MEMBERS_SEPARATOR)\n            .reverse() // Store in reverse so new keys (.set(...)) will be placed at the beginning\n            .reduce(function (agg, part) {\n            var listMember = part.trim(); // Optional Whitespace (OWS) handling\n            var i = listMember.indexOf(LIST_MEMBER_KEY_VALUE_SPLITTER);\n            if (i !== -1) {\n                var key = listMember.slice(0, i);\n                var value = listMember.slice(i + 1, part.length);\n                if (validateKey(key) && validateValue(value)) {\n                    agg.set(key, value);\n                }\n                else {\n                    // TODO: Consider to add warning log\n                }\n            }\n            return agg;\n        }, new Map());\n        // Because of the reverse() requirement, trunc must be done after map is created\n        if (this._internalState.size > MAX_TRACE_STATE_ITEMS) {\n            this._internalState = new Map(Array.from(this._internalState.entries())\n                .reverse() // Use reverse same as original tracestate parse chain\n                .slice(0, MAX_TRACE_STATE_ITEMS));\n        }\n    };\n    TraceState.prototype._keys = function () {\n        return Array.from(this._internalState.keys()).reverse();\n    };\n    TraceState.prototype._clone = function () {\n        var traceState = new TraceState();\n        traceState._internalState = new Map(this._internalState);\n        return traceState;\n    };\n    return TraceState;\n}());\nexport { TraceState };\n//# sourceMappingURL=TraceState.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { isSpanContextValid, trace, TraceFlags, } from '@opentelemetry/api';\nimport { isTracingSuppressed } from './suppress-tracing';\nimport { TraceState } from './TraceState';\nexport var TRACE_PARENT_HEADER = 'traceparent';\nexport var TRACE_STATE_HEADER = 'tracestate';\nvar VERSION = '00';\nvar VERSION_PART = '(?!ff)[\\\\da-f]{2}';\nvar TRACE_ID_PART = '(?![0]{32})[\\\\da-f]{32}';\nvar PARENT_ID_PART = '(?![0]{16})[\\\\da-f]{16}';\nvar FLAGS_PART = '[\\\\da-f]{2}';\nvar TRACE_PARENT_REGEX = new RegExp(\"^\\\\s?(\" + VERSION_PART + \")-(\" + TRACE_ID_PART + \")-(\" + PARENT_ID_PART + \")-(\" + FLAGS_PART + \")(-.*)?\\\\s?$\");\n/**\n * Parses information from the [traceparent] span tag and converts it into {@link SpanContext}\n * @param traceParent - A meta property that comes from server.\n *     It should be dynamically generated server side to have the server's request trace Id,\n *     a parent span Id that was set on the server's request span,\n *     and the trace flags to indicate the server's sampling decision\n *     (01 = sampled, 00 = not sampled).\n *     for example: '{version}-{traceId}-{spanId}-{sampleDecision}'\n *     For more information see {@link https://www.w3.org/TR/trace-context/}\n */\nexport function parseTraceParent(traceParent) {\n    var match = TRACE_PARENT_REGEX.exec(traceParent);\n    if (!match)\n        return null;\n    // According to the specification the implementation should be compatible\n    // with future versions. If there are more parts, we only reject it if it's using version 00\n    // See https://www.w3.org/TR/trace-context/#versioning-of-traceparent\n    if (match[1] === '00' && match[5])\n        return null;\n    return {\n        traceId: match[2],\n        spanId: match[3],\n        traceFlags: parseInt(match[4], 16),\n    };\n}\n/**\n * Propagates {@link SpanContext} through Trace Context format propagation.\n *\n * Based on the Trace Context specification:\n * https://www.w3.org/TR/trace-context/\n */\nvar W3CTraceContextPropagator = /** @class */ (function () {\n    function W3CTraceContextPropagator() {\n    }\n    W3CTraceContextPropagator.prototype.inject = function (context, carrier, setter) {\n        var spanContext = trace.getSpanContext(context);\n        if (!spanContext ||\n            isTracingSuppressed(context) ||\n            !isSpanContextValid(spanContext))\n            return;\n        var traceParent = VERSION + \"-\" + spanContext.traceId + \"-\" + spanContext.spanId + \"-0\" + Number(spanContext.traceFlags || TraceFlags.NONE).toString(16);\n        setter.set(carrier, TRACE_PARENT_HEADER, traceParent);\n        if (spanContext.traceState) {\n            setter.set(carrier, TRACE_STATE_HEADER, spanContext.traceState.serialize());\n        }\n    };\n    W3CTraceContextPropagator.prototype.extract = function (context, carrier, getter) {\n        var traceParentHeader = getter.get(carrier, TRACE_PARENT_HEADER);\n        if (!traceParentHeader)\n            return context;\n        var traceParent = Array.isArray(traceParentHeader)\n            ? traceParentHeader[0]\n            : traceParentHeader;\n        if (typeof traceParent !== 'string')\n            return context;\n        var spanContext = parseTraceParent(traceParent);\n        if (!spanContext)\n            return context;\n        spanContext.isRemote = true;\n        var traceStateHeader = getter.get(carrier, TRACE_STATE_HEADER);\n        if (traceStateHeader) {\n            // If more than one `tracestate` header is found, we merge them into a\n            // single header.\n            var state = Array.isArray(traceStateHeader)\n                ? traceStateHeader.join(',')\n                : traceStateHeader;\n            spanContext.traceState = new TraceState(typeof state === 'string' ? state : undefined);\n        }\n        return trace.setSpanContext(context, spanContext);\n    };\n    W3CTraceContextPropagator.prototype.fields = function () {\n        return [TRACE_PARENT_HEADER, TRACE_STATE_HEADER];\n    };\n    return W3CTraceContextPropagator;\n}());\nexport { W3CTraceContextPropagator };\n//# sourceMappingURL=W3CTraceContextPropagator.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/* eslint-disable @typescript-eslint/no-explicit-any */\n/**\n * based on lodash in order to support esm builds without esModuleInterop.\n * lodash is using MIT License.\n **/\nvar objectTag = '[object Object]';\nvar nullTag = '[object Null]';\nvar undefinedTag = '[object Undefined]';\nvar funcProto = Function.prototype;\nvar funcToString = funcProto.toString;\nvar objectCtorString = funcToString.call(Object);\nvar getPrototype = overArg(Object.getPrototypeOf, Object);\nvar objectProto = Object.prototype;\nvar hasOwnProperty = objectProto.hasOwnProperty;\nvar symToStringTag = Symbol ? Symbol.toStringTag : undefined;\nvar nativeObjectToString = objectProto.toString;\n/**\n * Creates a unary function that invokes `func` with its argument transformed.\n *\n * @private\n * @param {Function} func The function to wrap.\n * @param {Function} transform The argument transform.\n * @returns {Function} Returns the new function.\n */\nfunction overArg(func, transform) {\n    return function (arg) {\n        return func(transform(arg));\n    };\n}\n/**\n * Checks if `value` is a plain object, that is, an object created by the\n * `Object` constructor or one with a `[[Prototype]]` of `null`.\n *\n * @static\n * @memberOf _\n * @since 0.8.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n * }\n *\n * _.isPlainObject(new Foo);\n * // => false\n *\n * _.isPlainObject([1, 2, 3]);\n * // => false\n *\n * _.isPlainObject({ 'x': 0, 'y': 0 });\n * // => true\n *\n * _.isPlainObject(Object.create(null));\n * // => true\n */\nexport function isPlainObject(value) {\n    if (!isObjectLike(value) || baseGetTag(value) !== objectTag) {\n        return false;\n    }\n    var proto = getPrototype(value);\n    if (proto === null) {\n        return true;\n    }\n    var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;\n    return (typeof Ctor == 'function' &&\n        Ctor instanceof Ctor &&\n        funcToString.call(Ctor) === objectCtorString);\n}\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n    return value != null && typeof value == 'object';\n}\n/**\n * The base implementation of `getTag` without fallbacks for buggy environments.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nfunction baseGetTag(value) {\n    if (value == null) {\n        return value === undefined ? undefinedTag : nullTag;\n    }\n    return symToStringTag && symToStringTag in Object(value)\n        ? getRawTag(value)\n        : objectToString(value);\n}\n/**\n * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the raw `toStringTag`.\n */\nfunction getRawTag(value) {\n    var isOwn = hasOwnProperty.call(value, symToStringTag), tag = value[symToStringTag];\n    var unmasked = false;\n    try {\n        value[symToStringTag] = undefined;\n        unmasked = true;\n    }\n    catch (e) {\n        // silence\n    }\n    var result = nativeObjectToString.call(value);\n    if (unmasked) {\n        if (isOwn) {\n            value[symToStringTag] = tag;\n        }\n        else {\n            delete value[symToStringTag];\n        }\n    }\n    return result;\n}\n/**\n * Converts `value` to a string using `Object.prototype.toString`.\n *\n * @private\n * @param {*} value The value to convert.\n * @returns {string} Returns the converted string.\n */\nfunction objectToString(value) {\n    return nativeObjectToString.call(value);\n}\n//# sourceMappingURL=lodash.merge.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { isPlainObject } from './lodash.merge';\nvar MAX_LEVEL = 20;\n/**\n * Merges objects together\n * @param args - objects / values to be merged\n */\nexport function merge() {\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n    }\n    var result = args.shift();\n    var objects = new WeakMap();\n    while (args.length > 0) {\n        result = mergeTwoObjects(result, args.shift(), 0, objects);\n    }\n    return result;\n}\nfunction takeValue(value) {\n    if (isArray(value)) {\n        return value.slice();\n    }\n    return value;\n}\n/**\n * Merges two objects\n * @param one - first object\n * @param two - second object\n * @param level - current deep level\n * @param objects - objects holder that has been already referenced - to prevent\n * cyclic dependency\n */\nfunction mergeTwoObjects(one, two, level, objects) {\n    if (level === void 0) { level = 0; }\n    var result;\n    if (level > MAX_LEVEL) {\n        return undefined;\n    }\n    level++;\n    if (isPrimitive(one) || isPrimitive(two) || isFunction(two)) {\n        result = takeValue(two);\n    }\n    else if (isArray(one)) {\n        result = one.slice();\n        if (isArray(two)) {\n            for (var i = 0, j = two.length; i < j; i++) {\n                result.push(takeValue(two[i]));\n            }\n        }\n        else if (isObject(two)) {\n            var keys = Object.keys(two);\n            for (var i = 0, j = keys.length; i < j; i++) {\n                var key = keys[i];\n                result[key] = takeValue(two[key]);\n            }\n        }\n    }\n    else if (isObject(one)) {\n        if (isObject(two)) {\n            if (!shouldMerge(one, two)) {\n                return two;\n            }\n            result = Object.assign({}, one);\n            var keys = Object.keys(two);\n            for (var i = 0, j = keys.length; i < j; i++) {\n                var key = keys[i];\n                var twoValue = two[key];\n                if (isPrimitive(twoValue)) {\n                    if (typeof twoValue === 'undefined') {\n                        delete result[key];\n                    }\n                    else {\n                        // result[key] = takeValue(twoValue);\n                        result[key] = twoValue;\n                    }\n                }\n                else {\n                    var obj1 = result[key];\n                    var obj2 = twoValue;\n                    if (wasObjectReferenced(one, key, objects) ||\n                        wasObjectReferenced(two, key, objects)) {\n                        delete result[key];\n                    }\n                    else {\n                        if (isObject(obj1) && isObject(obj2)) {\n                            var arr1 = objects.get(obj1) || [];\n                            var arr2 = objects.get(obj2) || [];\n                            arr1.push({ obj: one, key: key });\n                            arr2.push({ obj: two, key: key });\n                            objects.set(obj1, arr1);\n                            objects.set(obj2, arr2);\n                        }\n                        result[key] = mergeTwoObjects(result[key], twoValue, level, objects);\n                    }\n                }\n            }\n        }\n        else {\n            result = two;\n        }\n    }\n    return result;\n}\n/**\n * Function to check if object has been already reference\n * @param obj\n * @param key\n * @param objects\n */\nfunction wasObjectReferenced(obj, key, objects) {\n    var arr = objects.get(obj[key]) || [];\n    for (var i = 0, j = arr.length; i < j; i++) {\n        var info = arr[i];\n        if (info.key === key && info.obj === obj) {\n            return true;\n        }\n    }\n    return false;\n}\nfunction isArray(value) {\n    return Array.isArray(value);\n}\nfunction isFunction(value) {\n    return typeof value === 'function';\n}\nfunction isObject(value) {\n    return (!isPrimitive(value) &&\n        !isArray(value) &&\n        !isFunction(value) &&\n        typeof value === 'object');\n}\nfunction isPrimitive(value) {\n    return (typeof value === 'string' ||\n        typeof value === 'number' ||\n        typeof value === 'boolean' ||\n        typeof value === 'undefined' ||\n        value instanceof Date ||\n        value instanceof RegExp ||\n        value === null);\n}\nfunction shouldMerge(one, two) {\n    if (!isPlainObject(one) || !isPlainObject(two)) {\n        return false;\n    }\n    return true;\n}\n//# sourceMappingURL=merge.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar Deferred = /** @class */ (function () {\n    function Deferred() {\n        var _this = this;\n        this._promise = new Promise(function (resolve, reject) {\n            _this._resolve = resolve;\n            _this._reject = reject;\n        });\n    }\n    Object.defineProperty(Deferred.prototype, \"promise\", {\n        get: function () {\n            return this._promise;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Deferred.prototype.resolve = function (val) {\n        this._resolve(val);\n    };\n    Deferred.prototype.reject = function (err) {\n        this._reject(err);\n    };\n    return Deferred;\n}());\nexport { Deferred };\n//# sourceMappingURL=promise.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nvar __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n        if (ar || !(i in from)) {\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n            ar[i] = from[i];\n        }\n    }\n    return to.concat(ar || Array.prototype.slice.call(from));\n};\nimport { Deferred } from './promise';\n/**\n * Bind the callback and only invoke the callback once regardless how many times `BindOnceFuture.call` is invoked.\n */\nvar BindOnceFuture = /** @class */ (function () {\n    function BindOnceFuture(_callback, _that) {\n        this._callback = _callback;\n        this._that = _that;\n        this._isCalled = false;\n        this._deferred = new Deferred();\n    }\n    Object.defineProperty(BindOnceFuture.prototype, \"isCalled\", {\n        get: function () {\n            return this._isCalled;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(BindOnceFuture.prototype, \"promise\", {\n        get: function () {\n            return this._deferred.promise;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    BindOnceFuture.prototype.call = function () {\n        var _a;\n        var _this = this;\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        if (!this._isCalled) {\n            this._isCalled = true;\n            try {\n                Promise.resolve((_a = this._callback).call.apply(_a, __spreadArray([this._that], __read(args), false))).then(function (val) { return _this._deferred.resolve(val); }, function (err) { return _this._deferred.reject(err); });\n            }\n            catch (err) {\n                this._deferred.reject(err);\n            }\n        }\n        return this._deferred.promise;\n    };\n    return BindOnceFuture;\n}());\nexport { BindOnceFuture };\n//# sourceMappingURL=callback.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { context } from '@opentelemetry/api';\nimport { suppressTracing } from '../trace/suppress-tracing';\n/**\n * @internal\n * Shared functionality used by Exporters while exporting data, including suppression of Traces.\n */\nexport function _export(exporter, arg) {\n    return new Promise(function (resolve) {\n        // prevent downstream exporter calls from generating spans\n        context.with(suppressTracing(context.active()), function () {\n            exporter.export(arg, function (result) {\n                resolve(result);\n            });\n        });\n    });\n}\n//# sourceMappingURL=exporter.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport * from './baggage/propagation/W3CBaggagePropagator';\nexport * from './common/anchored-clock';\nexport * from './common/attributes';\nexport * from './common/global-error-handler';\nexport * from './common/logging-error-handler';\nexport * from './common/time';\nexport * from './common/types';\nexport * from './common/hex-to-binary';\nexport * from './ExportResult';\nimport * as baggageUtils_1 from './baggage/utils';\nexport { baggageUtils_1 as baggageUtils };\nexport * from './platform';\nexport * from './propagation/composite';\nexport * from './trace/W3CTraceContextPropagator';\nexport * from './trace/IdGenerator';\nexport * from './trace/rpc-metadata';\nexport * from './trace/sampler/AlwaysOffSampler';\nexport * from './trace/sampler/AlwaysOnSampler';\nexport * from './trace/sampler/ParentBasedSampler';\nexport * from './trace/sampler/TraceIdRatioBasedSampler';\nexport * from './trace/suppress-tracing';\nexport * from './trace/TraceState';\nexport * from './utils/environment';\nexport * from './utils/merge';\nexport * from './utils/sampling';\nexport * from './utils/timeout';\nexport * from './utils/url';\nexport * from './utils/wrap';\nexport * from './utils/callback';\nexport * from './version';\nimport { _export } from './internal/exporter';\nexport var internal = {\n    _export: _export,\n};\n//# sourceMappingURL=index.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// Event name definitions\nexport var ExceptionEventName = 'exception';\n//# sourceMappingURL=enums.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __values = (this && this.__values) || function(o) {\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\n    if (m) return m.call(o);\n    if (o && typeof o.length === \"number\") return {\n        next: function () {\n            if (o && i >= o.length) o = void 0;\n            return { value: o && o[i++], done: !o };\n        }\n    };\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\nvar __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nvar __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n        if (ar || !(i in from)) {\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n            ar[i] = from[i];\n        }\n    }\n    return to.concat(ar || Array.prototype.slice.call(from));\n};\nimport { diag, SpanStatusCode, } from '@opentelemetry/api';\nimport { addHrTimes, millisToHrTime, getTimeOrigin, hrTime, hrTimeDuration, isAttributeValue, isTimeInput, isTimeInputHrTime, otperformance, sanitizeAttributes, } from '@opentelemetry/core';\nimport { SEMATTRS_EXCEPTION_MESSAGE, SEMATTRS_EXCEPTION_STACKTRACE, SEMATTRS_EXCEPTION_TYPE, } from '@opentelemetry/semantic-conventions';\nimport { ExceptionEventName } from './enums';\n/**\n * This class represents a span.\n */\nvar Span = /** @class */ (function () {\n    /**\n     * Constructs a new Span instance.\n     *\n     * @deprecated calling Span constructor directly is not supported. Please use tracer.startSpan.\n     * */\n    function Span(parentTracer, context, spanName, spanContext, kind, parentSpanId, links, startTime, _deprecatedClock, // keeping this argument even though it is unused to ensure backwards compatibility\n    attributes) {\n        if (links === void 0) { links = []; }\n        this.attributes = {};\n        this.links = [];\n        this.events = [];\n        this._droppedAttributesCount = 0;\n        this._droppedEventsCount = 0;\n        this._droppedLinksCount = 0;\n        this.status = {\n            code: SpanStatusCode.UNSET,\n        };\n        this.endTime = [0, 0];\n        this._ended = false;\n        this._duration = [-1, -1];\n        this.name = spanName;\n        this._spanContext = spanContext;\n        this.parentSpanId = parentSpanId;\n        this.kind = kind;\n        this.links = links;\n        var now = Date.now();\n        this._performanceStartTime = otperformance.now();\n        this._performanceOffset =\n            now - (this._performanceStartTime + getTimeOrigin());\n        this._startTimeProvided = startTime != null;\n        this.startTime = this._getTime(startTime !== null && startTime !== void 0 ? startTime : now);\n        this.resource = parentTracer.resource;\n        this.instrumentationLibrary = parentTracer.instrumentationLibrary;\n        this._spanLimits = parentTracer.getSpanLimits();\n        this._attributeValueLengthLimit =\n            this._spanLimits.attributeValueLengthLimit || 0;\n        if (attributes != null) {\n            this.setAttributes(attributes);\n        }\n        this._spanProcessor = parentTracer.getActiveSpanProcessor();\n        this._spanProcessor.onStart(this, context);\n    }\n    Span.prototype.spanContext = function () {\n        return this._spanContext;\n    };\n    Span.prototype.setAttribute = function (key, value) {\n        if (value == null || this._isSpanEnded())\n            return this;\n        if (key.length === 0) {\n            diag.warn(\"Invalid attribute key: \" + key);\n            return this;\n        }\n        if (!isAttributeValue(value)) {\n            diag.warn(\"Invalid attribute value set for key: \" + key);\n            return this;\n        }\n        if (Object.keys(this.attributes).length >=\n            this._spanLimits.attributeCountLimit &&\n            !Object.prototype.hasOwnProperty.call(this.attributes, key)) {\n            this._droppedAttributesCount++;\n            return this;\n        }\n        this.attributes[key] = this._truncateToSize(value);\n        return this;\n    };\n    Span.prototype.setAttributes = function (attributes) {\n        var e_1, _a;\n        try {\n            for (var _b = __values(Object.entries(attributes)), _c = _b.next(); !_c.done; _c = _b.next()) {\n                var _d = __read(_c.value, 2), k = _d[0], v = _d[1];\n                this.setAttribute(k, v);\n            }\n        }\n        catch (e_1_1) { e_1 = { error: e_1_1 }; }\n        finally {\n            try {\n                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n            }\n            finally { if (e_1) throw e_1.error; }\n        }\n        return this;\n    };\n    /**\n     *\n     * @param name Span Name\n     * @param [attributesOrStartTime] Span attributes or start time\n     *     if type is {@type TimeInput} and 3rd param is undefined\n     * @param [timeStamp] Specified time stamp for the event\n     */\n    Span.prototype.addEvent = function (name, attributesOrStartTime, timeStamp) {\n        if (this._isSpanEnded())\n            return this;\n        if (this._spanLimits.eventCountLimit === 0) {\n            diag.warn('No events allowed.');\n            this._droppedEventsCount++;\n            return this;\n        }\n        if (this.events.length >= this._spanLimits.eventCountLimit) {\n            if (this._droppedEventsCount === 0) {\n                diag.debug('Dropping extra events.');\n            }\n            this.events.shift();\n            this._droppedEventsCount++;\n        }\n        if (isTimeInput(attributesOrStartTime)) {\n            if (!isTimeInput(timeStamp)) {\n                timeStamp = attributesOrStartTime;\n            }\n            attributesOrStartTime = undefined;\n        }\n        var attributes = sanitizeAttributes(attributesOrStartTime);\n        this.events.push({\n            name: name,\n            attributes: attributes,\n            time: this._getTime(timeStamp),\n            droppedAttributesCount: 0,\n        });\n        return this;\n    };\n    Span.prototype.addLink = function (link) {\n        this.links.push(link);\n        return this;\n    };\n    Span.prototype.addLinks = function (links) {\n        var _a;\n        (_a = this.links).push.apply(_a, __spreadArray([], __read(links), false));\n        return this;\n    };\n    Span.prototype.setStatus = function (status) {\n        if (this._isSpanEnded())\n            return this;\n        this.status = status;\n        return this;\n    };\n    Span.prototype.updateName = function (name) {\n        if (this._isSpanEnded())\n            return this;\n        this.name = name;\n        return this;\n    };\n    Span.prototype.end = function (endTime) {\n        if (this._isSpanEnded()) {\n            diag.error(this.name + \" \" + this._spanContext.traceId + \"-\" + this._spanContext.spanId + \" - You can only call end() on a span once.\");\n            return;\n        }\n        this._ended = true;\n        this.endTime = this._getTime(endTime);\n        this._duration = hrTimeDuration(this.startTime, this.endTime);\n        if (this._duration[0] < 0) {\n            diag.warn('Inconsistent start and end time, startTime > endTime. Setting span duration to 0ms.', this.startTime, this.endTime);\n            this.endTime = this.startTime.slice();\n            this._duration = [0, 0];\n        }\n        if (this._droppedEventsCount > 0) {\n            diag.warn(\"Dropped \" + this._droppedEventsCount + \" events because eventCountLimit reached\");\n        }\n        this._spanProcessor.onEnd(this);\n    };\n    Span.prototype._getTime = function (inp) {\n        if (typeof inp === 'number' && inp < otperformance.now()) {\n            // must be a performance timestamp\n            // apply correction and convert to hrtime\n            return hrTime(inp + this._performanceOffset);\n        }\n        if (typeof inp === 'number') {\n            return millisToHrTime(inp);\n        }\n        if (inp instanceof Date) {\n            return millisToHrTime(inp.getTime());\n        }\n        if (isTimeInputHrTime(inp)) {\n            return inp;\n        }\n        if (this._startTimeProvided) {\n            // if user provided a time for the start manually\n            // we can't use duration to calculate event/end times\n            return millisToHrTime(Date.now());\n        }\n        var msDuration = otperformance.now() - this._performanceStartTime;\n        return addHrTimes(this.startTime, millisToHrTime(msDuration));\n    };\n    Span.prototype.isRecording = function () {\n        return this._ended === false;\n    };\n    Span.prototype.recordException = function (exception, time) {\n        var attributes = {};\n        if (typeof exception === 'string') {\n            attributes[SEMATTRS_EXCEPTION_MESSAGE] = exception;\n        }\n        else if (exception) {\n            if (exception.code) {\n                attributes[SEMATTRS_EXCEPTION_TYPE] = exception.code.toString();\n            }\n            else if (exception.name) {\n                attributes[SEMATTRS_EXCEPTION_TYPE] = exception.name;\n            }\n            if (exception.message) {\n                attributes[SEMATTRS_EXCEPTION_MESSAGE] = exception.message;\n            }\n            if (exception.stack) {\n                attributes[SEMATTRS_EXCEPTION_STACKTRACE] = exception.stack;\n            }\n        }\n        // these are minimum requirements from spec\n        if (attributes[SEMATTRS_EXCEPTION_TYPE] ||\n            attributes[SEMATTRS_EXCEPTION_MESSAGE]) {\n            this.addEvent(ExceptionEventName, attributes, time);\n        }\n        else {\n            diag.warn(\"Failed to record an exception \" + exception);\n        }\n    };\n    Object.defineProperty(Span.prototype, \"duration\", {\n        get: function () {\n            return this._duration;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Span.prototype, \"ended\", {\n        get: function () {\n            return this._ended;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Span.prototype, \"droppedAttributesCount\", {\n        get: function () {\n            return this._droppedAttributesCount;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Span.prototype, \"droppedEventsCount\", {\n        get: function () {\n            return this._droppedEventsCount;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Span.prototype, \"droppedLinksCount\", {\n        get: function () {\n            return this._droppedLinksCount;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Span.prototype._isSpanEnded = function () {\n        if (this._ended) {\n            diag.warn(\"Can not execute the operation on ended Span {traceId: \" + this._spanContext.traceId + \", spanId: \" + this._spanContext.spanId + \"}\");\n        }\n        return this._ended;\n    };\n    // Utility function to truncate given value within size\n    // for value type of string, will truncate to given limit\n    // for type of non-string, will return same value\n    Span.prototype._truncateToLimitUtil = function (value, limit) {\n        if (value.length <= limit) {\n            return value;\n        }\n        return value.substr(0, limit);\n    };\n    /**\n     * If the given attribute value is of type string and has more characters than given {@code attributeValueLengthLimit} then\n     * return string with truncated to {@code attributeValueLengthLimit} characters\n     *\n     * If the given attribute value is array of strings then\n     * return new array of strings with each element truncated to {@code attributeValueLengthLimit} characters\n     *\n     * Otherwise return same Attribute {@code value}\n     *\n     * @param value Attribute value\n     * @returns truncated attribute value if required, otherwise same value\n     */\n    Span.prototype._truncateToSize = function (value) {\n        var _this = this;\n        var limit = this._attributeValueLengthLimit;\n        // Check limit\n        if (limit <= 0) {\n            // Negative values are invalid, so do not truncate\n            diag.warn(\"Attribute value limit must be positive, got \" + limit);\n            return value;\n        }\n        // String\n        if (typeof value === 'string') {\n            return this._truncateToLimitUtil(value, limit);\n        }\n        // Array of strings\n        if (Array.isArray(value)) {\n            return value.map(function (val) {\n                return typeof val === 'string' ? _this._truncateToLimitUtil(val, limit) : val;\n            });\n        }\n        // Other types, no need to apply value length limit\n        return value;\n    };\n    return Span;\n}());\nexport { Span };\n//# sourceMappingURL=Span.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * A sampling decision that determines how a {@link Span} will be recorded\n * and collected.\n */\nexport var SamplingDecision;\n(function (SamplingDecision) {\n    /**\n     * `Span.isRecording() === false`, span will not be recorded and all events\n     * and attributes will be dropped.\n     */\n    SamplingDecision[SamplingDecision[\"NOT_RECORD\"] = 0] = \"NOT_RECORD\";\n    /**\n     * `Span.isRecording() === true`, but `Sampled` flag in {@link TraceFlags}\n     * MUST NOT be set.\n     */\n    SamplingDecision[SamplingDecision[\"RECORD\"] = 1] = \"RECORD\";\n    /**\n     * `Span.isRecording() === true` AND `Sampled` flag in {@link TraceFlags}\n     * MUST be set.\n     */\n    SamplingDecision[SamplingDecision[\"RECORD_AND_SAMPLED\"] = 2] = \"RECORD_AND_SAMPLED\";\n})(SamplingDecision || (SamplingDecision = {}));\n//# sourceMappingURL=Sampler.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { SamplingDecision } from '../Sampler';\n/** Sampler that samples no traces. */\nvar AlwaysOffSampler = /** @class */ (function () {\n    function AlwaysOffSampler() {\n    }\n    AlwaysOffSampler.prototype.shouldSample = function () {\n        return {\n            decision: SamplingDecision.NOT_RECORD,\n        };\n    };\n    AlwaysOffSampler.prototype.toString = function () {\n        return 'AlwaysOffSampler';\n    };\n    return AlwaysOffSampler;\n}());\nexport { AlwaysOffSampler };\n//# sourceMappingURL=AlwaysOffSampler.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { SamplingDecision } from '../Sampler';\n/** Sampler that samples all traces. */\nvar AlwaysOnSampler = /** @class */ (function () {\n    function AlwaysOnSampler() {\n    }\n    AlwaysOnSampler.prototype.shouldSample = function () {\n        return {\n            decision: SamplingDecision.RECORD_AND_SAMPLED,\n        };\n    };\n    AlwaysOnSampler.prototype.toString = function () {\n        return 'AlwaysOnSampler';\n    };\n    return AlwaysOnSampler;\n}());\nexport { AlwaysOnSampler };\n//# sourceMappingURL=AlwaysOnSampler.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { isSpanContextValid, TraceFlags, trace, } from '@opentelemetry/api';\nimport { globalErrorHandler } from '@opentelemetry/core';\nimport { AlwaysOffSampler } from './AlwaysOffSampler';\nimport { AlwaysOnSampler } from './AlwaysOnSampler';\n/**\n * A composite sampler that either respects the parent span's sampling decision\n * or delegates to `delegateSampler` for root spans.\n */\nvar ParentBasedSampler = /** @class */ (function () {\n    function ParentBasedSampler(config) {\n        var _a, _b, _c, _d;\n        this._root = config.root;\n        if (!this._root) {\n            globalErrorHandler(new Error('ParentBasedSampler must have a root sampler configured'));\n            this._root = new AlwaysOnSampler();\n        }\n        this._remoteParentSampled =\n            (_a = config.remoteParentSampled) !== null && _a !== void 0 ? _a : new AlwaysOnSampler();\n        this._remoteParentNotSampled =\n            (_b = config.remoteParentNotSampled) !== null && _b !== void 0 ? _b : new AlwaysOffSampler();\n        this._localParentSampled =\n            (_c = config.localParentSampled) !== null && _c !== void 0 ? _c : new AlwaysOnSampler();\n        this._localParentNotSampled =\n            (_d = config.localParentNotSampled) !== null && _d !== void 0 ? _d : new AlwaysOffSampler();\n    }\n    ParentBasedSampler.prototype.shouldSample = function (context, traceId, spanName, spanKind, attributes, links) {\n        var parentContext = trace.getSpanContext(context);\n        if (!parentContext || !isSpanContextValid(parentContext)) {\n            return this._root.shouldSample(context, traceId, spanName, spanKind, attributes, links);\n        }\n        if (parentContext.isRemote) {\n            if (parentContext.traceFlags & TraceFlags.SAMPLED) {\n                return this._remoteParentSampled.shouldSample(context, traceId, spanName, spanKind, attributes, links);\n            }\n            return this._remoteParentNotSampled.shouldSample(context, traceId, spanName, spanKind, attributes, links);\n        }\n        if (parentContext.traceFlags & TraceFlags.SAMPLED) {\n            return this._localParentSampled.shouldSample(context, traceId, spanName, spanKind, attributes, links);\n        }\n        return this._localParentNotSampled.shouldSample(context, traceId, spanName, spanKind, attributes, links);\n    };\n    ParentBasedSampler.prototype.toString = function () {\n        return \"ParentBased{root=\" + this._root.toString() + \", remoteParentSampled=\" + this._remoteParentSampled.toString() + \", remoteParentNotSampled=\" + this._remoteParentNotSampled.toString() + \", localParentSampled=\" + this._localParentSampled.toString() + \", localParentNotSampled=\" + this._localParentNotSampled.toString() + \"}\";\n    };\n    return ParentBasedSampler;\n}());\nexport { ParentBasedSampler };\n//# sourceMappingURL=ParentBasedSampler.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { isValidTraceId } from '@opentelemetry/api';\nimport { SamplingDecision } from '../Sampler';\n/** Sampler that samples a given fraction of traces based of trace id deterministically. */\nvar TraceIdRatioBasedSampler = /** @class */ (function () {\n    function TraceIdRatioBasedSampler(_ratio) {\n        if (_ratio === void 0) { _ratio = 0; }\n        this._ratio = _ratio;\n        this._ratio = this._normalize(_ratio);\n        this._upperBound = Math.floor(this._ratio * 0xffffffff);\n    }\n    TraceIdRatioBasedSampler.prototype.shouldSample = function (context, traceId) {\n        return {\n            decision: isValidTraceId(traceId) && this._accumulate(traceId) < this._upperBound\n                ? SamplingDecision.RECORD_AND_SAMPLED\n                : SamplingDecision.NOT_RECORD,\n        };\n    };\n    TraceIdRatioBasedSampler.prototype.toString = function () {\n        return \"TraceIdRatioBased{\" + this._ratio + \"}\";\n    };\n    TraceIdRatioBasedSampler.prototype._normalize = function (ratio) {\n        if (typeof ratio !== 'number' || isNaN(ratio))\n            return 0;\n        return ratio >= 1 ? 1 : ratio <= 0 ? 0 : ratio;\n    };\n    TraceIdRatioBasedSampler.prototype._accumulate = function (traceId) {\n        var accumulation = 0;\n        for (var i = 0; i < traceId.length / 8; i++) {\n            var pos = i * 8;\n            var part = parseInt(traceId.slice(pos, pos + 8), 16);\n            accumulation = (accumulation ^ part) >>> 0;\n        }\n        return accumulation;\n    };\n    return TraceIdRatioBasedSampler;\n}());\nexport { TraceIdRatioBasedSampler };\n//# sourceMappingURL=TraceIdRatioBasedSampler.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { diag } from '@opentelemetry/api';\nimport { getEnv, TracesSamplerValues } from '@opentelemetry/core';\nimport { AlwaysOffSampler } from './sampler/AlwaysOffSampler';\nimport { AlwaysOnSampler } from './sampler/AlwaysOnSampler';\nimport { ParentBasedSampler } from './sampler/ParentBasedSampler';\nimport { TraceIdRatioBasedSampler } from './sampler/TraceIdRatioBasedSampler';\nvar env = getEnv();\nvar FALLBACK_OTEL_TRACES_SAMPLER = TracesSamplerValues.AlwaysOn;\nvar DEFAULT_RATIO = 1;\n/**\n * Load default configuration. For fields with primitive values, any user-provided\n * value will override the corresponding default value. For fields with\n * non-primitive values (like `spanLimits`), the user-provided value will be\n * used to extend the default value.\n */\n// object needs to be wrapped in this function and called when needed otherwise\n// envs are parsed before tests are ran - causes tests using these envs to fail\nexport function loadDefaultConfig() {\n    return {\n        sampler: buildSamplerFromEnv(env),\n        forceFlushTimeoutMillis: 30000,\n        generalLimits: {\n            attributeValueLengthLimit: getEnv().OTEL_ATTRIBUTE_VALUE_LENGTH_LIMIT,\n            attributeCountLimit: getEnv().OTEL_ATTRIBUTE_COUNT_LIMIT,\n        },\n        spanLimits: {\n            attributeValueLengthLimit: getEnv().OTEL_SPAN_ATTRIBUTE_VALUE_LENGTH_LIMIT,\n            attributeCountLimit: getEnv().OTEL_SPAN_ATTRIBUTE_COUNT_LIMIT,\n            linkCountLimit: getEnv().OTEL_SPAN_LINK_COUNT_LIMIT,\n            eventCountLimit: getEnv().OTEL_SPAN_EVENT_COUNT_LIMIT,\n            attributePerEventCountLimit: getEnv().OTEL_SPAN_ATTRIBUTE_PER_EVENT_COUNT_LIMIT,\n            attributePerLinkCountLimit: getEnv().OTEL_SPAN_ATTRIBUTE_PER_LINK_COUNT_LIMIT,\n        },\n    };\n}\n/**\n * Based on environment, builds a sampler, complies with specification.\n * @param environment optional, by default uses getEnv(), but allows passing a value to reuse parsed environment\n */\nexport function buildSamplerFromEnv(environment) {\n    if (environment === void 0) { environment = getEnv(); }\n    switch (environment.OTEL_TRACES_SAMPLER) {\n        case TracesSamplerValues.AlwaysOn:\n            return new AlwaysOnSampler();\n        case TracesSamplerValues.AlwaysOff:\n            return new AlwaysOffSampler();\n        case TracesSamplerValues.ParentBasedAlwaysOn:\n            return new ParentBasedSampler({\n                root: new AlwaysOnSampler(),\n            });\n        case TracesSamplerValues.ParentBasedAlwaysOff:\n            return new ParentBasedSampler({\n                root: new AlwaysOffSampler(),\n            });\n        case TracesSamplerValues.TraceIdRatio:\n            return new TraceIdRatioBasedSampler(getSamplerProbabilityFromEnv(environment));\n        case TracesSamplerValues.ParentBasedTraceIdRatio:\n            return new ParentBasedSampler({\n                root: new TraceIdRatioBasedSampler(getSamplerProbabilityFromEnv(environment)),\n            });\n        default:\n            diag.error(\"OTEL_TRACES_SAMPLER value \\\"\" + environment.OTEL_TRACES_SAMPLER + \" invalid, defaulting to \" + FALLBACK_OTEL_TRACES_SAMPLER + \"\\\".\");\n            return new AlwaysOnSampler();\n    }\n}\nfunction getSamplerProbabilityFromEnv(environment) {\n    if (environment.OTEL_TRACES_SAMPLER_ARG === undefined ||\n        environment.OTEL_TRACES_SAMPLER_ARG === '') {\n        diag.error(\"OTEL_TRACES_SAMPLER_ARG is blank, defaulting to \" + DEFAULT_RATIO + \".\");\n        return DEFAULT_RATIO;\n    }\n    var probability = Number(environment.OTEL_TRACES_SAMPLER_ARG);\n    if (isNaN(probability)) {\n        diag.error(\"OTEL_TRACES_SAMPLER_ARG=\" + environment.OTEL_TRACES_SAMPLER_ARG + \" was given, but it is invalid, defaulting to \" + DEFAULT_RATIO + \".\");\n        return DEFAULT_RATIO;\n    }\n    if (probability < 0 || probability > 1) {\n        diag.error(\"OTEL_TRACES_SAMPLER_ARG=\" + environment.OTEL_TRACES_SAMPLER_ARG + \" was given, but it is out of range ([0..1]), defaulting to \" + DEFAULT_RATIO + \".\");\n        return DEFAULT_RATIO;\n    }\n    return probability;\n}\n//# sourceMappingURL=config.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { buildSamplerFromEnv, loadDefaultConfig } from './config';\nimport { DEFAULT_ATTRIBUTE_COUNT_LIMIT, DEFAULT_ATTRIBUTE_VALUE_LENGTH_LIMIT, getEnvWithoutDefaults, } from '@opentelemetry/core';\n/**\n * Function to merge Default configuration (as specified in './config') with\n * user provided configurations.\n */\nexport function mergeConfig(userConfig) {\n    var perInstanceDefaults = {\n        sampler: buildSamplerFromEnv(),\n    };\n    var DEFAULT_CONFIG = loadDefaultConfig();\n    var target = Object.assign({}, DEFAULT_CONFIG, perInstanceDefaults, userConfig);\n    target.generalLimits = Object.assign({}, DEFAULT_CONFIG.generalLimits, userConfig.generalLimits || {});\n    target.spanLimits = Object.assign({}, DEFAULT_CONFIG.spanLimits, userConfig.spanLimits || {});\n    return target;\n}\n/**\n * When general limits are provided and model specific limits are not,\n * configures the model specific limits by using the values from the general ones.\n * @param userConfig User provided tracer configuration\n */\nexport function reconfigureLimits(userConfig) {\n    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m;\n    var spanLimits = Object.assign({}, userConfig.spanLimits);\n    var parsedEnvConfig = getEnvWithoutDefaults();\n    /**\n     * Reassign span attribute count limit to use first non null value defined by user or use default value\n     */\n    spanLimits.attributeCountLimit =\n        (_f = (_e = (_d = (_b = (_a = userConfig.spanLimits) === null || _a === void 0 ? void 0 : _a.attributeCountLimit) !== null && _b !== void 0 ? _b : (_c = userConfig.generalLimits) === null || _c === void 0 ? void 0 : _c.attributeCountLimit) !== null && _d !== void 0 ? _d : parsedEnvConfig.OTEL_SPAN_ATTRIBUTE_COUNT_LIMIT) !== null && _e !== void 0 ? _e : parsedEnvConfig.OTEL_ATTRIBUTE_COUNT_LIMIT) !== null && _f !== void 0 ? _f : DEFAULT_ATTRIBUTE_COUNT_LIMIT;\n    /**\n     * Reassign span attribute value length limit to use first non null value defined by user or use default value\n     */\n    spanLimits.attributeValueLengthLimit =\n        (_m = (_l = (_k = (_h = (_g = userConfig.spanLimits) === null || _g === void 0 ? void 0 : _g.attributeValueLengthLimit) !== null && _h !== void 0 ? _h : (_j = userConfig.generalLimits) === null || _j === void 0 ? void 0 : _j.attributeValueLengthLimit) !== null && _k !== void 0 ? _k : parsedEnvConfig.OTEL_SPAN_ATTRIBUTE_VALUE_LENGTH_LIMIT) !== null && _l !== void 0 ? _l : parsedEnvConfig.OTEL_ATTRIBUTE_VALUE_LENGTH_LIMIT) !== null && _m !== void 0 ? _m : DEFAULT_ATTRIBUTE_VALUE_LENGTH_LIMIT;\n    return Object.assign({}, userConfig, { spanLimits: spanLimits });\n}\n//# sourceMappingURL=utility.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { context, diag, TraceFlags } from '@opentelemetry/api';\nimport { BindOnceFuture, ExportResultCode, getEnv, globalErrorHandler, suppressTracing, unrefTimer, } from '@opentelemetry/core';\n/**\n * Implementation of the {@link SpanProcessor} that batches spans exported by\n * the SDK then pushes them to the exporter pipeline.\n */\nvar BatchSpanProcessorBase = /** @class */ (function () {\n    function BatchSpanProcessorBase(_exporter, config) {\n        this._exporter = _exporter;\n        this._isExporting = false;\n        this._finishedSpans = [];\n        this._droppedSpansCount = 0;\n        var env = getEnv();\n        this._maxExportBatchSize =\n            typeof (config === null || config === void 0 ? void 0 : config.maxExportBatchSize) === 'number'\n                ? config.maxExportBatchSize\n                : env.OTEL_BSP_MAX_EXPORT_BATCH_SIZE;\n        this._maxQueueSize =\n            typeof (config === null || config === void 0 ? void 0 : config.maxQueueSize) === 'number'\n                ? config.maxQueueSize\n                : env.OTEL_BSP_MAX_QUEUE_SIZE;\n        this._scheduledDelayMillis =\n            typeof (config === null || config === void 0 ? void 0 : config.scheduledDelayMillis) === 'number'\n                ? config.scheduledDelayMillis\n                : env.OTEL_BSP_SCHEDULE_DELAY;\n        this._exportTimeoutMillis =\n            typeof (config === null || config === void 0 ? void 0 : config.exportTimeoutMillis) === 'number'\n                ? config.exportTimeoutMillis\n                : env.OTEL_BSP_EXPORT_TIMEOUT;\n        this._shutdownOnce = new BindOnceFuture(this._shutdown, this);\n        if (this._maxExportBatchSize > this._maxQueueSize) {\n            diag.warn('BatchSpanProcessor: maxExportBatchSize must be smaller or equal to maxQueueSize, setting maxExportBatchSize to match maxQueueSize');\n            this._maxExportBatchSize = this._maxQueueSize;\n        }\n    }\n    BatchSpanProcessorBase.prototype.forceFlush = function () {\n        if (this._shutdownOnce.isCalled) {\n            return this._shutdownOnce.promise;\n        }\n        return this._flushAll();\n    };\n    // does nothing.\n    BatchSpanProcessorBase.prototype.onStart = function (_span, _parentContext) { };\n    BatchSpanProcessorBase.prototype.onEnd = function (span) {\n        if (this._shutdownOnce.isCalled) {\n            return;\n        }\n        if ((span.spanContext().traceFlags & TraceFlags.SAMPLED) === 0) {\n            return;\n        }\n        this._addToBuffer(span);\n    };\n    BatchSpanProcessorBase.prototype.shutdown = function () {\n        return this._shutdownOnce.call();\n    };\n    BatchSpanProcessorBase.prototype._shutdown = function () {\n        var _this = this;\n        return Promise.resolve()\n            .then(function () {\n            return _this.onShutdown();\n        })\n            .then(function () {\n            return _this._flushAll();\n        })\n            .then(function () {\n            return _this._exporter.shutdown();\n        });\n    };\n    /** Add a span in the buffer. */\n    BatchSpanProcessorBase.prototype._addToBuffer = function (span) {\n        if (this._finishedSpans.length >= this._maxQueueSize) {\n            // limit reached, drop span\n            if (this._droppedSpansCount === 0) {\n                diag.debug('maxQueueSize reached, dropping spans');\n            }\n            this._droppedSpansCount++;\n            return;\n        }\n        if (this._droppedSpansCount > 0) {\n            // some spans were dropped, log once with count of spans dropped\n            diag.warn(\"Dropped \" + this._droppedSpansCount + \" spans because maxQueueSize reached\");\n            this._droppedSpansCount = 0;\n        }\n        this._finishedSpans.push(span);\n        this._maybeStartTimer();\n    };\n    /**\n     * Send all spans to the exporter respecting the batch size limit\n     * This function is used only on forceFlush or shutdown,\n     * for all other cases _flush should be used\n     * */\n    BatchSpanProcessorBase.prototype._flushAll = function () {\n        var _this = this;\n        return new Promise(function (resolve, reject) {\n            var promises = [];\n            // calculate number of batches\n            var count = Math.ceil(_this._finishedSpans.length / _this._maxExportBatchSize);\n            for (var i = 0, j = count; i < j; i++) {\n                promises.push(_this._flushOneBatch());\n            }\n            Promise.all(promises)\n                .then(function () {\n                resolve();\n            })\n                .catch(reject);\n        });\n    };\n    BatchSpanProcessorBase.prototype._flushOneBatch = function () {\n        var _this = this;\n        this._clearTimer();\n        if (this._finishedSpans.length === 0) {\n            return Promise.resolve();\n        }\n        return new Promise(function (resolve, reject) {\n            var timer = setTimeout(function () {\n                // don't wait anymore for export, this way the next batch can start\n                reject(new Error('Timeout'));\n            }, _this._exportTimeoutMillis);\n            // prevent downstream exporter calls from generating spans\n            context.with(suppressTracing(context.active()), function () {\n                // Reset the finished spans buffer here because the next invocations of the _flush method\n                // could pass the same finished spans to the exporter if the buffer is cleared\n                // outside the execution of this callback.\n                var spans;\n                if (_this._finishedSpans.length <= _this._maxExportBatchSize) {\n                    spans = _this._finishedSpans;\n                    _this._finishedSpans = [];\n                }\n                else {\n                    spans = _this._finishedSpans.splice(0, _this._maxExportBatchSize);\n                }\n                var doExport = function () {\n                    return _this._exporter.export(spans, function (result) {\n                        var _a;\n                        clearTimeout(timer);\n                        if (result.code === ExportResultCode.SUCCESS) {\n                            resolve();\n                        }\n                        else {\n                            reject((_a = result.error) !== null && _a !== void 0 ? _a : new Error('BatchSpanProcessor: span export failed'));\n                        }\n                    });\n                };\n                var pendingResources = null;\n                for (var i = 0, len = spans.length; i < len; i++) {\n                    var span = spans[i];\n                    if (span.resource.asyncAttributesPending &&\n                        span.resource.waitForAsyncAttributes) {\n                        pendingResources !== null && pendingResources !== void 0 ? pendingResources : (pendingResources = []);\n                        pendingResources.push(span.resource.waitForAsyncAttributes());\n                    }\n                }\n                // Avoid scheduling a promise to make the behavior more predictable and easier to test\n                if (pendingResources === null) {\n                    doExport();\n                }\n                else {\n                    Promise.all(pendingResources).then(doExport, function (err) {\n                        globalErrorHandler(err);\n                        reject(err);\n                    });\n                }\n            });\n        });\n    };\n    BatchSpanProcessorBase.prototype._maybeStartTimer = function () {\n        var _this = this;\n        if (this._isExporting)\n            return;\n        var flush = function () {\n            _this._isExporting = true;\n            _this._flushOneBatch()\n                .finally(function () {\n                _this._isExporting = false;\n                if (_this._finishedSpans.length > 0) {\n                    _this._clearTimer();\n                    _this._maybeStartTimer();\n                }\n            })\n                .catch(function (e) {\n                _this._isExporting = false;\n                globalErrorHandler(e);\n            });\n        };\n        // we only wait if the queue doesn't have enough elements yet\n        if (this._finishedSpans.length >= this._maxExportBatchSize) {\n            return flush();\n        }\n        if (this._timer !== undefined)\n            return;\n        this._timer = setTimeout(function () { return flush(); }, this._scheduledDelayMillis);\n        unrefTimer(this._timer);\n    };\n    BatchSpanProcessorBase.prototype._clearTimer = function () {\n        if (this._timer !== undefined) {\n            clearTimeout(this._timer);\n            this._timer = undefined;\n        }\n    };\n    return BatchSpanProcessorBase;\n}());\nexport { BatchSpanProcessorBase };\n//# sourceMappingURL=BatchSpanProcessorBase.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport { BatchSpanProcessorBase } from '../../../export/BatchSpanProcessorBase';\nvar BatchSpanProcessor = /** @class */ (function (_super) {\n    __extends(BatchSpanProcessor, _super);\n    function BatchSpanProcessor(_exporter, config) {\n        var _this = _super.call(this, _exporter, config) || this;\n        _this.onInit(config);\n        return _this;\n    }\n    BatchSpanProcessor.prototype.onInit = function (config) {\n        var _this = this;\n        if ((config === null || config === void 0 ? void 0 : config.disableAutoFlushOnDocumentHide) !== true &&\n            typeof document !== 'undefined') {\n            this._visibilityChangeListener = function () {\n                if (document.visibilityState === 'hidden') {\n                    void _this.forceFlush();\n                }\n            };\n            this._pageHideListener = function () {\n                void _this.forceFlush();\n            };\n            document.addEventListener('visibilitychange', this._visibilityChangeListener);\n            // use 'pagehide' event as a fallback for Safari; see https://bugs.webkit.org/show_bug.cgi?id=116769\n            document.addEventListener('pagehide', this._pageHideListener);\n        }\n    };\n    BatchSpanProcessor.prototype.onShutdown = function () {\n        if (typeof document !== 'undefined') {\n            if (this._visibilityChangeListener) {\n                document.removeEventListener('visibilitychange', this._visibilityChangeListener);\n            }\n            if (this._pageHideListener) {\n                document.removeEventListener('pagehide', this._pageHideListener);\n            }\n        }\n    };\n    return BatchSpanProcessor;\n}(BatchSpanProcessorBase));\nexport { BatchSpanProcessor };\n//# sourceMappingURL=BatchSpanProcessor.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar SPAN_ID_BYTES = 8;\nvar TRACE_ID_BYTES = 16;\nvar RandomIdGenerator = /** @class */ (function () {\n    function RandomIdGenerator() {\n        /**\n         * Returns a random 16-byte trace ID formatted/encoded as a 32 lowercase hex\n         * characters corresponding to 128 bits.\n         */\n        this.generateTraceId = getIdGenerator(TRACE_ID_BYTES);\n        /**\n         * Returns a random 8-byte span ID formatted/encoded as a 16 lowercase hex\n         * characters corresponding to 64 bits.\n         */\n        this.generateSpanId = getIdGenerator(SPAN_ID_BYTES);\n    }\n    return RandomIdGenerator;\n}());\nexport { RandomIdGenerator };\nvar SHARED_CHAR_CODES_ARRAY = Array(32);\nfunction getIdGenerator(bytes) {\n    return function generateId() {\n        for (var i = 0; i < bytes * 2; i++) {\n            SHARED_CHAR_CODES_ARRAY[i] = Math.floor(Math.random() * 16) + 48;\n            // valid hex characters in the range 48-57 and 97-102\n            if (SHARED_CHAR_CODES_ARRAY[i] >= 58) {\n                SHARED_CHAR_CODES_ARRAY[i] += 39;\n            }\n        }\n        return String.fromCharCode.apply(null, SHARED_CHAR_CODES_ARRAY.slice(0, bytes * 2));\n    };\n}\n//# sourceMappingURL=RandomIdGenerator.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport * as api from '@opentelemetry/api';\nimport { sanitizeAttributes, isTracingSuppressed, } from '@opentelemetry/core';\nimport { Span } from './Span';\nimport { mergeConfig } from './utility';\nimport { RandomIdGenerator } from './platform';\n/**\n * This class represents a basic tracer.\n */\nvar Tracer = /** @class */ (function () {\n    /**\n     * Constructs a new Tracer instance.\n     */\n    function Tracer(instrumentationLibrary, config, _tracerProvider) {\n        this._tracerProvider = _tracerProvider;\n        var localConfig = mergeConfig(config);\n        this._sampler = localConfig.sampler;\n        this._generalLimits = localConfig.generalLimits;\n        this._spanLimits = localConfig.spanLimits;\n        this._idGenerator = config.idGenerator || new RandomIdGenerator();\n        this.resource = _tracerProvider.resource;\n        this.instrumentationLibrary = instrumentationLibrary;\n    }\n    /**\n     * Starts a new Span or returns the default NoopSpan based on the sampling\n     * decision.\n     */\n    Tracer.prototype.startSpan = function (name, options, context) {\n        var _a, _b, _c;\n        if (options === void 0) { options = {}; }\n        if (context === void 0) { context = api.context.active(); }\n        // remove span from context in case a root span is requested via options\n        if (options.root) {\n            context = api.trace.deleteSpan(context);\n        }\n        var parentSpan = api.trace.getSpan(context);\n        if (isTracingSuppressed(context)) {\n            api.diag.debug('Instrumentation suppressed, returning Noop Span');\n            var nonRecordingSpan = api.trace.wrapSpanContext(api.INVALID_SPAN_CONTEXT);\n            return nonRecordingSpan;\n        }\n        var parentSpanContext = parentSpan === null || parentSpan === void 0 ? void 0 : parentSpan.spanContext();\n        var spanId = this._idGenerator.generateSpanId();\n        var traceId;\n        var traceState;\n        var parentSpanId;\n        if (!parentSpanContext ||\n            !api.trace.isSpanContextValid(parentSpanContext)) {\n            // New root span.\n            traceId = this._idGenerator.generateTraceId();\n        }\n        else {\n            // New child span.\n            traceId = parentSpanContext.traceId;\n            traceState = parentSpanContext.traceState;\n            parentSpanId = parentSpanContext.spanId;\n        }\n        var spanKind = (_a = options.kind) !== null && _a !== void 0 ? _a : api.SpanKind.INTERNAL;\n        var links = ((_b = options.links) !== null && _b !== void 0 ? _b : []).map(function (link) {\n            return {\n                context: link.context,\n                attributes: sanitizeAttributes(link.attributes),\n            };\n        });\n        var attributes = sanitizeAttributes(options.attributes);\n        // make sampling decision\n        var samplingResult = this._sampler.shouldSample(context, traceId, name, spanKind, attributes, links);\n        traceState = (_c = samplingResult.traceState) !== null && _c !== void 0 ? _c : traceState;\n        var traceFlags = samplingResult.decision === api.SamplingDecision.RECORD_AND_SAMPLED\n            ? api.TraceFlags.SAMPLED\n            : api.TraceFlags.NONE;\n        var spanContext = { traceId: traceId, spanId: spanId, traceFlags: traceFlags, traceState: traceState };\n        if (samplingResult.decision === api.SamplingDecision.NOT_RECORD) {\n            api.diag.debug('Recording is off, propagating context in a non-recording span');\n            var nonRecordingSpan = api.trace.wrapSpanContext(spanContext);\n            return nonRecordingSpan;\n        }\n        // Set initial span attributes. The attributes object may have been mutated\n        // by the sampler, so we sanitize the merged attributes before setting them.\n        var initAttributes = sanitizeAttributes(Object.assign(attributes, samplingResult.attributes));\n        var span = new Span(this, context, name, spanContext, spanKind, parentSpanId, links, options.startTime, undefined, initAttributes);\n        return span;\n    };\n    Tracer.prototype.startActiveSpan = function (name, arg2, arg3, arg4) {\n        var opts;\n        var ctx;\n        var fn;\n        if (arguments.length < 2) {\n            return;\n        }\n        else if (arguments.length === 2) {\n            fn = arg2;\n        }\n        else if (arguments.length === 3) {\n            opts = arg2;\n            fn = arg3;\n        }\n        else {\n            opts = arg2;\n            ctx = arg3;\n            fn = arg4;\n        }\n        var parentContext = ctx !== null && ctx !== void 0 ? ctx : api.context.active();\n        var span = this.startSpan(name, opts, parentContext);\n        var contextWithSpanSet = api.trace.setSpan(parentContext, span);\n        return api.context.with(contextWithSpanSet, fn, undefined, span);\n    };\n    /** Returns the active {@link GeneralLimits}. */\n    Tracer.prototype.getGeneralLimits = function () {\n        return this._generalLimits;\n    };\n    /** Returns the active {@link SpanLimits}. */\n    Tracer.prototype.getSpanLimits = function () {\n        return this._spanLimits;\n    };\n    Tracer.prototype.getActiveSpanProcessor = function () {\n        return this._tracerProvider.getActiveSpanProcessor();\n    };\n    return Tracer;\n}());\nexport { Tracer };\n//# sourceMappingURL=Tracer.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport function defaultServiceName() {\n    return 'unknown_service';\n}\n//# sourceMappingURL=default-service-name.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nvar __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nimport { diag } from '@opentelemetry/api';\nimport { SEMRESATTRS_SERVICE_NAME, SEMRESATTRS_TELEMETRY_SDK_LANGUAGE, SEMRESATTRS_TELEMETRY_SDK_NAME, SEMRESATTRS_TELEMETRY_SDK_VERSION, } from '@opentelemetry/semantic-conventions';\nimport { SDK_INFO } from '@opentelemetry/core';\nimport { defaultServiceName } from './platform';\n/**\n * A Resource describes the entity for which a signals (metrics or trace) are\n * collected.\n */\nvar Resource = /** @class */ (function () {\n    function Resource(\n    /**\n     * A dictionary of attributes with string keys and values that provide\n     * information about the entity as numbers, strings or booleans\n     * TODO: Consider to add check/validation on attributes.\n     */\n    attributes, asyncAttributesPromise) {\n        var _this = this;\n        var _a;\n        this._attributes = attributes;\n        this.asyncAttributesPending = asyncAttributesPromise != null;\n        this._syncAttributes = (_a = this._attributes) !== null && _a !== void 0 ? _a : {};\n        this._asyncAttributesPromise = asyncAttributesPromise === null || asyncAttributesPromise === void 0 ? void 0 : asyncAttributesPromise.then(function (asyncAttributes) {\n            _this._attributes = Object.assign({}, _this._attributes, asyncAttributes);\n            _this.asyncAttributesPending = false;\n            return asyncAttributes;\n        }, function (err) {\n            diag.debug(\"a resource's async attributes promise rejected: %s\", err);\n            _this.asyncAttributesPending = false;\n            return {};\n        });\n    }\n    /**\n     * Returns an empty Resource\n     */\n    Resource.empty = function () {\n        return Resource.EMPTY;\n    };\n    /**\n     * Returns a Resource that identifies the SDK in use.\n     */\n    Resource.default = function () {\n        var _a;\n        return new Resource((_a = {},\n            _a[SEMRESATTRS_SERVICE_NAME] = defaultServiceName(),\n            _a[SEMRESATTRS_TELEMETRY_SDK_LANGUAGE] = SDK_INFO[SEMRESATTRS_TELEMETRY_SDK_LANGUAGE],\n            _a[SEMRESATTRS_TELEMETRY_SDK_NAME] = SDK_INFO[SEMRESATTRS_TELEMETRY_SDK_NAME],\n            _a[SEMRESATTRS_TELEMETRY_SDK_VERSION] = SDK_INFO[SEMRESATTRS_TELEMETRY_SDK_VERSION],\n            _a));\n    };\n    Object.defineProperty(Resource.prototype, \"attributes\", {\n        get: function () {\n            var _a;\n            if (this.asyncAttributesPending) {\n                diag.error('Accessing resource attributes before async attributes settled');\n            }\n            return (_a = this._attributes) !== null && _a !== void 0 ? _a : {};\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * Returns a promise that will never be rejected. Resolves when all async attributes have finished being added to\n     * this Resource's attributes. This is useful in exporters to block until resource detection\n     * has finished.\n     */\n    Resource.prototype.waitForAsyncAttributes = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (!this.asyncAttributesPending) return [3 /*break*/, 2];\n                        return [4 /*yield*/, this._asyncAttributesPromise];\n                    case 1:\n                        _a.sent();\n                        _a.label = 2;\n                    case 2: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Returns a new, merged {@link Resource} by merging the current Resource\n     * with the other Resource. In case of a collision, other Resource takes\n     * precedence.\n     *\n     * @param other the Resource that will be merged with this.\n     * @returns the newly merged Resource.\n     */\n    Resource.prototype.merge = function (other) {\n        var _this = this;\n        var _a;\n        if (!other)\n            return this;\n        // SpanAttributes from other resource overwrite attributes from this resource.\n        var mergedSyncAttributes = __assign(__assign({}, this._syncAttributes), ((_a = other._syncAttributes) !== null && _a !== void 0 ? _a : other.attributes));\n        if (!this._asyncAttributesPromise &&\n            !other._asyncAttributesPromise) {\n            return new Resource(mergedSyncAttributes);\n        }\n        var mergedAttributesPromise = Promise.all([\n            this._asyncAttributesPromise,\n            other._asyncAttributesPromise,\n        ]).then(function (_a) {\n            var _b;\n            var _c = __read(_a, 2), thisAsyncAttributes = _c[0], otherAsyncAttributes = _c[1];\n            return __assign(__assign(__assign(__assign({}, _this._syncAttributes), thisAsyncAttributes), ((_b = other._syncAttributes) !== null && _b !== void 0 ? _b : other.attributes)), otherAsyncAttributes);\n        });\n        return new Resource(mergedSyncAttributes, mergedAttributesPromise);\n    };\n    Resource.EMPTY = new Resource({});\n    return Resource;\n}());\nexport { Resource };\n//# sourceMappingURL=Resource.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __values = (this && this.__values) || function(o) {\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\n    if (m) return m.call(o);\n    if (o && typeof o.length === \"number\") return {\n        next: function () {\n            if (o && i >= o.length) o = void 0;\n            return { value: o && o[i++], done: !o };\n        }\n    };\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\nimport { globalErrorHandler } from '@opentelemetry/core';\n/**\n * Implementation of the {@link SpanProcessor} that simply forwards all\n * received events to a list of {@link SpanProcessor}s.\n */\nvar MultiSpanProcessor = /** @class */ (function () {\n    function MultiSpanProcessor(_spanProcessors) {\n        this._spanProcessors = _spanProcessors;\n    }\n    MultiSpanProcessor.prototype.forceFlush = function () {\n        var e_1, _a;\n        var promises = [];\n        try {\n            for (var _b = __values(this._spanProcessors), _c = _b.next(); !_c.done; _c = _b.next()) {\n                var spanProcessor = _c.value;\n                promises.push(spanProcessor.forceFlush());\n            }\n        }\n        catch (e_1_1) { e_1 = { error: e_1_1 }; }\n        finally {\n            try {\n                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n            }\n            finally { if (e_1) throw e_1.error; }\n        }\n        return new Promise(function (resolve) {\n            Promise.all(promises)\n                .then(function () {\n                resolve();\n            })\n                .catch(function (error) {\n                globalErrorHandler(error || new Error('MultiSpanProcessor: forceFlush failed'));\n                resolve();\n            });\n        });\n    };\n    MultiSpanProcessor.prototype.onStart = function (span, context) {\n        var e_2, _a;\n        try {\n            for (var _b = __values(this._spanProcessors), _c = _b.next(); !_c.done; _c = _b.next()) {\n                var spanProcessor = _c.value;\n                spanProcessor.onStart(span, context);\n            }\n        }\n        catch (e_2_1) { e_2 = { error: e_2_1 }; }\n        finally {\n            try {\n                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n            }\n            finally { if (e_2) throw e_2.error; }\n        }\n    };\n    MultiSpanProcessor.prototype.onEnd = function (span) {\n        var e_3, _a;\n        try {\n            for (var _b = __values(this._spanProcessors), _c = _b.next(); !_c.done; _c = _b.next()) {\n                var spanProcessor = _c.value;\n                spanProcessor.onEnd(span);\n            }\n        }\n        catch (e_3_1) { e_3 = { error: e_3_1 }; }\n        finally {\n            try {\n                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n            }\n            finally { if (e_3) throw e_3.error; }\n        }\n    };\n    MultiSpanProcessor.prototype.shutdown = function () {\n        var e_4, _a;\n        var promises = [];\n        try {\n            for (var _b = __values(this._spanProcessors), _c = _b.next(); !_c.done; _c = _b.next()) {\n                var spanProcessor = _c.value;\n                promises.push(spanProcessor.shutdown());\n            }\n        }\n        catch (e_4_1) { e_4 = { error: e_4_1 }; }\n        finally {\n            try {\n                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n            }\n            finally { if (e_4) throw e_4.error; }\n        }\n        return new Promise(function (resolve, reject) {\n            Promise.all(promises).then(function () {\n                resolve();\n            }, reject);\n        });\n    };\n    return MultiSpanProcessor;\n}());\nexport { MultiSpanProcessor };\n//# sourceMappingURL=MultiSpanProcessor.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/** No-op implementation of SpanProcessor */\nvar NoopSpanProcessor = /** @class */ (function () {\n    function NoopSpanProcessor() {\n    }\n    NoopSpanProcessor.prototype.onStart = function (_span, _context) { };\n    NoopSpanProcessor.prototype.onEnd = function (_span) { };\n    NoopSpanProcessor.prototype.shutdown = function () {\n        return Promise.resolve();\n    };\n    NoopSpanProcessor.prototype.forceFlush = function () {\n        return Promise.resolve();\n    };\n    return NoopSpanProcessor;\n}());\nexport { NoopSpanProcessor };\n//# sourceMappingURL=NoopSpanProcessor.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { context, diag, propagation, trace, } from '@opentelemetry/api';\nimport { CompositePropagator, W3CBaggagePropagator, W3CTraceContextPropagator, getEnv, merge, } from '@opentelemetry/core';\nimport { Resource } from '@opentelemetry/resources';\nimport { Tracer } from '.';\nimport { loadDefaultConfig } from './config';\nimport { MultiSpanProcessor } from './MultiSpanProcessor';\nimport { NoopSpanProcessor } from './export/NoopSpanProcessor';\nimport { BatchSpanProcessor } from './platform';\nimport { reconfigureLimits } from './utility';\nexport var ForceFlushState;\n(function (ForceFlushState) {\n    ForceFlushState[ForceFlushState[\"resolved\"] = 0] = \"resolved\";\n    ForceFlushState[ForceFlushState[\"timeout\"] = 1] = \"timeout\";\n    ForceFlushState[ForceFlushState[\"error\"] = 2] = \"error\";\n    ForceFlushState[ForceFlushState[\"unresolved\"] = 3] = \"unresolved\";\n})(ForceFlushState || (ForceFlushState = {}));\n/**\n * This class represents a basic tracer provider which platform libraries can extend\n */\nvar BasicTracerProvider = /** @class */ (function () {\n    function BasicTracerProvider(config) {\n        if (config === void 0) { config = {}; }\n        var _a;\n        this._registeredSpanProcessors = [];\n        this._tracers = new Map();\n        var mergedConfig = merge({}, loadDefaultConfig(), reconfigureLimits(config));\n        this.resource = (_a = mergedConfig.resource) !== null && _a !== void 0 ? _a : Resource.empty();\n        this.resource = Resource.default().merge(this.resource);\n        this._config = Object.assign({}, mergedConfig, {\n            resource: this.resource,\n        });\n        var defaultExporter = this._buildExporterFromEnv();\n        if (defaultExporter !== undefined) {\n            var batchProcessor = new BatchSpanProcessor(defaultExporter);\n            this.activeSpanProcessor = batchProcessor;\n        }\n        else {\n            this.activeSpanProcessor = new NoopSpanProcessor();\n        }\n    }\n    BasicTracerProvider.prototype.getTracer = function (name, version, options) {\n        var key = name + \"@\" + (version || '') + \":\" + ((options === null || options === void 0 ? void 0 : options.schemaUrl) || '');\n        if (!this._tracers.has(key)) {\n            this._tracers.set(key, new Tracer({ name: name, version: version, schemaUrl: options === null || options === void 0 ? void 0 : options.schemaUrl }, this._config, this));\n        }\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        return this._tracers.get(key);\n    };\n    /**\n     * Adds a new {@link SpanProcessor} to this tracer.\n     * @param spanProcessor the new SpanProcessor to be added.\n     */\n    BasicTracerProvider.prototype.addSpanProcessor = function (spanProcessor) {\n        if (this._registeredSpanProcessors.length === 0) {\n            // since we might have enabled by default a batchProcessor, we disable it\n            // before adding the new one\n            this.activeSpanProcessor\n                .shutdown()\n                .catch(function (err) {\n                return diag.error('Error while trying to shutdown current span processor', err);\n            });\n        }\n        this._registeredSpanProcessors.push(spanProcessor);\n        this.activeSpanProcessor = new MultiSpanProcessor(this._registeredSpanProcessors);\n    };\n    BasicTracerProvider.prototype.getActiveSpanProcessor = function () {\n        return this.activeSpanProcessor;\n    };\n    /**\n     * Register this TracerProvider for use with the OpenTelemetry API.\n     * Undefined values may be replaced with defaults, and\n     * null values will be skipped.\n     *\n     * @param config Configuration object for SDK registration\n     */\n    BasicTracerProvider.prototype.register = function (config) {\n        if (config === void 0) { config = {}; }\n        trace.setGlobalTracerProvider(this);\n        if (config.propagator === undefined) {\n            config.propagator = this._buildPropagatorFromEnv();\n        }\n        if (config.contextManager) {\n            context.setGlobalContextManager(config.contextManager);\n        }\n        if (config.propagator) {\n            propagation.setGlobalPropagator(config.propagator);\n        }\n    };\n    BasicTracerProvider.prototype.forceFlush = function () {\n        var timeout = this._config.forceFlushTimeoutMillis;\n        var promises = this._registeredSpanProcessors.map(function (spanProcessor) {\n            return new Promise(function (resolve) {\n                var state;\n                var timeoutInterval = setTimeout(function () {\n                    resolve(new Error(\"Span processor did not completed within timeout period of \" + timeout + \" ms\"));\n                    state = ForceFlushState.timeout;\n                }, timeout);\n                spanProcessor\n                    .forceFlush()\n                    .then(function () {\n                    clearTimeout(timeoutInterval);\n                    if (state !== ForceFlushState.timeout) {\n                        state = ForceFlushState.resolved;\n                        resolve(state);\n                    }\n                })\n                    .catch(function (error) {\n                    clearTimeout(timeoutInterval);\n                    state = ForceFlushState.error;\n                    resolve(error);\n                });\n            });\n        });\n        return new Promise(function (resolve, reject) {\n            Promise.all(promises)\n                .then(function (results) {\n                var errors = results.filter(function (result) { return result !== ForceFlushState.resolved; });\n                if (errors.length > 0) {\n                    reject(errors);\n                }\n                else {\n                    resolve();\n                }\n            })\n                .catch(function (error) { return reject([error]); });\n        });\n    };\n    BasicTracerProvider.prototype.shutdown = function () {\n        return this.activeSpanProcessor.shutdown();\n    };\n    /**\n     * TS cannot yet infer the type of this.constructor:\n     * https://github.com/Microsoft/TypeScript/issues/3841#issuecomment-337560146\n     * There is no need to override either of the getters in your child class.\n     * The type of the registered component maps should be the same across all\n     * classes in the inheritance tree.\n     */\n    BasicTracerProvider.prototype._getPropagator = function (name) {\n        var _a;\n        return (_a = this.constructor._registeredPropagators.get(name)) === null || _a === void 0 ? void 0 : _a();\n    };\n    BasicTracerProvider.prototype._getSpanExporter = function (name) {\n        var _a;\n        return (_a = this.constructor._registeredExporters.get(name)) === null || _a === void 0 ? void 0 : _a();\n    };\n    BasicTracerProvider.prototype._buildPropagatorFromEnv = function () {\n        var _this = this;\n        // per spec, propagators from env must be deduplicated\n        var uniquePropagatorNames = Array.from(new Set(getEnv().OTEL_PROPAGATORS));\n        var propagators = uniquePropagatorNames.map(function (name) {\n            var propagator = _this._getPropagator(name);\n            if (!propagator) {\n                diag.warn(\"Propagator \\\"\" + name + \"\\\" requested through environment variable is unavailable.\");\n            }\n            return propagator;\n        });\n        var validPropagators = propagators.reduce(function (list, item) {\n            if (item) {\n                list.push(item);\n            }\n            return list;\n        }, []);\n        if (validPropagators.length === 0) {\n            return;\n        }\n        else if (uniquePropagatorNames.length === 1) {\n            return validPropagators[0];\n        }\n        else {\n            return new CompositePropagator({\n                propagators: validPropagators,\n            });\n        }\n    };\n    BasicTracerProvider.prototype._buildExporterFromEnv = function () {\n        var exporterName = getEnv().OTEL_TRACES_EXPORTER;\n        if (exporterName === 'none' || exporterName === '')\n            return;\n        var exporter = this._getSpanExporter(exporterName);\n        if (!exporter) {\n            diag.error(\"Exporter \\\"\" + exporterName + \"\\\" requested through environment variable is unavailable.\");\n        }\n        return exporter;\n    };\n    BasicTracerProvider._registeredPropagators = new Map([\n        ['tracecontext', function () { return new W3CTraceContextPropagator(); }],\n        ['baggage', function () { return new W3CBaggagePropagator(); }],\n    ]);\n    BasicTracerProvider._registeredExporters = new Map();\n    return BasicTracerProvider;\n}());\nexport { BasicTracerProvider };\n//# sourceMappingURL=BasicTracerProvider.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nimport { TraceFlags } from '@opentelemetry/api';\nimport { internal, ExportResultCode, globalErrorHandler, BindOnceFuture, } from '@opentelemetry/core';\n/**\n * An implementation of the {@link SpanProcessor} that converts the {@link Span}\n * to {@link ReadableSpan} and passes it to the configured exporter.\n *\n * Only spans that are sampled are converted.\n *\n * NOTE: This {@link SpanProcessor} exports every ended span individually instead of batching spans together, which causes significant performance overhead with most exporters. For production use, please consider using the {@link BatchSpanProcessor} instead.\n */\nvar SimpleSpanProcessor = /** @class */ (function () {\n    function SimpleSpanProcessor(_exporter) {\n        this._exporter = _exporter;\n        this._shutdownOnce = new BindOnceFuture(this._shutdown, this);\n        this._unresolvedExports = new Set();\n    }\n    SimpleSpanProcessor.prototype.forceFlush = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: \n                    // await unresolved resources before resolving\n                    return [4 /*yield*/, Promise.all(Array.from(this._unresolvedExports))];\n                    case 1:\n                        // await unresolved resources before resolving\n                        _a.sent();\n                        if (!this._exporter.forceFlush) return [3 /*break*/, 3];\n                        return [4 /*yield*/, this._exporter.forceFlush()];\n                    case 2:\n                        _a.sent();\n                        _a.label = 3;\n                    case 3: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    SimpleSpanProcessor.prototype.onStart = function (_span, _parentContext) { };\n    SimpleSpanProcessor.prototype.onEnd = function (span) {\n        var _this = this;\n        var _a, _b;\n        if (this._shutdownOnce.isCalled) {\n            return;\n        }\n        if ((span.spanContext().traceFlags & TraceFlags.SAMPLED) === 0) {\n            return;\n        }\n        var doExport = function () {\n            return internal\n                ._export(_this._exporter, [span])\n                .then(function (result) {\n                var _a;\n                if (result.code !== ExportResultCode.SUCCESS) {\n                    globalErrorHandler((_a = result.error) !== null && _a !== void 0 ? _a : new Error(\"SimpleSpanProcessor: span export failed (status \" + result + \")\"));\n                }\n            })\n                .catch(function (error) {\n                globalErrorHandler(error);\n            });\n        };\n        // Avoid scheduling a promise to make the behavior more predictable and easier to test\n        if (span.resource.asyncAttributesPending) {\n            var exportPromise_1 = (_b = (_a = span.resource).waitForAsyncAttributes) === null || _b === void 0 ? void 0 : _b.call(_a).then(function () {\n                if (exportPromise_1 != null) {\n                    _this._unresolvedExports.delete(exportPromise_1);\n                }\n                return doExport();\n            }, function (err) { return globalErrorHandler(err); });\n            // store the unresolved exports\n            if (exportPromise_1 != null) {\n                this._unresolvedExports.add(exportPromise_1);\n            }\n        }\n        else {\n            void doExport();\n        }\n    };\n    SimpleSpanProcessor.prototype.shutdown = function () {\n        return this._shutdownOnce.call();\n    };\n    SimpleSpanProcessor.prototype._shutdown = function () {\n        return this._exporter.shutdown();\n    };\n    return SimpleSpanProcessor;\n}());\nexport { SimpleSpanProcessor };\n//# sourceMappingURL=SimpleSpanProcessor.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nvar __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n        if (ar || !(i in from)) {\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n            ar[i] = from[i];\n        }\n    }\n    return to.concat(ar || Array.prototype.slice.call(from));\n};\nimport { ROOT_CONTEXT } from '@opentelemetry/api';\n/**\n * Stack Context Manager for managing the state in web\n * it doesn't fully support the async calls though\n */\nvar StackContextManager = /** @class */ (function () {\n    function StackContextManager() {\n        /**\n         * whether the context manager is enabled or not\n         */\n        this._enabled = false;\n        /**\n         * Keeps the reference to current context\n         */\n        this._currentContext = ROOT_CONTEXT;\n    }\n    /**\n     *\n     * @param context\n     * @param target Function to be executed within the context\n     */\n    // eslint-disable-next-line @typescript-eslint/ban-types\n    StackContextManager.prototype._bindFunction = function (context, target) {\n        if (context === void 0) { context = ROOT_CONTEXT; }\n        var manager = this;\n        var contextWrapper = function () {\n            var _this = this;\n            var args = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                args[_i] = arguments[_i];\n            }\n            return manager.with(context, function () { return target.apply(_this, args); });\n        };\n        Object.defineProperty(contextWrapper, 'length', {\n            enumerable: false,\n            configurable: true,\n            writable: false,\n            value: target.length,\n        });\n        return contextWrapper;\n    };\n    /**\n     * Returns the active context\n     */\n    StackContextManager.prototype.active = function () {\n        return this._currentContext;\n    };\n    /**\n     * Binds a the certain context or the active one to the target function and then returns the target\n     * @param context A context (span) to be bind to target\n     * @param target a function or event emitter. When target or one of its callbacks is called,\n     *  the provided context will be used as the active context for the duration of the call.\n     */\n    StackContextManager.prototype.bind = function (context, target) {\n        // if no specific context to propagate is given, we use the current one\n        if (context === undefined) {\n            context = this.active();\n        }\n        if (typeof target === 'function') {\n            return this._bindFunction(context, target);\n        }\n        return target;\n    };\n    /**\n     * Disable the context manager (clears the current context)\n     */\n    StackContextManager.prototype.disable = function () {\n        this._currentContext = ROOT_CONTEXT;\n        this._enabled = false;\n        return this;\n    };\n    /**\n     * Enables the context manager and creates a default(root) context\n     */\n    StackContextManager.prototype.enable = function () {\n        if (this._enabled) {\n            return this;\n        }\n        this._enabled = true;\n        this._currentContext = ROOT_CONTEXT;\n        return this;\n    };\n    /**\n     * Calls the callback function [fn] with the provided [context]. If [context] is undefined then it will use the window.\n     * The context will be set as active\n     * @param context\n     * @param fn Callback function\n     * @param thisArg optional receiver to be used for calling fn\n     * @param args optional arguments forwarded to fn\n     */\n    StackContextManager.prototype.with = function (context, fn, thisArg) {\n        var args = [];\n        for (var _i = 3; _i < arguments.length; _i++) {\n            args[_i - 3] = arguments[_i];\n        }\n        var previousContext = this._currentContext;\n        this._currentContext = context || ROOT_CONTEXT;\n        try {\n            return fn.call.apply(fn, __spreadArray([thisArg], __read(args), false));\n        }\n        finally {\n            this._currentContext = previousContext;\n        }\n    };\n    return StackContextManager;\n}());\nexport { StackContextManager };\n//# sourceMappingURL=StackContextManager.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport { BasicTracerProvider, } from '@opentelemetry/sdk-trace-base';\nimport { StackContextManager } from './StackContextManager';\n/**\n * This class represents a web tracer with {@link StackContextManager}\n */\nvar WebTracerProvider = /** @class */ (function (_super) {\n    __extends(WebTracerProvider, _super);\n    /**\n     * Constructs a new Tracer instance.\n     * @param config Web Tracer config\n     */\n    function WebTracerProvider(config) {\n        if (config === void 0) { config = {}; }\n        var _this = _super.call(this, config) || this;\n        if (config.contextManager) {\n            throw ('contextManager should be defined in register method not in' +\n                ' constructor');\n        }\n        if (config.propagator) {\n            throw 'propagator should be defined in register method not in constructor';\n        }\n        return _this;\n    }\n    /**\n     * Register this TracerProvider for use with the OpenTelemetry API.\n     * Undefined values may be replaced with defaults, and\n     * null values will be skipped.\n     *\n     * @param config Configuration object for SDK registration\n     */\n    WebTracerProvider.prototype.register = function (config) {\n        if (config === void 0) { config = {}; }\n        if (config.contextManager === undefined) {\n            config.contextManager = new StackContextManager();\n        }\n        if (config.contextManager) {\n            config.contextManager.enable();\n        }\n        _super.prototype.register.call(this, config);\n    };\n    return WebTracerProvider;\n}(BasicTracerProvider));\nexport { WebTracerProvider };\n//# sourceMappingURL=WebTracerProvider.js.map"],"names":["_globalThis","_typeof","globalThis","self","window","global","VERSION","re","_makeCompatibilityCheck","ownVersion","acceptedVersions","Set","rejectedVersions","myVersionMatch","match","ownVersionParsed","globalVersion","_reject","v","add","_accept","has","globalVersionMatch","globalVersionParsed","isCompatible","major","split","GLOBAL_OPENTELEMETRY_API_KEY","Symbol","for","_global","registerGlobal","type","instance","diag","allowOverride","_a","api","version","err","Error","error","stack","message","debug","getGlobal","_b","unregisterGlobal","__read","o","n","m","iterator","r","e","i","call","ar","next","done","push","value","__spreadArray","to","from","pack","arguments","length","l","Array","prototype","slice","concat","DiagComponentLogger","props","this","_namespace","namespace","args","_i","logProxy","info","warn","verbose","DiagLogLevel","funcName","logger","unshift","apply","createLogLevelDiagLogger","maxLevel","_filterFunc","theLevel","theFunc","bind","NONE","ALL","ERROR","WARN","INFO","DEBUG","VERBOSE","API_NAME","DiagAPI","_logProxy","setLogger","optionsOrLogLevel","_c","logLevel","oldLogger","newLogger","suppressOverrideMessage","disable","createComponentLogger","options","_instance","__values","s","TypeError","BaggageImpl","entries","_entries","Map","getEntry","key","entry","get","Object","assign","getAllEntries","map","setEntry","newBaggage","set","removeEntry","delete","removeEntries","e_1","keys","keys_1","keys_1_1","e_1_1","return","clear","baggageEntryMetadataSymbol","createBaggage","baggageEntryMetadataFromString","str","__TYPE__","toString","createContextKey","description","BaseContext","parentContext","_currentContext","getValue","setValue","context","deleteValue","ROOT_CONTEXT","__extends","extendStatics","d","b","setPrototypeOf","__proto__","p","hasOwnProperty","String","__","constructor","create","NoopMeter","createGauge","_name","_options","NOOP_GAUGE_METRIC","createHistogram","NOOP_HISTOGRAM_METRIC","createCounter","NOOP_COUNTER_METRIC","createUpDownCounter","NOOP_UP_DOWN_COUNTER_METRIC","createObservableGauge","NOOP_OBSERVABLE_GAUGE_METRIC","createObservableCounter","NOOP_OBSERVABLE_COUNTER_METRIC","createObservableUpDownCounter","NOOP_OBSERVABLE_UP_DOWN_COUNTER_METRIC","addBatchObservableCallback","_callback","_observables","removeBatchObservableCallback","NoopMetric","NoopCounterMetric","_super","_value","_attributes","NoopUpDownCounterMetric","NoopGaugeMetric","record","NoopHistogramMetric","NoopObservableMetric","addCallback","removeCallback","NoopObservableCounterMetric","NoopObservableGaugeMetric","NoopObservableUpDownCounterMetric","NOOP_METER","defaultTextMapGetter","carrier","defaultTextMapSetter","NoopContextManager","active","with","_context","fn","thisArg","target","enable","NOOP_CONTEXT_MANAGER","ContextAPI","getInstance","setGlobalContextManager","contextManager","_getContextManager","TraceFlags","INVALID_SPANID","INVALID_TRACEID","INVALID_SPAN_CONTEXT","traceId","spanId","traceFlags","NonRecordingSpan","_spanContext","spanContext","setAttribute","_key","setAttributes","addEvent","addLink","_link","addLinks","_links","setStatus","_status","updateName","end","_endTime","isRecording","recordException","_exception","_time","SPAN_KEY","getSpan","undefined","getActiveSpan","setSpan","span","deleteSpan","setSpanContext","getSpanContext","VALID_TRACEID_REGEX","VALID_SPANID_REGEX","isValidTraceId","test","isValidSpanId","isSpanContextValid","wrapSpanContext","contextApi","NoopTracer","startSpan","name","Boolean","root","parentFromContext","isSpanContext","startActiveSpan","arg2","arg3","arg4","opts","ctx","contextWithSpanSet","NOOP_TRACER","ProxyTracer","_provider","_getTracer","_fn","tracer","Reflect","_delegate","getDelegateTracer","NoopTracerProvider","getTracer","_version","NOOP_TRACER_PROVIDER","ProxyTracerProvider","getDelegate","setDelegate","delegate","SamplingDecision","SpanKind","SpanStatusCode","exports","NoopMeterProvider","getMeter","NOOP_METER_PROVIDER","MetricsAPI","setGlobalMeterProvider","provider","getMeterProvider","NoopTextMapPropagator","inject","_carrier","extract","fields","BAGGAGE_KEY","getBaggage","getActiveBaggage","setBaggage","baggage","deleteBaggage","NOOP_TEXT_MAP_PROPAGATOR","PropagationAPI","setGlobalPropagator","propagator","setter","_getGlobalPropagator","getter","propagation","TraceAPI","_proxyTracerProvider","setGlobalTracerProvider","success","getTracerProvider","trace","SeverityNumber","NoopLogger","emit","_logRecord","NOOP_LOGGER","NoopLoggerProvider","getLogger","NOOP_LOGGER_PROVIDER","GLOBAL_LOGS_API_KEY","makeGetter","requiredVersion","fallback","API_BACKWARDS_COMPATIBILITY_VERSION","LogsAPI","setGlobalLoggerProvider","getLoggerProvider","logs","isListenerObject","obj","addEventListener","removeEventListener","ZONE_CONTEXT_KEY","ZoneContextManager","_enabled","_zoneCounter","_activeContextFromZone","activeZone","_bindFunction","manager","contextWrapper","_this","defineProperty","enumerable","configurable","writable","_bindListener","__ot_listeners","_patchAddEventListener","_patchRemoveEventListener","_createZoneName","random","Math","_createZone","zoneName","Zone","current","fork","properties","_getActiveZone","original","event","listener","listeners","WeakMap","patchedListener","events","run","__symbol__","initZone","performance","mark","performanceMeasure","label","ZoneImpl","parent","zoneSpec","_classCallCheck","_parent","_properties","_zoneDelegate","_ZoneDelegate","_createClass","zone","getZoneWith","callback","source","intercept","runGuarded","applyThis","applyArgs","_currentZoneFrame","invoke","handleError","task","NO_ZONE","zoneTask","_task$data","data","_task$data2","_task$data2$isPeriodi","isPeriodic","_task$data2$isRefresh","isRefreshable","state","notScheduled","eventTask","macroTask","reEntryGuard","running","_transitionTo","scheduled","previousTask","_currentTask","cancelFn","invokeTask","unknown","scheduling","zoneDelegates","_zoneDelegates","_updateTaskCount","newZone","_zone","scheduleTask","customSchedule","ZoneTask","microTask","customCancel","canceling","cancelTask","runCount","count","patches","ignoreDuplicate","checkDuplicate","perfName","_api","nativeMicroTaskQueuePromise","DELEGATE_ZS","onHasTask","_","hasTaskState","hasTask","onScheduleTask","onInvokeTask","onCancelTask","parentDelegate","_taskCounts","_parentDelegate","_forkZS","onFork","_forkDlgt","_forkCurrZone","_interceptZS","onIntercept","_interceptDlgt","_interceptCurrZone","_invokeZS","onInvoke","_invokeDlgt","_invokeCurrZone","_handleErrorZS","onHandleError","_handleErrorDlgt","_handleErrorCurrZone","_scheduleTaskZS","_scheduleTaskDlgt","_scheduleTaskCurrZone","_invokeTaskZS","_invokeTaskDlgt","_invokeTaskCurrZone","_cancelTaskZS","_cancelTaskDlgt","_cancelTaskCurrZone","_hasTaskZS","_hasTaskDlgt","_hasTaskDlgtOwner","_hasTaskCurrZone","zoneSpecHasTask","parentHasTask","targetZone","returnTask","scheduleFn","scheduleMicroTask","isEmpty","counts","prev","change","_state","useG","toState","fromState1","fromState2","handleId","_numberOfNestedTaskFrames","runTask","drainMicroTaskQueue","symbolSetTimeout","symbolPromise","symbolThen","_microTaskQueue","_isDrainingMicrotaskQueue","nativeScheduleMicroTask","func","resolve","nativeThen","queue","onUnhandledError","microtaskDrainDone","symbol","currentZoneFrame","noop","showUncaughtError","patchEventTarget","patchOnProperties","patchMethod","bindArguments","patchThen","patchMacroTask","patchEventPrototype","isIEOrEdge","getGlobalObjects","ObjectDefineProperty","ObjectGetOwnPropertyDescriptor","ObjectCreate","ArraySlice","patchClass","wrapWithCurrentZone","filterProperties","attachOriginToPatched","_redefineProperty","patchCallbacks","loadZone","_global$_Zone","getOwnPropertyDescriptor","ObjectGetPrototypeOf","getPrototypeOf","ADD_EVENT_LISTENER_STR","REMOVE_EVENT_LISTENER_STR","ZONE_SYMBOL_ADD_EVENT_LISTENER","ZONE_SYMBOL_REMOVE_EVENT_LISTENER","TRUE_STR","FALSE_STR","ZONE_SYMBOL_PREFIX","wrap","scheduleMacroTaskWithCurrentZone","scheduleMacroTask","zoneSymbol","isWindowExists","internalWindow","REMOVE_ATTRIBUTE","patchPrototype","fnNames","_loop","isPropertyWritable","patched","propertyDesc","isWebWorker","WorkerGlobalScope","isNode","process","isBrowser","isMix","zoneSymbolEventNames$1","enableBeforeunloadSymbol","wrapFn","eventNameSymbol","result","errorEvent","filename","lineno","colno","preventDefault","returnValue","patchProperty","prop","desc","onPropPatchedSymbol","originalDescGet","originalDescSet","eventName","newValue","removeAttribute","onProperties","j","originalInstanceKey","className","OriginalClass","a","patchFn","proto","delegateName","patchDelegate","metaCreator","setNative","cbIdx","meta","isDetectedIEOrEdge","ieOrEdge","isIE","ua","navigator","userAgent","indexOf","isFunction","isNumber","passiveSupported","OPTIMIZED_ZONE_EVENT_TASK_DATA","zoneSymbolEventNames","globalSources","EVENT_NAME_SYMBOL_REGX","RegExp","IMMEDIATE_PROPAGATION_SYMBOL","prepareEventNames","eventNameToString","falseEventName","trueEventName","symbolCapture","apis","patchOptions","ADD_EVENT_LISTENER","REMOVE_EVENT_LISTENER","rm","LISTENERS_EVENT_LISTENER","REMOVE_ALL_LISTENERS_EVENT_LISTENER","rmAll","zoneSymbolAddEventListener","ADD_EVENT_LISTENER_SOURCE","PREPEND_EVENT_LISTENER","PREPEND_EVENT_LISTENER_SOURCE","isRemoved","handleEvent","originalDelegate","once","globalCallback","isCapture","tasks","errors","copyTasks","_loop2","globalZoneAwareCallback","globalZoneAwareCaptureCallback","patchEventTargetMethods","useGlobalCallback","validateHandler","vh","chkDup","returnTarget","rt","nativePrependEventListener","taskData","nativeAddEventListener","nativeRemoveEventListener","nativeListeners","nativeRemoveAllListeners","prepend","isExisting","capture","symbolEventName","symbolEventNames","existingTasks","splice","removeAbortListener","allRemoved","compare","diff","typeOfDelegate","unpatchedEvents","passiveEvents","makeAddListener","nativeListener","addSource","customScheduleFn","customCancelFn","transferEventName","isHandleEvent","passive","newOptions","_objectSpread","signal","copyEventListenerOptions","buildEventListenerOptions","aborted","constructorName","targetSource","scheduleEventTask","onAbort","existingTask","findEventTasks","symbolCaptureEventName","captureTasks","removeTasks","exec","evtName","results","foundTasks","captureFalseTasks","captureTrueTasks","Event","patchQueueMicrotask","taskSymbol","patchTimer","setName","cancelName","nameSuffix","clearNative","tasksByHandleId","handleOrId","handle","refresh","clearTask","_task$data3","_ref","delay","_task$data4","originalRefresh","_task2","id","patchCustomElements","_api$getGlobalObjects","customElements","eventTargetPatch","_api$getGlobalObjects2","eventNames","EVENT_TARGET","patchEvent","ignoreProperties","tip","filter","ip","targetIgnoreProperties","op","patchFilteredProperties","getOnEventNames","getOwnPropertyNames","startsWith","substring","propertyDescriptorPatch","patchTargets","ignoreErrorProperties","patchBrowser","__load_patch","legacyPatch","blockingMethods","XMLHttpRequestEventTarget","XMLHttpRequest","XMLHttpRequestPrototype","oriAddListener","oriRemoveListener","XMLHttpRequestEventTargetPrototype","READY_STATE_CHANGE","SCHEDULED","XHR_SCHEDULED","XHR_ERROR_BEFORE_SCHEDULED","XHR_LISTENER","newListener","readyState","DONE","loadTasks","status","oriInvoke","XHR_TASK","sendNative","placeholderCallback","abortNative","openNative","XHR_SYNC","XHR_URL","fetchTaskAborting","fetchTaskScheduling","url","patchXHR","geolocation","findPromiseRejectionHandler","forEach","PromiseRejectionEvent","evt","promise","reason","rejection","patchPromise","_uncaughtPromiseErrors","isDisableWrappingUncaughtPromiseRejection","creationTrace","console","_loop3","uncaughtPromiseError","shift","throwOriginal","handler","UNHANDLED_PROMISE_REJECTION_HANDLER_SYMBOL","handleUnhandledRejection","isThenable","then","forwardResolution","forwardRejection","ZoneAwarePromise","reject","symbolState","symbolValue","symbolFinally","symbolParentPromiseValue","symbolParentPromiseState","UNRESOLVED","RESOLVED","REJECTED","REJECTED_NO_CATCH","makeResolver","resolvePromise","wasCalled","wrappedFunction","TYPE_ERROR","CURRENT_TASK_TRACE_SYMBOL","onceWrapper","clearRejectedNoCatch","currentTask","scheduleResolveOrReject","JSON","stringify","readableObjectToString","REJECTION_HANDLED_HANDLER","chainPromise","onFulfilled","onRejected","promiseState","parentPromiseValue","isFinallyPromise","AggregateError","executor","toStringTag","species","_this$constructor","C","onFinally","_this$constructor2","res","rej","values","Promise","promises","_step","_iterator","_createForOfIteratorHelper","f","finished","onResolve","onReject","_step2","_iterator2","allWithCallback","thenCallback","errorCallback","_step3","_this2","unresolvedCount","valueIndex","resolvedValues","_iterator3","_loop4","curValueIndex","thenErr","race","all","NativePromise","symbolThenPatched","Ctor","originalThen","_this3","resultPromise","ctor","patchToString","originalFunctionToString","Function","ORIGINAL_DELEGATE_SYMBOL","PROMISE_SYMBOL","ERROR_SYMBOL","newFunctionToString","nativePromise","nativeError","originalObjectToString","targetName","method","callbacks","nativeDelegate","descriptor","_unused","patchUtil","SYMBOL_BLACK_LISTED_EVENTS","SYMBOL_UNPATCHED_EVENTS","patchCommon","Zone$1","SUPPRESS_TRACING_KEY","suppressTracing","BAGGAGE_KEY_PAIR_SEPARATOR","BAGGAGE_PROPERTIES_SEPARATOR","BAGGAGE_ITEMS_SEPARATOR","parsePairKeyValue","valueProps","keyPairPart","separatorIndex","metadata","decodeURIComponent","trim","join","parseKeyPairsIntoRecord","keyPair","reduce","headers","isAttributeValue","val","isArray","isHomogeneousAttributeValueArray","isValidPrimitiveAttributeValue","arr","e_2","arr_1","arr_1_1","element","e_2_1","loggingErrorHandler","ex","stringifyException","flattenException","propertyName","delegateHandler","TracesSamplerValues","globalErrorHandler","DEFAULT_LIST_SEPARATOR","ENVIRONMENT_BOOLEAN_KEYS","isEnvVarABoolean","ENVIRONMENT_NUMBERS_KEYS","isEnvVarANumber","ENVIRONMENT_LISTS_KEYS","isEnvVarAList","DEFAULT_ATTRIBUTE_VALUE_LENGTH_LIMIT","Infinity","DEFAULT_ATTRIBUTE_COUNT_LIMIT","DEFAULT_SPAN_ATTRIBUTE_PER_EVENT_COUNT_LIMIT","DEFAULT_SPAN_ATTRIBUTE_PER_LINK_COUNT_LIMIT","DEFAULT_ENVIRONMENT","OTEL_SDK_DISABLED","CONTAINER_NAME","ECS_CONTAINER_METADATA_URI_V4","ECS_CONTAINER_METADATA_URI","HOSTNAME","KUBERNETES_SERVICE_HOST","NAMESPACE","OTEL_BSP_EXPORT_TIMEOUT","OTEL_BSP_MAX_EXPORT_BATCH_SIZE","OTEL_BSP_MAX_QUEUE_SIZE","OTEL_BSP_SCHEDULE_DELAY","OTEL_BLRP_EXPORT_TIMEOUT","OTEL_BLRP_MAX_EXPORT_BATCH_SIZE","OTEL_BLRP_MAX_QUEUE_SIZE","OTEL_BLRP_SCHEDULE_DELAY","OTEL_EXPORTER_JAEGER_AGENT_HOST","OTEL_EXPORTER_JAEGER_AGENT_PORT","OTEL_EXPORTER_JAEGER_ENDPOINT","OTEL_EXPORTER_JAEGER_PASSWORD","OTEL_EXPORTER_JAEGER_USER","OTEL_EXPORTER_OTLP_ENDPOINT","OTEL_EXPORTER_OTLP_TRACES_ENDPOINT","OTEL_EXPORTER_OTLP_METRICS_ENDPOINT","OTEL_EXPORTER_OTLP_LOGS_ENDPOINT","OTEL_EXPORTER_OTLP_HEADERS","OTEL_EXPORTER_OTLP_TRACES_HEADERS","OTEL_EXPORTER_OTLP_METRICS_HEADERS","OTEL_EXPORTER_OTLP_LOGS_HEADERS","OTEL_EXPORTER_OTLP_TIMEOUT","OTEL_EXPORTER_OTLP_TRACES_TIMEOUT","OTEL_EXPORTER_OTLP_METRICS_TIMEOUT","OTEL_EXPORTER_OTLP_LOGS_TIMEOUT","OTEL_EXPORTER_ZIPKIN_ENDPOINT","OTEL_LOG_LEVEL","OTEL_NO_PATCH_MODULES","OTEL_PROPAGATORS","OTEL_RESOURCE_ATTRIBUTES","OTEL_SERVICE_NAME","OTEL_ATTRIBUTE_VALUE_LENGTH_LIMIT","OTEL_ATTRIBUTE_COUNT_LIMIT","OTEL_SPAN_ATTRIBUTE_VALUE_LENGTH_LIMIT","OTEL_SPAN_ATTRIBUTE_COUNT_LIMIT","OTEL_LOGRECORD_ATTRIBUTE_VALUE_LENGTH_LIMIT","OTEL_LOGRECORD_ATTRIBUTE_COUNT_LIMIT","OTEL_SPAN_EVENT_COUNT_LIMIT","OTEL_SPAN_LINK_COUNT_LIMIT","OTEL_SPAN_ATTRIBUTE_PER_EVENT_COUNT_LIMIT","OTEL_SPAN_ATTRIBUTE_PER_LINK_COUNT_LIMIT","OTEL_TRACES_EXPORTER","OTEL_TRACES_SAMPLER","ParentBasedAlwaysOn","OTEL_TRACES_SAMPLER_ARG","OTEL_LOGS_EXPORTER","OTEL_EXPORTER_OTLP_INSECURE","OTEL_EXPORTER_OTLP_TRACES_INSECURE","OTEL_EXPORTER_OTLP_METRICS_INSECURE","OTEL_EXPORTER_OTLP_LOGS_INSECURE","OTEL_EXPORTER_OTLP_CERTIFICATE","OTEL_EXPORTER_OTLP_TRACES_CERTIFICATE","OTEL_EXPORTER_OTLP_METRICS_CERTIFICATE","OTEL_EXPORTER_OTLP_LOGS_CERTIFICATE","OTEL_EXPORTER_OTLP_COMPRESSION","OTEL_EXPORTER_OTLP_TRACES_COMPRESSION","OTEL_EXPORTER_OTLP_METRICS_COMPRESSION","OTEL_EXPORTER_OTLP_LOGS_COMPRESSION","OTEL_EXPORTER_OTLP_CLIENT_KEY","OTEL_EXPORTER_OTLP_TRACES_CLIENT_KEY","OTEL_EXPORTER_OTLP_METRICS_CLIENT_KEY","OTEL_EXPORTER_OTLP_LOGS_CLIENT_KEY","OTEL_EXPORTER_OTLP_CLIENT_CERTIFICATE","OTEL_EXPORTER_OTLP_TRACES_CLIENT_CERTIFICATE","OTEL_EXPORTER_OTLP_METRICS_CLIENT_CERTIFICATE","OTEL_EXPORTER_OTLP_LOGS_CLIENT_CERTIFICATE","OTEL_EXPORTER_OTLP_PROTOCOL","OTEL_EXPORTER_OTLP_TRACES_PROTOCOL","OTEL_EXPORTER_OTLP_METRICS_PROTOCOL","OTEL_EXPORTER_OTLP_LOGS_PROTOCOL","OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE","parseBoolean","environment","toLowerCase","parseNumber","min","max","Number","isNaN","parseStringList","output","input","separator","givenValue","logLevelMap","setLogLevelFromEnv","toUpperCase","parseEnvironment","env","getEnvWithoutDefaults","define_process_env_default","getEnv","globalEnv","intValue","charCode","hexToBinary","hexStr","buf","Uint8Array","offset","hi","charCodeAt","lo","otperformance","SemanticResourceAttributes","CLOUD_PROVIDER","CLOUD_ACCOUNT_ID","CLOUD_REGION","CLOUD_AVAILABILITY_ZONE","CLOUD_PLATFORM","AWS_ECS_CONTAINER_ARN","AWS_ECS_CLUSTER_ARN","AWS_ECS_LAUNCHTYPE","AWS_ECS_TASK_ARN","AWS_ECS_TASK_FAMILY","AWS_ECS_TASK_REVISION","AWS_EKS_CLUSTER_ARN","AWS_LOG_GROUP_NAMES","AWS_LOG_GROUP_ARNS","AWS_LOG_STREAM_NAMES","AWS_LOG_STREAM_ARNS","CONTAINER_ID","CONTAINER_RUNTIME","CONTAINER_IMAGE_NAME","CONTAINER_IMAGE_TAG","DEPLOYMENT_ENVIRONMENT","DEVICE_ID","DEVICE_MODEL_IDENTIFIER","DEVICE_MODEL_NAME","FAAS_NAME","FAAS_ID","FAAS_VERSION","FAAS_INSTANCE","FAAS_MAX_MEMORY","HOST_ID","HOST_NAME","HOST_TYPE","HOST_ARCH","HOST_IMAGE_NAME","HOST_IMAGE_ID","HOST_IMAGE_VERSION","K8S_CLUSTER_NAME","K8S_NODE_NAME","K8S_NODE_UID","K8S_NAMESPACE_NAME","K8S_POD_UID","K8S_POD_NAME","K8S_CONTAINER_NAME","K8S_REPLICASET_UID","K8S_REPLICASET_NAME","K8S_DEPLOYMENT_UID","K8S_DEPLOYMENT_NAME","K8S_STATEFULSET_UID","K8S_STATEFULSET_NAME","K8S_DAEMONSET_UID","K8S_DAEMONSET_NAME","K8S_JOB_UID","K8S_JOB_NAME","K8S_CRONJOB_UID","K8S_CRONJOB_NAME","OS_TYPE","OS_DESCRIPTION","OS_NAME","OS_VERSION","PROCESS_PID","PROCESS_EXECUTABLE_NAME","PROCESS_EXECUTABLE_PATH","PROCESS_COMMAND","PROCESS_COMMAND_LINE","PROCESS_COMMAND_ARGS","PROCESS_OWNER","PROCESS_RUNTIME_NAME","PROCESS_RUNTIME_VERSION","PROCESS_RUNTIME_DESCRIPTION","SERVICE_NAME","SERVICE_NAMESPACE","SERVICE_INSTANCE_ID","SERVICE_VERSION","TELEMETRY_SDK_NAME","TELEMETRY_SDK_LANGUAGE","TELEMETRY_SDK_VERSION","TELEMETRY_AUTO_VERSION","WEBENGINE_NAME","WEBENGINE_VERSION","WEBENGINE_DESCRIPTION","TelemetrySdkLanguageValues","CPP","DOTNET","ERLANG","GO","JAVA","NODEJS","PHP","PYTHON","RUBY","WEBJS","SDK_INFO","NANOSECOND_DIGITS","NANOSECOND_DIGITS_IN_MILLIS","MILLISECONDS_TO_NANOSECONDS","pow","SECOND_TO_NANOSECONDS","ExportResultCode","millisToHrTime","epochMillis","epochSeconds","trunc","round","getTimeOrigin","timeOrigin","perf","timing","fetchStart","hrTime","performanceNow","addHrTimes","now","timeInputToHrTime","time","isTimeInputHrTime","Date","getTime","time1","time2","out","objectTag","nullTag","undefinedTag","funcProto","funcToString","objectCtorString","getPrototype","overArg","objectProto","symToStringTag","nativeObjectToString","transform","arg","isPlainObject","isObjectLike","baseGetTag","getRawTag","objectToString","isOwn","tag","unmasked","MAX_LEVEL","merge","objects","mergeTwoObjects","takeValue","one","two","level","isPrimitive","isObject","shouldMerge","twoValue","obj1","obj2","wasObjectReferenced","arr1","arr2","TimeoutError","callWithTimeout","timeout","timeoutHandle","timeoutPromise","_resolve","setTimeout","clearTimeout","Deferred","_promise","BindOnceFuture","_that","_isCalled","_deferred","_export","exporter","export","internal","DEFAULT_TRACE_TIMEOUT","DEFAULT_EXPORT_MAX_ATTEMPTS","DEFAULT_EXPORT_INITIAL_BACKOFF","DEFAULT_EXPORT_MAX_BACKOFF","DEFAULT_EXPORT_BACKOFF_MULTIPLIER","parseHeaders","partialHeaders","appendResourcePathToUrl","path","endsWith","appendRootPathToUrlIfNeeded","parsedUrl","URL","pathname","configureExporterTimeout","timeoutMillis","invalidTimeout","getExporterTimeoutFromEnv","definedTimeout","defaultTimeout","isExportRetryable","statusCode","includes","parseRetryAfterToMills","retryAfter","seconds","parseInt","isInteger","OTLPExporterBase","config","_sendingPromises","getDefaultUrl","hostname","shutdown","_shutdownOnce","_shutdown","_concurrencyLimit","concurrencyLimit","onInit","items","resultCallback","isCalled","code","FAILED","SUCCESS","catch","send","forceFlush","onShutdown","OTLPExporterError","__assign","t","sendWithBeacon","body","blobPropertyBag","onSuccess","onError","sendBeacon","Blob","sendWithXhr","exporterTimeout","retryTimer","xhr","reqIsDestroyed","exporterTimer","abort","sendWithRetry","retries","minDelay","open","Accept","k","setRequestHeader","onreadystatechange","retryTime","getResponseHeader","onabort","onerror","OTLPExporterBrowserBase","_useXHR","_headers","baggageUtils.parseKeyPairsIntoRecord","serviceRequest","convert","popPromise","index","aspromise","asPromise","params","pending","base64","string","charAt","ceil","b64","s64","encode","buffer","start","parts","chunk","fromCharCode","invalidEncoding","decode","c","eventemitter","EventEmitter","_listeners","on","off","float","factory","Float32Array","f32","f8b","le","writeFloat_f32_cpy","pos","writeFloat_f32_rev","readFloat_f32_cpy","readFloat_f32_rev","writeFloatLE","writeFloatBE","readFloatLE","readFloatBE","writeFloat_ieee754","writeUint","sign","exponent","floor","log","LN2","readFloat_ieee754","readUint","uint","mantissa","NaN","writeUintLE","writeUintBE","readUintLE","readUintBE","Float64Array","f64","writeDouble_f64_cpy","writeDouble_f64_rev","readDouble_f64_cpy","readDouble_f64_rev","writeDoubleLE","writeDoubleBE","readDoubleLE","readDoubleBE","writeDouble_ieee754","off0","off1","readDouble_ieee754","inquire_1","inquire","moduleName","mod","eval","replace","utf8","len","read","write","c1","c2","pool_1","pool","alloc","size","SIZE","MAX","slab","longbits","LongBits","util","require$$0","zero","toNumber","zzEncode","zzDecode","zeroHash","fromNumber","isString","Long","fromString","low","high","unsigned","toLong","fromHash","hash","toHash","mask","part0","part1","part2","dst","src","ifNotSet","newError","CustomError","captureStackTrace","require$$1","require$$2","require$$3","require$$4","require$$5","require$$6","require$$7","versions","node","emptyArray","freeze","emptyObject","isFinite","isset","isSet","Buffer","utf8Write","_Buffer_from","_Buffer_allocUnsafe","newBuffer","sizeOrArray","dcodeIO","key2Re","key32Re","key64Re","longToHash","longFromHash","bits","fromBits","lcFirst","ProtocolError","oneOfGetter","fieldNames","fieldMap","oneOfSetter","toJSONOptions","longs","enums","bytes","json","_configure","encoding","allocUnsafe","writer","Writer","BufferWriter","Op","State","head","tail","states","writeByte","writeVarint32","VarintOp","writeVarint64","writeFixed32","subarray","_push","Writer$1","uint32","int32","sint32","uint64","int64","sint64","bool","fixed32","sfixed32","fixed64","sfixed64","double","writeBytes","reset","ldelim","finish","BufferWriter_","writer_buffer","writeStringBuffer","writeBytesBuffer","copy","byteLength","reader","Reader","BufferReader","indexOutOfRange","writeLength","RangeError","create_array","isBuffer","readLongVarint","readFixed32_end","readFixed64","Reader$1","_slice","nativeBuffer","skip","skipType","wireType","BufferReader_","reader_buffer","utf8Slice","service","Service","rpcImpl","requestDelimited","responseDelimited","rpcCall","requestCtor","responseCtor","request","response","endedByRPC","roots","protobuf","configure","build","rpc","minimal","$protobuf","$Reader","$Writer","$util","$root","v1","common","resource","metrics","collector","opentelemetry","AnyValue","$oneOfFields","stringValue","boolValue","doubleValue","arrayValue","kvlistValue","bytesValue","ArrayValue","KeyValueList","encodeDelimited","decodeDelimited","verify","fromObject","object","fromValue","toObject","oneofs","toJSON","getTypeUrl","typeUrlPrefix","arrays","defaults","KeyValue","InstrumentationScope","attributes","droppedAttributesCount","Resource","TracesData","resourceSpans","ResourceSpans","scopeSpans","schemaUrl","ScopeSpans","spans","scope","Span","links","valuesById","traceState","parentSpanId","kind","startTimeUnixNano","endTimeUnixNano","droppedEventsCount","droppedLinksCount","Link","Status","long","timeUnixNano","StatusCode","TraceService","export_","ExportTraceServiceRequest","ExportTraceServiceResponse","partialSuccess","ExportTracePartialSuccess","rejectedSpans","errorMessage","MetricsService","ExportMetricsServiceRequest","ExportMetricsServiceResponse","resourceMetrics","ResourceMetrics","ExportMetricsPartialSuccess","rejectedDataPoints","LogsService","ExportLogsServiceRequest","ExportLogsServiceResponse","resourceLogs","ResourceLogs","ExportLogsPartialSuccess","rejectedLogRecords","MetricsData","scopeMetrics","ScopeMetrics","Metric","unit","gauge","sum","histogram","exponentialHistogram","summary","Gauge","Sum","Histogram","ExponentialHistogram","Summary","dataPoints","NumberDataPoint","aggregationTemporality","isMonotonic","AggregationTemporality","HistogramDataPoint","ExponentialHistogramDataPoint","SummaryDataPoint","DataPointFlags","exemplars","asDouble","asInt","flags","Exemplar","bucketCounts","explicitBounds","end2","_sum","_min","_max","scale","zeroCount","positive","negative","zeroThreshold","Buckets","quantileValues","ValueAtQuantile","quantile","filteredAttributes","LogsData","scopeLogs","ScopeLogs","logRecords","LogRecord","LogRecordFlags","observedTimeUnixNano","severityNumber","severityText","ServiceClientType","getExportRequestProto","clientType","SPANS","root.opentelemetry","LOGS","OTLPProtoExporterBrowserBase","exportRequestType","getServiceClientType","OTLPExporterBaseMain","NANOSECONDS","BigInt","hrTimeToNanos","toLongBits","asUintN","encodeAsLongBits","optionalHexToBinary","DEFAULT_ENCODER","encodeHrTime","encodeSpanContext","encodeOptionalSpanContext","getOtlpEncoder","toAttributes","toKeyValue","toAnyValue","sdkSpanToOtlpSpan","encoder","serialize","startTime","endTime","toOtlpSpanEvent","link","toOtlpLink","timedEvent","createExportTraceServiceRequest","spanRecordsToResourceSpans","createResourceMap","readableSpans","resourceMap","readableSpans_1","readableSpans_1_1","ilmMap","instrumentationLibraryKey","instrumentationLibrary","records","entryIterator","scopeResourceSpans","ilmIterator","ilmEntry","name_1","readableSpan","transformedSpans","defaultServiceName","__awaiter","_arguments","P","generator","fulfilled","step","rejected","adopt","__generator","y","g","sent","trys","ops","verb","throw","pop","asyncAttributesPromise","asyncAttributesPending","_syncAttributes","_asyncAttributesPromise","asyncAttributes","empty","EMPTY","default","waitForAsyncAttributes","other","mergedSyncAttributes","mergedAttributesPromise","thisAsyncAttributes","otherAsyncAttributes","createExportLogsServiceRequest","logRecordsToResourceLogs","logRecords_1","logRecords_1_1","instrumentationScope","_d","ismMap","ismKey","toLogRecord","hrTimeObserved","toSeverityNumber","toLogAttributes","DEFAULT_COLLECTOR_RESOURCE_PATH","DEFAULT_COLLECTOR_URL","OTLPLogExporter","OTLPTraceExporter","TMP_EXCEPTION_TYPE","TMP_EXCEPTION_MESSAGE","TMP_EXCEPTION_STACKTRACE","SEMATTRS_EXCEPTION_TYPE","SEMATTRS_EXCEPTION_MESSAGE","SEMATTRS_EXCEPTION_STACKTRACE","TMP_PROCESS_RUNTIME_NAME","TMP_SERVICE_NAME","TMP_TELEMETRY_SDK_NAME","TMP_TELEMETRY_SDK_LANGUAGE","TMP_TELEMETRY_SDK_VERSION","SEMRESATTRS_PROCESS_RUNTIME_NAME","SEMRESATTRS_SERVICE_NAME","SEMRESATTRS_TELEMETRY_SDK_NAME","SEMRESATTRS_TELEMETRY_SDK_LANGUAGE","SEMRESATTRS_TELEMETRY_SDK_VERSION","TMP_TELEMETRYSDKLANGUAGEVALUES_WEBJS","TELEMETRYSDKLANGUAGEVALUES_WEBJS","_sharedState","logRecord","totalAttributesCount","_isReadonly","timestamp","observedTimestamp","api.trace","api.isSpanContextValid","_logRecordLimits","logRecordLimits","_severityText","_isLogRecordReadonly","_severityNumber","_body","api.diag","attributeCountLimit","_truncateToSize","setBody","setSeverityNumber","setSeverityText","_makeReadonly","limit","attributeValueLengthLimit","_truncateToLimitUtil","Logger","currentContext","logRecordInstance","activeProcessor","onEmit","loadDefaultConfig","forceFlushTimeoutMillis","includeTraceContext","reconfigureLimits","_e","_f","parsedEnvConfig","MultiLogRecordProcessor","processors","processor","NoopLogRecordProcessor","LoggerProviderSharedState","loggers","registeredLogRecordProcessors","DEFAULT_LOGGER_NAME","LoggerProvider","loggerName","addLogRecordProcessor","SimpleLogRecordProcessor","_exporter","_unresolvedExports","doExport","exportPromise_1","isTracingSuppressed","BAGGAGE_HEADER","BAGGAGE_MAX_NAME_VALUE_PAIRS","BAGGAGE_MAX_PER_NAME_VALUE_PAIRS","BAGGAGE_MAX_TOTAL_LENGTH","serializeKeyPairs","keyPairs","hValue","getKeyPairs","encodeURIComponent","W3CBaggagePropagator","headerValue","pair","baggageString","baggageEntry","sanitizeAttributes","isAttributeKey","unrefTimer","_timer","hrTimeDuration","nanos","isTimeInput","CompositePropagator","_propagators","propagators","_fields","x","VALID_KEY_CHAR_RANGE","VALID_KEY","VALID_VENDOR_KEY","VALID_KEY_REGEX","VALID_VALUE_BASE_REGEX","INVALID_VALUE_COMMA_EQUAL_REGEX","validateKey","validateValue","MAX_TRACE_STATE_ITEMS","MAX_TRACE_STATE_LEN","LIST_MEMBERS_SEPARATOR","LIST_MEMBER_KEY_VALUE_SPLITTER","TraceState","rawTraceState","_internalState","_parse","_clone","unset","_keys","agg","reverse","part","listMember","TRACE_PARENT_HEADER","TRACE_STATE_HEADER","VERSION_PART","TRACE_ID_PART","PARENT_ID_PART","FLAGS_PART","TRACE_PARENT_REGEX","parseTraceParent","traceParent","W3CTraceContextPropagator","traceParentHeader","isRemote","traceStateHeader","ExceptionEventName","parentTracer","spanName","_deprecatedClock","_droppedAttributesCount","_droppedEventsCount","_droppedLinksCount","UNSET","_ended","_duration","_performanceStartTime","_performanceOffset","_startTimeProvided","_getTime","_spanLimits","getSpanLimits","_attributeValueLengthLimit","_spanProcessor","getActiveSpanProcessor","onStart","_isSpanEnded","attributesOrStartTime","timeStamp","eventCountLimit","onEnd","inp","msDuration","exception","substr","AlwaysOffSampler","shouldSample","decision","NOT_RECORD","AlwaysOnSampler","RECORD_AND_SAMPLED","ParentBasedSampler","_root","_remoteParentSampled","remoteParentSampled","_remoteParentNotSampled","remoteParentNotSampled","_localParentSampled","localParentSampled","_localParentNotSampled","localParentNotSampled","spanKind","SAMPLED","TraceIdRatioBasedSampler","_ratio","_normalize","_upperBound","_accumulate","ratio","accumulation","FALLBACK_OTEL_TRACES_SAMPLER","AlwaysOn","DEFAULT_RATIO","sampler","buildSamplerFromEnv","generalLimits","spanLimits","linkCountLimit","attributePerEventCountLimit","attributePerLinkCountLimit","AlwaysOff","ParentBasedAlwaysOff","TraceIdRatio","getSamplerProbabilityFromEnv","ParentBasedTraceIdRatio","probability","mergeConfig","userConfig","perInstanceDefaults","DEFAULT_CONFIG","_g","_h","_j","_k","_l","_m","BatchSpanProcessorBase","_isExporting","_finishedSpans","_droppedSpansCount","_maxExportBatchSize","maxExportBatchSize","_maxQueueSize","maxQueueSize","_scheduledDelayMillis","scheduledDelayMillis","_exportTimeoutMillis","exportTimeoutMillis","_flushAll","_span","_parentContext","_addToBuffer","_maybeStartTimer","_flushOneBatch","_clearTimer","timer","pendingResources","flush","finally","BatchSpanProcessor","disableAutoFlushOnDocumentHide","document","_visibilityChangeListener","visibilityState","_pageHideListener","SPAN_ID_BYTES","TRACE_ID_BYTES","RandomIdGenerator","generateTraceId","getIdGenerator","generateSpanId","SHARED_CHAR_CODES_ARRAY","Tracer","_tracerProvider","localConfig","_sampler","_generalLimits","_idGenerator","idGenerator","api.context","parentSpan","api.INVALID_SPAN_CONTEXT","parentSpanContext","api.SpanKind","INTERNAL","samplingResult","api.SamplingDecision","api.TraceFlags","initAttributes","getGeneralLimits","MultiSpanProcessor","_spanProcessors","spanProcessor","e_3","e_3_1","e_4","e_4_1","NoopSpanProcessor","ForceFlushState","BasicTracerProvider","_registeredSpanProcessors","_tracers","mergedConfig","_config","defaultExporter","_buildExporterFromEnv","batchProcessor","activeSpanProcessor","addSpanProcessor","register","_buildPropagatorFromEnv","timeoutInterval","resolved","_getPropagator","_registeredPropagators","_getSpanExporter","_registeredExporters","uniquePropagatorNames","validPropagators","list","item","exporterName","SimpleSpanProcessor","StackContextManager","previousContext","WebTracerProvider"],"mappings":"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","x_google_ignoreList":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171]}