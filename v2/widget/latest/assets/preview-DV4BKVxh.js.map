{"version":3,"file":"preview-DV4BKVxh.js","sources":["packages/chat-widget-window/src/utils/noop.ts","packages/chat-widget-window/src/utils/useMockMessages.ts","packages/chat-widget-window/src/layout/Chat/PreviewChat.tsx","packages/chat-widget-window/src/Preview.tsx","packages/chat-widget-window/src/main.preview.tsx"],"sourcesContent":["export const noop = () => {}\n\nexport const asyncNoop = async () => {}\n","import { Message } from '@td-org/chat-widget-shared'\n\nimport { generalSettingsSelector, useConfig } from '@/stores/config'\n\nimport { getMessageAvatarByConfig } from './getMessageAvatar'\nimport { getParticipantName } from './getMessageParticipantName'\n\nexport const useMockMessages = (): Message[] => {\n  const participantName = useConfig((state) => state.config.participantName)\n  const generalSetting = generalSettingsSelector(useConfig.getState())\n  const mockMessages: Message[] = [\n    {\n      index: 0,\n      sid: '0',\n      tid: '0',\n      status: 'success',\n      alignment: 'received',\n      timestamp: 1716864558897,\n      formattedTime: '10:40',\n      items: [\n        {\n          type: 'text',\n          text: 'This is an automatic message'\n        }\n      ],\n      role: 'system'\n    },\n    {\n      index: 1,\n      sid: '1',\n      tid: '1',\n      status: 'success',\n      alignment: 'received',\n      timestamp: 1716864558897,\n      formattedTime: '10:41',\n      items: [\n        {\n          type: 'text',\n          text: 'This is a virtual agent message'\n        }\n      ],\n      role: 'va'\n    },\n    {\n      index: 2,\n      sid: '2',\n      tid: '2',\n      status: 'success',\n      alignment: 'received',\n      timestamp: 1716864562281,\n      formattedTime: '10:42',\n      items: [\n        {\n          type: 'text',\n          text: 'This is an agent message'\n        }\n      ],\n      role: 'agent'\n    },\n    {\n      index: 3,\n      sid: '3',\n      tid: '3',\n      status: 'success',\n      alignment: 'sent',\n      timestamp: 1716864562281,\n      formattedTime: '10:43',\n      items: [\n        {\n          type: 'text',\n          text: 'This is a contact message'\n        }\n      ],\n      role: 'contact'\n    }\n  ]\n\n  if (generalSetting.showTypingIndicatorButton) {\n    const typeMessage = {\n      tid: 'TYPING_MESSAGE_ID',\n      sid: 'typing',\n      status: 'success',\n      alignment: 'received',\n      timestamp: 0,\n      formattedTime: '',\n      items: [{ type: 'typing' }],\n      role: 'agent'\n    } as Message\n    mockMessages.push(typeMessage)\n  }\n\n  if (generalSetting.displayAgentsName) {\n    const assignMessage = {\n      sid: 'sid',\n      tid: 'tid',\n      status: 'success',\n      alignment: 'received',\n      timestamp: 1716864562281,\n      formattedTime: '10:45',\n      role: 'system',\n      items: [\n        {\n          type: 'system',\n          action_type: 'assign',\n          smart_text: {\n            key: 'assignMessage',\n            options: {\n              name: `${participantName || 'live agent'}`\n            }\n          }\n        }\n      ]\n    } as Message\n\n    mockMessages.splice(2, 0, assignMessage)\n  }\n\n  if (participantName) {\n    return mockMessages.map((mes) => {\n      return {\n        ...mes,\n        avatar: mes.role ? getMessageAvatarByConfig(mes.role) : '',\n        participantName: mes.role ? getParticipantName({ role: mes.role, agentName: participantName }) : ''\n      } as Message\n    })\n  } else {\n    return mockMessages.map((mes) => {\n      return {\n        ...mes,\n        avatar: getMessageAvatarByConfig(mes.role || 'agent')\n      } as Message\n    }) as Message[]\n  }\n}\n","import { Page, WIDGET_DEFAULT_HEIGHT } from '@td-org/chat-widget-shared'\n\nimport { usePreviewConfig } from '@/stores/preview.ts'\nimport clsx from '@/utils/clsx.ts'\nimport { asyncNoop, noop } from '@/utils/noop.ts'\nimport { useMockMessages } from '@/utils/useMockMessages'\nimport ChatContent from '../ChatContent'\nimport ChatHeader from '../ChatHeader'\nimport InitialScreen from '../InitialScreen'\nimport UserInputArea from '../UserInputArea'\n\nimport classes from './Chat.module.scss'\n\nconst PreviewChat = (): JSX.Element => {\n  const {\n    page,\n    welcomeMessage,\n    controls,\n    enableEmoji,\n    enableAttachments,\n    enableValidation,\n    chatTitle,\n    chatSubtitle,\n    showCloseConversationButton,\n    showDownloadTranscriptButton,\n    showInitialScreen,\n    context,\n    isDisabled\n  } = usePreviewConfig()\n\n  const MockMessages = useMockMessages()\n\n  function renderWidget() {\n    switch (page) {\n      case 'InitialScreen':\n        return (\n          <InitialScreen\n            active={showInitialScreen}\n            welcomeMessage={welcomeMessage}\n            controls={controls}\n            enableValidation={enableValidation}\n            onSubmitInitialScreen={noop}\n            updateChatFrameHeight={() => Promise.resolve(WIDGET_DEFAULT_HEIGHT)}\n            defaultValues={context}\n          />\n        )\n\n      case 'Conversation':\n        return (\n          <>\n            <ChatContent shouldLoadFeedback={false} messages={[]} page={Page.Conversation} feedbackLink='' />\n            <UserInputArea\n              enableEmoji={enableEmoji}\n              enableAttachments={enableAttachments}\n              send={asyncNoop}\n              connected={false}\n              typing={asyncNoop}\n            />\n          </>\n        )\n      case 'MockConversation': {\n        return (\n          <>\n            <ChatContent shouldLoadFeedback={false} messages={MockMessages} page={Page.Conversation} feedbackLink='' />\n            <UserInputArea\n              enableEmoji={enableEmoji}\n              enableAttachments={enableAttachments}\n              send={asyncNoop}\n              connected={false}\n              typing={asyncNoop}\n            />\n          </>\n        )\n      }\n    }\n  }\n\n  return (\n    <div className={clsx(classes.chat, { [classes.isDisabled]: isDisabled })}>\n      <ChatHeader\n        chatTitle={chatTitle}\n        chatSubtitle={chatSubtitle}\n        showCloseConversationButton={showCloseConversationButton}\n        showDownloadTranscriptButton={showDownloadTranscriptButton}\n      />\n      {renderWidget()}\n    </div>\n  )\n}\n\nPreviewChat.whyDidYouRender = true\n\nexport default PreviewChat\n","import { ErrorBoundary } from '@td-org/chat-widget-components'\n\nimport ErrorScreen from '@/components/ErrorScreen/index.ts'\nimport PortalProvider from '@/components/PortalProvider/index.ts'\nimport PreviewChat from '@/layout/Chat/PreviewChat.tsx'\nimport { logForGlobalErrorBoundary } from '@/utils/logger-helper'\n\nfunction reload() {\n  window.location.reload()\n}\n\nfunction Preview() {\n  return (\n    <ErrorBoundary fallback={<ErrorScreen onRetry={reload} />} onError={logForGlobalErrorBoundary}>\n      <PortalProvider>\n        <PreviewChat />\n      </PortalProvider>\n    </ErrorBoundary>\n  )\n}\n\nexport default Preview\n","// eslint-disable-next-line simple-import-sort/imports\nimport './wdyr.ts'\nimport React from 'react'\nimport ReactDOM from 'react-dom/client'\nimport { useConfig } from '@/stores/config.ts'\n\nimport Preview from './Preview.tsx'\n\nimport './styles/index.scss'\n// css for overlayscrollbars\nimport 'overlayscrollbars/overlayscrollbars.css'\n\nasync function bootstrap() {\n  await useConfig.getState().init()\n\n  const rootEl = document.getElementById('root')!\n  ReactDOM.createRoot(rootEl).render(\n    <React.StrictMode>\n      <Preview />\n    </React.StrictMode>\n  )\n}\n\nbootstrap()\n"],"names":["noop","asyncNoop","useMockMessages","participantName","useConfig","state","generalSetting","generalSettingsSelector","mockMessages","typeMessage","assignMessage","mes","getMessageAvatarByConfig","getParticipantName","PreviewChat","page","welcomeMessage","controls","enableEmoji","enableAttachments","enableValidation","chatTitle","chatSubtitle","showCloseConversationButton","showDownloadTranscriptButton","showInitialScreen","context","isDisabled","usePreviewConfig","MockMessages","renderWidget","jsx","InitialScreen","WIDGET_DEFAULT_HEIGHT","jsxs","Fragment","ChatContent","Page","UserInputArea","clsx","classes","ChatHeader","reload","Preview","ErrorBoundary","ErrorScreen","logForGlobalErrorBoundary","PortalProvider","bootstrap","rootEl","ReactDOM","React"],"mappings":"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"}