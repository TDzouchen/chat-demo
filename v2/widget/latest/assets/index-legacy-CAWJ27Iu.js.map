{"version":3,"file":"index-legacy-CAWJ27Iu.js","sources":["packages/chat-widget-window/src/utils/preload.ts","packages/chat-widget-window/src/components/LoadingScreen/LoadingScreen.tsx","packages/chat-widget-window/src/components/SmartText/SmartText.tsx","packages/chat-widget-window/src/models/SmartText.ts","packages/chat-widget-window/src/models/Notification.ts","packages/chat-widget-window/src/stores/notifications.ts","packages/chat-widget-window/src/layout/Notifications/Notifications.tsx","packages/chat-widget-window/src/components/ScrollToBottomButton/ScrollToBottomButton.tsx","packages/chat-widget-window/src/layout/ChatContent/StartChatButton/StartChatButton.tsx","packages/chat-widget-window/src/layout/Conversation/Conversation.tsx","packages/chat-widget-window/src/layout/Chat/Widget.tsx","packages/chat-widget-window/src/hooks/useChatMount.ts","packages/chat-widget-window/src/layout/Chat/Chat.tsx","packages/chat-widget-window/src/App.tsx","packages/chat-widget-window/src/main.tsx"],"sourcesContent":["import { preloadTextMessage } from '@td-org/chat-widget-components'\n\nimport logger from './logger'\n\nasync function load<T = unknown>(name: string, loader: () => Promise<T>, log: ReturnType<typeof logger.getSubLogger>) {\n  try {\n    log.debug(`Load ${name} start`)\n    await loader()\n    log.debug(`Load ${name} success`)\n  } catch (error) {\n    log.warn(`Load ${name} failed`, error)\n  }\n}\n\nfunction preload() {\n  const log = logger.getSubLogger({ name: 'PreLoader' })\n\n  load('locales', () => import('@/locales'), log)\n  load('@twilio/conversations', () => import('@twilio/conversations'), log)\n  load('TextMessage', () => preloadTextMessage(), log)\n}\n\nexport default function () {\n  preload()\n}\n","import classes from './LoadingScreen.module.scss'\n\nexport const LoadingScreen = () => {\n  return (\n    <div className={classes.loading}>\n      <span className={classes.loader} data-testid='loading-screen' />\n    </div>\n  )\n}\n","import { type ReactElement } from 'react'\nimport { useTranslation } from 'react-i18next'\n\nimport { isTextValue, SmartText as SmartTextModel } from '@/models/SmartText.ts'\n\ntype SmartTextProps = {\n  value: SmartTextModel\n}\n\nexport function SmartText(props: SmartTextProps): ReactElement {\n  const { value } = props\n\n  const [t] = useTranslation()\n\n  if (isTextValue(value)) {\n    return <>{value.text}</>\n  }\n\n  return <>{t(value.key, value.options)}</>\n}\n","export type TextValue = {\n  text: string\n}\n\nexport type I18nValue = {\n  key: string\n  options?: Record<string, string>\n}\n\nexport type SmartText = TextValue | I18nValue\n\nexport function isTextValue(value: SmartText): value is TextValue {\n  return 'text' in value\n}\n\nexport function isI18nValue(value: SmartText): value is I18nValue {\n  return 'key' in value\n}\n","import { SmartText } from './SmartText'\n\nexport type NotificationType = 'error' | 'success' | 'warning'\n\nexport class Notification {\n  type: NotificationType\n  content: SmartText\n\n  constructor(type: NotificationType, content: SmartText) {\n    this.type = type\n    this.content = content\n  }\n}\n","import { nanoid } from 'nanoid'\nimport { create } from 'zustand'\n\nimport { Notification, type NotificationType } from '@/models/Notification'\nimport { SmartText } from '@/models/SmartText'\n\ntype NotificationWithId = Notification & { id: string }\n\ntype State = {\n  items: NotificationWithId[]\n  error: (message: SmartText, timeout?: number) => () => void\n  warning: (message: SmartText, timeout?: number) => () => void\n  success: (message: SmartText, timeout?: number) => () => void\n  remove: (id: string) => void\n  clear: () => void\n}\n\nexport const useNotifications = create<State>((set) => {\n  const removeNotification = (id: string) => {\n    set((state) => ({ items: state.items.filter((item) => item.id !== id) }))\n  }\n\n  const addNotification = (type: NotificationType, message: SmartText, timeout = 5000) => {\n    const id = nanoid()\n    const notification = {\n      ...new Notification(type, message),\n      id\n    }\n    set((state) => ({ items: [notification, ...state.items] }))\n\n    if (timeout > 0) {\n      setTimeout(() => {\n        removeNotification(id)\n      }, timeout)\n    }\n\n    return id\n  }\n\n  return {\n    items: [],\n    error(message: SmartText, timeout = 5000) {\n      const id = addNotification('error', message, timeout)\n\n      return () => {\n        removeNotification(id)\n      }\n    },\n    warning(message: SmartText, timeout = 5000) {\n      const id = addNotification('warning', message, timeout)\n\n      return () => {\n        removeNotification(id)\n      }\n    },\n    success(message: SmartText, timeout = 5000) {\n      const id = addNotification('success', message, timeout)\n\n      return () => {\n        removeNotification(id)\n      }\n    },\n    remove(id: string) {\n      removeNotification(id)\n    },\n    clear() {\n      set({ items: [] })\n    }\n  }\n})\n","import { type ReactElement, useLayoutEffect } from 'react'\n\nimport { Portal } from '@/components/PortalProvider/index.ts'\nimport SmartText from '@/components/SmartText'\nimport { useApp } from '@/stores/app/store.ts'\nimport { useNotifications } from '@/stores/notifications.ts'\nimport clsx from '@/utils/clsx'\n\nimport classes from './Notifications.module.scss'\n\nconst MAX_NOTIFICATIONS = 3\nconst SUCCESS_TIMEOUT = 3000 // 3s\nconst ERROR_TIMEOUT = 0 // forever\n\nexport function Notifications(): ReactElement {\n  const { items, error, success, clear } = useNotifications()\n  const { on, off } = useApp()\n\n  useLayoutEffect(() => {\n    let removeError: (() => void) | null = null\n\n    const disconnectHandler = () => {\n      removeError?.()\n      removeError = null\n      removeError = error({ key: 'noConnectionTip' }, ERROR_TIMEOUT)\n    }\n\n    const reconnectHandler = () => {\n      removeError?.()\n      removeError = null\n      success({ key: 'connectedTip' }, SUCCESS_TIMEOUT)\n    }\n\n    const resetHandler = () => {\n      clear()\n    }\n\n    on('disconnect', disconnectHandler)\n    on('reconnect', reconnectHandler)\n    on('leave_end', resetHandler)\n    on('leave_error', resetHandler)\n\n    return () => {\n      off('disconnect', disconnectHandler)\n      off('reconnect', reconnectHandler)\n      off('leave_end', resetHandler)\n      off('leave_error', resetHandler)\n    }\n  }, [on, off, error, success, clear])\n\n  return (\n    <Portal>\n      <div className={classes.notifications}>\n        {items.slice(0, MAX_NOTIFICATIONS).map((item) => (\n          <div key={item.id} className={clsx(classes.notification, classes[item.type])}>\n            <SmartText value={item.content} />\n          </div>\n        ))}\n      </div>\n    </Portal>\n  )\n}\n","import { type MouseEvent } from 'react'\n\nimport Arrow from '../Icons/Arrow'\n\nimport classes from './ScrollToBottomButton.module.scss'\n\ntype Props = {\n  onClick?: () => void\n  unreadMessageCount?: number\n}\n\nconst ScrollToBottomButton = (props: Props) => {\n  const { onClick, unreadMessageCount = 0 } = props\n\n  const showNewMessageBadge = unreadMessageCount > 0\n\n  const handleOnClick = (event: MouseEvent<HTMLButtonElement>) => {\n    event.stopPropagation()\n    onClick?.()\n  }\n\n  return (\n    <div className={classes.scrollToBottomButton}>\n      <button onClick={handleOnClick} aria-label='scroll-to-bottom'>\n        <Arrow className={classes.arrow} />\n        {showNewMessageBadge && <span data-testid={'unread-dot'} className={classes.newMessages} />}\n      </button>\n    </div>\n  )\n}\nexport default ScrollToBottomButton\n","import { ReactElement, useEffect, useRef } from 'react'\nimport { useTranslation } from 'react-i18next'\n\nimport { Page } from '@td-org/chat-widget-shared'\n\nimport { Refresh } from '@/components/Icons'\nimport { useChatContentScroll, useFeedback, useFeedbackStatus, usePage } from '@/stores/app/selectors.ts'\nimport { useConfig } from '@/stores/config'\nimport clsx from '@/utils/clsx.ts'\n\nimport classes from './StartChatButton.module.scss'\n\ninterface Props {\n  onClick: () => void\n}\n\nconst StartChatButton = (props: Props): ReactElement => {\n  const startChatButtonLabel = useConfig((state) => state.config.options.startChatButtonLabel)\n  const [t] = useTranslation()\n\n  const page = usePage()\n  const feedbackLink = useFeedback()\n  const { active: feedbackActive } = useFeedbackStatus()\n\n  const { footerVisible, enableScroll } = useChatContentScroll()\n\n  const startNewChatButtonRef = useRef<HTMLButtonElement | null>(null)\n\n  const isTransparent = page === Page.End && !!feedbackLink && feedbackActive\n\n  useEffect(() => {\n    startNewChatButtonRef.current?.focus()\n  }, [])\n\n  const startNewChat = (): void => {\n    props.onClick()\n  }\n\n  return (\n    <div className={clsx(classes.startChatButton, { [classes.withSeparator]: !footerVisible && enableScroll })}>\n      <button\n        ref={startNewChatButtonRef}\n        type='button'\n        className={clsx(classes.button, { [classes.transparent]: isTransparent })}\n        onClick={startNewChat}\n      >\n        {isTransparent && <Refresh />}\n        <p>{startChatButtonLabel || t('startChatButtonLabel')}</p>\n      </button>\n    </div>\n  )\n}\n\nexport default StartChatButton\n","import { AppEvent, Page } from '@td-org/chat-widget-shared'\n\nimport Animate from '@/components/Animate'\nimport ScrollToBottomButton from '@/components/ScrollToBottomButton'\nimport { useConnectionStatus } from '@/hooks/useConnectionStatus.ts'\nimport {\n  useAppAction,\n  useChatContentScroll,\n  useEnableRTLLayoutDirection,\n  useFeedback,\n  usePage,\n  useShouldLoadFeedback,\n  useShowScreenLoading,\n  useUnreadMessageCount\n} from '@/stores/app/selectors.ts'\nimport { useChatConfig } from '@/stores/config.ts'\nimport { useMessages, useMessagesAction } from '@/stores/message'\nimport ChatContent from '../ChatContent'\nimport StartChatButton from '../ChatContent/StartChatButton'\nimport UserInputArea from '../UserInputArea'\n\nimport classes from './Conversation.module.scss'\n\ninterface Props {\n  goInitialPage: () => void\n}\n\nfunction Conversation(props: Props) {\n  const { goInitialPage } = props\n  const { enableEmoji, enableAttachments, enableUserInput } = useChatConfig()\n\n  const page = usePage()\n  const messages = useMessages()\n  const feedbackLink = useFeedback()\n  const shouldLoadFeedback = useShouldLoadFeedback()\n  const showScreenLoading = useShowScreenLoading()\n  const enableRTL = useEnableRTLLayoutDirection()\n  const connected = useConnectionStatus()\n  const { showScrollToBottom } = useChatContentScroll()\n  const unreadMessageCount = useUnreadMessageCount()\n\n  const { send, typing } = useMessagesAction()\n  const { is, emit } = useAppAction()\n\n  const showInputArea = enableUserInput && is(Page.Conversation)\n  const showStartNewChat = is([Page.End, Page.Error])\n  const showScrollToBottomButton = is(Page.Conversation) && showScrollToBottom\n\n  const onClickScrollToBottom = () => {\n    emit(AppEvent.need_scroll_to_bottom)\n  }\n\n  return (\n    <Animate.page className={classes.conversation}>\n      <ChatContent\n        shouldLoadFeedback={shouldLoadFeedback}\n        feedbackLink={feedbackLink}\n        messages={messages}\n        page={page}\n      />\n      {showInputArea && (\n        <UserInputArea\n          enableEmoji={enableEmoji}\n          enableAttachments={enableAttachments}\n          send={send}\n          connected={connected}\n          typing={typing}\n          enableRTL={enableRTL}\n          showScreenLoading={showScreenLoading}\n        />\n      )}\n      {showStartNewChat && <StartChatButton onClick={goInitialPage} />}\n      {showScrollToBottomButton && (\n        <ScrollToBottomButton onClick={onClickScrollToBottom} unreadMessageCount={unreadMessageCount} />\n      )}\n    </Animate.page>\n  )\n}\n\nexport default Conversation\n","import { BoardCastEvent, Page } from '@td-org/chat-widget-shared'\n\nimport LoadingScreen from '@/components/LoadingScreen'\nimport { useChatMount } from '@/hooks/useChatMount.ts'\nimport { provider } from '@/stores/app/provider.ts'\nimport { useAppAction } from '@/stores/app/selectors.ts'\nimport { useChatConfig } from '@/stores/config.ts'\nimport { useBoardCastAction } from '@/stores/useBoardCast.ts'\nimport Conversation from '../Conversation'\nimport InitialScreen from '../InitialScreen'\n\nfunction Widget() {\n  const { go, is, isNot, getInitialPage, setFormData, enableScreenLoading } = useAppAction()\n  const { emit: boardCaseEmit } = useBoardCastAction()\n  const { showInitialScreen: active, welcomeMessage, controls, enableValidation, context } = useChatConfig()\n  const { initialScreenContainerRef, updateChatFrameHeight } = useChatMount()\n\n  const onSubmitInitialScreen = (\n    formData: Record<PropertyKey, string> | null,\n    enableStartConversation: boolean = false\n  ) => {\n    setFormData(formData)\n    if (enableStartConversation) {\n      enableScreenLoading(10000, true)\n      provider.init('submitInitialScreen')\n    }\n    if (isNot(Page.Conversation)) {\n      go(Page.Conversation)\n    }\n  }\n\n  const goInitialPage = () => {\n    const initialPage = getInitialPage()\n    go(initialPage)\n    provider.clear()\n    boardCaseEmit(BoardCastEvent.resetFrame)\n    provider.preloadClient('startNewChat')\n  }\n\n  if (is(Page.Loading)) {\n    return <LoadingScreen />\n  }\n\n  if (is(Page.InitialScreen)) {\n    return (\n      <InitialScreen\n        ref={initialScreenContainerRef}\n        active={active}\n        welcomeMessage={welcomeMessage}\n        controls={controls}\n        enableValidation={enableValidation}\n        onSubmitInitialScreen={onSubmitInitialScreen}\n        defaultValues={context}\n        updateChatFrameHeight={updateChatFrameHeight}\n      />\n    )\n  }\n\n  if (is([Page.Conversation, Page.End, Page.Error])) {\n    return <Conversation goInitialPage={goInitialPage} />\n  }\n\n  return <></>\n}\n\nexport default Widget\n","import { useCallback, useEffect, useRef } from 'react'\n\nimport { Page, sleep, WIDGET_DEFAULT_HEADER_HEIGHT, WIDGET_DEFAULT_HEIGHT } from '@td-org/chat-widget-shared'\n\nimport { provider } from '@/stores/app/provider'\nimport { useFrameOpened, usePage } from '@/stores/app/selectors'\nimport { useAppProps, useInitialScreen, useStyles } from '@/stores/config'\nimport { useRpcAction } from '@/stores/rpc.ts'\n\nexport function useChatMount() {\n  const initialScreenContainerRef = useRef<HTMLDivElement | null>(null)\n  const isRunningAutoOpenWidgetRef = useRef(false)\n\n  const { showInitialScreen } = useInitialScreen()\n  const { chatContainerHeight } = useStyles()\n  const { autoOpen } = useAppProps()\n  const { maximize, frameResize } = useRpcAction()\n  const frameOpened = useFrameOpened()\n  const page = usePage()\n\n  const pageInInitialScreen = page === Page.InitialScreen\n\n  const autoOpenWidget = useCallback(\n    async (wait: number) => {\n      if (isRunningAutoOpenWidgetRef.current) return false\n      isRunningAutoOpenWidgetRef.current = true\n      if (frameOpened || autoOpen) {\n        await sleep(wait)\n        await maximize()\n        return true\n      }\n      return false\n    },\n    [frameOpened, autoOpen, maximize]\n  )\n\n  const updateChatFrameHeight = useCallback(async () => {\n    if (!chatContainerHeight && initialScreenContainerRef.current) {\n      let initialScreenHeight = initialScreenContainerRef.current?.scrollHeight || 0\n\n      if (initialScreenHeight > 0) {\n        initialScreenHeight += WIDGET_DEFAULT_HEADER_HEIGHT\n\n        const height = initialScreenHeight < WIDGET_DEFAULT_HEIGHT ? initialScreenHeight : WIDGET_DEFAULT_HEIGHT\n\n        await frameResize({ height })\n\n        return height\n      }\n    }\n\n    return WIDGET_DEFAULT_HEIGHT\n  }, [chatContainerHeight, frameResize])\n\n  const resetFrameHeight = useCallback(() => {\n    if (chatContainerHeight) return false\n\n    return frameResize({ height: WIDGET_DEFAULT_HEIGHT })\n  }, [chatContainerHeight, frameResize])\n\n  useEffect(() => {\n    if (frameOpened) {\n      provider.preloadClient('openChatWidget')\n    }\n  }, [frameOpened])\n\n  useEffect(() => {\n    const isUpdateFrameHeight = showInitialScreen && pageInInitialScreen\n\n    autoOpenWidget(isUpdateFrameHeight ? 200 : -1)\n\n    if (isUpdateFrameHeight) {\n      updateChatFrameHeight()\n    }\n\n    return () => {\n      if (isUpdateFrameHeight) {\n        resetFrameHeight()\n      }\n    }\n  }, [showInitialScreen, pageInInitialScreen, autoOpenWidget, updateChatFrameHeight, resetFrameHeight])\n\n  return {\n    initialScreenContainerRef,\n    updateChatFrameHeight\n  }\n}\n","import LoadingScreen from '@/components/LoadingScreen'\nimport { useShowScreenLoading } from '@/stores/app/selectors.ts'\nimport { useChatConfig } from '@/stores/config.ts'\nimport ChatHeader from '../ChatHeader'\nimport Notifications from '../Notifications'\n\nimport Widget from './Widget.tsx'\n\nimport classes from './Chat.module.scss'\n\nconst Chat = (): JSX.Element => {\n  const { chatTitle, chatSubtitle, showCloseConversationButton, showDownloadTranscriptButton } = useChatConfig()\n\n  const showScreenLoading = useShowScreenLoading()\n\n  return (\n    <div className={classes.chat}>\n      <ChatHeader\n        chatTitle={chatTitle}\n        chatSubtitle={chatSubtitle}\n        showCloseConversationButton={showCloseConversationButton}\n        showDownloadTranscriptButton={showDownloadTranscriptButton}\n      />\n      <Widget />\n      <Notifications />\n      <div\n        data-qa='screen-loading'\n        className={classes.loadingWrapper}\n        aria-label='loading conversation'\n        aria-hidden={!showScreenLoading}\n      >\n        <LoadingScreen />\n      </div>\n    </div>\n  )\n}\n\nChat.whyDidYouRender = true\n\nexport default Chat\n","import { ErrorBoundary } from '@td-org/chat-widget-components'\n\nimport ErrorScreen from '@/components/ErrorScreen/index.ts'\nimport PortalProvider from '@/components/PortalProvider/index.ts'\nimport Chat from '@/layout/Chat/Chat.tsx'\nimport { logForGlobalErrorBoundary } from '@/utils/logger-helper'\n\nfunction reload() {\n  window.location.reload()\n}\n\nfunction App() {\n  return (\n    <ErrorBoundary fallback={<ErrorScreen onRetry={reload} />} onError={logForGlobalErrorBoundary}>\n      <PortalProvider>\n        <Chat />\n      </PortalProvider>\n    </ErrorBoundary>\n  )\n}\n\nexport default App\n","// eslint-disable-next-line simple-import-sort/imports\nimport './wdyr.ts'\nimport React from 'react'\nimport ReactDOM from 'react-dom/client'\n\nimport { useApp } from '@/stores/app/store.ts'\nimport { useConfig } from '@/stores/config.ts'\n\nimport preload from './utils/preload.ts'\nimport App from './App.tsx'\n\nimport { useBoardCast } from '@/stores/useBoardCast.ts'\nimport { useRpc } from '@/stores/rpc.ts'\nimport { provider } from '@/stores/app/provider'\n\nimport './styles/index.scss'\n// css for overlayscrollbars\nimport 'overlayscrollbars/overlayscrollbars.css'\n\nasync function bootstrap() {\n  preload()\n\n  useApp.getState().go('loading')\n  useBoardCast.getState().init()\n  await useRpc.getState().frameReady()\n  await useConfig.getState().init()\n  provider.init('pageLoaded')\n\n  const rootEl = document.getElementById('root')!\n  ReactDOM.createRoot(rootEl).render(\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  )\n}\n\nbootstrap()\n"],"names":["load","_x","_x2","_x3","_load","apply","this","arguments","_asyncToGenerator","_regeneratorRuntime","mark","_callee3","name","loader","log","wrap","_callee3$","_context3","prev","next","debug","concat","t0","warn","stop","preload$1","module","import","logger","getSubLogger","__vitePreload","preloadTextMessage","LoadingScreen","jsx","className","classes","children","SmartText","props","value","t","_slicedToArray","useTranslation","isTextValue","Fragment","text","key","options","Notification","_createClass","type","content","_classCallCheck","_defineProperty","useNotifications","create","set","removeNotification","id","state","items","filter","item","addNotification","message","timeout","nanoid","notification","_objectSpread","setTimeout","error","length","undefined","warning","success","remove","clear","Notifications","_useNotifications","_useApp","useApp","on","off","useLayoutEffect","removeError","disconnectHandler","_removeError","reconnectHandler","_removeError2","resetHandler","Portal","notifications","slice","map","clsx","ScrollToBottomButton","onClick","_props$unreadMessageC","unreadMessageCount","showNewMessageBadge","event","stopPropagation","Arrow","StartChatButton","startChatButtonLabel","useConfig","config","page","usePage","feedbackLink","useFeedback","feedbackActive","useFeedbackStatus","active","_useChatContentScroll","useChatContentScroll","footerVisible","enableScroll","startNewChatButtonRef","useRef","isTransparent","Page","End","useEffect","_startNewChatButtonRe","current","focus","jsxs","ref","Refresh","Conversation","goInitialPage","_useChatConfig","useChatConfig","enableEmoji","enableAttachments","enableUserInput","messages","useMessages","shouldLoadFeedback","useShouldLoadFeedback","showScreenLoading","useShowScreenLoading","enableRTL","useEnableRTLLayoutDirection","connected","useConnectionStatus","showScrollToBottom","useUnreadMessageCount","_useMessagesAction","useMessagesAction","send","typing","_useAppAction","useAppAction","is","emit","showInputArea","showStartNewChat","Error","showScrollToBottomButton","Animate","conversation","ChatContent","UserInputArea","AppEvent","need_scroll_to_bottom","Widget","_useAppAction2","go","isNot","getInitialPage","setFormData","enableScreenLoading","boardCaseEmit","useBoardCastAction","_useChatConfig2","showInitialScreen","welcomeMessage","controls","enableValidation","context","_useChatMount","initialScreenContainerRef","isRunningAutoOpenWidgetRef","useInitialScreen","chatContainerHeight","useStyles","autoOpen","useAppProps","_useRpcAction","useRpcAction","maximize","frameResize","frameOpened","useFrameOpened","pageInInitialScreen","InitialScreen","autoOpenWidget","useCallback","_ref","_callee","wait","_callee$","_context","sleep","abrupt","_x4","updateChatFrameHeight","_callee2","_initialScreenContain","initialScreenHeight","height","_context2","scrollHeight","WIDGET_DEFAULT_HEADER_HEIGHT","WIDGET_DEFAULT_HEIGHT","resetFrameHeight","provider","preloadClient","isUpdateFrameHeight","useChatMount","Loading","onSubmitInitialScreen","formData","enableStartConversation","init","defaultValues","initialPage","BoardCastEvent","resetFrame","Chat","_useChatConfig3","chatTitle","chatSubtitle","showCloseConversationButton","showDownloadTranscriptButton","chat","ChatHeader","loadingWrapper","reload","window","location","App","ErrorBoundary","fallback","ErrorScreen","onRetry","onError","logForGlobalErrorBoundary","PortalProvider","_bootstrap","_callee4","rootEl","_context4","preload","getState","useBoardCast","useRpc","frameReady","document","getElementById","ReactDOM","createRoot","render","React","StrictMode","bootstrap","whyDidYouRender"],"mappings":";;;;;;;;;;2wBAIeA,GAAAC,EAAAC,EAAAC,GAAA,OAAAC,GAAAC,MAAAC,KAAAC,UAAA,CAAA,SAAAH,KAQf,OAReA,GAAAI,EAAAC,IAAAC,MAAf,SAAAC,EAAiCC,EAAcC,EAA0BC,GAA6C,OAAAL,IAAAM,MAAAC,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,KAAA,EAEpF,OAFoFF,EAAAC,KAAA,EAE9GJ,EAAAM,MAAA,QAAAC,OAAcT,EAAI,WAAQK,EAAAE,KAAA,EACxBN,IAAO,KAAA,EACTC,EAAAM,MAAA,QAAAC,OAAcT,EAAI,aAAUK,EAAAE,KAAA,GAAA,MAAA,KAAA,EAAAF,EAAAC,KAAA,EAAAD,EAAAK,GAAAL,EAAA,MAAA,GAEhCH,EAAIS,KAAKF,QAAAA,OAAQT,EAAIK,WAAAA,EAAAK,IAAgB,KAAAL,GAAAA,IAAAA,MAAAA,OAAAA,EAAAO,OAAAb,GAAAA,EAEzC,KAAA,CAAA,CAAA,EAAA,IAAA,KAAAP,GAAAC,MAAAC,KAAAC,UAAA,CAU2B,SAAAkB,KAR3B,IACQX,EAENd,GAAK,WAAW,gCAAM,OAAA0B,EAAOC,OAAA,qCAAW,EAAAD,cAFlCZ,EAAMc,EAAOC,aAAa,CAAEjB,KAAM,eAGxCZ,GAAK,yBAAyB,WAAA,OAAA8B,GAAA,WAAA,OAAMJ,EAAOC,OAAA,uFAA0Bb,GACrEd,GAAK,eAAe,WAAM+B,OAAAA,GAAmB,GAAGjB,EAKlD,qjLCtBakB,GAAgB,WAC3B,OACGC,GAAAA,IAAA,MAAA,CAAIC,UAAWC,GACdC,SAAAH,GAAAA,IAAC,OAAK,CAAAC,UAAWC,GAAgB,cAAY,oBAGnD,ECCO,SAASE,GAAUC,GAClB,IAAEC,EAAUD,EAAVC,MAEDC,EAAoBC,EAAfC,KAAe,GAAnB,GAEJ,OCHC,SAAqBH,GAC1B,MAAO,SAAUA,CACnB,CDCMI,CAAYJ,GACPN,GAAAA,IAAAW,GAAAA,SAAA,CAAGR,WAAMS,2BAGRT,SAAEI,EAAAD,EAAMO,IAAKP,EAAMQ,UAC/B,CAAA,IEfaC,GAAaC,GAIxB,SAAAD,EAAYE,EAAwBC,gGAAoBC,CAAA9C,KAAA0C,GAAAK,EAAA/C,KAAA,YAAA,GAAA+C,EAAA/C,KAAA,eAAA,GACtDA,KAAK4C,KAAOA,EACZ5C,KAAK6C,QAAUA,CACjB,ICMWG,GAAmBC,IAAc,SAACC,GACvC,IAAAC,EAAqB,SAACC,GAC1BF,GAAI,SAACG,GAAA,MAAW,CAAEC,MAAOD,EAAMC,MAAMC,QAAO,SAACC,GAAS,OAAAA,EAAKJ,KAAOA,CAAE,IAAI,GAAA,EAGpEK,EAAkB,SAACb,EAAwBc,GAAoB,IAAAC,sDAAU,GAAA,IACvEP,EAAKQ,IACLC,EAAeC,EAAAA,EAChB,CAAA,EAAA,IAAIpB,GAAaE,EAAMc,IAC1BN,CAAAA,EAAAA,CAAAA,GAAAA,IAUK,OARHF,GAAA,SAACG,GAAW,MAAA,CAAEC,MAAO,CAACO,YAAiBR,EAAMC,QAAS,IAEtDK,EAAU,GACZI,YAAW,WACTZ,EAAmBC,KAClBO,GAGEP,CAAA,EAGF,MAAA,CACLE,MAAO,GACPU,MAAA,SAAMN,GAAoB,IAClBN,EAAKK,EAAgB,QAASC,EADZzD,UAAAgE,OAAA,QAAAC,IAAAjE,UAAA,GAAAA,UAAA,GAAU,KAGlC,OAAO,WACLkD,EAAmBC,EAAE,CAEzB,EACAe,QAAA,SAAQT,GAAoC,IACpCN,EAAKK,EAAgB,UAAWC,EADZzD,UAAAgE,OAAA,QAAAC,IAAAjE,UAAA,GAAAA,UAAA,GAAU,KAGpC,OAAO,WACLkD,EAAmBC,EAAE,CAEzB,EACAgB,QAAA,SAAQV,GAAoB,IACpBN,EAAKK,EAAgB,UAAWC,EADZzD,UAAAgE,OAAA,QAAAC,IAAAjE,UAAA,GAAAA,UAAA,GAAU,KAGpC,OAAO,WACLkD,EAAmBC,EAAE,CAEzB,EACAiB,gBAAOjB,GACLD,EAAmBC,EACrB,EACAkB,MAAQ,WACNpB,EAAI,CAAEI,MAAO,IACf,EAEJ,0ZCvDO,SAASiB,KACd,IAAAC,EAAyCxB,KAAjCM,EAAOkB,EAAPlB,MAAOU,EAAAQ,EAAAR,MAAOI,EAASI,EAATJ,QAASE,EAAAE,EAAAF,MAC/BG,EAAoBC,IAAZC,EAAAF,EAAAE,GAAIC,EAAIH,EAAJG,IAkCZ,OAhCAC,GAAAA,iBAAgB,WACd,IAAIC,EAAmC,KAEjCC,EAAoB,WAAM,IAAAC,EAChBA,QAAAA,EAAAF,SAAAE,IAAAA,GAAAA,IACAF,EAAA,KACdA,EAAcd,EAAM,CAAExB,IAAK,mBAZX,EAY6C,EAGzDyC,EAAmB,WAAMC,IAAAA,EACf,QAAAA,EAAAJ,SAAA,IAAAI,GAAAA,IACAJ,EAAA,KACdV,EAAQ,CAAE5B,IAAK,gBAnBG,IAmB8B,EAG5C2C,EAAe,WACbb,GAAA,EAQR,OALAK,EAAG,aAAcI,GACjBJ,EAAG,YAAaM,GAChBN,EAAG,YAAaQ,GAChBR,EAAG,cAAeQ,GAEX,WACLP,EAAI,aAAcG,GAClBH,EAAI,YAAaK,GACjBL,EAAI,YAAaO,GACjBP,EAAI,cAAeO,EAAY,CACjC,GACC,CAACR,EAAIC,EAAKZ,EAAOI,EAASE,WAG1Bc,EACC,CAAAtD,SAAAH,GAAAA,IAAC,MAAI,CAAAC,UAAWC,GAAQwD,cACrBvD,SAAAwB,EAAMgC,MAAM,EA3CK,GA2CiBC,KAAI,SAAC/B,GAAA,cACrC,MAAkB,CAAA5B,UAAW4D,EAAK3D,GAAQgC,aAAchC,GAAQ2B,EAAKZ,OACpEd,SAACH,OAAAI,GAAA,CAAUE,MAAOuB,EAAKX,WADfW,EAAKJ,GAGhB,OAIT,yFClDMqC,GAAuB,SAACzD,GAC5B,IAAQ0D,EAAoC1D,EAApC0D,QAAAC,EAAoC3D,EAA3B4D,mBAEXC,QAFgC,IAAAF,EAAA,EAAAA,GAEW,EAQ/C,OAAAhE,GAAAA,IAAC,MAAI,CAAAC,UAAWC,GACdC,iBAAC,SAAO,CAAA4D,QAPU,SAACI,GACrBA,EAAMC,kBACIL,SAAAA,GAAA,EAKwB,aAAW,mBACzC5D,SAAA,CAACH,GAAAA,IAAAqE,GAAA,CAAMpE,UAAWC,KACjBgE,GAAwBlE,GAAAA,IAAA,OAAA,CAAK,cAAa,aAAcC,UAAWC,SAI5E,+GCbMoE,GAAkB,SAACjE,GACvB,IAAMkE,EAAuBC,GAAU,SAAC9C,UAAUA,EAAM+C,OAAO3D,QAAQyD,oBAAoB,IACpFhE,EAAoBC,EAAfC,KAAe,GAAnB,GAEFiE,EAAOC,IACPC,EAAeC,IACLC,EAAmBC,IAA3BC,OAERC,EAAwCC,IAAhCC,EAAAF,EAAAE,cAAeC,EAAaH,EAAbG,aAEjBC,EAAwBC,UAAiC,MAEzDC,EAAgBb,IAASc,EAAKC,OAASb,GAAgBE,EAE7DY,GAAAA,WAAU,WAAM,IAAAC,UACdA,EAAAN,EAAsBO,eAAtBD,OAAAA,EAA+BE,OACjC,GAAG,IAMH,OACG7F,GAAAA,IAAA,MAAA,CAAIC,UAAW4D,EAAK3D,GAAyBkB,EAAGlB,CAAAA,EAAAA,IAAyBiF,GAAiBC,IACzFjF,SAAA2F,GAAAA,KAAC,SAAA,CACCC,IAAKV,EACLpE,KAAK,SACLhB,UAAW4D,EAAK3D,GAAgBkB,EAAA,CAAA,EAAGlB,GAAsBqF,IACzDxB,QAVe,WACnB1D,EAAM0D,SAAQ,EAWT5D,SAAA,CAAAoF,UAAkBS,EAAQ,IAC1BhG,GAAAA,IAAA,IAAA,CAAGG,SAAwBoE,GAAAhE,EAAE,8BAItC,4CCxBA,SAAS0F,GAAa5F,GACd,IAAE6F,EAAkB7F,EAAlB6F,cACRC,EAA4DC,IAApDC,EAAAF,EAAAE,YAAaC,EAAmBH,EAAnBG,kBAAmBC,EAAAJ,EAAAI,gBAElC7B,EAAOC,IACP6B,EAAWC,IACX7B,EAAeC,IACf6B,EAAqBC,IACrBC,EAAoBC,IACpBC,EAAYC,IACZC,EAAYC,IACVC,EAAuBhC,IAAvBgC,mBACFjD,EAAqBkD,IAE3BC,EAAyBC,IAAjBC,EAAAF,EAAAE,KAAMC,EAAOH,EAAPG,OACdC,EAAqBC,IAAbC,EAAAF,EAAAE,GAAIC,EAAKH,EAALG,KAENC,EAAgBrB,GAAmBmB,EAAGlC,EAAKS,cAC3C4B,EAAmBH,EAAG,CAAClC,EAAKC,IAAKD,EAAKsC,QACtCC,EAA2BL,EAAGlC,EAAKS,eAAiBiB,EAM1D,eACGc,EAAQtD,KAAR,CAAazE,UAAWC,GAAQ+H,aAC/B9H,SAAA,CAAAH,GAAAA,IAACkI,EAAA,CACCxB,mBAAAA,EACA9B,aAAAA,EACA4B,SAAAA,EACA9B,KAAAA,IAEDkD,GACC5H,GAAAA,IAACmI,EAAA,CACC9B,YAAAA,EACAC,kBAAAA,EACAgB,KAAAA,EACAN,UAAAA,EACAO,OAAAA,EACAT,UAAAA,EACAF,kBAAAA,IAGHiB,GAAoB7H,GAAAA,IAACsE,GAAgB,CAAAP,QAASmC,IAC9C6B,GACC/H,GAAAA,IAAC8D,GAAqB,CAAAC,QAzBE,WAC5B4D,EAAKS,EAASC,sBAAqB,EAwBuBpE,mBAAAA,MAI9D,CClEA,SAASqE,KACD,IAAAC,EAAsEd,IAApEe,IAAAA,GAAId,EAAIa,EAAJb,GAAIe,EAAAF,EAAAE,MAAOC,IAAAA,eAAgBC,EAAaJ,EAAbI,YAAaC,EAAAL,EAAAK,oBACtCC,EAAkBC,IAAxBnB,KACFoB,EAAqF3C,IAAhEpB,EAAQ+D,EAA3BC,kBAA2BC,EAAAF,EAAAE,eAAgBC,IAAAA,SAAUC,EAAkBJ,EAAlBI,iBAAkBC,EAAAL,EAAAK,QAC/EC,ECNK,WACC,IAAAC,EAA4BhE,UAA8B,MAC1DiE,EAA6BjE,WAAO,GAElC0D,EAAsBQ,IAAtBR,kBACAS,EAAwBC,IAAxBD,oBACAE,EAAaC,IAAbD,SACRE,EAAkCC,IAA1BC,EAAAF,EAAAE,SAAUC,EAAYH,EAAZG,YACZC,EAAcC,IAGdC,EAFOxF,MAEwBa,EAAK4E,cAEpCC,EAAiBC,GAAAA,YAAA,WAAA,IAAAC,EAAAhM,EAAAC,IAAAC,MACrB,SAAA+L,EAAOC,GAAiB,OAAAjM,IAAAM,MAAA4L,SAAAC,GAAA,cAAAA,EAAA1L,KAAA0L,EAAAzL,MAAA,KAAA,EAAA,IAClBqK,EAA2B3D,kDAAgB,GAAA,KAAA,EACV,GAArC2D,EAA2B3D,SAAU,GACjCqE,IAAeN,EAAU,CAAAgB,EAAAzL,KAAA,EAAA,KAAA,CACrB,OADqByL,EAAAzL,KACrB,EAAA0L,EAAMH,GAAIE,KAAAA,EACV,OADUA,EAAAzL,KACV,EAAA6K,IAASY,KAAAA,EAAAA,OAAAA,EAAAE,OACR,UAAA,GAAAF,KAAAA,EAAAA,OAAAA,EAAAE,OAEF,UAAA,GAAAF,KAAAA,GAAAA,IAAAA,MAAAA,OAAAA,EAAApL,OAAAiL,GAAAA,EACT,KAAA,OAAA,SAAAM,GAAA,OAAAP,EAAAnM,MAAAC,KAAAC,UAAA,CAAA,CAVqB,GAWrB,CAAC2L,EAAaN,EAAUI,IAGpBgB,EAAwBT,GAAAA,wBAAY,SAAAU,IAAAC,IAAAA,EAAAC,EAAAC,EAAA3M,OAAAA,IAAAM,MAAA,SAAAsM,GAAAA,cAAAA,EAAAnM,KAAAmM,EAAAlM,MACpC,KAAA,EAAA,GAACuK,IAAuBH,EAA0B1D,QAAS,CAAAwF,EAAAlM,KAAA,EAAA,KAAA,CACgB,MAAzEgM,GAAgD,QAA1BD,EAAA3B,EAA0B1D,eAAA,IAAAqF,OAAA,EAA1BA,EAAmCI,eAAgB,GAEnD,GAAG,CAAAD,EAAAlM,KAAA,EAAA,KAAA,CAKrB,OAFAiM,GAFiBD,GAAAI,GAEcC,EAAwBL,EAAsBK,EAAAH,EAAAlM,KAE7E,EAAA8K,EAAY,CAAEmB,OAAAA,IAAQC,KAAAA,EAAAA,OAAAA,EAAAP,OAErBM,SAAAA,GAAAC,KAAAA,EAAAA,OAAAA,EAAAP,OAIJU,SAAAA,GAAAH,KAAAA,EAAAA,IAAAA,MAAAA,OAAAA,EAAA7L,UAAAyL,EAAA,KACN,CAACvB,EAAqBO,IAEnBwB,EAAmBlB,GAAAA,aAAY,WACnC,OAAIb,GAEGO,EAAY,CAAEmB,OAAQI,GAAuB,GACnD,CAAC9B,EAAqBO,IAwBlB,OAtBPtE,GAAAA,WAAU,WACJuE,GACFwB,EAASC,cAAc,iBACzB,GACC,CAACzB,IAEJvE,GAAAA,WAAU,WACR,IAAMiG,EAAsB3C,GAAqBmB,EAQjD,OANeE,EAAAsB,EAAsB,KAAQ,GAEzCA,GACoBZ,IAGjB,WACDY,GACeH,GACnB,CACF,GACC,CAACxC,EAAmBmB,EAAqBE,EAAgBU,EAAuBS,IAE5E,CACLlC,0BAAAA,EACAyB,sBAAAA,EAEJ,CDvE+Da,GAArDtC,EAAAD,EAAAC,0BAA2ByB,EAAsB1B,EAAtB0B,sBAwB/B,OAAArD,EAAGlC,EAAKqG,gBACF9L,GAAc,CAAA,GAGpB2H,EAAGlC,EAAK4E,eAERpK,GAAAA,IAACoK,EAAA,CACCrE,IAAKuD,EACLtE,OAAAA,EACAiE,eAAAA,EACAC,SAAAA,EACAC,iBAAAA,EACA2C,sBAlCwB,SAC5BC,GAEG,IADHC,EAAA1N,UAAAgE,OAAAhE,QAAAiE,IAAAjE,UAAAiE,IAAAjE,UAAmC,GAEnCqK,EAAYoD,GACRC,IACFpD,EAAoB,KAAO,GAC3B6C,EAASQ,KAAK,wBAEZxD,EAAMjD,EAAKS,eACbuC,EAAGhD,EAAKS,aACV,EAwBIiG,cAAe9C,EACf2B,sBAAAA,IAKFrD,EAAG,CAAClC,EAAKS,aAAcT,EAAKC,IAAKD,EAAKsC,QACjC9H,OAACiG,IAAaC,cA5BD,WACpB,IAAMiG,EAAczD,IACpBF,EAAG2D,GACHV,EAAS9I,QACTkG,EAAcuD,EAAeC,YAC7BZ,EAASC,cAAc,eAAc,IA0B9B1L,GAAAA,IAAAW,YAAA,CAAA,EACX,CErDA,IAAM2L,GAAO,WACX,IAAAC,EAA+FnG,IAAvFoG,EAAWD,EAAXC,UAAWC,EAAAF,EAAAE,aAAcC,EAA6BH,EAA7BG,4BAA6BC,EAAAJ,EAAAI,6BAExD/F,EAAoBC,IAE1B,OACGf,GAAAA,KAAA,MAAA,CAAI7F,UAAWC,EAAQ0M,KACtBzM,SAAA,CAAAH,GAAAA,IAAC6M,EAAA,CACCL,UAAAA,EACAC,aAAAA,EACAC,4BAAAA,EACAC,6BAAAA,WAEDrE,GAAO,WACP1F,GAAc,IACf5C,GAAAA,IAAC,MAAA,CACC,UAAQ,iBACRC,UAAWC,EAAQ4M,eACnB,aAAW,uBACX,eAAclG,EAEdzG,gBAACJ,GAAc,QAIvB,EC5BA,SAASgN,KACPC,OAAOC,SAASF,QAClB,CAEA,SAASG,KACP,OACGlN,GAAAA,IAAAmN,EAAA,CAAcC,SAAUpN,GAAAA,IAACqN,GAAYC,QAASP,KAAYQ,QAASC,EAClErN,SAACH,GAAAA,IAAAyN,EAAA,CACCtN,SAACH,OAAAsM,GAAA,CAAK,MAId,CCA2B,SAAAoB,KAe3BA,OAf2BA,GAAAnP,EAAAC,IAAAC,MAA3B,SAAAkP,IAAA,IAAAC,EAAA,OAAApP,IAAAM,MAAA,SAAA+O,GAAAA,cAAAA,EAAA5O,KAAA4O,EAAA3O,MACU4O,KAAAA,EAIF,OAJEA,KAED/K,EAAAgL,WAAWvF,GAAG,WACRwF,GAAAD,WAAW9B,OAAK4B,EAAA3O,KACvB,EAAA+O,GAAOF,WAAWG,aAAWL,KAAAA,EAC7B,OAD6BA,EAAA3O,KAC7B,EAAAsF,EAAUuJ,WAAW9B,OAAK,KAAA,EAChCR,EAASQ,KAAK,cAER2B,EAASO,SAASC,eAAe,QAC9BC,GAAAC,WAAWV,GAAQW,cACzBC,GAAMC,WAAN,CACCtO,SAAAH,GAAAA,IAACkN,IAAI,MAET,KAAA,GAAA,IAAA,MAAA,OAAAW,EAAAtO,OAAA,GAAAoO,EAAA,MACFvP,MAAAE,KAAAA,UAEAoQ,CFCApC,GAAKqC,iBAAkB,EClBvB,WCA2BjB,GAAAtP,MAAAC,KAAAC,UAAA,CAiB3BoQ"}