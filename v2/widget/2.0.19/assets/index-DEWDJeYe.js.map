{"version":3,"mappings":"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","names":["load","name","loader","log","error","preload","logger","__vitePreload","preloadTextMessage","preload$1","LoadingScreen","jsx","classes","isTextValue","value","SmartText","props","t","useTranslation","Fragment","Notification","type","content","__publicField","useNotifications","create","set","removeNotification","id","state","item","addNotification","message","timeout","nanoid","notification","MAX_NOTIFICATIONS","SUCCESS_TIMEOUT","ERROR_TIMEOUT","Notifications","items","success","clear","on","off","useApp","useLayoutEffect","removeError","disconnectHandler","reconnectHandler","resetHandler","Portal","clsx","useChatMount","initialScreenContainerRef","useRef","isRunningAutoOpenWidgetRef","showInitialScreen","useInitialScreen","chatContainerHeight","useStyles","autoOpen","useAppProps","maximize","frameResize","useRpcAction","frameOpened","useFrameOpened","pageInInitialScreen","usePage","Page","autoOpenWidget","useCallback","wait","sleep","updateChatFrameHeight","initialScreenHeight","_a","WIDGET_DEFAULT_HEADER_HEIGHT","height","WIDGET_DEFAULT_HEIGHT","resetFrameHeight","useEffect","provider","isUpdateFrameHeight","ScrollToBottomButton","onClick","unreadMessageCount","showNewMessageBadge","handleOnClick","event","Arrow","StartChatButton","startChatButtonLabel","useConfig","page","feedbackLink","useFeedback","feedbackActive","useFeedbackStatus","footerVisible","enableScroll","useChatContentScroll","startNewChatButtonRef","isTransparent","startNewChat","jsxs","Refresh","Conversation","goInitialPage","enableEmoji","enableAttachments","enableUserInput","useChatConfig","messages","useMessages","shouldLoadFeedback","useShouldLoadFeedback","showScreenLoading","useShowScreenLoading","enableRTL","useEnableRTLLayoutDirection","connected","useConnectionStatus","showScrollToBottom","useUnreadMessageCount","send","typing","useMessagesAction","is","emit","useAppAction","showInputArea","showStartNewChat","showScrollToBottomButton","onClickScrollToBottom","AppEvent","Animate","ChatContent","UserInputArea","Widget","go","isNot","getInitialPage","setFormData","enableScreenLoading","boardCaseEmit","useBoardCastAction","active","welcomeMessage","controls","enableValidation","context","onSubmitInitialScreen","formData","enableStartConversation","initialPage","BoardCastEvent","InitialScreen","Chat","chatTitle","chatSubtitle","showCloseConversationButton","showDownloadTranscriptButton","ChatHeader","reload","App","ErrorBoundary","ErrorScreen","logForGlobalErrorBoundary","PortalProvider","bootstrap","useBoardCast","useRpc","rootEl","ReactDOM","React"],"ignoreList":[],"sources":["packages/chat-widget-window/src/utils/preload.ts","packages/chat-widget-window/src/components/LoadingScreen/LoadingScreen.tsx","packages/chat-widget-window/src/models/SmartText.ts","packages/chat-widget-window/src/components/SmartText/SmartText.tsx","packages/chat-widget-window/src/models/Notification.ts","packages/chat-widget-window/src/stores/notifications.ts","packages/chat-widget-window/src/layout/Notifications/Notifications.tsx","packages/chat-widget-window/src/hooks/useChatMount.ts","packages/chat-widget-window/src/components/ScrollToBottomButton/ScrollToBottomButton.tsx","packages/chat-widget-window/src/layout/ChatContent/StartChatButton/StartChatButton.tsx","packages/chat-widget-window/src/layout/Conversation/Conversation.tsx","packages/chat-widget-window/src/layout/Chat/Widget.tsx","packages/chat-widget-window/src/layout/Chat/Chat.tsx","packages/chat-widget-window/src/App.tsx","packages/chat-widget-window/src/main.tsx"],"sourcesContent":["import { preloadTextMessage } from '@td-org/chat-widget-components'\n\nimport logger from './logger'\n\nasync function load<T = unknown>(name: string, loader: () => Promise<T>, log: ReturnType<typeof logger.getSubLogger>) {\n  try {\n    log.debug(`Load ${name} start`)\n    await loader()\n    log.debug(`Load ${name} success`)\n  } catch (error) {\n    log.warn(`Load ${name} failed`, error)\n  }\n}\n\nfunction preload() {\n  const log = logger.getSubLogger({ name: 'PreLoader' })\n\n  load('locales', () => import('@/locales'), log)\n  load('@twilio/conversations', () => import('@twilio/conversations'), log)\n  load('TextMessage', () => preloadTextMessage(), log)\n}\n\nexport default function () {\n  preload()\n}\n","import classes from './LoadingScreen.module.scss'\n\nexport const LoadingScreen = () => {\n  return (\n    <div className={classes.loading}>\n      <span className={classes.loader} data-testid='loading-screen' />\n    </div>\n  )\n}\n","export type TextValue = {\n  text: string\n}\n\nexport type I18nValue = {\n  key: string\n  options?: Record<string, string>\n}\n\nexport type SmartText = TextValue | I18nValue\n\nexport function isTextValue(value: SmartText): value is TextValue {\n  return 'text' in value\n}\n\nexport function isI18nValue(value: SmartText): value is I18nValue {\n  return 'key' in value\n}\n","import { type ReactElement } from 'react'\nimport { useTranslation } from 'react-i18next'\n\nimport { isTextValue, SmartText as SmartTextModel } from '@/models/SmartText.ts'\n\ntype SmartTextProps = {\n  value: SmartTextModel\n}\n\nexport function SmartText(props: SmartTextProps): ReactElement {\n  const { value } = props\n\n  const [t] = useTranslation()\n\n  if (isTextValue(value)) {\n    return <>{value.text}</>\n  }\n\n  return <>{t(value.key, value.options)}</>\n}\n","import { SmartText } from './SmartText'\n\nexport type NotificationType = 'error' | 'success' | 'warning'\n\nexport class Notification {\n  type: NotificationType\n  content: SmartText\n\n  constructor(type: NotificationType, content: SmartText) {\n    this.type = type\n    this.content = content\n  }\n}\n","import { nanoid } from 'nanoid'\nimport { create } from 'zustand'\n\nimport { Notification, type NotificationType } from '@/models/Notification'\nimport { SmartText } from '@/models/SmartText'\n\ntype NotificationWithId = Notification & { id: string }\n\ntype State = {\n  items: NotificationWithId[]\n  error: (message: SmartText, timeout?: number) => () => void\n  warning: (message: SmartText, timeout?: number) => () => void\n  success: (message: SmartText, timeout?: number) => () => void\n  remove: (id: string) => void\n  clear: () => void\n}\n\nexport const useNotifications = create<State>((set) => {\n  const removeNotification = (id: string) => {\n    set((state) => ({ items: state.items.filter((item) => item.id !== id) }))\n  }\n\n  const addNotification = (type: NotificationType, message: SmartText, timeout = 5000) => {\n    const id = nanoid()\n    const notification = {\n      ...new Notification(type, message),\n      id\n    }\n    set((state) => ({ items: [notification, ...state.items] }))\n\n    if (timeout > 0) {\n      setTimeout(() => {\n        removeNotification(id)\n      }, timeout)\n    }\n\n    return id\n  }\n\n  return {\n    items: [],\n    error(message: SmartText, timeout = 5000) {\n      const id = addNotification('error', message, timeout)\n\n      return () => {\n        removeNotification(id)\n      }\n    },\n    warning(message: SmartText, timeout = 5000) {\n      const id = addNotification('warning', message, timeout)\n\n      return () => {\n        removeNotification(id)\n      }\n    },\n    success(message: SmartText, timeout = 5000) {\n      const id = addNotification('success', message, timeout)\n\n      return () => {\n        removeNotification(id)\n      }\n    },\n    remove(id: string) {\n      removeNotification(id)\n    },\n    clear() {\n      set({ items: [] })\n    }\n  }\n})\n","import { type ReactElement, useLayoutEffect } from 'react'\n\nimport { Portal } from '@/components/PortalProvider/index.ts'\nimport SmartText from '@/components/SmartText'\nimport { useApp } from '@/stores/app/store.ts'\nimport { useNotifications } from '@/stores/notifications.ts'\nimport clsx from '@/utils/clsx'\n\nimport classes from './Notifications.module.scss'\n\nconst MAX_NOTIFICATIONS = 3\nconst SUCCESS_TIMEOUT = 3000 // 3s\nconst ERROR_TIMEOUT = 0 // forever\n\nexport function Notifications(): ReactElement {\n  const { items, error, success, clear } = useNotifications()\n  const { on, off } = useApp()\n\n  useLayoutEffect(() => {\n    let removeError: (() => void) | null = null\n\n    const disconnectHandler = () => {\n      removeError?.()\n      removeError = null\n      removeError = error({ key: 'noConnectionTip' }, ERROR_TIMEOUT)\n    }\n\n    const reconnectHandler = () => {\n      removeError?.()\n      removeError = null\n      success({ key: 'connectedTip' }, SUCCESS_TIMEOUT)\n    }\n\n    const resetHandler = () => {\n      clear()\n    }\n\n    on('disconnect', disconnectHandler)\n    on('reconnect', reconnectHandler)\n    on('leave_end', resetHandler)\n    on('leave_error', resetHandler)\n\n    return () => {\n      off('disconnect', disconnectHandler)\n      off('reconnect', reconnectHandler)\n      off('leave_end', resetHandler)\n      off('leave_error', resetHandler)\n    }\n  }, [on, off, error, success, clear])\n\n  return (\n    <Portal>\n      <div className={classes.notifications}>\n        {items.slice(0, MAX_NOTIFICATIONS).map((item) => (\n          <div key={item.id} className={clsx(classes.notification, classes[item.type])}>\n            <SmartText value={item.content} />\n          </div>\n        ))}\n      </div>\n    </Portal>\n  )\n}\n","import { useCallback, useEffect, useRef } from 'react'\n\nimport { Page, sleep, WIDGET_DEFAULT_HEADER_HEIGHT, WIDGET_DEFAULT_HEIGHT } from '@td-org/chat-widget-shared'\n\nimport { provider } from '@/stores/app/provider'\nimport { useFrameOpened, usePage } from '@/stores/app/selectors'\nimport { useAppProps, useInitialScreen, useStyles } from '@/stores/config'\nimport { useRpcAction } from '@/stores/rpc.ts'\n\nexport function useChatMount() {\n  const initialScreenContainerRef = useRef<HTMLDivElement | null>(null)\n  const isRunningAutoOpenWidgetRef = useRef(false)\n\n  const { showInitialScreen } = useInitialScreen()\n  const { chatContainerHeight } = useStyles()\n  const { autoOpen } = useAppProps()\n  const { maximize, frameResize } = useRpcAction()\n  const frameOpened = useFrameOpened()\n  const page = usePage()\n\n  const pageInInitialScreen = page === Page.InitialScreen\n\n  const autoOpenWidget = useCallback(\n    async (wait: number) => {\n      if (isRunningAutoOpenWidgetRef.current) return false\n      isRunningAutoOpenWidgetRef.current = true\n      if (frameOpened || autoOpen) {\n        await sleep(wait)\n        await maximize()\n        return true\n      }\n      return false\n    },\n    [frameOpened, autoOpen, maximize]\n  )\n\n  const updateChatFrameHeight = useCallback(async () => {\n    if (!chatContainerHeight && initialScreenContainerRef.current) {\n      let initialScreenHeight = initialScreenContainerRef.current?.scrollHeight || 0\n\n      if (initialScreenHeight > 0) {\n        initialScreenHeight += WIDGET_DEFAULT_HEADER_HEIGHT\n\n        const height = initialScreenHeight < WIDGET_DEFAULT_HEIGHT ? initialScreenHeight : WIDGET_DEFAULT_HEIGHT\n\n        await frameResize({ height })\n\n        return height\n      }\n    }\n\n    return WIDGET_DEFAULT_HEIGHT\n  }, [chatContainerHeight, frameResize])\n\n  const resetFrameHeight = useCallback(() => {\n    if (chatContainerHeight) return false\n\n    return frameResize({ height: WIDGET_DEFAULT_HEIGHT })\n  }, [chatContainerHeight, frameResize])\n\n  useEffect(() => {\n    if (frameOpened) {\n      provider.preloadClient('openChatWidget')\n    }\n  }, [frameOpened])\n\n  useEffect(() => {\n    const isUpdateFrameHeight = showInitialScreen && pageInInitialScreen\n\n    autoOpenWidget(isUpdateFrameHeight ? 200 : -1)\n\n    if (isUpdateFrameHeight) {\n      updateChatFrameHeight()\n    }\n\n    return () => {\n      if (isUpdateFrameHeight) {\n        resetFrameHeight()\n      }\n    }\n  }, [showInitialScreen, pageInInitialScreen, autoOpenWidget, updateChatFrameHeight, resetFrameHeight])\n\n  return {\n    initialScreenContainerRef,\n    updateChatFrameHeight\n  }\n}\n","import { type MouseEvent } from 'react'\n\nimport Arrow from '../Icons/Arrow'\n\nimport classes from './ScrollToBottomButton.module.scss'\n\ntype Props = {\n  onClick?: () => void\n  unreadMessageCount?: number\n}\n\nconst ScrollToBottomButton = (props: Props) => {\n  const { onClick, unreadMessageCount = 0 } = props\n\n  const showNewMessageBadge = unreadMessageCount > 0\n\n  const handleOnClick = (event: MouseEvent<HTMLButtonElement>) => {\n    event.stopPropagation()\n    onClick?.()\n  }\n\n  return (\n    <div className={classes.scrollToBottomButton}>\n      <button onClick={handleOnClick} aria-label='scroll-to-bottom'>\n        <Arrow className={classes.arrow} />\n        {showNewMessageBadge && <span data-testid={'unread-dot'} className={classes.newMessages} />}\n      </button>\n    </div>\n  )\n}\nexport default ScrollToBottomButton\n","import { ReactElement, useEffect, useRef } from 'react'\nimport { useTranslation } from 'react-i18next'\n\nimport { Page } from '@td-org/chat-widget-shared'\n\nimport { Refresh } from '@/components/Icons'\nimport { useChatContentScroll, useFeedback, useFeedbackStatus, usePage } from '@/stores/app/selectors.ts'\nimport { useConfig } from '@/stores/config'\nimport clsx from '@/utils/clsx.ts'\n\nimport classes from './StartChatButton.module.scss'\n\ninterface Props {\n  onClick: () => void\n}\n\nconst StartChatButton = (props: Props): ReactElement => {\n  const startChatButtonLabel = useConfig((state) => state.config.options.startChatButtonLabel)\n  const [t] = useTranslation()\n\n  const page = usePage()\n  const feedbackLink = useFeedback()\n  const { active: feedbackActive } = useFeedbackStatus()\n\n  const { footerVisible, enableScroll } = useChatContentScroll()\n\n  const startNewChatButtonRef = useRef<HTMLButtonElement | null>(null)\n\n  const isTransparent = page === Page.End && !!feedbackLink && feedbackActive\n\n  useEffect(() => {\n    startNewChatButtonRef.current?.focus()\n  }, [])\n\n  const startNewChat = (): void => {\n    props.onClick()\n  }\n\n  return (\n    <div className={clsx(classes.startChatButton, { [classes.withSeparator]: !footerVisible && enableScroll })}>\n      <button\n        ref={startNewChatButtonRef}\n        type='button'\n        className={clsx(classes.button, { [classes.transparent]: isTransparent })}\n        onClick={startNewChat}\n      >\n        {isTransparent && <Refresh />}\n        <p>{startChatButtonLabel || t('startChatButtonLabel')}</p>\n      </button>\n    </div>\n  )\n}\n\nexport default StartChatButton\n","import { AppEvent, Page } from '@td-org/chat-widget-shared'\n\nimport Animate from '@/components/Animate'\nimport ScrollToBottomButton from '@/components/ScrollToBottomButton'\nimport { useConnectionStatus } from '@/hooks/useConnectionStatus.ts'\nimport {\n  useAppAction,\n  useChatContentScroll,\n  useEnableRTLLayoutDirection,\n  useFeedback,\n  usePage,\n  useShouldLoadFeedback,\n  useShowScreenLoading,\n  useUnreadMessageCount\n} from '@/stores/app/selectors.ts'\nimport { useChatConfig } from '@/stores/config.ts'\nimport { useMessages, useMessagesAction } from '@/stores/message'\nimport ChatContent from '../ChatContent'\nimport StartChatButton from '../ChatContent/StartChatButton'\nimport UserInputArea from '../UserInputArea'\n\nimport classes from './Conversation.module.scss'\n\ninterface Props {\n  goInitialPage: () => void\n}\n\nfunction Conversation(props: Props) {\n  const { goInitialPage } = props\n  const { enableEmoji, enableAttachments, enableUserInput } = useChatConfig()\n\n  const page = usePage()\n  const messages = useMessages()\n  const feedbackLink = useFeedback()\n  const shouldLoadFeedback = useShouldLoadFeedback()\n  const showScreenLoading = useShowScreenLoading()\n  const enableRTL = useEnableRTLLayoutDirection()\n  const connected = useConnectionStatus()\n  const { showScrollToBottom } = useChatContentScroll()\n  const unreadMessageCount = useUnreadMessageCount()\n\n  const { send, typing } = useMessagesAction()\n  const { is, emit } = useAppAction()\n\n  const showInputArea = enableUserInput && is(Page.Conversation)\n  const showStartNewChat = is([Page.End, Page.Error])\n  const showScrollToBottomButton = is(Page.Conversation) && showScrollToBottom\n\n  const onClickScrollToBottom = () => {\n    emit(AppEvent.need_scroll_to_bottom)\n  }\n\n  return (\n    <Animate.page className={classes.conversation}>\n      <ChatContent\n        shouldLoadFeedback={shouldLoadFeedback}\n        feedbackLink={feedbackLink}\n        messages={messages}\n        page={page}\n      />\n      {showInputArea && (\n        <UserInputArea\n          enableEmoji={enableEmoji}\n          enableAttachments={enableAttachments}\n          send={send}\n          connected={connected}\n          typing={typing}\n          enableRTL={enableRTL}\n          showScreenLoading={showScreenLoading}\n        />\n      )}\n      {showStartNewChat && <StartChatButton onClick={goInitialPage} />}\n      {showScrollToBottomButton && (\n        <ScrollToBottomButton onClick={onClickScrollToBottom} unreadMessageCount={unreadMessageCount} />\n      )}\n    </Animate.page>\n  )\n}\n\nexport default Conversation\n","import { BoardCastEvent, Page } from '@td-org/chat-widget-shared'\n\nimport LoadingScreen from '@/components/LoadingScreen'\nimport { useChatMount } from '@/hooks/useChatMount.ts'\nimport { provider } from '@/stores/app/provider.ts'\nimport { useAppAction } from '@/stores/app/selectors.ts'\nimport { useChatConfig } from '@/stores/config.ts'\nimport { useBoardCastAction } from '@/stores/useBoardCast.ts'\nimport Conversation from '../Conversation'\nimport InitialScreen from '../InitialScreen'\n\nfunction Widget() {\n  const { go, is, isNot, getInitialPage, setFormData, enableScreenLoading } = useAppAction()\n  const { emit: boardCaseEmit } = useBoardCastAction()\n  const { showInitialScreen: active, welcomeMessage, controls, enableValidation, context } = useChatConfig()\n  const { initialScreenContainerRef, updateChatFrameHeight } = useChatMount()\n\n  const onSubmitInitialScreen = (\n    formData: Record<PropertyKey, string> | null,\n    enableStartConversation: boolean = false\n  ) => {\n    setFormData(formData)\n    if (enableStartConversation) {\n      enableScreenLoading(10000, true)\n      provider.init('submitInitialScreen')\n    }\n    if (isNot(Page.Conversation)) {\n      go(Page.Conversation)\n    }\n  }\n\n  const goInitialPage = () => {\n    const initialPage = getInitialPage()\n    go(initialPage)\n    provider.clear()\n    boardCaseEmit(BoardCastEvent.resetFrame)\n    provider.preloadClient('startNewChat')\n  }\n\n  if (is(Page.Loading)) {\n    return <LoadingScreen />\n  }\n\n  if (is(Page.InitialScreen)) {\n    return (\n      <InitialScreen\n        ref={initialScreenContainerRef}\n        active={active}\n        welcomeMessage={welcomeMessage}\n        controls={controls}\n        enableValidation={enableValidation}\n        onSubmitInitialScreen={onSubmitInitialScreen}\n        defaultValues={context}\n        updateChatFrameHeight={updateChatFrameHeight}\n      />\n    )\n  }\n\n  if (is([Page.Conversation, Page.End, Page.Error])) {\n    return <Conversation goInitialPage={goInitialPage} />\n  }\n\n  return <></>\n}\n\nexport default Widget\n","import LoadingScreen from '@/components/LoadingScreen'\nimport { useShowScreenLoading } from '@/stores/app/selectors.ts'\nimport { useChatConfig } from '@/stores/config.ts'\nimport ChatHeader from '../ChatHeader'\nimport Notifications from '../Notifications'\n\nimport Widget from './Widget.tsx'\n\nimport classes from './Chat.module.scss'\n\nconst Chat = (): JSX.Element => {\n  const { chatTitle, chatSubtitle, showCloseConversationButton, showDownloadTranscriptButton } = useChatConfig()\n\n  const showScreenLoading = useShowScreenLoading()\n\n  return (\n    <div className={classes.chat}>\n      <ChatHeader\n        chatTitle={chatTitle}\n        chatSubtitle={chatSubtitle}\n        showCloseConversationButton={showCloseConversationButton}\n        showDownloadTranscriptButton={showDownloadTranscriptButton}\n      />\n      <Widget />\n      <Notifications />\n      <div\n        data-qa='screen-loading'\n        className={classes.loadingWrapper}\n        aria-label='loading conversation'\n        aria-hidden={!showScreenLoading}\n      >\n        <LoadingScreen />\n      </div>\n    </div>\n  )\n}\n\nChat.whyDidYouRender = true\n\nexport default Chat\n","import { ErrorBoundary } from '@td-org/chat-widget-components'\n\nimport ErrorScreen from '@/components/ErrorScreen/index.ts'\nimport PortalProvider from '@/components/PortalProvider/index.ts'\nimport Chat from '@/layout/Chat/Chat.tsx'\nimport { logForGlobalErrorBoundary } from '@/utils/logger-helper'\n\nfunction reload() {\n  window.location.reload()\n}\n\nfunction App() {\n  return (\n    <ErrorBoundary fallback={<ErrorScreen onRetry={reload} />} onError={logForGlobalErrorBoundary}>\n      <PortalProvider>\n        <Chat />\n      </PortalProvider>\n    </ErrorBoundary>\n  )\n}\n\nexport default App\n","// eslint-disable-next-line simple-import-sort/imports\nimport './wdyr.ts'\nimport React from 'react'\nimport ReactDOM from 'react-dom/client'\n\nimport { useApp } from '@/stores/app/store.ts'\nimport { useConfig } from '@/stores/config.ts'\n\nimport preload from './utils/preload.ts'\nimport App from './App.tsx'\n\nimport { useBoardCast } from '@/stores/useBoardCast.ts'\nimport { useRpc } from '@/stores/rpc.ts'\nimport { provider } from '@/stores/app/provider'\n\nimport './styles/index.scss'\n// css for overlayscrollbars\nimport 'overlayscrollbars/overlayscrollbars.css'\n\nasync function bootstrap() {\n  preload()\n\n  useApp.getState().go('loading')\n  useBoardCast.getState().init()\n  await useRpc.getState().frameReady()\n  await useConfig.getState().init()\n  provider.init('pageLoaded')\n\n  const rootEl = document.getElementById('root')!\n  ReactDOM.createRoot(rootEl).render(\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  )\n}\n\nbootstrap()\n"],"file":"assets/index-DEWDJeYe.js"}