{"version":3,"file":"preview-legacy-Cv2Fkpp0.js","sources":["packages/chat-widget-window/src/utils/noop.ts","packages/chat-widget-window/src/layout/Chat/PreviewChat.tsx","packages/chat-widget-window/src/utils/useMockMessages.ts","packages/chat-widget-window/src/Preview.tsx","packages/chat-widget-window/src/main.preview.tsx"],"sourcesContent":["export const noop = () => {}\n\nexport const asyncNoop = async () => {}\n","import { Page, WIDGET_DEFAULT_HEIGHT } from '@td-org/chat-widget-shared'\n\nimport { usePreviewConfig } from '@/stores/preview.ts'\nimport clsx from '@/utils/clsx.ts'\nimport { asyncNoop, noop } from '@/utils/noop.ts'\nimport { useMockMessages } from '@/utils/useMockMessages'\nimport ChatContent from '../ChatContent'\nimport ChatHeader from '../ChatHeader'\nimport InitialScreen from '../InitialScreen'\nimport UserInputArea from '../UserInputArea'\n\nimport classes from './Chat.module.scss'\n\nconst PreviewChat = (): JSX.Element => {\n  const {\n    page,\n    welcomeMessage,\n    controls,\n    enableEmoji,\n    enableAttachments,\n    enableValidation,\n    chatTitle,\n    chatSubtitle,\n    showCloseConversationButton,\n    showDownloadTranscriptButton,\n    showInitialScreen,\n    context,\n    isDisabled\n  } = usePreviewConfig()\n\n  const MockMessages = useMockMessages()\n\n  function renderWidget() {\n    switch (page) {\n      case 'InitialScreen':\n        return (\n          <InitialScreen\n            active={showInitialScreen}\n            welcomeMessage={welcomeMessage}\n            controls={controls}\n            enableValidation={enableValidation}\n            onSubmitInitialScreen={noop}\n            updateChatFrameHeight={() => Promise.resolve(WIDGET_DEFAULT_HEIGHT)}\n            defaultValues={context}\n          />\n        )\n\n      case 'Conversation':\n        return (\n          <>\n            <ChatContent shouldLoadFeedback={false} messages={[]} page={Page.Conversation} feedbackLink='' />\n            <UserInputArea\n              enableEmoji={enableEmoji}\n              enableAttachments={enableAttachments}\n              send={asyncNoop}\n              connected={false}\n              typing={asyncNoop}\n            />\n          </>\n        )\n      case 'MockConversation': {\n        return (\n          <>\n            <ChatContent shouldLoadFeedback={false} messages={MockMessages} page={Page.Conversation} feedbackLink='' />\n            <UserInputArea\n              enableEmoji={enableEmoji}\n              enableAttachments={enableAttachments}\n              send={asyncNoop}\n              connected={false}\n              typing={asyncNoop}\n            />\n          </>\n        )\n      }\n    }\n  }\n\n  return (\n    <div className={clsx(classes.chat, { [classes.isDisabled]: isDisabled })}>\n      <ChatHeader\n        chatTitle={chatTitle}\n        chatSubtitle={chatSubtitle}\n        showCloseConversationButton={showCloseConversationButton}\n        showDownloadTranscriptButton={showDownloadTranscriptButton}\n      />\n      {renderWidget()}\n    </div>\n  )\n}\n\nPreviewChat.whyDidYouRender = true\n\nexport default PreviewChat\n","import { Message } from '@td-org/chat-widget-shared'\n\nimport { generalSettingsSelector, useConfig } from '@/stores/config'\n\nimport { getMessageAvatarByConfig } from './getMessageAvatar'\nimport { getParticipantName } from './getMessageParticipantName'\n\nexport const useMockMessages = (): Message[] => {\n  const participantName = useConfig((state) => state.config.participantName)\n  const generalSetting = generalSettingsSelector(useConfig.getState())\n  const mockMessages: Message[] = [\n    {\n      index: 0,\n      sid: '0',\n      tid: '0',\n      status: 'success',\n      alignment: 'received',\n      timestamp: 1716864558897,\n      formattedTime: '10:40',\n      items: [\n        {\n          type: 'text',\n          text: 'This is an automatic message'\n        }\n      ],\n      role: 'system'\n    },\n    {\n      index: 1,\n      sid: '1',\n      tid: '1',\n      status: 'success',\n      alignment: 'received',\n      timestamp: 1716864558897,\n      formattedTime: '10:41',\n      items: [\n        {\n          type: 'text',\n          text: 'This is a virtual agent message'\n        }\n      ],\n      role: 'va'\n    },\n    {\n      index: 2,\n      sid: '2',\n      tid: '2',\n      status: 'success',\n      alignment: 'received',\n      timestamp: 1716864562281,\n      formattedTime: '10:42',\n      items: [\n        {\n          type: 'text',\n          text: 'This is an agent message'\n        }\n      ],\n      role: 'agent'\n    },\n    {\n      index: 3,\n      sid: '3',\n      tid: '3',\n      status: 'success',\n      alignment: 'sent',\n      timestamp: 1716864562281,\n      formattedTime: '10:43',\n      items: [\n        {\n          type: 'text',\n          text: 'This is a contact message'\n        }\n      ],\n      role: 'contact'\n    }\n  ]\n\n  if (generalSetting.showTypingIndicatorButton) {\n    const typeMessage = {\n      tid: 'TYPING_MESSAGE_ID',\n      sid: 'typing',\n      status: 'success',\n      alignment: 'received',\n      timestamp: 0,\n      formattedTime: '',\n      items: [{ type: 'typing' }],\n      role: 'agent'\n    } as Message\n    mockMessages.push(typeMessage)\n  }\n\n  if (generalSetting.displayAgentsName) {\n    const assignMessage = {\n      sid: 'sid',\n      tid: 'tid',\n      status: 'success',\n      alignment: 'received',\n      timestamp: 1716864562281,\n      formattedTime: '10:45',\n      role: 'system',\n      items: [\n        {\n          type: 'system',\n          action_type: 'assign',\n          smart_text: {\n            key: 'assignMessage',\n            options: {\n              name: `${participantName || 'live agent'}`\n            }\n          }\n        }\n      ]\n    } as Message\n\n    mockMessages.splice(2, 0, assignMessage)\n  }\n\n  if (participantName) {\n    return mockMessages.map((mes) => {\n      return {\n        ...mes,\n        avatar: mes.role ? getMessageAvatarByConfig(mes.role) : '',\n        participantName: mes.role ? getParticipantName({ role: mes.role, agentName: participantName }) : ''\n      } as Message\n    })\n  } else {\n    return mockMessages.map((mes) => {\n      return {\n        ...mes,\n        avatar: getMessageAvatarByConfig(mes.role || 'agent')\n      } as Message\n    }) as Message[]\n  }\n}\n","import { ErrorBoundary } from '@td-org/chat-widget-components'\n\nimport ErrorScreen from '@/components/ErrorScreen/index.ts'\nimport PortalProvider from '@/components/PortalProvider/index.ts'\nimport PreviewChat from '@/layout/Chat/PreviewChat.tsx'\nimport { logForGlobalErrorBoundary } from '@/utils/logger-helper'\n\nfunction reload() {\n  window.location.reload()\n}\n\nfunction Preview() {\n  return (\n    <ErrorBoundary fallback={<ErrorScreen onRetry={reload} />} onError={logForGlobalErrorBoundary}>\n      <PortalProvider>\n        <PreviewChat />\n      </PortalProvider>\n    </ErrorBoundary>\n  )\n}\n\nexport default Preview\n","// eslint-disable-next-line simple-import-sort/imports\nimport './wdyr.ts'\nimport React from 'react'\nimport ReactDOM from 'react-dom/client'\nimport { useConfig } from '@/stores/config.ts'\n\nimport Preview from './Preview.tsx'\n\nimport './styles/index.scss'\n// css for overlayscrollbars\nimport 'overlayscrollbars/overlayscrollbars.css'\n\nasync function bootstrap() {\n  await useConfig.getState().init()\n\n  const rootEl = document.getElementById('root')!\n  ReactDOM.createRoot(rootEl).render(\n    <React.StrictMode>\n      <Preview />\n    </React.StrictMode>\n  )\n}\n\nbootstrap()\n"],"names":["noop","asyncNoop","_callee","_regeneratorRuntime","wrap","_callee$","_context","prev","next","stop","PreviewChat","_usePreviewConfig","usePreviewConfig","page","welcomeMessage","controls","enableEmoji","enableAttachments","enableValidation","chatTitle","chatSubtitle","showCloseConversationButton","showDownloadTranscriptButton","showInitialScreen","context","isDisabled","MockMessages","participantName","useConfig","state","config","generalSetting","generalSettingsSelector","getState","mockMessages","index","sid","tid","status","alignment","timestamp","formattedTime","items","type","text","role","showTypingIndicatorButton","push","displayAgentsName","assignMessage","action_type","smart_text","key","options","name","concat","splice","map","mes","_objectSpread","avatar","getMessageAvatarByConfig","getParticipantName","agentName","useMockMessages","jsxs","className","clsx","classes","chat","_defineProperty","children","jsx","ChatHeader","InitialScreen","active","onSubmitInitialScreen","updateChatFrameHeight","Promise","resolve","WIDGET_DEFAULT_HEIGHT","defaultValues","Fragment","ChatContent","shouldLoadFeedback","messages","Page","Conversation","feedbackLink","UserInputArea","send","connected","typing","renderWidget","reload","window","location","Preview","ErrorBoundary","fallback","ErrorScreen","onRetry","onError","logForGlobalErrorBoundary","PortalProvider","_bootstrap","_asyncToGenerator","mark","_callee2","rootEl","_callee2$","_context2","init","document","getElementById","ReactDOM","createRoot","render","React","StrictMode","apply","arguments","whyDidYouRender","this","bootstrap"],"mappings":"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"}